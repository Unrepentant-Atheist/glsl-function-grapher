(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.FG = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5

	// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)
	// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
	Number.isFinite = Number.isFinite || function (value) {
	  return typeof value === 'number' && isFinite(value);
	};

	// Polyfill for IE 11
	// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
	Number.isNaN = Number.isNaN || function (value) {
	  return value !== value; // eslint-disable-line no-self-compare
	};

	/**
	 * Test whether a value is a BigNumber
	 * @param {*} x
	 * @return {boolean}
	 */

	var isBigNumber = function isBigNumber(x) {
	  return x && x.constructor.prototype.isBigNumber || false;
	};

	var object = createCommonjsModule(function (module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */
	exports.clone = function clone(x) {
	  var type = typeof x === 'undefined' ? 'undefined' : _typeof(x);

	  // immutable primitive types
	  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
	    return x;
	  }

	  // use clone function of the object when available
	  if (typeof x.clone === 'function') {
	    return x.clone();
	  }

	  // array
	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone(value);
	    });
	  }

	  if (x instanceof Date) return new Date(x.valueOf());
	  if (isBigNumber(x)) return x; // bignumbers are immutable
	  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp

	  // object
	  return exports.map(x, clone);
	};

	/**
	 * Apply map to all properties of an object
	 * @param {Object} object
	 * @param {function} callback
	 * @return {Object} Returns a copy of the object with mapped properties
	 */
	exports.map = function (object, callback) {
	  var clone = {};

	  for (var key in object) {
	    if (exports.hasOwnProperty(object, key)) {
	      clone[key] = callback(object[key]);
	    }
	  }

	  return clone;
	};

	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	exports.extend = function (a, b) {
	  for (var prop in b) {
	    if (exports.hasOwnProperty(b, prop)) {
	      a[prop] = b[prop];
	    }
	  }
	  return a;
	};

	/**
	 * Deep extend an object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @returns {Object}
	 */
	exports.deepExtend = function deepExtend(a, b) {
	  // TODO: add support for Arrays to deepExtend
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }

	  for (var prop in b) {
	    if (exports.hasOwnProperty(b, prop)) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }
	        if (a[prop].constructor === Object) {
	          deepExtend(a[prop], b[prop]);
	        } else {
	          a[prop] = b[prop];
	        }
	      } else if (Array.isArray(b[prop])) {
	        throw new TypeError('Arrays are not supported by deepExtend');
	      } else {
	        a[prop] = b[prop];
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */
	exports.deepEqual = function deepEqual(a, b) {
	  var prop = void 0,
	      i = void 0,
	      len = void 0;
	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }

	    if (a.length !== b.length) {
	      return false;
	    }

	    for (i = 0, len = a.length; i < len; i++) {
	      if (!exports.deepEqual(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  } else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }

	    for (prop in a) {
	      // noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    for (prop in b) {
	      // noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    return true;
	  } else {
	    return a === b;
	  }
	};

	/**
	 * Test whether the current JavaScript engine supports Object.defineProperty
	 * @returns {boolean} returns true if supported
	 */
	exports.canDefineProperty = function () {
	  // test needed for broken IE8 implementation
	  try {
	    if (Object.defineProperty) {
	      Object.defineProperty({}, 'x', { get: function get() {} });
	      return true;
	    }
	  } catch (e) {}

	  return false;
	};

	/**
	 * Attach a lazy loading property to a constant.
	 * The given function `fn` is called once when the property is first requested.
	 * On older browsers (<IE8), the function will fall back to direct evaluation
	 * of the properties value.
	 * @param {Object} object   Object where to add the property
	 * @param {string} prop     Property name
	 * @param {Function} fn     Function returning the property value. Called
	 *                          without arguments.
	 */
	exports.lazy = function (object, prop, fn) {
	  if (exports.canDefineProperty()) {
	    var _uninitialized = true;
	    var _value = void 0;
	    Object.defineProperty(object, prop, {
	      get: function get() {
	        if (_uninitialized) {
	          _value = fn();
	          _uninitialized = false;
	        }
	        return _value;
	      },

	      set: function set(value) {
	        _value = value;
	        _uninitialized = false;
	      },

	      configurable: true,
	      enumerable: true
	    });
	  } else {
	    // fall back to immediate evaluation
	    object[prop] = fn();
	  }
	};

	/**
	 * Traverse a path into an object.
	 * When a namespace is missing, it will be created
	 * @param {Object} object
	 * @param {string} path   A dot separated string like 'name.space'
	 * @return {Object} Returns the object at the end of the path
	 */
	exports.traverse = function (object, path) {
	  var obj = object;

	  if (path) {
	    var names = path.split('.');
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      if (!(name in obj)) {
	        obj[name] = {};
	      }
	      obj = obj[name];
	    }
	  }

	  return obj;
	};

	/**
	 * A safe hasOwnProperty
	 * @param {Object} object
	 * @param {string} property
	 */
	exports.hasOwnProperty = function (object, property) {
	  return object && Object.hasOwnProperty.call(object, property);
	};

	/**
	 * Test whether an object is a factory. a factory has fields:
	 *
	 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
	 * - name: string (optional)
	 * - path: string    A dot separated path (optional)
	 * - math: boolean   If true (false by default), the math namespace is passed
	 *                   as fifth argument of the factory function
	 *
	 * @param {*} object
	 * @returns {boolean}
	 */
	exports.isFactory = function (object) {
	  return object && typeof object.factory === 'function';
	};
	});
	var object_1 = object.clone;
	var object_2 = object.map;
	var object_3 = object.extend;
	var object_4 = object.deepExtend;
	var object_5 = object.deepEqual;
	var object_6 = object.canDefineProperty;
	var object_7 = object.lazy;
	var object_8 = object.traverse;
	var object_9 = object.isFactory;

	var typedFunction = createCommonjsModule(function (module, exports) {

	(function (root, factory) {
	  {
	    // OldNode. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like OldNode.
	    module.exports = factory();
	  }
	}(commonjsGlobal, function () {

	  function ok () {
	    return true;
	  }

	  function notOk () {
	    return false;
	  }

	  function undef () {
	    return undefined;
	  }

	  /**
	   * @typedef {{
	   *   params: Param[],
	   *   fn: function
	   * }} Signature
	   *
	   * @typedef {{
	   *   types: Type[],
	   *   restParam: boolean
	   * }} Param
	   *
	   * @typedef {{
	   *   name: string,
	   *   typeIndex: number,
	   *   test: function,
	   *   conversion?: ConversionDef,
	   *   conversionIndex: number,
	   * }} Type
	   *
	   * @typedef {{
	   *   from: string,
	   *   to: string,
	   *   convert: function (*) : *
	   * }} ConversionDef
	   *
	   * @typedef {{
	   *   name: string,
	   *   test: function(*) : boolean
	   * }} TypeDef
	   */

	  // create a new instance of typed-function
	  function create () {
	    // data type tests
	    var _types = [
	      { name: 'number',    test: function (x) { return typeof x === 'number' } },
	      { name: 'string',    test: function (x) { return typeof x === 'string' } },
	      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
	      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
	      { name: 'Array',     test: Array.isArray },
	      { name: 'Date',      test: function (x) { return x instanceof Date } },
	      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
	      { name: 'Object',    test: function (x) {
	        return typeof x === 'object' && x.constructor === Object
	      }},
	      { name: 'null',      test: function (x) { return x === null } },
	      { name: 'undefined', test: function (x) { return x === undefined } }
	    ];

	    var anyType = {
	      name: 'any',
	      test: ok
	    };

	    // types which need to be ignored
	    var _ignore = [];

	    // type conversions
	    var _conversions = [];

	    // This is a temporary object, will be replaced with a typed function at the end
	    var typed = {
	      types: _types,
	      conversions: _conversions,
	      ignore: _ignore
	    };

	    /**
	     * Find the test function for a type
	     * @param {String} typeName
	     * @return {TypeDef} Returns the type definition when found,
	     *                    Throws a TypeError otherwise
	     */
	    function findTypeByName (typeName) {
	      var entry = findInArray(typed.types, function (entry) {
	        return entry.name === typeName;
	      });

	      if (entry) {
	        return entry;
	      }

	      if (typeName === 'any') { // special baked-in case 'any'
	        return anyType;
	      }

	      var hint = findInArray(typed.types, function (entry) {
	        return entry.name.toLowerCase() === typeName.toLowerCase();
	      });

	      throw new TypeError('Unknown type "' + typeName + '"' +
	          (hint ? ('. Did you mean "' + hint.name + '"?') : ''));
	    }

	    /**
	     * Find the index of a type definition. Handles special case 'any'
	     * @param {TypeDef} type
	     * @return {number}
	     */
	    function findTypeIndex(type) {
	      if (type === anyType) {
	        return 999;
	      }

	      return typed.types.indexOf(type);
	    }

	    /**
	     * Find a type that matches a value.
	     * @param {*} value
	     * @return {string} Returns the name of the first type for which
	     *                  the type test matches the value.
	     */
	    function findTypeName(value) {
	      var entry = findInArray(typed.types, function (entry) {
	        return entry.test(value);
	      });

	      if (entry) {
	        return entry.name;
	      }

	      throw new TypeError('Value has unknown type. Value: ' + value);
	    }

	    /**
	     * Find a specific signature from a (composed) typed function, for example:
	     *
	     *   typed.find(fn, ['number', 'string'])
	     *   typed.find(fn, 'number, string')
	     *
	     * Function find only only works for exact matches.
	     *
	     * @param {Function} fn                   A typed-function
	     * @param {string | string[]} signature   Signature to be found, can be
	     *                                        an array or a comma separated string.
	     * @return {Function}                     Returns the matching signature, or
	     *                                        throws an error when no signature
	     *                                        is found.
	     */
	    function find (fn, signature) {
	      if (!fn.signatures) {
	        throw new TypeError('Function is no typed-function');
	      }

	      // normalize input
	      var arr;
	      if (typeof signature === 'string') {
	        arr = signature.split(',');
	        for (var i = 0; i < arr.length; i++) {
	          arr[i] = arr[i].trim();
	        }
	      }
	      else if (Array.isArray(signature)) {
	        arr = signature;
	      }
	      else {
	        throw new TypeError('String array or a comma separated string expected');
	      }

	      var str = arr.join(',');

	      // find an exact match
	      var match = fn.signatures[str];
	      if (match) {
	        return match;
	      }

	      // TODO: extend find to match non-exact signatures

	      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
	    }

	    /**
	     * Convert a given value to another data type.
	     * @param {*} value
	     * @param {string} type
	     */
	    function convert (value, type) {
	      var from = findTypeName(value);

	      // check conversion is needed
	      if (type === from) {
	        return value;
	      }

	      for (var i = 0; i < typed.conversions.length; i++) {
	        var conversion = typed.conversions[i];
	        if (conversion.from === from && conversion.to === type) {
	          return conversion.convert(value);
	        }
	      }

	      throw new Error('Cannot convert from ' + from + ' to ' + type);
	    }
	    
	    /**
	     * Stringify parameters in a normalized way
	     * @param {Param[]} params
	     * @return {string}
	     */
	    function stringifyParams (params) {
	      return params
	          .map(function (param) {
	            var typeNames = param.types.map(getTypeName);

	            return (param.restParam ? '...' : '') + typeNames.join('|');
	          })
	          .join(',');
	    }

	    /**
	     * Parse a parameter, like "...number | boolean"
	     * @param {string} param
	     * @param {ConversionDef[]} conversions
	     * @return {Param} param
	     */
	    function parseParam (param, conversions) {
	      var restParam = param.indexOf('...') === 0;
	      var types = (!restParam)
	          ? param
	          : (param.length > 3)
	              ? param.slice(3)
	              : 'any';

	      var typeNames = types.split('|').map(trim)
	          .filter(notEmpty)
	          .filter(notIgnore);

	      var matchingConversions = filterConversions(conversions, typeNames);

	      var exactTypes = typeNames.map(function (typeName) {
	        var type = findTypeByName(typeName);

	        return {
	          name: typeName,
	          typeIndex: findTypeIndex(type),
	          test: type.test,
	          conversion: null,
	          conversionIndex: -1
	        };
	      });

	      var convertibleTypes = matchingConversions.map(function (conversion) {
	        var type = findTypeByName(conversion.from);

	        return {
	          name: conversion.from,
	          typeIndex: findTypeIndex(type),
	          test: type.test,
	          conversion: conversion,
	          conversionIndex: conversions.indexOf(conversion)
	        };
	      });

	      return {
	        types: exactTypes.concat(convertibleTypes),
	        restParam: restParam
	      };
	    }

	    /**
	     * Parse a signature with comma separated parameters,
	     * like "number | boolean, ...string"
	     * @param {string} signature
	     * @param {function} fn
	     * @param {ConversionDef[]} conversions
	     * @return {Signature | null} signature
	     */
	    function parseSignature (signature, fn, conversions) {
	      var params = [];

	      if (signature.trim() !== '') {
	        params = signature
	            .split(',')
	            .map(trim)
	            .map(function (param, index, array) {
	              var parsedParam = parseParam(param, conversions);

	              if (parsedParam.restParam && (index !== array.length - 1)) {
	                throw new SyntaxError('Unexpected rest parameter "' + param + '": ' +
	                    'only allowed for the last parameter');
	              }

	              return parsedParam;
	          });
	      }

	      if (params.some(isInvalidParam)) {
	        // invalid signature: at least one parameter has no types
	        // (they may have been filtered)
	        return null;
	      }

	      return {
	        params: params,
	        fn: fn
	      };
	    }

	    /**
	     * Test whether a set of params contains a restParam
	     * @param {Param[]} params
	     * @return {boolean} Returns true when the last parameter is a restParam
	     */
	    function hasRestParam(params) {
	      var param = last(params);
	      return param ? param.restParam : false;
	    }

	    /**
	     * Test whether a parameter contains conversions
	     * @param {Param} param
	     * @return {boolean} Returns true when at least one of the parameters
	     *                   contains a conversion.
	     */
	    function hasConversions(param) {
	      return param.types.some(function (type) {
	        return type.conversion != null;
	      });
	    }

	    /**
	     * Create a type test for a single parameter, which can have one or multiple
	     * types.
	     * @param {Param} param
	     * @return {function(x: *) : boolean} Returns a test function
	     */
	    function compileTest(param) {
	      if (!param || param.types.length === 0) {
	        // nothing to do
	        return ok;
	      }
	      else if (param.types.length === 1) {
	        return findTypeByName(param.types[0].name).test;
	      }
	      else if (param.types.length === 2) {
	        var test0 = findTypeByName(param.types[0].name).test;
	        var test1 = findTypeByName(param.types[1].name).test;
	        return function or(x) {
	          return test0(x) || test1(x);
	        }
	      }
	      else { // param.types.length > 2
	        var tests = param.types.map(function (type) {
	          return findTypeByName(type.name).test;
	        });
	        return function or(x) {
	          for (var i = 0; i < tests.length; i++) {
	            if (tests[i](x)) {
	              return true;
	            }
	          }
	          return false;
	        }
	      }
	    }

	    /**
	     * Create a test for all parameters of a signature
	     * @param {Param[]} params
	     * @return {function(args: Array<*>) : boolean}
	     */
	    function compileTests(params) {
	      var tests, test0, test1;

	      if (hasRestParam(params)) {
	        // variable arguments like '...number'
	        tests = initial(params).map(compileTest);
	        var varIndex = tests.length;
	        var lastTest = compileTest(last(params));
	        var testRestParam = function (args) {
	          for (var i = varIndex; i < args.length; i++) {
	            if (!lastTest(args[i])) {
	              return false;
	            }
	          }
	          return true;
	        };

	        return function testArgs(args) {
	          for (var i = 0; i < tests.length; i++) {
	            if (!tests[i](args[i])) {
	              return false;
	            }
	          }
	          return testRestParam(args) && (args.length >= varIndex + 1);
	        };
	      }
	      else {
	        // no variable arguments
	        if (params.length === 0) {
	          return function testArgs(args) {
	            return args.length === 0;
	          };
	        }
	        else if (params.length === 1) {
	          test0 = compileTest(params[0]);
	          return function testArgs(args) {
	            return test0(args[0]) && args.length === 1;
	          };
	        }
	        else if (params.length === 2) {
	          test0 = compileTest(params[0]);
	          test1 = compileTest(params[1]);
	          return function testArgs(args) {
	            return test0(args[0]) && test1(args[1]) && args.length === 2;
	          };
	        }
	        else { // arguments.length > 2
	          tests = params.map(compileTest);
	          return function testArgs(args) {
	            for (var i = 0; i < tests.length; i++) {
	              if (!tests[i](args[i])) {
	                return false;
	              }
	            }
	            return args.length === tests.length;
	          };
	        }
	      }
	    }

	    /**
	     * Find the parameter at a specific index of a signature.
	     * Handles rest parameters.
	     * @param {Signature} signature
	     * @param {number} index
	     * @return {Param | null} Returns the matching parameter when found,
	     *                        null otherwise.
	     */
	    function getParamAtIndex(signature, index) {
	      return index < signature.params.length
	          ? signature.params[index]
	          : hasRestParam(signature.params)
	              ? last(signature.params)
	              : null
	    }

	    /**
	     * Get all type names of a parameter
	     * @param {Signature} signature
	     * @param {number} index
	     * @param {boolean} excludeConversions
	     * @return {string[]} Returns an array with type names
	     */
	    function getExpectedTypeNames (signature, index, excludeConversions) {
	      var param = getParamAtIndex(signature, index);
	      var types = param
	          ? excludeConversions
	                  ? param.types.filter(isExactType)
	                  : param.types
	          : [];

	      return types.map(getTypeName);
	    }

	    /**
	     * Returns the name of a type
	     * @param {Type} type
	     * @return {string} Returns the type name
	     */
	    function getTypeName(type) {
	      return type.name;
	    }

	    /**
	     * Test whether a type is an exact type or conversion
	     * @param {Type} type
	     * @return {boolean} Returns true when
	     */
	    function isExactType(type) {
	      return type.conversion === null || type.conversion === undefined;
	    }

	    /**
	     * Helper function for creating error messages: create an array with
	     * all available types on a specific argument index.
	     * @param {Signature[]} signatures
	     * @param {number} index
	     * @return {string[]} Returns an array with available types
	     */
	    function mergeExpectedParams(signatures, index) {
	      var typeNames = uniq(flatMap(signatures, function (signature) {
	        return getExpectedTypeNames(signature, index, false);
	      }));

	      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;
	    }

	    /**
	     * Create
	     * @param {string} name             The name of the function
	     * @param {array.<*>} args          The actual arguments passed to the function
	     * @param {Signature[]} signatures  A list with available signatures
	     * @return {TypeError} Returns a type error with additional data
	     *                     attached to it in the property `data`
	     */
	    function createError(name, args, signatures) {
	      var err, expected;
	      var _name = name || 'unnamed';

	      // test for wrong type at some index
	      var matchingSignatures = signatures;
	      var index;
	      for (index = 0; index < args.length; index++) {
	        var nextMatchingDefs = matchingSignatures.filter(function (signature) {
	          var test = compileTest(getParamAtIndex(signature, index));
	          return (index < signature.params.length || hasRestParam(signature.params)) &&
	              test(args[index]);
	        });

	        if (nextMatchingDefs.length === 0) {
	          // no matching signatures anymore, throw error "wrong type"
	          expected = mergeExpectedParams(matchingSignatures, index);
	          if (expected.length > 0) {
	            var actualType = findTypeName(args[index]);

	            err = new TypeError('Unexpected type of argument in function ' + _name +
	                ' (expected: ' + expected.join(' or ') +
	                ', actual: ' + actualType + ', index: ' + index + ')');
	            err.data = {
	              category: 'wrongType',
	              fn: _name,
	              index: index,
	              actual: actualType,
	              expected: expected
	            };
	            return err;
	          }
	        }
	        else {
	          matchingSignatures = nextMatchingDefs;
	        }
	      }

	      // test for too few arguments
	      var lengths = matchingSignatures.map(function (signature) {
	        return hasRestParam(signature.params) ? Infinity : signature.params.length;
	      });
	      if (args.length < Math.min.apply(null, lengths)) {
	        expected = mergeExpectedParams(matchingSignatures, index);
	        err = new TypeError('Too few arguments in function ' + _name +
	            ' (expected: ' + expected.join(' or ') +
	            ', index: ' + args.length + ')');
	        err.data = {
	          category: 'tooFewArgs',
	          fn: _name,
	          index: args.length,
	          expected: expected
	        };
	        return err;
	      }

	      // test for too many arguments
	      var maxLength = Math.max.apply(null, lengths);
	      if (args.length > maxLength) {
	        err = new TypeError('Too many arguments in function ' + _name +
	            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
	        err.data = {
	          category: 'tooManyArgs',
	          fn: _name,
	          index: args.length,
	          expectedLength: maxLength
	        };
	        return err;
	      }

	      err = new TypeError('Arguments of type "' + args.join(', ') +
	          '" do not match any of the defined signatures of function ' + _name + '.');
	      err.data = {
	        category: 'mismatch',
	        actual: args.map(findTypeName)
	      };
	      return err;
	    }

	    /**
	     * Find the lowest index of all exact types of a parameter (no conversions)
	     * @param {Param} param
	     * @return {number} Returns the index of the lowest type in typed.types
	     */
	    function getLowestTypeIndex (param) {
	      var min = 999;

	      for (var i = 0; i < param.types.length; i++) {
	        if (isExactType(param.types[i])) {
	          min = Math.min(min, param.types[i].typeIndex);
	        }
	      }

	      return min;
	    }

	    /**
	     * Find the lowest index of the conversion of all types of the parameter
	     * having a conversion
	     * @param {Param} param
	     * @return {number} Returns the lowest index of the conversions of this type
	     */
	    function getLowestConversionIndex (param) {
	      var min = 999;

	      for (var i = 0; i < param.types.length; i++) {
	        if (!isExactType(param.types[i])) {
	          min = Math.min(min, param.types[i].conversionIndex);
	        }
	      }

	      return min;
	    }

	    /**
	     * Compare two params
	     * @param {Param} param1
	     * @param {Param} param2
	     * @return {number} returns a negative number when param1 must get a lower
	     *                  index than param2, a positive number when the opposite,
	     *                  or zero when both are equal
	     */
	    function compareParams (param1, param2) {
	      var c;

	      // compare having a rest parameter or not
	      c = param1.restParam - param2.restParam;
	      if (c !== 0) {
	        return c;
	      }

	      // compare having conversions or not
	      c = hasConversions(param1) - hasConversions(param2);
	      if (c !== 0) {
	        return c;
	      }

	      // compare the index of the types
	      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
	      if (c !== 0) {
	        return c;
	      }

	      // compare the index of any conversion
	      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
	    }

	    /**
	     * Compare two signatures
	     * @param {Signature} signature1
	     * @param {Signature} signature2
	     * @return {number} returns a negative number when param1 must get a lower
	     *                  index than param2, a positive number when the opposite,
	     *                  or zero when both are equal
	     */
	    function compareSignatures (signature1, signature2) {
	      var len = Math.min(signature1.params.length, signature2.params.length);
	      var i;
	      var c;

	      // compare whether the params have conversions at all or not
	      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);
	      if (c !== 0) {
	        return c;
	      }

	      // next compare whether the params have conversions one by one
	      for (i = 0; i < len; i++) {
	        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
	        if (c !== 0) {
	          return c;
	        }
	      }

	      // compare the types of the params one by one
	      for (i = 0; i < len; i++) {
	        c = compareParams(signature1.params[i], signature2.params[i]);
	        if (c !== 0) {
	          return c;
	        }
	      }

	      // compare the number of params
	      return signature1.params.length - signature2.params.length;
	    }

	    /**
	     * Get params containing all types that can be converted to the defined types.
	     *
	     * @param {ConversionDef[]} conversions
	     * @param {string[]} typeNames
	     * @return {ConversionDef[]} Returns the conversions that are available
	     *                        for every type (if any)
	     */
	    function filterConversions(conversions, typeNames) {
	      var matches = {};

	      conversions.forEach(function (conversion) {
	        if (typeNames.indexOf(conversion.from) === -1 &&
	            typeNames.indexOf(conversion.to) !== -1 &&
	            !matches[conversion.from]) {
	          matches[conversion.from] = conversion;
	        }
	      });

	      return Object.keys(matches).map(function (from) {
	        return matches[from];
	      });
	    }

	    /**
	     * Preprocess arguments before calling the original function:
	     * - if needed convert the parameters
	     * - in case of rest parameters, move the rest parameters into an Array
	     * @param {Param[]} params
	     * @param {function} fn
	     * @return {function} Returns a wrapped function
	     */
	    function compileArgsPreprocessing(params, fn) {
	      var fnConvert = fn;

	      // TODO: can we make this wrapper function smarter/simpler?

	      if (params.some(hasConversions)) {
	        var restParam = hasRestParam(params);
	        var compiledConversions = params.map(compileArgConversion);

	        fnConvert = function convertArgs() {
	          var args = [];
	          var last = restParam ? arguments.length - 1 : arguments.length;
	          for (var i = 0; i < last; i++) {
	            args[i] = compiledConversions[i](arguments[i]);
	          }
	          if (restParam) {
	            args[last] = arguments[last].map(compiledConversions[last]);
	          }

	          return fn.apply(null, args);
	        };
	      }

	      var fnPreprocess = fnConvert;
	      if (hasRestParam(params)) {
	        var offset = params.length - 1;

	        fnPreprocess = function preprocessRestParams () {
	          return fnConvert.apply(null,
	              slice(arguments, 0, offset).concat([slice(arguments, offset)]));
	        };
	      }

	      return fnPreprocess;
	    }

	    /**
	     * Compile conversion for a parameter to the right type
	     * @param {Param} param
	     * @return {function} Returns the wrapped function that will convert arguments
	     *
	     */
	    function compileArgConversion(param) {
	      var test0, test1, conversion0, conversion1;
	      var tests = [];
	      var conversions = [];

	      param.types.forEach(function (type) {
	        if (type.conversion) {
	          tests.push(findTypeByName(type.conversion.from).test);
	          conversions.push(type.conversion.convert);
	        }
	      });

	      // create optimized conversion functions depending on the number of conversions
	      switch (conversions.length) {
	        case 0:
	          return function convertArg(arg) {
	            return arg;
	          }

	        case 1:
	          test0 = tests[0];
	          conversion0 = conversions[0];
	          return function convertArg(arg) {
	            if (test0(arg)) {
	              return conversion0(arg)
	            }
	            return arg;
	          }

	        case 2:
	          test0 = tests[0];
	          test1 = tests[1];
	          conversion0 = conversions[0];
	          conversion1 = conversions[1];
	          return function convertArg(arg) {
	            if (test0(arg)) {
	              return conversion0(arg)
	            }
	            if (test1(arg)) {
	              return conversion1(arg)
	            }
	            return arg;
	          }

	        default:
	          return function convertArg(arg) {
	            for (var i = 0; i < conversions.length; i++) {
	              if (tests[i](arg)) {
	                return conversions[i](arg);
	              }
	            }
	            return arg;
	          }
	      }
	    }

	    /**
	     * Convert an array with signatures into a map with signatures,
	     * where signatures with union types are split into separate signatures
	     *
	     * Throws an error when there are conflicting types
	     *
	     * @param {Signature[]} signatures
	     * @return {Object.<string, function>}  Returns a map with signatures
	     *                                      as key and the original function
	     *                                      of this signature as value.
	     */
	    function createSignaturesMap(signatures) {
	      var signaturesMap = {};
	      signatures.forEach(function (signature) {
	        if (!signature.params.some(hasConversions)) {
	          splitParams(signature.params, true).forEach(function (params) {
	            signaturesMap[stringifyParams(params)] = signature.fn;
	          });
	        }
	      });

	      return signaturesMap;
	    }

	    /**
	     * Split params with union types in to separate params.
	     *
	     * For example:
	     *
	     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
	     *     // returns:
	     *     // [
	     *     //   ['Array', 'string'],
	     *     //   ['Array', 'RegExp'],
	     *     //   ['Object', 'string'],
	     *     //   ['Object', 'RegExp']
	     *     // ]
	     *
	     * @param {Param[]} params
	     * @param {boolean} ignoreConversionTypes
	     * @return {Param[]}
	     */
	    function splitParams(params, ignoreConversionTypes) {
	      function _splitParams(params, index, types) {
	        if (index < params.length) {
	          var param = params[index];
	          var filteredTypes = ignoreConversionTypes
	              ? param.types.filter(isExactType)
	              : param.types;
	          var typeGroups;

	          if (param.restParam) {
	            // split the types of a rest parameter in two:
	            // one with only exact types, and one with exact types and conversions
	            var exactTypes = filteredTypes.filter(isExactType);
	            typeGroups = exactTypes.length < filteredTypes.length
	                ? [exactTypes, filteredTypes]
	                : [filteredTypes];

	          }
	          else {
	            // split all the types of a regular parameter into one type per group
	            typeGroups = filteredTypes.map(function (type) {
	              return [type]
	            });
	          }

	          // recurse over the groups with types
	          return flatMap(typeGroups, function (typeGroup) {
	            return _splitParams(params, index + 1, types.concat([typeGroup]));
	          });

	        }
	        else {
	          // we've reached the end of the parameters. Now build a new Param
	          var splittedParams = types.map(function (type, typeIndex) {
	            return {
	              types: type,
	              restParam: (typeIndex === params.length - 1) && hasRestParam(params)
	            }
	          });

	          return [splittedParams];
	        }
	      }

	      return _splitParams(params, 0, []);
	    }

	    /**
	     * Test whether two signatures have a conflicting signature
	     * @param {Signature} signature1
	     * @param {Signature} signature2
	     * @return {boolean} Returns true when the signatures conflict, false otherwise.
	     */
	    function hasConflictingParams(signature1, signature2) {
	      var ii = Math.max(signature1.params.length, signature2.params.length);

	      for (var i = 0; i < ii; i++) {
	        var typesNames1 = getExpectedTypeNames(signature1, i, true);
	        var typesNames2 = getExpectedTypeNames(signature2, i, true);

	        if (!hasOverlap(typesNames1, typesNames2)) {
	          return false;
	        }
	      }

	      var len1 = signature1.params.length;
	      var len2 = signature2.params.length;
	      var restParam1 = hasRestParam(signature1.params);
	      var restParam2 = hasRestParam(signature2.params);

	      return restParam1
	          ? restParam2 ? (len1 === len2) : (len2 >= len1)
	          : restParam2 ? (len1 >= len2)  : (len1 === len2)
	    }

	    /**
	     * Create a typed function
	     * @param {String} name               The name for the typed function
	     * @param {Object.<string, function>} signaturesMap
	     *                                    An object with one or
	     *                                    multiple signatures as key, and the
	     *                                    function corresponding to the
	     *                                    signature as value.
	     * @return {function}  Returns the created typed function.
	     */
	    function createTypedFunction(name, signaturesMap) {
	      if (Object.keys(signaturesMap).length === 0) {
	        throw new SyntaxError('No signatures provided');
	      }

	      // parse the signatures, and check for conflicts
	      var parsedSignatures = [];
	      Object.keys(signaturesMap)
	          .map(function (signature) {
	            return parseSignature(signature, signaturesMap[signature], typed.conversions);
	          })
	          .filter(notNull)
	          .forEach(function (parsedSignature) {
	            // check whether this parameter conflicts with already parsed signatures
	            var conflictingSignature = findInArray(parsedSignatures, function (s) {
	              return hasConflictingParams(s, parsedSignature)
	            });
	            if (conflictingSignature) {
	              throw new TypeError('Conflicting signatures "' +
	                  stringifyParams(conflictingSignature.params) + '" and "' +
	                  stringifyParams(parsedSignature.params) + '".');
	            }

	            parsedSignatures.push(parsedSignature);
	          });

	      // split and filter the types of the signatures, and then order them
	      var signatures = flatMap(parsedSignatures, function (parsedSignature) {
	        var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];

	        return params.map(function (params) {
	          return {
	            params: params,
	            fn: parsedSignature.fn
	          };
	        });
	      }).filter(notNull);

	      signatures.sort(compareSignatures);

	      // we create a highly optimized checks for the first couple of signatures with max 2 arguments
	      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
	      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
	      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
	      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
	      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
	      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
	      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

	      // compile the tests
	      var tests = signatures.map(function (signature) {
	        return compileTests(signature.params);
	      });

	      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
	      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
	      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
	      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
	      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
	      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;

	      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
	      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
	      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
	      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
	      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
	      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

	      // compile the functions
	      var fns = signatures.map(function(signature) {
	        return compileArgsPreprocessing(signature.params, signature.fn)
	      });

	      var fn0 = ok0 ? fns[0] : undef;
	      var fn1 = ok1 ? fns[1] : undef;
	      var fn2 = ok2 ? fns[2] : undef;
	      var fn3 = ok3 ? fns[3] : undef;
	      var fn4 = ok4 ? fns[4] : undef;
	      var fn5 = ok5 ? fns[5] : undef;

	      var len0 = ok0 ? signatures[0].params.length : -1;
	      var len1 = ok1 ? signatures[1].params.length : -1;
	      var len2 = ok2 ? signatures[2].params.length : -1;
	      var len3 = ok3 ? signatures[3].params.length : -1;
	      var len4 = ok4 ? signatures[4].params.length : -1;
	      var len5 = ok5 ? signatures[5].params.length : -1;

	      // simple and generic, but also slow
	      var iStart = allOk ? 6 : 0;
	      var iEnd = signatures.length;
	      var generic = function generic() {

	        for (var i = iStart; i < iEnd; i++) {
	          if (tests[i](arguments)) {
	            return fns[i].apply(null, arguments);
	          }
	        }

	        throw createError(name, arguments, signatures);
	      };

	      // create the typed function
	      // fast, specialized version. Falls back to the slower, generic one if needed
	      var fn = function fn(arg0, arg1) {

	        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }
	        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }
	        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }
	        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }
	        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }
	        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }

	        return generic.apply(null, arguments);
	      };

	      // attach name the typed function
	      try {
	        Object.defineProperty(fn, 'name', {value: name});
	      }
	      catch (err) {
	        // old browsers do not support Object.defineProperty and some don't support setting the name property
	        // the function name is not essential for the functioning, it's mostly useful for debugging,
	        // so it's fine to have unnamed functions.
	      }

	      // attach signatures to the function
	      fn.signatures = createSignaturesMap(signatures);

	      return fn;
	    }

	    /**
	     * Test whether a type should be NOT be ignored
	     * @param {string} typeName
	     * @return {boolean}
	     */
	    function notIgnore(typeName) {
	      return typed.ignore.indexOf(typeName) === -1;
	    }

	    /**
	     * trim a string
	     * @param {string} str
	     * @return {string}
	     */
	    function trim(str) {
	      return str.trim();
	    }

	    /**
	     * Test whether a string is not empty
	     * @param {string} str
	     * @return {boolean}
	     */
	    function notEmpty(str) {
	      return !!str;
	    }

	    /**
	     * test whether a value is not strict equal to null
	     * @param {*} value
	     * @return {boolean}
	     */
	    function notNull(value) {
	      return value !== null;
	    }

	    /**
	     * Test whether a parameter has no types defined
	     * @param {Param} param
	     * @return {boolean}
	     */
	    function isInvalidParam (param) {
	      return param.types.length === 0;
	    }

	    /**
	     * Return all but the last items of an array
	     * @param {Array} arr
	     * @return {Array}
	     */
	    function initial(arr) {
	      return arr.slice(0, arr.length - 1);
	    }

	    /**
	     * return the last item of an array
	     * @param {Array} arr
	     * @return {*}
	     */
	    function last(arr) {
	      return arr[arr.length - 1];
	    }

	    /**
	     * Slice an array or function Arguments
	     * @param {Array | Arguments | IArguments} arr
	     * @param {number} start
	     * @param {number} [end]
	     * @return {Array}
	     */
	    function slice(arr, start, end) {
	      return Array.prototype.slice.call(arr, start, end);
	    }

	    /**
	     * Test whether an array contains some item
	     * @param {Array} array
	     * @param {*} item
	     * @return {boolean} Returns true if array contains item, false if not.
	     */
	    function contains(array, item) {
	      return array.indexOf(item) !== -1;
	    }

	    /**
	     * Test whether two arrays have overlapping items
	     * @param {Array} array1
	     * @param {Array} array2
	     * @return {boolean} Returns true when at least one item exists in both arrays
	     */
	    function hasOverlap(array1, array2) {
	      for (var i = 0; i < array1.length; i++) {
	        if (contains(array2, array1[i])) {
	          return true;
	        }
	      }

	      return false;
	    }

	    /**
	     * Return the first item from an array for which test(arr[i]) returns true
	     * @param {Array} arr
	     * @param {function} test
	     * @return {* | undefined} Returns the first matching item
	     *                         or undefined when there is no match
	     */
	    function findInArray(arr, test) {
	      for (var i = 0; i < arr.length; i++) {
	        if (test(arr[i])) {
	          return arr[i];
	        }
	      }
	      return undefined;
	    }

	    /**
	     * Filter unique items of an array with strings
	     * @param {string[]} arr
	     * @return {string[]}
	     */
	    function uniq(arr) {
	      var entries = {};
	      for (var i = 0; i < arr.length; i++) {
	        entries[arr[i]] = true;
	      }
	      return Object.keys(entries);
	    }

	    /**
	     * Flat map the result invoking a callback for every item in an array.
	     * https://gist.github.com/samgiles/762ee337dff48623e729
	     * @param {Array} arr
	     * @param {function} callback
	     * @return {Array}
	     */
	    function flatMap(arr, callback) {
	      return Array.prototype.concat.apply([], arr.map(callback));
	    }

	    /**
	     * Retrieve the function name from a set of typed functions,
	     * and check whether the name of all functions match (if given)
	     * @param {function[]} fns
	     */
	    function getName (fns) {
	      var name = '';

	      for (var i = 0; i < fns.length; i++) {
	        var fn = fns[i];

	        // check whether the names are the same when defined
	        if (fn.signatures && fn.name !== '') {
	          if (name === '') {
	            name = fn.name;
	          }
	          else if (name !== fn.name) {
	            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
	            err.data = {
	              actual: fn.name,
	              expected: name
	            };
	            throw err;
	          }
	        }
	      }

	      return name;
	    }

	    typed = createTypedFunction('typed', {
	      'string, Object': createTypedFunction,
	      'Object': function (signaturesMap) {
	        // find existing name
	        var fns = [];
	        for (var signature in signaturesMap) {
	          if (signaturesMap.hasOwnProperty(signature)) {
	            fns.push(signaturesMap[signature]);
	          }
	        }
	        var name = getName(fns);
	        return createTypedFunction(name, signaturesMap);
	      },
	      '...Function': function (fns) {
	        var err;
	        var name = getName(fns);
	        var signaturesMap = {};

	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i];

	          // test whether this is a typed-function
	          if (!(typeof fn.signatures === 'object')) {
	            err = new TypeError('Function is no typed-function (index: ' + i + ')');
	            err.data = {index: i};
	            throw err;
	          }

	          // merge the signatures
	          for (var signature in fn.signatures) {
	            if (fn.signatures.hasOwnProperty(signature)) {
	              if (signaturesMap.hasOwnProperty(signature)) {
	                if (fn.signatures[signature] !== signaturesMap[signature]) {
	                  err = new Error('Signature "' + signature + '" is defined twice');
	                  err.data = {signature: signature};
	                  throw err;
	                }
	                // else: both signatures point to the same function, that's fine
	              }
	              else {
	                signaturesMap[signature] = fn.signatures[signature];
	              }
	            }
	          }
	        }

	        return createTypedFunction(name, signaturesMap);
	      }
	    });

	    typed.create = create;
	    typed.types = _types;
	    typed.conversions = _conversions;
	    typed.ignore = _ignore;
	    typed.convert = convert;
	    typed.find = find;

	    /**
	     * add a type
	     * @param {{name: string, test: function}} type
	     * @param {boolean} [beforeObjectTest=true]
	     *                          If true, the new test will be inserted before
	     *                          the test with name 'Object' (if any), since
	     *                          tests for Object match Array and classes too.
	     */
	    typed.addType = function (type, beforeObjectTest) {
	      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
	        throw new TypeError('Object with properties {name: string, test: function} expected');
	      }

	      if (beforeObjectTest !== false) {
	        for (var i = 0; i < typed.types.length; i++) {
	          if (typed.types[i].name === 'Object') {
	            typed.types.splice(i, 0, type);
	            return
	          }
	        }
	      }

	      typed.types.push(type);
	    };

	    // add a conversion
	    typed.addConversion = function (conversion) {
	      if (!conversion
	          || typeof conversion.from !== 'string'
	          || typeof conversion.to !== 'string'
	          || typeof conversion.convert !== 'function') {
	        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
	      }

	      typed.conversions.push(conversion);
	    };

	    return typed;
	  }

	  return create();
	}));
	});

	var number = createCommonjsModule(function (module, exports) {



	/**
	 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
	 */

	/**
	 * Test whether value is a number
	 * @param {*} value
	 * @return {boolean} isNumber
	 */
	exports.isNumber = function (value) {
	  return typeof value === 'number';
	};

	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */
	exports.isInteger = function (value) {
	  if (typeof value === 'boolean') {
	    return true;
	  }

	  return isFinite(value) ? value === Math.round(value) : false;
	  // Note: we use ==, not ===, as we can have Booleans as well
	};

	/**
	 * Calculate the sign of a number
	 * @param {number} x
	 * @returns {*}
	 */
	exports.sign = Math.sign || function (x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};

	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'engineering'    Always use engineering notation.
	 *                                          For example '123.4e+0' and '14.0e+6'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lowerExp` and `upperExp` bounds, and
	 *                                          uses exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default,
	 *                                          not rounding any digits.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12.071, {notation: 'fixed'})                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
	 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
	 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (value === Infinity) {
	    return 'Infinity';
	  } else if (value === -Infinity) {
	    return '-Infinity';
	  } else if (isNaN(value)) {
	    return 'NaN';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision = void 0;

	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (exports.isNumber(options)) {
	      precision = options;
	    } else if (options.precision) {
	      precision = options.precision;
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'engineering':
	      return exports.toEngineering(value, precision);

	    case 'auto':
	      // TODO: clean up some day. Deprecated since: 2018-01-24
	      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
	      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
	        var fixedOptions = object.map(options, function (x) {
	          return x;
	        });
	        fixedOptions.exponential = undefined;
	        if (options.exponential.lower !== undefined) {
	          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
	        }
	        if (options.exponential.upper !== undefined) {
	          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
	        }

	        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));

	        return exports.toPrecision(value, precision, fixedOptions);
	      }

	      return exports.toPrecision(value, precision, options && options)

	      // remove trailing zeros after the decimal point
	      .replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	};

	/**
	 * Split a number into sign, coefficients, and exponent
	 * @param {number | string} value
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 */
	exports.splitNumber = function (value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
	  if (!match) {
	    throw new SyntaxError('Invalid number ' + value);
	  }

	  var sign = match[1];
	  var digits = match[2];
	  var exponent = parseFloat(match[4] || '0');

	  var dot = digits.indexOf('.');
	  exponent += dot !== -1 ? dot - 1 : digits.length - 1;

	  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
	  .replace(/^0*/, function (zeros) {
	    // remove leading zeros, add their count to the exponent
	    exponent -= zeros.length;
	    return '';
	  }).replace(/0*$/, '') // remove trailing zeros
	  .split('').map(function (d) {
	    return parseInt(d);
	  });

	  if (coefficients.length === 0) {
	    coefficients.push(0);
	    exponent++;
	  }

	  return {
	    sign: sign,
	    coefficients: coefficients,
	    exponent: exponent
	  };
	};

	/**
	 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]        Optional number of significant figures to return.
	 */
	exports.toEngineering = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  var rounded = exports.roundDigits(exports.splitNumber(value), precision);

	  var e = rounded.exponent;
	  var c = rounded.coefficients;

	  // find nearest lower multiple of 3 for exponent
	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

	  if (exports.isNumber(precision)) {
	    // add zeroes to give correct sig figs
	    if (precision > c.length) c = c.concat(zeros(precision - c.length));
	  } else {
	    // concatenate coefficients with necessary zeros
	    var significandsDiff = e >= 0 ? e : Math.abs(newExp);

	    // add zeros if necessary (for ex: 1e+8)
	    if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));
	  }

	  // find difference in exponents
	  var expDiff = Math.abs(e - newExp);

	  var decimalIdx = 1;

	  // push decimal index over by expDiff times
	  while (--expDiff >= 0) {
	    decimalIdx++;
	  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
	  // otherwise concat with the rest of the coefficients
	  var decimals = c.slice(decimalIdx).join('');
	  var decimalVal = exports.isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';

	  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	  return rounded.sign + str;
	};

	/**
	 * Format a number with fixed notation.
	 * @param {number | string} value
	 * @param {number} [precision=undefined]  Optional number of decimals after the
	 *                                        decimal point. null by default.
	 */
	exports.toFixed = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  var splitValue = exports.splitNumber(value);
	  var rounded = typeof precision === 'number' ? exports.roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed

	  // append zeros if needed
	  var pp = p + (precision || 0);
	  if (c.length < pp) {
	    c = c.concat(zeros(pp - c.length));
	  }

	  // prepend zeros if needed
	  if (p < 0) {
	    c = zeros(-p + 1).concat(c);
	    p = 1;
	  }

	  // insert a dot if needed
	  if (p < c.length) {
	    c.splice(p, 0, p === 0 ? '0.' : '.');
	  }

	  return rounded.sign + c.join('');
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */
	exports.toExponential = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  // round if needed, else create a clone
	  var split = exports.splitNumber(value);
	  var rounded = precision ? exports.roundDigits(split, precision) : split;
	  var c = rounded.coefficients;
	  var e = rounded.exponent;

	  // append zeros if needed
	  if (c.length < precision) {
	    c = c.concat(zeros(precision - c.length));
	  }

	  // format as `C.CCCe+EEE` or `C.CCCe-EEE`
	  var first = c.shift();
	  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
	};

	/**
	 * Format a number with a certain precision
	 * @param {number | string} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
	 *                                       By default:
	 *                                         lowerExp = -3 (incl)
	 *                                         upper = +5 (excl)
	 * @return {string}
	 */
	exports.toPrecision = function (value, precision, options) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  // determine lower and upper bound for exponential notation.
	  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;

	  var split = exports.splitNumber(value);
	  if (split.exponent < lowerExp || split.exponent >= upperExp) {
	    // exponential notation
	    return exports.toExponential(value, precision);
	  } else {
	    var rounded = precision ? exports.roundDigits(split, precision) : split;
	    var c = rounded.coefficients;
	    var e = rounded.exponent;

	    // append trailing zeros
	    if (c.length < precision) {
	      c = c.concat(zeros(precision - c.length));
	    }

	    // append trailing zeros
	    // TODO: simplify the next statement
	    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));

	    // prepend zeros
	    c = zeros(-e).concat(c);

	    var dot = e > 0 ? e : 0;
	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }

	    return rounded.sign + c.join('');
	  }
	};

	/**
	 * Round the number of digits of a number *
	 * @param {SplitValue} split       A value split with .splitNumber(value)
	 * @param {number} precision  A positive integer
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 *              with rounded digits
	 */
	exports.roundDigits = function (split, precision) {
	  // create a clone
	  var rounded = {
	    sign: split.sign,
	    coefficients: split.coefficients,
	    exponent: split.exponent
	  };
	  var c = rounded.coefficients;

	  // prepend zeros if needed
	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }

	  if (c.length > precision) {
	    var removed = c.splice(precision, c.length - precision);

	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;
	      while (c[i] === 10) {
	        c.pop();
	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }
	        i--;
	        c[i]++;
	      }
	    }
	  }

	  return rounded;
	};

	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */
	function zeros(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }
	  return arr;
	}

	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */
	exports.digits = function (value) {
	  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
	  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
	  .length;
	};

	/**
	 * Minimum number added to one that makes the result different than one
	 */
	exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	*/
	exports.nearlyEqual = function (x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x === y;
	  }

	  if (x === y) {
	    return true;
	  }

	  // NaN
	  if (isNaN(x) || isNaN(y)) {
	    return false;
	  }

	  // at this point x and y should be finite
	  if (isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);
	    if (diff < exports.DBL_EPSILON) {
	      return true;
	    } else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};
	});
	var number_1 = number.isNumber;
	var number_2 = number.isInteger;
	var number_3 = number.sign;
	var number_4 = number.format;
	var number_5 = number.splitNumber;
	var number_6 = number.toEngineering;
	var number_7 = number.toFixed;
	var number_8 = number.toExponential;
	var number_9 = number.toPrecision;
	var number_10 = number.roundDigits;
	var number_11 = number.digits;
	var number_12 = number.DBL_EPSILON;
	var number_13 = number.nearlyEqual;

	/**
	 * Test whether a value is a Matrix
	 * @param {*} x
	 * @returns {boolean} returns true with input is a Matrix
	 *                    (like a DenseMatrix or SparseMatrix)
	 */

	var isMatrix = function isMatrix(x) {
	  return x && x.constructor.prototype.isMatrix || false;
	};

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };


	var digits = number.digits;



	// returns a new instance of typed-function
	var _createTyped = function createTyped() {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  _createTyped = typedFunction.create;
	  return typedFunction;
	};

	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} type   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */
	var create = function create(type) {
	  // TODO: typed-function must be able to silently ignore signatures with unknown data types

	  // type checks for all known types
	  //
	  // note that:
	  //
	  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
	  //   instanceof cannot be used because that would not allow to pass data from
	  //   one instance of math.js to another since each has it's own instance of Unit.
	  // - check the `isUnit` property via the constructor, so there will be no
	  //   matches for "fake" instances like plain objects with a property `isUnit`.
	  //   That is important for security reasons.
	  // - It must not be possible to override the type checks used internally,
	  //   for security reasons, so these functions are not exposed in the expression
	  //   parser.
	  type.isNumber = function (x) {
	    return typeof x === 'number';
	  };
	  type.isComplex = function (x) {
	    return type.Complex && x instanceof type.Complex || false;
	  };
	  type.isBigNumber = isBigNumber;
	  type.isFraction = function (x) {
	    return type.Fraction && x instanceof type.Fraction || false;
	  };
	  type.isUnit = function (x) {
	    return x && x.constructor.prototype.isUnit || false;
	  };
	  type.isString = function (x) {
	    return typeof x === 'string';
	  };
	  type.isArray = Array.isArray;
	  type.isMatrix = isMatrix;
	  type.isDenseMatrix = function (x) {
	    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false;
	  };
	  type.isSparseMatrix = function (x) {
	    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false;
	  };
	  type.isRange = function (x) {
	    return x && x.constructor.prototype.isRange || false;
	  };
	  type.isIndex = function (x) {
	    return x && x.constructor.prototype.isIndex || false;
	  };
	  type.isBoolean = function (x) {
	    return typeof x === 'boolean';
	  };
	  type.isResultSet = function (x) {
	    return x && x.constructor.prototype.isResultSet || false;
	  };
	  type.isHelp = function (x) {
	    return x && x.constructor.prototype.isHelp || false;
	  };
	  type.isFunction = function (x) {
	    return typeof x === 'function';
	  };
	  type.isDate = function (x) {
	    return x instanceof Date;
	  };
	  type.isRegExp = function (x) {
	    return x instanceof RegExp;
	  };
	  type.isObject = function (x) {
	    return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x.constructor === Object && !type.isComplex(x) && !type.isFraction(x);
	  };
	  type.isNull = function (x) {
	    return x === null;
	  };
	  type.isUndefined = function (x) {
	    return x === undefined;
	  };

	  type.isAccessorNode = function (x) {
	    return x && x.isAccessorNode && x.constructor.prototype.isNode || false;
	  };
	  type.isArrayNode = function (x) {
	    return x && x.isArrayNode && x.constructor.prototype.isNode || false;
	  };
	  type.isAssignmentNode = function (x) {
	    return x && x.isAssignmentNode && x.constructor.prototype.isNode || false;
	  };
	  type.isBlockNode = function (x) {
	    return x && x.isBlockNode && x.constructor.prototype.isNode || false;
	  };
	  type.isConditionalNode = function (x) {
	    return x && x.isConditionalNode && x.constructor.prototype.isNode || false;
	  };
	  type.isConstantNode = function (x) {
	    return x && x.isConstantNode && x.constructor.prototype.isNode || false;
	  };
	  type.isFunctionAssignmentNode = function (x) {
	    return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false;
	  };
	  type.isFunctionNode = function (x) {
	    return x && x.isFunctionNode && x.constructor.prototype.isNode || false;
	  };
	  type.isIndexNode = function (x) {
	    return x && x.isIndexNode && x.constructor.prototype.isNode || false;
	  };
	  type.isNode = function (x) {
	    return x && x.isNode && x.constructor.prototype.isNode || false;
	  };
	  type.isObjectNode = function (x) {
	    return x && x.isObjectNode && x.constructor.prototype.isNode || false;
	  };
	  type.isOperatorNode = function (x) {
	    return x && x.isOperatorNode && x.constructor.prototype.isNode || false;
	  };
	  type.isParenthesisNode = function (x) {
	    return x && x.isParenthesisNode && x.constructor.prototype.isNode || false;
	  };
	  type.isRangeNode = function (x) {
	    return x && x.isRangeNode && x.constructor.prototype.isNode || false;
	  };
	  type.isSymbolNode = function (x) {
	    return x && x.isSymbolNode && x.constructor.prototype.isNode || false;
	  };

	  type.isChain = function (x) {
	    return x && x.constructor.prototype.isChain || false;
	  };

	  // get a new instance of typed-function
	  var typed = _createTyped();

	  // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).
	  typed.types = [{ name: 'number', test: type.isNumber }, { name: 'Complex', test: type.isComplex }, { name: 'BigNumber', test: type.isBigNumber }, { name: 'Fraction', test: type.isFraction }, { name: 'Unit', test: type.isUnit }, { name: 'string', test: type.isString }, { name: 'Array', test: type.isArray }, { name: 'Matrix', test: type.isMatrix }, { name: 'DenseMatrix', test: type.isDenseMatrix }, { name: 'SparseMatrix', test: type.isSparseMatrix }, { name: 'Range', test: type.isRange }, { name: 'Index', test: type.isIndex }, { name: 'boolean', test: type.isBoolean }, { name: 'ResultSet', test: type.isResultSet }, { name: 'Help', test: type.isHelp }, { name: 'function', test: type.isFunction }, { name: 'Date', test: type.isDate }, { name: 'RegExp', test: type.isRegExp }, { name: 'null', test: type.isNull }, { name: 'undefined', test: type.isUndefined }, { name: 'OperatorNode', test: type.isOperatorNode }, { name: 'ConstantNode', test: type.isConstantNode }, { name: 'SymbolNode', test: type.isSymbolNode }, { name: 'ParenthesisNode', test: type.isParenthesisNode }, { name: 'FunctionNode', test: type.isFunctionNode }, { name: 'FunctionAssignmentNode', test: type.isFunctionAssignmentNode }, { name: 'ArrayNode', test: type.isArrayNode }, { name: 'AssignmentNode', test: type.isAssignmentNode }, { name: 'BlockNode', test: type.isBlockNode }, { name: 'ConditionalNode', test: type.isConditionalNode }, { name: 'IndexNode', test: type.isIndexNode }, { name: 'RangeNode', test: type.isRangeNode }, { name: 'Node', test: type.isNode }, { name: 'Object', test: type.isObject // order 'Object' last, it matches on other classes too
	  }];

	  // TODO: add conversion from BigNumber to number?
	  typed.conversions = [{
	    from: 'number',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      // note: conversion from number to BigNumber can fail if x has >15 digits
	      if (digits(x) > 15) {
	        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
	      }
	      return new type.BigNumber(x);
	    }
	  }, {
	    from: 'number',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x, 0);
	    }
	  }, {
	    from: 'number',
	    to: 'string',
	    convert: function convert(x) {
	      return x + '';
	    }
	  }, {
	    from: 'BigNumber',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x.toNumber(), 0);
	    }
	  }, {
	    from: 'Fraction',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
	    }
	  }, {
	    from: 'Fraction',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x.valueOf(), 0);
	    }
	  }, {
	    from: 'number',
	    to: 'Fraction',
	    convert: function convert(x) {
	      var f = new type.Fraction(x);
	      if (f.valueOf() !== x) {
	        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
	      }
	      return new type.Fraction(x);
	    }
	  }, {
	    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
	    //  from: 'Fraction',
	    //  to: 'number',
	    //  convert: function (x) {
	    //    return x.valueOf()
	    //  }
	    // }, {
	    from: 'string',
	    to: 'number',
	    convert: function convert(x) {
	      var n = Number(x);
	      if (isNaN(n)) {
	        throw new Error('Cannot convert "' + x + '" to a number');
	      }
	      return n;
	    }
	  }, {
	    from: 'string',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      try {
	        return new type.BigNumber(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to BigNumber');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Fraction',
	    convert: function convert(x) {
	      try {
	        return new type.Fraction(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Fraction');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Complex',
	    convert: function convert(x) {
	      try {
	        return new type.Complex(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Complex');
	      }
	    }
	  }, {
	    from: 'boolean',
	    to: 'number',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'boolean',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      return new type.BigNumber(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'Fraction',
	    convert: function convert(x) {
	      return new type.Fraction(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'string',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'Array',
	    to: 'Matrix',
	    convert: function convert(array) {
	      return new type.DenseMatrix(array);
	    }
	  }, {
	    from: 'Matrix',
	    to: 'Array',
	    convert: function convert(matrix) {
	      return matrix.valueOf();
	    }
	  }];

	  return typed;
	};

	var typed = {
		create: create
	};

	function E () {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
	  on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});

	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });

	    return this;
	  },

	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    }
	    listener._ = callback;
	    return this.on(name, listener, ctx);
	  },

	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;

	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }

	    return this;
	  },

	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];

	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }

	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];

	    return this;
	  }
	};

	var tinyEmitter = E;

	/**
	 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
	 * @param {Object} obj
	 * @return {Object} obj
	 */
	var mixin = function (obj) {
	  // create event emitter
	  var emitter = new tinyEmitter();

	  // bind methods to obj (we don't want to expose the emitter.e Array...)
	  obj.on = emitter.on.bind(emitter);
	  obj.off = emitter.off.bind(emitter);
	  obj.once = emitter.once.bind(emitter);
	  obj.emit = emitter.emit.bind(emitter);

	  return obj;
	};

	var emitter = {
		mixin: mixin
	};

	/**
	 * Create a syntax error with the message:
	 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
	 * @param {string} fn     Function name
	 * @param {number} count  Actual argument count
	 * @param {number} min    Minimum required argument count
	 * @param {number} [max]  Maximum required argument count
	 * @extends Error
	 */

	function ArgumentsError(fn, count, min, max) {
	  if (!(this instanceof ArgumentsError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.fn = fn;
	  this.count = count;
	  this.min = min;
	  this.max = max;

	  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';

	  this.stack = new Error().stack;
	}

	ArgumentsError.prototype = new Error();
	ArgumentsError.prototype.constructor = Error;
	ArgumentsError.prototype.name = 'ArgumentsError';
	ArgumentsError.prototype.isArgumentsError = true;

	var ArgumentsError_1 = ArgumentsError;

	var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var lazy = object.lazy;
	var isFactory = object.isFactory;
	var traverse = object.traverse;


	function factory(type, config, load, typed, math) {
	  /**
	   * Import functions from an object or a module
	   *
	   * Syntax:
	   *
	   *    math.import(object)
	   *    math.import(object, options)
	   *
	   * Where:
	   *
	   * - `object: Object`
	   *   An object with functions to be imported.
	   * - `options: Object` An object with import options. Available options:
	   *   - `override: boolean`
	   *     If true, existing functions will be overwritten. False by default.
	   *   - `silent: boolean`
	   *     If true, the function will not throw errors on duplicates or invalid
	   *     types. False by default.
	   *   - `wrap: boolean`
	   *     If true, the functions will be wrapped in a wrapper function
	   *     which converts data types like Matrix to primitive data types like Array.
	   *     The wrapper is needed when extending math.js with libraries which do not
	   *     support these data type. False by default.
	   *
	   * Examples:
	   *
	   *    // define new functions and variables
	   *    math.import({
	   *      myvalue: 42,
	   *      hello: function (name) {
	   *        return 'hello, ' + name + '!'
	   *      }
	   *    })
	   *
	   *    // use the imported function and variable
	   *    math.myvalue * 2               // 84
	   *    math.hello('user')             // 'hello, user!'
	   *
	   *    // import the npm module 'numbers'
	   *    // (must be installed first with `npm install numbers`)
	   *    math.import(require('numbers'), {wrap: true})
	   *
	   *    math.fibonacci(7) // returns 13
	   *
	   * @param {Object | Array} object   Object with functions to be imported.
	   * @param {Object} [options]        Import options.
	   */
	  function mathImport(object$$1, options) {
	    var num = arguments.length;
	    if (num !== 1 && num !== 2) {
	      throw new ArgumentsError_1('import', num, 1, 2);
	    }

	    if (!options) {
	      options = {};
	    }

	    // TODO: allow a typed-function with name too
	    if (isFactory(object$$1)) {
	      _importFactory(object$$1, options);
	    } else if (Array.isArray(object$$1)) {
	      object$$1.forEach(function (entry) {
	        mathImport(entry, options);
	      });
	    } else if ((typeof object$$1 === 'undefined' ? 'undefined' : _typeof$1(object$$1)) === 'object') {
	      // a map with functions
	      for (var name in object$$1) {
	        if (object$$1.hasOwnProperty(name)) {
	          var value = object$$1[name];
	          if (isSupportedType(value)) {
	            _import(name, value, options);
	          } else if (isFactory(object$$1)) {
	            _importFactory(object$$1, options);
	          } else {
	            mathImport(value, options);
	          }
	        }
	      }
	    } else {
	      if (!options.silent) {
	        throw new TypeError('Factory, Object, or Array expected');
	      }
	    }
	  }

	  /**
	   * Add a property to the math namespace and create a chain proxy for it.
	   * @param {string} name
	   * @param {*} value
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _import(name, value, options) {
	    // TODO: refactor this function, it's to complicated and contains duplicate code
	    if (options.wrap && typeof value === 'function') {
	      // create a wrapper around the function
	      value = _wrap(value);
	    }

	    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
	      if (options.override) {
	        // give the typed function the right name
	        value = typed(name, value.signatures);
	      } else {
	        // merge the existing and typed function
	        value = typed(math[name], value);
	      }

	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (math[name] === undefined || options.override) {
	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (!options.silent) {
	      throw new Error('Cannot import "' + name + '": already exists');
	    }
	  }

	  function _importTransform(name, value) {
	    if (value && typeof value.transform === 'function') {
	      math.expression.transform[name] = value.transform;
	      if (allowedInExpressions(name)) {
	        math.expression.mathWithTransform[name] = value.transform;
	      }
	    } else {
	      // remove existing transform
	      delete math.expression.transform[name];
	      if (allowedInExpressions(name)) {
	        math.expression.mathWithTransform[name] = value;
	      }
	    }
	  }

	  function _deleteTransform(name) {
	    delete math.expression.transform[name];
	    if (allowedInExpressions(name)) {
	      math.expression.mathWithTransform[name] = math[name];
	    } else {
	      delete math.expression.mathWithTransform[name];
	    }
	  }

	  /**
	   * Create a wrapper a round an function which converts the arguments
	   * to their primitive values (like convert a Matrix to Array)
	   * @param {Function} fn
	   * @return {Function} Returns the wrapped function
	   * @private
	   */
	  function _wrap(fn) {
	    var wrapper = function wrapper() {
	      var args = [];
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        var arg = arguments[i];
	        args[i] = arg && arg.valueOf();
	      }
	      return fn.apply(math, args);
	    };

	    if (fn.transform) {
	      wrapper.transform = fn.transform;
	    }

	    return wrapper;
	  }

	  /**
	   * Import an instance of a factory into math.js
	   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _importFactory(factory, options) {
	    if (typeof factory.name === 'string') {
	      var name = factory.name;
	      var existingTransform = name in math.expression.transform;
	      var namespace = factory.path ? traverse(math, factory.path) : math;
	      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

	      var resolver = function resolver() {
	        var instance = load(factory);
	        if (instance && typeof instance.transform === 'function') {
	          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
	        }

	        if (isTypedFunction(existing) && isTypedFunction(instance)) {
	          if (options.override) ; else {
	            // merge the existing and new typed function
	            instance = typed(existing, instance);
	          }

	          return instance;
	        }

	        if (existing === undefined || options.override) {
	          return instance;
	        }

	        if (!options.silent) {
	          throw new Error('Cannot import "' + name + '": already exists');
	        }
	      };

	      if (factory.lazy !== false) {
	        lazy(namespace, name, resolver);

	        if (existingTransform) {
	          _deleteTransform(name);
	        } else {
	          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
	            lazy(math.expression.mathWithTransform, name, resolver);
	          }
	        }
	      } else {
	        namespace[name] = resolver();

	        if (existingTransform) {
	          _deleteTransform(name);
	        } else {
	          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
	            math.expression.mathWithTransform[name] = resolver();
	          }
	        }
	      }

	      math.emit('import', name, resolver, factory.path);
	    } else {
	      // unnamed factory.
	      // no lazy loading
	      load(factory);
	    }
	  }

	  /**
	   * Check whether given object is a type which can be imported
	   * @param {Function | number | string | boolean | null | Unit | Complex} object
	   * @return {boolean}
	   * @private
	   */
	  function isSupportedType(object$$1) {
	    return typeof object$$1 === 'function' || typeof object$$1 === 'number' || typeof object$$1 === 'string' || typeof object$$1 === 'boolean' || object$$1 === null || object$$1 && type.isUnit(object$$1) || object$$1 && type.isComplex(object$$1) || object$$1 && type.isBigNumber(object$$1) || object$$1 && type.isFraction(object$$1) || object$$1 && type.isMatrix(object$$1) || object$$1 && Array.isArray(object$$1);
	  }

	  /**
	   * Test whether a given thing is a typed-function
	   * @param {*} fn
	   * @return {boolean} Returns true when `fn` is a typed-function
	   */
	  function isTypedFunction(fn) {
	    return typeof fn === 'function' && _typeof$1(fn.signatures) === 'object';
	  }

	  function allowedInExpressions(name) {
	    return !unsafe.hasOwnProperty(name);
	  }

	  function factoryAllowedInExpressions(factory) {
	    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);
	  }

	  // namespaces and functions not available in the parser for safety reasons
	  var unsafe = {
	    'expression': true,
	    'type': true,
	    'docs': true,
	    'error': true,
	    'json': true,
	    'chain': true // chain method not supported. Note that there is a unit chain too.
	  };

	  return mathImport;
	}

	var math = true; // request access to the math namespace as 5th argument of the factory function
	var name = 'import';
	var factory_1 = factory;
	var lazy_1 = true;

	var _import = {
		math: math,
		name: name,
		factory: factory_1,
		lazy: lazy_1
	};

	function factory$1(type, config, load, typed, math) {
	  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix
	  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number

	  /**
	   * Set configuration options for math.js, and get current options.
	   * Will emit a 'config' event, with arguments (curr, prev, changes).
	   *
	   * Syntax:
	   *
	   *     math.config(config: Object): Object
	   *
	   * Examples:
	   *
	   *     math.config().number                // outputs 'number'
	   *     math.eval('0.4')                    // outputs number 0.4
	   *     math.config({number: 'Fraction'})
	   *     math.eval('0.4')                    // outputs Fraction 2/5
	   *
	   * @param {Object} [options] Available options:
	   *                            {number} epsilon
	   *                              Minimum relative difference between two
	   *                              compared values, used by all comparison functions.
	   *                            {string} matrix
	   *                              A string 'Matrix' (default) or 'Array'.
	   *                            {string} number
	   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	   *                            {number} precision
	   *                              The number of significant digits for BigNumbers.
	   *                              Not applicable for Numbers.
	   *                            {string} parenthesis
	   *                              How to display parentheses in LaTeX and string
	   *                              output.
	   *                            {string} randomSeed
	   *                              Random seed for seeded pseudo random number generator.
	   *                              Set to null to randomly seed.
	   * @return {Object} Returns the current configuration
	   */
	  function _config(options) {
	    if (options) {
	      var prev = object.map(config, object.clone);

	      // validate some of the options
	      validateOption(options, 'matrix', MATRIX);
	      validateOption(options, 'number', NUMBER);

	      // merge options
	      object.deepExtend(config, options);

	      var curr = object.map(config, object.clone);

	      var changes = object.map(options, object.clone);

	      // emit 'config' event
	      math.emit('config', curr, prev, changes);

	      return curr;
	    } else {
	      return object.map(config, object.clone);
	    }
	  }

	  // attach the valid options to the function so they can be extended
	  _config.MATRIX = MATRIX;
	  _config.NUMBER = NUMBER;

	  return _config;
	}

	/**
	 * Test whether an Array contains a specific item.
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {boolean}
	 */
	function contains(array, item) {
	  return array.indexOf(item) !== -1;
	}

	/**
	 * Find a string in an array. Case insensitive search
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {number} Returns the index when found. Returns -1 when not found
	 */
	function findIndex(array, item) {
	  return array.map(function (i) {
	    return i.toLowerCase();
	  }).indexOf(item.toLowerCase());
	}

	/**
	 * Validate an option
	 * @param {Object} options         Object with options
	 * @param {string} name            Name of the option to validate
	 * @param {Array.<string>} values  Array with valid values for this option
	 */
	function validateOption(options, name, values) {
	  if (options[name] !== undefined && !contains(values, options[name])) {
	    var index = findIndex(values, options[name]);
	    if (index !== -1) {
	      // right value, wrong casing
	      // TODO: lower case values are deprecated since v3, remove this warning some day.
	      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');

	      options[name] = values[index]; // change the option to the right casing
	    } else {
	      // unknown value
	      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
	    }
	  }
	}

	var name$1 = 'config';
	var math$1 = true; // request the math namespace as fifth argument
	var factory_1$1 = factory$1;

	var config = {
		name: name$1,
		math: math$1,
		factory: factory_1$1
	};

	var isFactory$1 = object.isFactory;






	/**
	 * Math.js core. Creates a new, empty math.js instance
	 * @param {Object} [options] Available options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'Matrix' (default) or 'Array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-4)`
	 *                              returns `complex('2i')` when predictable is false, and
	 *                              returns `NaN` when true.
	 *                            {string} randomSeed
	 *                              Random seed for seeded pseudo random number generator.
	 *                              Set to null to randomly seed.
	 * @returns {Object} Returns a bare-bone math.js instance containing
	 *                   functions:
	 *                   - `import` to add new functions
	 *                   - `config` to change configuration
	 *                   - `on`, `off`, `once`, `emit` for events
	 */
	var create$1 = function create(options) {
	  // simple test for ES5 support
	  if (typeof Object.create !== 'function') {
	    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
	  }

	  // cached factories and instances
	  var factories = [];
	  var instances = [];

	  // create a namespace for the mathjs instance, and attach emitter functions
	  var math = emitter.mixin({});
	  math.type = {};
	  math.expression = {
	    transform: {},
	    mathWithTransform: {}

	    // create a new typed instance
	  };math.typed = typed.create(math.type);

	  // create configuration options. These are private
	  var _config = {
	    // minimum relative difference between two compared values,
	    // used by all comparison functions
	    epsilon: 1e-12,

	    // type of default matrix output. Choose 'matrix' (default) or 'array'
	    matrix: 'Matrix',

	    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
	    number: 'number',

	    // number of significant digits in BigNumbers
	    precision: 64,

	    // predictable output type of functions. When true, output type depends only
	    // on the input types. When false (default), output type can vary depending
	    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
	    // predictable is false, and returns `NaN` when true.
	    predictable: false,

	    // random seed for seeded pseudo random number generation
	    // null = randomly seed
	    randomSeed: null

	    /**
	     * Load a function or data type from a factory.
	     * If the function or data type already exists, the existing instance is
	     * returned.
	     * @param {{type: string, name: string, factory: Function}} factory
	     * @returns {*}
	     */
	  };function load(factory) {
	    if (!isFactory$1(factory)) {
	      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
	    }

	    var index = factories.indexOf(factory);
	    var instance = void 0;
	    if (index === -1) {
	      // doesn't yet exist
	      if (factory.math === true) {
	        // pass with math namespace
	        instance = factory.factory(math.type, _config, load, math.typed, math);
	      } else {
	        instance = factory.factory(math.type, _config, load, math.typed);
	      }

	      // append to the cache
	      factories.push(factory);
	      instances.push(instance);
	    } else {
	      // already existing function, return the cached instance
	      instance = instances[index];
	    }

	    return instance;
	  }

	  // load the import and config functions
	  math['import'] = load(_import);
	  math['config'] = load(config);
	  math.expression.mathWithTransform['config'] = math['config'];

	  // apply options
	  if (options) {
	    math.config(options);
	  }

	  return math;
	};

	var core = {
		create: create$1
	};

	var decimal = createCommonjsModule(function (module) {
	(function (globalScope) {


	  /*
	   *  decimal.js v10.0.1
	   *  An arbitrary-precision Decimal type for JavaScript.
	   *  https://github.com/MikeMcl/decimal.js
	   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>
	   *  MIT Licence
	   */


	  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


	    // The maximum exponent magnitude.
	    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
	  var EXP_LIMIT = 9e15,                      // 0 to 9e15

	    // The limit on the value of `precision`, and on the value of the first argument to
	    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	    MAX_DIGITS = 1e9,                        // 0 to 1e9

	    // Base conversion alphabet.
	    NUMERALS = '0123456789abcdef',

	    // The natural logarithm of 10 (1025 digits).
	    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

	    // Pi (1025 digits).
	    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


	    // The initial configuration properties of the Decimal constructor.
	    DEFAULTS = {

	      // These values must be integers within the stated ranges (inclusive).
	      // Most of these values can be changed at run-time using the `Decimal.config` method.

	      // The maximum number of significant digits of the result of a calculation or base conversion.
	      // E.g. `Decimal.config({ precision: 20 });`
	      precision: 20,                         // 1 to MAX_DIGITS

	      // The rounding mode used when rounding to `precision`.
	      //
	      // ROUND_UP         0 Away from zero.
	      // ROUND_DOWN       1 Towards zero.
	      // ROUND_CEIL       2 Towards +Infinity.
	      // ROUND_FLOOR      3 Towards -Infinity.
	      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      //
	      // E.g.
	      // `Decimal.rounding = 4;`
	      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	      rounding: 4,                           // 0 to 8

	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP         0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
	      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN  6 The IEEE 754 remainder function.
	      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
	      //
	      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
	      // division (9) are commonly used for the modulus operation. The other rounding modes can also
	      // be used, but they may not give useful results.
	      modulo: 1,                             // 0 to 9

	      // The exponent value at and beneath which `toString` returns exponential notation.
	      // JavaScript numbers: -7
	      toExpNeg: -7,                          // 0 to -EXP_LIMIT

	      // The exponent value at and above which `toString` returns exponential notation.
	      // JavaScript numbers: 21
	      toExpPos:  21,                         // 0 to EXP_LIMIT

	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // JavaScript numbers: -324  (5e-324)
	      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // JavaScript numbers: 308  (1.7976931348623157e+308)
	      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

	      // Whether to use cryptographically-secure random number generation, if available.
	      crypto: false                          // true/false
	    },


	  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


	    Decimal, inexact, noConflict, quadrant,
	    external = true,

	    decimalError = '[DecimalError] ',
	    invalidArgument = decimalError + 'Invalid argument: ',
	    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
	    cryptoUnavailable = decimalError + 'crypto unavailable',

	    mathfloor = Math.floor,
	    mathpow = Math.pow,

	    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
	    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
	    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
	    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

	    BASE = 1e7,
	    LOG_BASE = 7,
	    MAX_SAFE_INTEGER = 9007199254740991,

	    LN10_PRECISION = LN10.length - 1,
	    PI_PRECISION = PI.length - 1,

	    // Decimal.prototype object
	    P = { name: '[object Decimal]' };


	  // Decimal prototype methods


	  /*
	   *  absoluteValue             abs
	   *  ceil
	   *  comparedTo                cmp
	   *  cosine                    cos
	   *  cubeRoot                  cbrt
	   *  decimalPlaces             dp
	   *  dividedBy                 div
	   *  dividedToIntegerBy        divToInt
	   *  equals                    eq
	   *  floor
	   *  greaterThan               gt
	   *  greaterThanOrEqualTo      gte
	   *  hyperbolicCosine          cosh
	   *  hyperbolicSine            sinh
	   *  hyperbolicTangent         tanh
	   *  inverseCosine             acos
	   *  inverseHyperbolicCosine   acosh
	   *  inverseHyperbolicSine     asinh
	   *  inverseHyperbolicTangent  atanh
	   *  inverseSine               asin
	   *  inverseTangent            atan
	   *  isFinite
	   *  isInteger                 isInt
	   *  isNaN
	   *  isNegative                isNeg
	   *  isPositive                isPos
	   *  isZero
	   *  lessThan                  lt
	   *  lessThanOrEqualTo         lte
	   *  logarithm                 log
	   *  [maximum]                 [max]
	   *  [minimum]                 [min]
	   *  minus                     sub
	   *  modulo                    mod
	   *  naturalExponential        exp
	   *  naturalLogarithm          ln
	   *  negated                   neg
	   *  plus                      add
	   *  precision                 sd
	   *  round
	   *  sine                      sin
	   *  squareRoot                sqrt
	   *  tangent                   tan
	   *  times                     mul
	   *  toBinary
	   *  toDecimalPlaces           toDP
	   *  toExponential
	   *  toFixed
	   *  toFraction
	   *  toHexadecimal             toHex
	   *  toNearest
	   *  toNumber
	   *  toOctal
	   *  toPower                   pow
	   *  toPrecision
	   *  toSignificantDigits       toSD
	   *  toString
	   *  truncated                 trunc
	   *  valueOf                   toJSON
	   */


	  /*
	   * Return a new Decimal whose value is the absolute value of this Decimal.
	   *
	   */
	  P.absoluteValue = P.abs = function () {
	    var x = new this.constructor(this);
	    if (x.s < 0) x.s = 1;
	    return finalise(x);
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	   * direction of positive Infinity.
	   *
	   */
	  P.ceil = function () {
	    return finalise(new this.constructor(this), this.e + 1, 2);
	  };


	  /*
	   * Return
	   *   1    if the value of this Decimal is greater than the value of `y`,
	   *  -1    if the value of this Decimal is less than the value of `y`,
	   *   0    if they have the same value,
	   *   NaN  if the value of either Decimal is NaN.
	   *
	   */
	  P.comparedTo = P.cmp = function (y) {
	    var i, j, xdL, ydL,
	      x = this,
	      xd = x.d,
	      yd = (y = new x.constructor(y)).d,
	      xs = x.s,
	      ys = y.s;

	    // Either NaN or ±Infinity?
	    if (!xd || !yd) {
	      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
	    }

	    // Either zero?
	    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

	    // Signs differ?
	    if (xs !== ys) return xs;

	    // Compare exponents.
	    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

	    xdL = xd.length;
	    ydL = yd.length;

	    // Compare digit by digit.
	    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
	      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
	    }

	    // Compare lengths.
	    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
	  };


	  /*
	   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * cos(0)         = 1
	   * cos(-0)        = 1
	   * cos(Infinity)  = NaN
	   * cos(-Infinity) = NaN
	   * cos(NaN)       = NaN
	   *
	   */
	  P.cosine = P.cos = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.d) return new Ctor(NaN);

	    // cos(0) = cos(-0) = 1
	    if (!x.d[0]) return new Ctor(1);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	    Ctor.rounding = 1;

	    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
	  };


	  /*
	   *
	   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   *  cbrt(0)  =  0
	   *  cbrt(-0) = -0
	   *  cbrt(1)  =  1
	   *  cbrt(-1) = -1
	   *  cbrt(N)  =  N
	   *  cbrt(-I) = -I
	   *  cbrt(I)  =  I
	   *
	   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
	   *
	   */
	  P.cubeRoot = P.cbrt = function () {
	    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite() || x.isZero()) return new Ctor(x);
	    external = false;

	    // Initial estimate.
	    s = x.s * Math.pow(x.s * x, 1 / 3);

	     // Math.cbrt underflow/overflow?
	     // Pass x to Math.pow as integer, then adjust the exponent of the result.
	    if (!s || Math.abs(s) == 1 / 0) {
	      n = digitsToString(x.d);
	      e = x.e;

	      // Adjust n exponent so it is a multiple of 3 away from x exponent.
	      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
	      s = Math.pow(n, 1 / 3);

	      // Rarely, e may be one less than the result exponent value.
	      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

	      if (s == 1 / 0) {
	        n = '5e' + e;
	      } else {
	        n = s.toExponential();
	        n = n.slice(0, n.indexOf('e') + 1) + e;
	      }

	      r = new Ctor(n);
	      r.s = x.s;
	    } else {
	      r = new Ctor(s.toString());
	    }

	    sd = (e = Ctor.precision) + 3;

	    // Halley's method.
	    // TODO? Compare Newton's method.
	    for (;;) {
	      t = r;
	      t3 = t.times(t).times(t);
	      t3plusx = t3.plus(x);
	      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

	      // TODO? Replace with for-loop and checkRoundingDigits.
	      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	        n = n.slice(sd - 3, sd + 1);

	        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
	        // , i.e. approaching a rounding boundary, continue the iteration.
	        if (n == '9999' || !rep && n == '4999') {

	          // On the first iteration only, check to see if rounding up gives the exact result as the
	          // nines may infinitely repeat.
	          if (!rep) {
	            finalise(t, e + 1, 0);

	            if (t.times(t).times(t).eq(x)) {
	              r = t;
	              break;
	            }
	          }

	          sd += 4;
	          rep = 1;
	        } else {

	          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	          // If not, then there are further digits and m will be truthy.
	          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	            // Truncate to the first rounding digit.
	            finalise(r, e + 1, 1);
	            m = !r.times(r).times(r).eq(x);
	          }

	          break;
	        }
	      }
	    }

	    external = true;

	    return finalise(r, e, Ctor.rounding, m);
	  };


	  /*
	   * Return the number of decimal places of the value of this Decimal.
	   *
	   */
	  P.decimalPlaces = P.dp = function () {
	    var w,
	      d = this.d,
	      n = NaN;

	    if (d) {
	      w = d.length - 1;
	      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

	      // Subtract the number of trailing zeros of the last word.
	      w = d[w];
	      if (w) for (; w % 10 == 0; w /= 10) n--;
	      if (n < 0) n = 0;
	    }

	    return n;
	  };


	  /*
	   *  n / 0 = I
	   *  n / N = N
	   *  n / I = 0
	   *  0 / n = 0
	   *  0 / 0 = N
	   *  0 / N = N
	   *  0 / I = 0
	   *  N / n = N
	   *  N / 0 = N
	   *  N / N = N
	   *  N / I = N
	   *  I / n = I
	   *  I / 0 = I
	   *  I / N = N
	   *  I / I = N
	   *
	   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   */
	  P.dividedBy = P.div = function (y) {
	    return divide(this, new this.constructor(y));
	  };


	  /*
	   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   */
	  P.dividedToIntegerBy = P.divToInt = function (y) {
	    var x = this,
	      Ctor = x.constructor;
	    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
	  };


	  /*
	   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	   *
	   */
	  P.equals = P.eq = function (y) {
	    return this.cmp(y) === 0;
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	   * direction of negative Infinity.
	   *
	   */
	  P.floor = function () {
	    return finalise(new this.constructor(this), this.e + 1, 3);
	  };


	  /*
	   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	   * false.
	   *
	   */
	  P.greaterThan = P.gt = function (y) {
	    return this.cmp(y) > 0;
	  };


	  /*
	   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	   * otherwise return false.
	   *
	   */
	  P.greaterThanOrEqualTo = P.gte = function (y) {
	    var k = this.cmp(y);
	    return k == 1 || k === 0;
	  };


	  /*
	   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [1, Infinity]
	   *
	   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
	   *
	   * cosh(0)         = 1
	   * cosh(-0)        = 1
	   * cosh(Infinity)  = Infinity
	   * cosh(-Infinity) = Infinity
	   * cosh(NaN)       = NaN
	   *
	   *  x        time taken (ms)   result
	   * 1000      9                 9.8503555700852349694e+433
	   * 10000     25                4.4034091128314607936e+4342
	   * 100000    171               1.4033316802130615897e+43429
	   * 1000000   3817              1.5166076984010437725e+434294
	   * 10000000  abandoned after 2 minute wait
	   *
	   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
	   *
	   */
	  P.hyperbolicCosine = P.cosh = function () {
	    var k, n, pr, rm, len,
	      x = this,
	      Ctor = x.constructor,
	      one = new Ctor(1);

	    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
	    if (x.isZero()) return one;

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	    Ctor.rounding = 1;
	    len = x.d.length;

	    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
	    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

	    // Estimate the optimum number of times to use the argument reduction.
	    // TODO? Estimation reused from cosine() and may not be optimal here.
	    if (len < 32) {
	      k = Math.ceil(len / 3);
	      n = Math.pow(4, -k).toString();
	    } else {
	      k = 16;
	      n = '2.3283064365386962890625e-10';
	    }

	    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

	    // Reverse argument reduction
	    var cosh2_x,
	      i = k,
	      d8 = new Ctor(8);
	    for (; i--;) {
	      cosh2_x = x.times(x);
	      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
	    }

	    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
	  };


	  /*
	   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
	   *
	   * sinh(0)         = 0
	   * sinh(-0)        = -0
	   * sinh(Infinity)  = Infinity
	   * sinh(-Infinity) = -Infinity
	   * sinh(NaN)       = NaN
	   *
	   * x        time taken (ms)
	   * 10       2 ms
	   * 100      5 ms
	   * 1000     14 ms
	   * 10000    82 ms
	   * 100000   886 ms            1.4033316802130615897e+43429
	   * 200000   2613 ms
	   * 300000   5407 ms
	   * 400000   8824 ms
	   * 500000   13026 ms          8.7080643612718084129e+217146
	   * 1000000  48543 ms
	   *
	   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
	   *
	   */
	  P.hyperbolicSine = P.sinh = function () {
	    var k, pr, rm, len,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite() || x.isZero()) return new Ctor(x);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	    Ctor.rounding = 1;
	    len = x.d.length;

	    if (len < 3) {
	      x = taylorSeries(Ctor, 2, x, x, true);
	    } else {

	      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
	      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
	      // 3 multiplications and 1 addition

	      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
	      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
	      // 4 multiplications and 2 additions

	      // Estimate the optimum number of times to use the argument reduction.
	      k = 1.4 * Math.sqrt(len);
	      k = k > 16 ? 16 : k | 0;

	      x = x.times(Math.pow(5, -k));

	      x = taylorSeries(Ctor, 2, x, x, true);

	      // Reverse argument reduction
	      var sinh2_x,
	        d5 = new Ctor(5),
	        d16 = new Ctor(16),
	        d20 = new Ctor(20);
	      for (; k--;) {
	        sinh2_x = x.times(x);
	        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
	      }
	    }

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return finalise(x, pr, rm, true);
	  };


	  /*
	   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * tanh(x) = sinh(x) / cosh(x)
	   *
	   * tanh(0)         = 0
	   * tanh(-0)        = -0
	   * tanh(Infinity)  = 1
	   * tanh(-Infinity) = -1
	   * tanh(NaN)       = NaN
	   *
	   */
	  P.hyperbolicTangent = P.tanh = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite()) return new Ctor(x.s);
	    if (x.isZero()) return new Ctor(x);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + 7;
	    Ctor.rounding = 1;

	    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
	  };


	  /*
	   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
	   * this Decimal.
	   *
	   * Domain: [-1, 1]
	   * Range: [0, pi]
	   *
	   * acos(x) = pi/2 - asin(x)
	   *
	   * acos(0)       = pi/2
	   * acos(-0)      = pi/2
	   * acos(1)       = 0
	   * acos(-1)      = pi
	   * acos(1/2)     = pi/3
	   * acos(-1/2)    = 2*pi/3
	   * acos(|x| > 1) = NaN
	   * acos(NaN)     = NaN
	   *
	   */
	  P.inverseCosine = P.acos = function () {
	    var halfPi,
	      x = this,
	      Ctor = x.constructor,
	      k = x.abs().cmp(1),
	      pr = Ctor.precision,
	      rm = Ctor.rounding;

	    if (k !== -1) {
	      return k === 0
	        // |x| is 1
	        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
	        // |x| > 1 or x is NaN
	        : new Ctor(NaN);
	    }

	    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

	    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

	    Ctor.precision = pr + 6;
	    Ctor.rounding = 1;

	    x = x.asin();
	    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return halfPi.minus(x);
	  };


	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
	   * value of this Decimal.
	   *
	   * Domain: [1, Infinity]
	   * Range: [0, Infinity]
	   *
	   * acosh(x) = ln(x + sqrt(x^2 - 1))
	   *
	   * acosh(x < 1)     = NaN
	   * acosh(NaN)       = NaN
	   * acosh(Infinity)  = Infinity
	   * acosh(-Infinity) = NaN
	   * acosh(0)         = NaN
	   * acosh(-0)        = NaN
	   * acosh(1)         = 0
	   * acosh(-1)        = NaN
	   *
	   */
	  P.inverseHyperbolicCosine = P.acosh = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
	    if (!x.isFinite()) return new Ctor(x);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
	    Ctor.rounding = 1;
	    external = false;

	    x = x.times(x).minus(1).sqrt().plus(x);

	    external = true;
	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return x.ln();
	  };


	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
	   * of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * asinh(x) = ln(x + sqrt(x^2 + 1))
	   *
	   * asinh(NaN)       = NaN
	   * asinh(Infinity)  = Infinity
	   * asinh(-Infinity) = -Infinity
	   * asinh(0)         = 0
	   * asinh(-0)        = -0
	   *
	   */
	  P.inverseHyperbolicSine = P.asinh = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite() || x.isZero()) return new Ctor(x);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
	    Ctor.rounding = 1;
	    external = false;

	    x = x.times(x).plus(1).sqrt().plus(x);

	    external = true;
	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return x.ln();
	  };


	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
	   * value of this Decimal.
	   *
	   * Domain: [-1, 1]
	   * Range: [-Infinity, Infinity]
	   *
	   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
	   *
	   * atanh(|x| > 1)   = NaN
	   * atanh(NaN)       = NaN
	   * atanh(Infinity)  = NaN
	   * atanh(-Infinity) = NaN
	   * atanh(0)         = 0
	   * atanh(-0)        = -0
	   * atanh(1)         = Infinity
	   * atanh(-1)        = -Infinity
	   *
	   */
	  P.inverseHyperbolicTangent = P.atanh = function () {
	    var pr, rm, wpr, xsd,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite()) return new Ctor(NaN);
	    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    xsd = x.sd();

	    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

	    Ctor.precision = wpr = xsd - x.e;

	    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

	    Ctor.precision = pr + 4;
	    Ctor.rounding = 1;

	    x = x.ln();

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return x.times(0.5);
	  };


	  /*
	   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi/2, pi/2]
	   *
	   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
	   *
	   * asin(0)       = 0
	   * asin(-0)      = -0
	   * asin(1/2)     = pi/6
	   * asin(-1/2)    = -pi/6
	   * asin(1)       = pi/2
	   * asin(-1)      = -pi/2
	   * asin(|x| > 1) = NaN
	   * asin(NaN)     = NaN
	   *
	   * TODO? Compare performance of Taylor series.
	   *
	   */
	  P.inverseSine = P.asin = function () {
	    var halfPi, k,
	      pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (x.isZero()) return new Ctor(x);

	    k = x.abs().cmp(1);
	    pr = Ctor.precision;
	    rm = Ctor.rounding;

	    if (k !== -1) {

	      // |x| is 1
	      if (k === 0) {
	        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	        halfPi.s = x.s;
	        return halfPi;
	      }

	      // |x| > 1 or x is NaN
	      return new Ctor(NaN);
	    }

	    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

	    Ctor.precision = pr + 6;
	    Ctor.rounding = 1;

	    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return x.times(2);
	  };


	  /*
	   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
	   * of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi/2, pi/2]
	   *
	   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	   *
	   * atan(0)         = 0
	   * atan(-0)        = -0
	   * atan(1)         = pi/4
	   * atan(-1)        = -pi/4
	   * atan(Infinity)  = pi/2
	   * atan(-Infinity) = -pi/2
	   * atan(NaN)       = NaN
	   *
	   */
	  P.inverseTangent = P.atan = function () {
	    var i, j, k, n, px, t, r, wpr, x2,
	      x = this,
	      Ctor = x.constructor,
	      pr = Ctor.precision,
	      rm = Ctor.rounding;

	    if (!x.isFinite()) {
	      if (!x.s) return new Ctor(NaN);
	      if (pr + 4 <= PI_PRECISION) {
	        r = getPi(Ctor, pr + 4, rm).times(0.5);
	        r.s = x.s;
	        return r;
	      }
	    } else if (x.isZero()) {
	      return new Ctor(x);
	    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
	      r = getPi(Ctor, pr + 4, rm).times(0.25);
	      r.s = x.s;
	      return r;
	    }

	    Ctor.precision = wpr = pr + 10;
	    Ctor.rounding = 1;

	    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

	    // Argument reduction
	    // Ensure |x| < 0.42
	    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

	    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

	    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

	    external = false;

	    j = Math.ceil(wpr / LOG_BASE);
	    n = 1;
	    x2 = x.times(x);
	    r = new Ctor(x);
	    px = x;

	    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	    for (; i !== -1;) {
	      px = px.times(x2);
	      t = r.minus(px.div(n += 2));

	      px = px.times(x2);
	      r = t.plus(px.div(n += 2));

	      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
	    }

	    if (k) r = r.times(2 << (k - 1));

	    external = true;

	    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
	  };


	  /*
	   * Return true if the value of this Decimal is a finite number, otherwise return false.
	   *
	   */
	  P.isFinite = function () {
	    return !!this.d;
	  };


	  /*
	   * Return true if the value of this Decimal is an integer, otherwise return false.
	   *
	   */
	  P.isInteger = P.isInt = function () {
	    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
	  };


	  /*
	   * Return true if the value of this Decimal is NaN, otherwise return false.
	   *
	   */
	  P.isNaN = function () {
	    return !this.s;
	  };


	  /*
	   * Return true if the value of this Decimal is negative, otherwise return false.
	   *
	   */
	  P.isNegative = P.isNeg = function () {
	    return this.s < 0;
	  };


	  /*
	   * Return true if the value of this Decimal is positive, otherwise return false.
	   *
	   */
	  P.isPositive = P.isPos = function () {
	    return this.s > 0;
	  };


	  /*
	   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	   *
	   */
	  P.isZero = function () {
	    return !!this.d && this.d[0] === 0;
	  };


	  /*
	   * Return true if the value of this Decimal is less than `y`, otherwise return false.
	   *
	   */
	  P.lessThan = P.lt = function (y) {
	    return this.cmp(y) < 0;
	  };


	  /*
	   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	   *
	   */
	  P.lessThanOrEqualTo = P.lte = function (y) {
	    return this.cmp(y) < 1;
	  };


	  /*
	   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * If no base is specified, return log[10](arg).
	   *
	   * log[base](arg) = ln(arg) / ln(base)
	   *
	   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
	   * otherwise:
	   *
	   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	   * between the result and the correctly rounded result will be one ulp (unit in the last place).
	   *
	   * log[-b](a)       = NaN
	   * log[0](a)        = NaN
	   * log[1](a)        = NaN
	   * log[NaN](a)      = NaN
	   * log[Infinity](a) = NaN
	   * log[b](0)        = -Infinity
	   * log[b](-0)       = -Infinity
	   * log[b](-a)       = NaN
	   * log[b](1)        = 0
	   * log[b](Infinity) = Infinity
	   * log[b](NaN)      = NaN
	   *
	   * [base] {number|string|Decimal} The base of the logarithm.
	   *
	   */
	  P.logarithm = P.log = function (base) {
	    var isBase10, d, denominator, k, inf, num, sd, r,
	      arg = this,
	      Ctor = arg.constructor,
	      pr = Ctor.precision,
	      rm = Ctor.rounding,
	      guard = 5;

	    // Default base is 10.
	    if (base == null) {
	      base = new Ctor(10);
	      isBase10 = true;
	    } else {
	      base = new Ctor(base);
	      d = base.d;

	      // Return NaN if base is negative, or non-finite, or is 0 or 1.
	      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

	      isBase10 = base.eq(10);
	    }

	    d = arg.d;

	    // Is arg negative, non-finite, 0 or 1?
	    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
	      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
	    }

	    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
	    // integer power of 10.
	    if (isBase10) {
	      if (d.length > 1) {
	        inf = true;
	      } else {
	        for (k = d[0]; k % 10 === 0;) k /= 10;
	        inf = k !== 1;
	      }
	    }

	    external = false;
	    sd = pr + guard;
	    num = naturalLogarithm(arg, sd);
	    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

	    // The result will have 5 rounding digits.
	    r = divide(num, denominator, sd, 1);

	    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	    // calculate 10 further digits.
	    //
	    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
	    // that the result is above or below the boundary. Otherwise, if after calculating the 10
	    // further digits, the last 14 are nines, round up and assume the result is exact.
	    // Also assume the result is exact if the last 14 are zero.
	    //
	    // Example of a result that will be incorrectly rounded:
	    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
	    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
	    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
	    // place is still 2.6.
	    if (checkRoundingDigits(r.d, k = pr, rm)) {

	      do {
	        sd += 10;
	        num = naturalLogarithm(arg, sd);
	        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
	        r = divide(num, denominator, sd, 1);

	        if (!inf) {

	          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
	            r = finalise(r, pr + 1, 0);
	          }

	          break;
	        }
	      } while (checkRoundingDigits(r.d, k += 10, rm));
	    }

	    external = true;

	    return finalise(r, pr, rm);
	  };


	  /*
	   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
	   *
	   * arguments {number|string|Decimal}
	   *
	  P.max = function () {
	    Array.prototype.push.call(arguments, this);
	    return maxOrMin(this.constructor, arguments, 'lt');
	  };
	   */


	  /*
	   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
	   *
	   * arguments {number|string|Decimal}
	   *
	  P.min = function () {
	    Array.prototype.push.call(arguments, this);
	    return maxOrMin(this.constructor, arguments, 'gt');
	  };
	   */


	  /*
	   *  n - 0 = n
	   *  n - N = N
	   *  n - I = -I
	   *  0 - n = -n
	   *  0 - 0 = 0
	   *  0 - N = N
	   *  0 - I = -I
	   *  N - n = N
	   *  N - 0 = N
	   *  N - N = N
	   *  N - I = N
	   *  I - n = I
	   *  I - 0 = I
	   *  I - N = N
	   *  I - I = N
	   *
	   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */
	  P.minus = P.sub = function (y) {
	    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
	      x = this,
	      Ctor = x.constructor;

	    y = new Ctor(y);

	    // If either is not finite...
	    if (!x.d || !y.d) {

	      // Return NaN if either is NaN.
	      if (!x.s || !y.s) y = new Ctor(NaN);

	      // Return y negated if x is finite and y is ±Infinity.
	      else if (x.d) y.s = -y.s;

	      // Return x if y is finite and x is ±Infinity.
	      // Return x if both are ±Infinity with different signs.
	      // Return NaN if both are ±Infinity with the same sign.
	      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

	      return y;
	    }

	    // If signs differ...
	    if (x.s != y.s) {
	      y.s = -y.s;
	      return x.plus(y);
	    }

	    xd = x.d;
	    yd = y.d;
	    pr = Ctor.precision;
	    rm = Ctor.rounding;

	    // If either is zero...
	    if (!xd[0] || !yd[0]) {

	      // Return y negated if x is zero and y is non-zero.
	      if (yd[0]) y.s = -y.s;

	      // Return x if y is zero and x is non-zero.
	      else if (xd[0]) y = new Ctor(x);

	      // Return zero if both are zero.
	      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
	      else return new Ctor(rm === 3 ? -0 : 0);

	      return external ? finalise(y, pr, rm) : y;
	    }

	    // x and y are finite, non-zero numbers with the same sign.

	    // Calculate base 1e7 exponents.
	    e = mathfloor(y.e / LOG_BASE);
	    xe = mathfloor(x.e / LOG_BASE);

	    xd = xd.slice();
	    k = xe - e;

	    // If base 1e7 exponents differ...
	    if (k) {
	      xLTy = k < 0;

	      if (xLTy) {
	        d = xd;
	        k = -k;
	        len = yd.length;
	      } else {
	        d = yd;
	        e = xe;
	        len = xd.length;
	      }

	      // Numbers with massively different exponents would result in a very high number of
	      // zeros needing to be prepended, but this can be avoided while still ensuring correct
	      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
	      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

	      if (k > i) {
	        k = i;
	        d.length = 1;
	      }

	      // Prepend zeros to equalise exponents.
	      d.reverse();
	      for (i = k; i--;) d.push(0);
	      d.reverse();

	    // Base 1e7 exponents equal.
	    } else {

	      // Check digits to determine which is the bigger number.

	      i = xd.length;
	      len = yd.length;
	      xLTy = i < len;
	      if (xLTy) len = i;

	      for (i = 0; i < len; i++) {
	        if (xd[i] != yd[i]) {
	          xLTy = xd[i] < yd[i];
	          break;
	        }
	      }

	      k = 0;
	    }

	    if (xLTy) {
	      d = xd;
	      xd = yd;
	      yd = d;
	      y.s = -y.s;
	    }

	    len = xd.length;

	    // Append zeros to `xd` if shorter.
	    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
	    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

	    // Subtract yd from xd.
	    for (i = yd.length; i > k;) {

	      if (xd[--i] < yd[i]) {
	        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
	        --xd[j];
	        xd[i] += BASE;
	      }

	      xd[i] -= yd[i];
	    }

	    // Remove trailing zeros.
	    for (; xd[--len] === 0;) xd.pop();

	    // Remove leading zeros and adjust exponent accordingly.
	    for (; xd[0] === 0; xd.shift()) --e;

	    // Zero?
	    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

	    y.d = xd;
	    y.e = getBase10Exponent(xd, e);

	    return external ? finalise(y, pr, rm) : y;
	  };


	  /*
	   *   n % 0 =  N
	   *   n % N =  N
	   *   n % I =  n
	   *   0 % n =  0
	   *  -0 % n = -0
	   *   0 % 0 =  N
	   *   0 % N =  N
	   *   0 % I =  0
	   *   N % n =  N
	   *   N % 0 =  N
	   *   N % N =  N
	   *   N % I =  N
	   *   I % n =  N
	   *   I % 0 =  N
	   *   I % N =  N
	   *   I % I =  N
	   *
	   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * The result depends on the modulo mode.
	   *
	   */
	  P.modulo = P.mod = function (y) {
	    var q,
	      x = this,
	      Ctor = x.constructor;

	    y = new Ctor(y);

	    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
	    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

	    // Return x if y is ±Infinity or x is ±0.
	    if (!y.d || x.d && !x.d[0]) {
	      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
	    }

	    // Prevent rounding of intermediate calculations.
	    external = false;

	    if (Ctor.modulo == 9) {

	      // Euclidian division: q = sign(y) * floor(x / abs(y))
	      // result = x - q * y    where  0 <= result < abs(y)
	      q = divide(x, y.abs(), 0, 3, 1);
	      q.s *= y.s;
	    } else {
	      q = divide(x, y, 0, Ctor.modulo, 1);
	    }

	    q = q.times(y);

	    external = true;

	    return x.minus(q);
	  };


	  /*
	   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */
	  P.naturalExponential = P.exp = function () {
	    return naturalExponential(this);
	  };


	  /*
	   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	   * rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   */
	  P.naturalLogarithm = P.ln = function () {
	    return naturalLogarithm(this);
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	   * -1.
	   *
	   */
	  P.negated = P.neg = function () {
	    var x = new this.constructor(this);
	    x.s = -x.s;
	    return finalise(x);
	  };


	  /*
	   *  n + 0 = n
	   *  n + N = N
	   *  n + I = I
	   *  0 + n = n
	   *  0 + 0 = 0
	   *  0 + N = N
	   *  0 + I = I
	   *  N + n = N
	   *  N + 0 = N
	   *  N + N = N
	   *  N + I = N
	   *  I + n = I
	   *  I + 0 = I
	   *  I + N = N
	   *  I + I = I
	   *
	   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */
	  P.plus = P.add = function (y) {
	    var carry, d, e, i, k, len, pr, rm, xd, yd,
	      x = this,
	      Ctor = x.constructor;

	    y = new Ctor(y);

	    // If either is not finite...
	    if (!x.d || !y.d) {

	      // Return NaN if either is NaN.
	      if (!x.s || !y.s) y = new Ctor(NaN);

	      // Return x if y is finite and x is ±Infinity.
	      // Return x if both are ±Infinity with the same sign.
	      // Return NaN if both are ±Infinity with different signs.
	      // Return y if x is finite and y is ±Infinity.
	      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

	      return y;
	    }

	     // If signs differ...
	    if (x.s != y.s) {
	      y.s = -y.s;
	      return x.minus(y);
	    }

	    xd = x.d;
	    yd = y.d;
	    pr = Ctor.precision;
	    rm = Ctor.rounding;

	    // If either is zero...
	    if (!xd[0] || !yd[0]) {

	      // Return x if y is zero.
	      // Return y if y is non-zero.
	      if (!yd[0]) y = new Ctor(x);

	      return external ? finalise(y, pr, rm) : y;
	    }

	    // x and y are finite, non-zero numbers with the same sign.

	    // Calculate base 1e7 exponents.
	    k = mathfloor(x.e / LOG_BASE);
	    e = mathfloor(y.e / LOG_BASE);

	    xd = xd.slice();
	    i = k - e;

	    // If base 1e7 exponents differ...
	    if (i) {

	      if (i < 0) {
	        d = xd;
	        i = -i;
	        len = yd.length;
	      } else {
	        d = yd;
	        e = k;
	        len = xd.length;
	      }

	      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
	      k = Math.ceil(pr / LOG_BASE);
	      len = k > len ? k + 1 : len + 1;

	      if (i > len) {
	        i = len;
	        d.length = 1;
	      }

	      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	      d.reverse();
	      for (; i--;) d.push(0);
	      d.reverse();
	    }

	    len = xd.length;
	    i = yd.length;

	    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
	    if (len - i < 0) {
	      i = len;
	      d = yd;
	      yd = xd;
	      xd = d;
	    }

	    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
	    for (carry = 0; i;) {
	      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
	      xd[i] %= BASE;
	    }

	    if (carry) {
	      xd.unshift(carry);
	      ++e;
	    }

	    // Remove trailing zeros.
	    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	    for (len = xd.length; xd[--len] == 0;) xd.pop();

	    y.d = xd;
	    y.e = getBase10Exponent(xd, e);

	    return external ? finalise(y, pr, rm) : y;
	  };


	  /*
	   * Return the number of significant digits of the value of this Decimal.
	   *
	   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	   *
	   */
	  P.precision = P.sd = function (z) {
	    var k,
	      x = this;

	    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

	    if (x.d) {
	      k = getPrecision(x.d);
	      if (z && x.e + 1 > k) k = x.e + 1;
	    } else {
	      k = NaN;
	    }

	    return k;
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	   * rounding mode `rounding`.
	   *
	   */
	  P.round = function () {
	    var x = this,
	      Ctor = x.constructor;

	    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
	  };


	  /*
	   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * sin(x) = x - x^3/3! + x^5/5! - ...
	   *
	   * sin(0)         = 0
	   * sin(-0)        = -0
	   * sin(Infinity)  = NaN
	   * sin(-Infinity) = NaN
	   * sin(NaN)       = NaN
	   *
	   */
	  P.sine = P.sin = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite()) return new Ctor(NaN);
	    if (x.isZero()) return new Ctor(x);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	    Ctor.rounding = 1;

	    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
	  };


	  /*
	   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   *  sqrt(-n) =  N
	   *  sqrt(N)  =  N
	   *  sqrt(-I) =  N
	   *  sqrt(I)  =  I
	   *  sqrt(0)  =  0
	   *  sqrt(-0) = -0
	   *
	   */
	  P.squareRoot = P.sqrt = function () {
	    var m, n, sd, r, rep, t,
	      x = this,
	      d = x.d,
	      e = x.e,
	      s = x.s,
	      Ctor = x.constructor;

	    // Negative/NaN/Infinity/zero?
	    if (s !== 1 || !d || !d[0]) {
	      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
	    }

	    external = false;

	    // Initial estimate.
	    s = Math.sqrt(+x);

	    // Math.sqrt underflow/overflow?
	    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	    if (s == 0 || s == 1 / 0) {
	      n = digitsToString(d);

	      if ((n.length + e) % 2 == 0) n += '0';
	      s = Math.sqrt(n);
	      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

	      if (s == 1 / 0) {
	        n = '1e' + e;
	      } else {
	        n = s.toExponential();
	        n = n.slice(0, n.indexOf('e') + 1) + e;
	      }

	      r = new Ctor(n);
	    } else {
	      r = new Ctor(s.toString());
	    }

	    sd = (e = Ctor.precision) + 3;

	    // Newton-Raphson iteration.
	    for (;;) {
	      t = r;
	      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

	      // TODO? Replace with for-loop and checkRoundingDigits.
	      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	        n = n.slice(sd - 3, sd + 1);

	        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	        // 4999, i.e. approaching a rounding boundary, continue the iteration.
	        if (n == '9999' || !rep && n == '4999') {

	          // On the first iteration only, check to see if rounding up gives the exact result as the
	          // nines may infinitely repeat.
	          if (!rep) {
	            finalise(t, e + 1, 0);

	            if (t.times(t).eq(x)) {
	              r = t;
	              break;
	            }
	          }

	          sd += 4;
	          rep = 1;
	        } else {

	          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	          // If not, then there are further digits and m will be truthy.
	          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	            // Truncate to the first rounding digit.
	            finalise(r, e + 1, 1);
	            m = !r.times(r).eq(x);
	          }

	          break;
	        }
	      }
	    }

	    external = true;

	    return finalise(r, e, Ctor.rounding, m);
	  };


	  /*
	   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * tan(0)         = 0
	   * tan(-0)        = -0
	   * tan(Infinity)  = NaN
	   * tan(-Infinity) = NaN
	   * tan(NaN)       = NaN
	   *
	   */
	  P.tangent = P.tan = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;

	    if (!x.isFinite()) return new Ctor(NaN);
	    if (x.isZero()) return new Ctor(x);

	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + 10;
	    Ctor.rounding = 1;

	    x = x.sin();
	    x.s = 1;
	    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

	    Ctor.precision = pr;
	    Ctor.rounding = rm;

	    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
	  };


	  /*
	   *  n * 0 = 0
	   *  n * N = N
	   *  n * I = I
	   *  0 * n = 0
	   *  0 * 0 = 0
	   *  0 * N = N
	   *  0 * I = N
	   *  N * n = N
	   *  N * 0 = N
	   *  N * N = N
	   *  N * I = N
	   *  I * n = I
	   *  I * 0 = N
	   *  I * N = N
	   *  I * I = I
	   *
	   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   */
	  P.times = P.mul = function (y) {
	    var carry, e, i, k, r, rL, t, xdL, ydL,
	      x = this,
	      Ctor = x.constructor,
	      xd = x.d,
	      yd = (y = new Ctor(y)).d;

	    y.s *= x.s;

	     // If either is NaN, ±Infinity or ±0...
	    if (!xd || !xd[0] || !yd || !yd[0]) {

	      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

	        // Return NaN if either is NaN.
	        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
	        ? NaN

	        // Return ±Infinity if either is ±Infinity.
	        // Return ±0 if either is ±0.
	        : !xd || !yd ? y.s / 0 : y.s * 0);
	    }

	    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
	    xdL = xd.length;
	    ydL = yd.length;

	    // Ensure xd points to the longer array.
	    if (xdL < ydL) {
	      r = xd;
	      xd = yd;
	      yd = r;
	      rL = xdL;
	      xdL = ydL;
	      ydL = rL;
	    }

	    // Initialise the result array with zeros.
	    r = [];
	    rL = xdL + ydL;
	    for (i = rL; i--;) r.push(0);

	    // Multiply!
	    for (i = ydL; --i >= 0;) {
	      carry = 0;
	      for (k = xdL + i; k > i;) {
	        t = r[k] + yd[i] * xd[k - i - 1] + carry;
	        r[k--] = t % BASE | 0;
	        carry = t / BASE | 0;
	      }

	      r[k] = (r[k] + carry) % BASE | 0;
	    }

	    // Remove trailing zeros.
	    for (; !r[--rL];) r.pop();

	    if (carry) ++e;
	    else r.shift();

	    y.d = r;
	    y.e = getBase10Exponent(r, e);

	    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
	  };


	  /*
	   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toBinary = function (sd, rm) {
	    return toStringBinary(this, 2, sd, rm);
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	   *
	   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toDecimalPlaces = P.toDP = function (dp, rm) {
	    var x = this,
	      Ctor = x.constructor;

	    x = new Ctor(x);
	    if (dp === void 0) return x;

	    checkInt32(dp, 0, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    return finalise(x, dp + x.e + 1, rm);
	  };


	  /*
	   * Return a string representing the value of this Decimal in exponential notation rounded to
	   * `dp` fixed decimal places using rounding mode `rounding`.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toExponential = function (dp, rm) {
	    var str,
	      x = this,
	      Ctor = x.constructor;

	    if (dp === void 0) {
	      str = finiteToString(x, true);
	    } else {
	      checkInt32(dp, 0, MAX_DIGITS);

	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);

	      x = finalise(new Ctor(x), dp + 1, rm);
	      str = finiteToString(x, true, dp + 1);
	    }

	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };


	  /*
	   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	   * omitted.
	   *
	   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	   * (-0).toFixed(3) is '0.000'.
	   * (-0.5).toFixed(0) is '-0'.
	   *
	   */
	  P.toFixed = function (dp, rm) {
	    var str, y,
	      x = this,
	      Ctor = x.constructor;

	    if (dp === void 0) {
	      str = finiteToString(x);
	    } else {
	      checkInt32(dp, 0, MAX_DIGITS);

	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);

	      y = finalise(new Ctor(x), dp + x.e + 1, rm);
	      str = finiteToString(y, false, dp + y.e + 1);
	    }

	    // To determine whether to add the minus sign look at the value before it was rounded,
	    // i.e. look at `x` rather than `y`.
	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };


	  /*
	   * Return an array representing the value of this Decimal as a simple fraction with an integer
	   * numerator and an integer denominator.
	   *
	   * The denominator will be a positive non-zero value less than or equal to the specified maximum
	   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
	   * value necessary to represent the number exactly.
	   *
	   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	   *
	   */
	  P.toFraction = function (maxD) {
	    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
	      x = this,
	      xd = x.d,
	      Ctor = x.constructor;

	    if (!xd) return new Ctor(x);

	    n1 = d0 = new Ctor(1);
	    d1 = n0 = new Ctor(0);

	    d = new Ctor(d1);
	    e = d.e = getPrecision(xd) - x.e - 1;
	    k = e % LOG_BASE;
	    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

	    if (maxD == null) {

	      // d is 10**e, the minimum max-denominator needed.
	      maxD = e > 0 ? d : n1;
	    } else {
	      n = new Ctor(maxD);
	      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
	      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
	    }

	    external = false;
	    n = new Ctor(digitsToString(xd));
	    pr = Ctor.precision;
	    Ctor.precision = e = xd.length * LOG_BASE * 2;

	    for (;;)  {
	      q = divide(n, d, 0, 1, 1);
	      d2 = d0.plus(q.times(d1));
	      if (d2.cmp(maxD) == 1) break;
	      d0 = d1;
	      d1 = d2;
	      d2 = n1;
	      n1 = n0.plus(q.times(d2));
	      n0 = d2;
	      d2 = d;
	      d = n.minus(q.times(d2));
	      n = d2;
	    }

	    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
	    n0 = n0.plus(d2.times(n1));
	    d0 = d0.plus(d2.times(d1));
	    n0.s = n1.s = x.s;

	    // Determine which fraction is closer to x, n0/d0 or n1/d1?
	    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
	        ? [n1, d1] : [n0, d0];

	    Ctor.precision = pr;
	    external = true;

	    return r;
	  };


	  /*
	   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toHexadecimal = P.toHex = function (sd, rm) {
	    return toStringBinary(this, 16, sd, rm);
	  };



	  /*
	   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
	   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
	   *
	   * The return value will always have the same sign as this Decimal, unless either this Decimal
	   * or `y` is NaN, in which case the return value will be also be NaN.
	   *
	   * The return value is not affected by the value of `precision`.
	   *
	   * y {number|string|Decimal} The magnitude to round to a multiple of.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * 'toNearest() rounding mode not an integer: {rm}'
	   * 'toNearest() rounding mode out of range: {rm}'
	   *
	   */
	  P.toNearest = function (y, rm) {
	    var x = this,
	      Ctor = x.constructor;

	    x = new Ctor(x);

	    if (y == null) {

	      // If x is not finite, return x.
	      if (!x.d) return x;

	      y = new Ctor(1);
	      rm = Ctor.rounding;
	    } else {
	      y = new Ctor(y);
	      if (rm === void 0) {
	        rm = Ctor.rounding;
	      } else {
	        checkInt32(rm, 0, 8);
	      }

	      // If x is not finite, return x if y is not NaN, else NaN.
	      if (!x.d) return y.s ? x : y;

	      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
	      if (!y.d) {
	        if (y.s) y.s = x.s;
	        return y;
	      }
	    }

	    // If y is not zero, calculate the nearest multiple of y to x.
	    if (y.d[0]) {
	      external = false;
	      x = divide(x, y, 0, rm, 1).times(y);
	      external = true;
	      finalise(x);

	    // If y is zero, return zero with the sign of x.
	    } else {
	      y.s = x.s;
	      x = y;
	    }

	    return x;
	  };


	  /*
	   * Return the value of this Decimal converted to a number primitive.
	   * Zero keeps its sign.
	   *
	   */
	  P.toNumber = function () {
	    return +this;
	  };


	  /*
	   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toOctal = function (sd, rm) {
	    return toStringBinary(this, 8, sd, rm);
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
	   * to `precision` significant digits using rounding mode `rounding`.
	   *
	   * ECMAScript compliant.
	   *
	   *   pow(x, NaN)                           = NaN
	   *   pow(x, ±0)                            = 1

	   *   pow(NaN, non-zero)                    = NaN
	   *   pow(abs(x) > 1, +Infinity)            = +Infinity
	   *   pow(abs(x) > 1, -Infinity)            = +0
	   *   pow(abs(x) == 1, ±Infinity)           = NaN
	   *   pow(abs(x) < 1, +Infinity)            = +0
	   *   pow(abs(x) < 1, -Infinity)            = +Infinity
	   *   pow(+Infinity, y > 0)                 = +Infinity
	   *   pow(+Infinity, y < 0)                 = +0
	   *   pow(-Infinity, odd integer > 0)       = -Infinity
	   *   pow(-Infinity, even integer > 0)      = +Infinity
	   *   pow(-Infinity, odd integer < 0)       = -0
	   *   pow(-Infinity, even integer < 0)      = +0
	   *   pow(+0, y > 0)                        = +0
	   *   pow(+0, y < 0)                        = +Infinity
	   *   pow(-0, odd integer > 0)              = -0
	   *   pow(-0, even integer > 0)             = +0
	   *   pow(-0, odd integer < 0)              = -Infinity
	   *   pow(-0, even integer < 0)             = +Infinity
	   *   pow(finite x < 0, finite non-integer) = NaN
	   *
	   * For non-integer or very large exponents pow(x, y) is calculated using
	   *
	   *   x^y = exp(y*ln(x))
	   *
	   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	   * probability of an incorrectly rounded result
	   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	   * i.e. 1 in 250,000,000,000,000
	   *
	   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	   *
	   * y {number|string|Decimal} The power to which to raise this Decimal.
	   *
	   */
	  P.toPower = P.pow = function (y) {
	    var e, k, pr, r, rm, s,
	      x = this,
	      Ctor = x.constructor,
	      yn = +(y = new Ctor(y));

	    // Either ±Infinity, NaN or ±0?
	    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

	    x = new Ctor(x);

	    if (x.eq(1)) return x;

	    pr = Ctor.precision;
	    rm = Ctor.rounding;

	    if (y.eq(1)) return finalise(x, pr, rm);

	    // y exponent
	    e = mathfloor(y.e / LOG_BASE);

	    // If y is a small integer use the 'exponentiation by squaring' algorithm.
	    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
	      r = intPow(Ctor, x, k, pr);
	      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
	    }

	    s = x.s;

	    // if x is negative
	    if (s < 0) {

	      // if y is not an integer
	      if (e < y.d.length - 1) return new Ctor(NaN);

	      // Result is positive if x is negative and the last digit of integer y is even.
	      if ((y.d[e] & 1) == 0) s = 1;

	      // if x.eq(-1)
	      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
	        x.s = s;
	        return x;
	      }
	    }

	    // Estimate result exponent.
	    // x^y = 10^e,  where e = y * log10(x)
	    // log10(x) = log10(x_significand) + x_exponent
	    // log10(x_significand) = ln(x_significand) / ln(10)
	    k = mathpow(+x, yn);
	    e = k == 0 || !isFinite(k)
	      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
	      : new Ctor(k + '').e;

	    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

	    // Overflow/underflow?
	    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

	    external = false;
	    Ctor.rounding = x.s = 1;

	    // Estimate the extra guard digits needed to ensure five correct rounding digits from
	    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
	    // new Decimal(2.32456).pow('2087987436534566.46411')
	    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
	    k = Math.min(12, (e + '').length);

	    // r = x^y = exp(y*ln(x))
	    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

	    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
	    if (r.d) {

	      // Truncate to the required precision plus five rounding digits.
	      r = finalise(r, pr + 5, 1);

	      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
	      // the result.
	      if (checkRoundingDigits(r.d, pr, rm)) {
	        e = pr + 10;

	        // Truncate to the increased precision plus five rounding digits.
	        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

	        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
	        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
	          r = finalise(r, pr + 1, 0);
	        }
	      }
	    }

	    r.s = s;
	    external = true;
	    Ctor.rounding = rm;

	    return finalise(r, pr, rm);
	  };


	  /*
	   * Return a string representing the value of this Decimal rounded to `sd` significant digits
	   * using rounding mode `rounding`.
	   *
	   * Return exponential notation if `sd` is less than the number of digits necessary to represent
	   * the integer part of the value in normal notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toPrecision = function (sd, rm) {
	    var str,
	      x = this,
	      Ctor = x.constructor;

	    if (sd === void 0) {
	      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	    } else {
	      checkInt32(sd, 1, MAX_DIGITS);

	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);

	      x = finalise(new Ctor(x), sd, rm);
	      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
	    }

	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	   * omitted.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * 'toSD() digits out of range: {sd}'
	   * 'toSD() digits not an integer: {sd}'
	   * 'toSD() rounding mode not an integer: {rm}'
	   * 'toSD() rounding mode out of range: {rm}'
	   *
	   */
	  P.toSignificantDigits = P.toSD = function (sd, rm) {
	    var x = this,
	      Ctor = x.constructor;

	    if (sd === void 0) {
	      sd = Ctor.precision;
	      rm = Ctor.rounding;
	    } else {
	      checkInt32(sd, 1, MAX_DIGITS);

	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	    }

	    return finalise(new Ctor(x), sd, rm);
	  };


	  /*
	   * Return a string representing the value of this Decimal.
	   *
	   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	   *
	   */
	  P.toString = function () {
	    var x = this,
	      Ctor = x.constructor,
	      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };


	  /*
	   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	   *
	   */
	  P.truncated = P.trunc = function () {
	    return finalise(new this.constructor(this), this.e + 1, 1);
	  };


	  /*
	   * Return a string representing the value of this Decimal.
	   * Unlike `toString`, negative zero will include the minus sign.
	   *
	   */
	  P.valueOf = P.toJSON = function () {
	    var x = this,
	      Ctor = x.constructor,
	      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

	    return x.isNeg() ? '-' + str : str;
	  };


	  /*
	  // Add aliases to match BigDecimal method names.
	  // P.add = P.plus;
	  P.subtract = P.minus;
	  P.multiply = P.times;
	  P.divide = P.div;
	  P.remainder = P.mod;
	  P.compareTo = P.cmp;
	  P.negate = P.neg;
	   */


	  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


	  /*
	   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
	   *                           finiteToString, naturalExponential, naturalLogarithm
	   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
	   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
	   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
	   *  convertBase              toStringBinary, parseOther
	   *  cos                      P.cos
	   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
	   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
	   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
	   *                           taylorSeries, atan2, parseOther
	   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
	   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
	   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
	   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
	   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
	   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
	   *                           naturalLogarithm, ceil, floor, round, trunc
	   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
	   *                           toStringBinary
	   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
	   *  getLn10                  P.logarithm, naturalLogarithm
	   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
	   *  getPrecision             P.precision, P.toFraction
	   *  getZeroString            digitsToString, finiteToString
	   *  intPow                   P.toPower, parseOther
	   *  isOdd                    toLessThanHalfPi
	   *  maxOrMin                 max, min
	   *  naturalExponential       P.naturalExponential, P.toPower
	   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
	   *                           P.toPower, naturalExponential
	   *  nonFiniteToString        finiteToString, toStringBinary
	   *  parseDecimal             Decimal
	   *  parseOther               Decimal
	   *  sin                      P.sin
	   *  taylorSeries             P.cosh, P.sinh, cos, sin
	   *  toLessThanHalfPi         P.cos, P.sin
	   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
	   *  truncate                 intPow
	   *
	   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
	   *                           naturalLogarithm, config, parseOther, random, Decimal
	   */


	  function digitsToString(d) {
	    var i, k, ws,
	      indexOfLastWord = d.length - 1,
	      str = '',
	      w = d[0];

	    if (indexOfLastWord > 0) {
	      str += w;
	      for (i = 1; i < indexOfLastWord; i++) {
	        ws = d[i] + '';
	        k = LOG_BASE - ws.length;
	        if (k) str += getZeroString(k);
	        str += ws;
	      }

	      w = d[i];
	      ws = w + '';
	      k = LOG_BASE - ws.length;
	      if (k) str += getZeroString(k);
	    } else if (w === 0) {
	      return '0';
	    }

	    // Remove trailing zeros of last w.
	    for (; w % 10 === 0;) w /= 10;

	    return str + w;
	  }


	  function checkInt32(i, min, max) {
	    if (i !== ~~i || i < min || i > max) {
	      throw Error(invalidArgument + i);
	    }
	  }


	  /*
	   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
	   * `repeating == null` if caller is `log` or `pow`,
	   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
	   */
	  function checkRoundingDigits(d, i, rm, repeating) {
	    var di, k, r, rd;

	    // Get the length of the first word of the array d.
	    for (k = d[0]; k >= 10; k /= 10) --i;

	    // Is the rounding digit in the first word of d?
	    if (--i < 0) {
	      i += LOG_BASE;
	      di = 0;
	    } else {
	      di = Math.ceil((i + 1) / LOG_BASE);
	      i %= LOG_BASE;
	    }

	    // i is the index (0 - 6) of the rounding digit.
	    // E.g. if within the word 3487563 the first rounding digit is 5,
	    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
	    k = mathpow(10, LOG_BASE - i);
	    rd = d[di] % k | 0;

	    if (repeating == null) {
	      if (i < 3) {
	        if (i == 0) rd = rd / 100 | 0;
	        else if (i == 1) rd = rd / 10 | 0;
	        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
	      } else {
	        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
	          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
	            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
	      }
	    } else {
	      if (i < 4) {
	        if (i == 0) rd = rd / 1000 | 0;
	        else if (i == 1) rd = rd / 100 | 0;
	        else if (i == 2) rd = rd / 10 | 0;
	        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
	      } else {
	        r = ((repeating || rm < 4) && rd + 1 == k ||
	        (!repeating && rm > 3) && rd + 1 == k / 2) &&
	          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
	      }
	    }

	    return r;
	  }


	  // Convert string of `baseIn` to an array of numbers of `baseOut`.
	  // Eg. convertBase('255', 10, 16) returns [15, 15].
	  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	  function convertBase(str, baseIn, baseOut) {
	    var j,
	      arr = [0],
	      arrL,
	      i = 0,
	      strL = str.length;

	    for (; i < strL;) {
	      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
	      arr[0] += NUMERALS.indexOf(str.charAt(i++));
	      for (j = 0; j < arr.length; j++) {
	        if (arr[j] > baseOut - 1) {
	          if (arr[j + 1] === void 0) arr[j + 1] = 0;
	          arr[j + 1] += arr[j] / baseOut | 0;
	          arr[j] %= baseOut;
	        }
	      }
	    }

	    return arr.reverse();
	  }


	  /*
	   * cos(x) = 1 - x^2/2! + x^4/4! - ...
	   * |x| < pi/2
	   *
	   */
	  function cosine(Ctor, x) {
	    var k, y,
	      len = x.d.length;

	    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
	    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

	    // Estimate the optimum number of times to use the argument reduction.
	    if (len < 32) {
	      k = Math.ceil(len / 3);
	      y = Math.pow(4, -k).toString();
	    } else {
	      k = 16;
	      y = '2.3283064365386962890625e-10';
	    }

	    Ctor.precision += k;

	    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

	    // Reverse argument reduction
	    for (var i = k; i--;) {
	      var cos2x = x.times(x);
	      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
	    }

	    Ctor.precision -= k;

	    return x;
	  }


	  /*
	   * Perform division in the specified base.
	   */
	  var divide = (function () {

	    // Assumes non-zero x and k, and hence non-zero result.
	    function multiplyInteger(x, k, base) {
	      var temp,
	        carry = 0,
	        i = x.length;

	      for (x = x.slice(); i--;) {
	        temp = x[i] * k + carry;
	        x[i] = temp % base | 0;
	        carry = temp / base | 0;
	      }

	      if (carry) x.unshift(carry);

	      return x;
	    }

	    function compare(a, b, aL, bL) {
	      var i, r;

	      if (aL != bL) {
	        r = aL > bL ? 1 : -1;
	      } else {
	        for (i = r = 0; i < aL; i++) {
	          if (a[i] != b[i]) {
	            r = a[i] > b[i] ? 1 : -1;
	            break;
	          }
	        }
	      }

	      return r;
	    }

	    function subtract(a, b, aL, base) {
	      var i = 0;

	      // Subtract b from a.
	      for (; aL--;) {
	        a[aL] -= i;
	        i = a[aL] < b[aL] ? 1 : 0;
	        a[aL] = i * base + a[aL] - b[aL];
	      }

	      // Remove leading zeros.
	      for (; !a[0] && a.length > 1;) a.shift();
	    }

	    return function (x, y, pr, rm, dp, base) {
	      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
	        yL, yz,
	        Ctor = x.constructor,
	        sign = x.s == y.s ? 1 : -1,
	        xd = x.d,
	        yd = y.d;

	      // Either NaN, Infinity or 0?
	      if (!xd || !xd[0] || !yd || !yd[0]) {

	        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
	          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

	          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
	          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
	      }

	      if (base) {
	        logBase = 1;
	        e = x.e - y.e;
	      } else {
	        base = BASE;
	        logBase = LOG_BASE;
	        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
	      }

	      yL = yd.length;
	      xL = xd.length;
	      q = new Ctor(sign);
	      qd = q.d = [];

	      // Result exponent may be one less than e.
	      // The digit array of a Decimal from toStringBinary may have trailing zeros.
	      for (i = 0; yd[i] == (xd[i] || 0); i++);

	      if (yd[i] > (xd[i] || 0)) e--;

	      if (pr == null) {
	        sd = pr = Ctor.precision;
	        rm = Ctor.rounding;
	      } else if (dp) {
	        sd = pr + (x.e - y.e) + 1;
	      } else {
	        sd = pr;
	      }

	      if (sd < 0) {
	        qd.push(1);
	        more = true;
	      } else {

	        // Convert precision in number of base 10 digits to base 1e7 digits.
	        sd = sd / logBase + 2 | 0;
	        i = 0;

	        // divisor < 1e7
	        if (yL == 1) {
	          k = 0;
	          yd = yd[0];
	          sd++;

	          // k is the carry.
	          for (; (i < xL || k) && sd--; i++) {
	            t = k * base + (xd[i] || 0);
	            qd[i] = t / yd | 0;
	            k = t % yd | 0;
	          }

	          more = k || i < xL;

	        // divisor >= 1e7
	        } else {

	          // Normalise xd and yd so highest order digit of yd is >= base/2
	          k = base / (yd[0] + 1) | 0;

	          if (k > 1) {
	            yd = multiplyInteger(yd, k, base);
	            xd = multiplyInteger(xd, k, base);
	            yL = yd.length;
	            xL = xd.length;
	          }

	          xi = yL;
	          rem = xd.slice(0, yL);
	          remL = rem.length;

	          // Add zeros to make remainder as long as divisor.
	          for (; remL < yL;) rem[remL++] = 0;

	          yz = yd.slice();
	          yz.unshift(0);
	          yd0 = yd[0];

	          if (yd[1] >= base / 2) ++yd0;

	          do {
	            k = 0;

	            // Compare divisor and remainder.
	            cmp = compare(yd, rem, yL, remL);

	            // If divisor < remainder.
	            if (cmp < 0) {

	              // Calculate trial digit, k.
	              rem0 = rem[0];
	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	              // k will be how many times the divisor goes into the current remainder.
	              k = rem0 / yd0 | 0;

	              //  Algorithm:
	              //  1. product = divisor * trial digit (k)
	              //  2. if product > remainder: product -= divisor, k--
	              //  3. remainder -= product
	              //  4. if product was < remainder at 2:
	              //    5. compare new remainder and divisor
	              //    6. If remainder > divisor: remainder -= divisor, k++

	              if (k > 1) {
	                if (k >= base) k = base - 1;

	                // product = divisor * trial digit.
	                prod = multiplyInteger(yd, k, base);
	                prodL = prod.length;
	                remL = rem.length;

	                // Compare product and remainder.
	                cmp = compare(prod, rem, prodL, remL);

	                // product > remainder.
	                if (cmp == 1) {
	                  k--;

	                  // Subtract divisor from product.
	                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
	                }
	              } else {

	                // cmp is -1.
	                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
	                if (k == 0) cmp = k = 1;
	                prod = yd.slice();
	              }

	              prodL = prod.length;
	              if (prodL < remL) prod.unshift(0);

	              // Subtract product from remainder.
	              subtract(rem, prod, remL, base);

	              // If product was < previous remainder.
	              if (cmp == -1) {
	                remL = rem.length;

	                // Compare divisor and new remainder.
	                cmp = compare(yd, rem, yL, remL);

	                // If divisor < new remainder, subtract divisor from remainder.
	                if (cmp < 1) {
	                  k++;

	                  // Subtract divisor from remainder.
	                  subtract(rem, yL < remL ? yz : yd, remL, base);
	                }
	              }

	              remL = rem.length;
	            } else if (cmp === 0) {
	              k++;
	              rem = [0];
	            }    // if cmp === 1, k will be 0

	            // Add the next digit, k, to the result array.
	            qd[i++] = k;

	            // Update the remainder.
	            if (cmp && rem[0]) {
	              rem[remL++] = xd[xi] || 0;
	            } else {
	              rem = [xd[xi]];
	              remL = 1;
	            }

	          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

	          more = rem[0] !== void 0;
	        }

	        // Leading zero?
	        if (!qd[0]) qd.shift();
	      }

	      // logBase is 1 when divide is being used for base conversion.
	      if (logBase == 1) {
	        q.e = e;
	        inexact = more;
	      } else {

	        // To calculate q.e, first get the number of digits of qd[0].
	        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
	        q.e = i + e * logBase - 1;

	        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
	      }

	      return q;
	    };
	  })();


	  /*
	   * Round `x` to `sd` significant digits using rounding mode `rm`.
	   * Check for over/under-flow.
	   */
	   function finalise(x, sd, rm, isTruncated) {
	    var digits, i, j, k, rd, roundUp, w, xd, xdi,
	      Ctor = x.constructor;

	    // Don't round if sd is null or undefined.
	    out: if (sd != null) {
	      xd = x.d;

	      // Infinity/NaN.
	      if (!xd) return x;

	      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	      // w: the word of xd containing rd, a base 1e7 number.
	      // xdi: the index of w within xd.
	      // digits: the number of digits of w.
	      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	      // they had leading zeros)
	      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

	      // Get the length of the first word of the digits array xd.
	      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
	      i = sd - digits;

	      // Is the rounding digit in the first word of xd?
	      if (i < 0) {
	        i += LOG_BASE;
	        j = sd;
	        w = xd[xdi = 0];

	        // Get the rounding digit at index j of w.
	        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
	      } else {
	        xdi = Math.ceil((i + 1) / LOG_BASE);
	        k = xd.length;
	        if (xdi >= k) {
	          if (isTruncated) {

	            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
	            for (; k++ <= xdi;) xd.push(0);
	            w = rd = 0;
	            digits = 1;
	            i %= LOG_BASE;
	            j = i - LOG_BASE + 1;
	          } else {
	            break out;
	          }
	        } else {
	          w = k = xd[xdi];

	          // Get the number of digits of w.
	          for (digits = 1; k >= 10; k /= 10) digits++;

	          // Get the index of rd within w.
	          i %= LOG_BASE;

	          // Get the index of rd within w, adjusted for leading zeros.
	          // The number of leading zeros of w is given by LOG_BASE - digits.
	          j = i - LOG_BASE + digits;

	          // Get the rounding digit at index j of w.
	          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
	        }
	      }

	      // Are there any non-zero digits after the rounding digit?
	      isTruncated = isTruncated || sd < 0 ||
	        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

	      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
	      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
	      // will give 714.

	      roundUp = rm < 4
	        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

	          // Check whether the digit to the left of the rounding digit is odd.
	          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
	            rm == (x.s < 0 ? 8 : 7));

	      if (sd < 1 || !xd[0]) {
	        xd.length = 0;
	        if (roundUp) {

	          // Convert sd to decimal places.
	          sd -= x.e + 1;

	          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
	          x.e = -sd || 0;
	        } else {

	          // Zero.
	          xd[0] = x.e = 0;
	        }

	        return x;
	      }

	      // Remove excess digits.
	      if (i == 0) {
	        xd.length = xdi;
	        k = 1;
	        xdi--;
	      } else {
	        xd.length = xdi + 1;
	        k = mathpow(10, LOG_BASE - i);

	        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	        // j > 0 means i > number of leading zeros of w.
	        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
	      }

	      if (roundUp) {
	        for (;;) {

	          // Is the digit to be rounded up in the first word of xd?
	          if (xdi == 0) {

	            // i will be the length of xd[0] before k is added.
	            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
	            j = xd[0] += k;
	            for (k = 1; j >= 10; j /= 10) k++;

	            // if i != k the length has increased.
	            if (i != k) {
	              x.e++;
	              if (xd[0] == BASE) xd[0] = 1;
	            }

	            break;
	          } else {
	            xd[xdi] += k;
	            if (xd[xdi] != BASE) break;
	            xd[xdi--] = 0;
	            k = 1;
	          }
	        }
	      }

	      // Remove trailing zeros.
	      for (i = xd.length; xd[--i] === 0;) xd.pop();
	    }

	    if (external) {

	      // Overflow?
	      if (x.e > Ctor.maxE) {

	        // Infinity.
	        x.d = null;
	        x.e = NaN;

	      // Underflow?
	      } else if (x.e < Ctor.minE) {

	        // Zero.
	        x.e = 0;
	        x.d = [0];
	        // Ctor.underflow = true;
	      } // else Ctor.underflow = false;
	    }

	    return x;
	  }


	  function finiteToString(x, isExp, sd) {
	    if (!x.isFinite()) return nonFiniteToString(x);
	    var k,
	      e = x.e,
	      str = digitsToString(x.d),
	      len = str.length;

	    if (isExp) {
	      if (sd && (k = sd - len) > 0) {
	        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
	      } else if (len > 1) {
	        str = str.charAt(0) + '.' + str.slice(1);
	      }

	      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
	    } else if (e < 0) {
	      str = '0.' + getZeroString(-e - 1) + str;
	      if (sd && (k = sd - len) > 0) str += getZeroString(k);
	    } else if (e >= len) {
	      str += getZeroString(e + 1 - len);
	      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
	    } else {
	      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
	      if (sd && (k = sd - len) > 0) {
	        if (e + 1 === len) str += '.';
	        str += getZeroString(k);
	      }
	    }

	    return str;
	  }


	  // Calculate the base 10 exponent from the base 1e7 exponent.
	  function getBase10Exponent(digits, e) {
	    var w = digits[0];

	    // Add the number of digits of the first word of the digits array.
	    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
	    return e;
	  }


	  function getLn10(Ctor, sd, pr) {
	    if (sd > LN10_PRECISION) {

	      // Reset global state in case the exception is caught.
	      external = true;
	      if (pr) Ctor.precision = pr;
	      throw Error(precisionLimitExceeded);
	    }
	    return finalise(new Ctor(LN10), sd, 1, true);
	  }


	  function getPi(Ctor, sd, rm) {
	    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
	    return finalise(new Ctor(PI), sd, rm, true);
	  }


	  function getPrecision(digits) {
	    var w = digits.length - 1,
	      len = w * LOG_BASE + 1;

	    w = digits[w];

	    // If non-zero...
	    if (w) {

	      // Subtract the number of trailing zeros of the last word.
	      for (; w % 10 == 0; w /= 10) len--;

	      // Add the number of digits of the first word.
	      for (w = digits[0]; w >= 10; w /= 10) len++;
	    }

	    return len;
	  }


	  function getZeroString(k) {
	    var zs = '';
	    for (; k--;) zs += '0';
	    return zs;
	  }


	  /*
	   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
	   * integer of type number.
	   *
	   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
	   *
	   */
	  function intPow(Ctor, x, n, pr) {
	    var isTruncated,
	      r = new Ctor(1),

	      // Max n of 9007199254740991 takes 53 loop iterations.
	      // Maximum digits array length; leaves [28, 34] guard digits.
	      k = Math.ceil(pr / LOG_BASE + 4);

	    external = false;

	    for (;;) {
	      if (n % 2) {
	        r = r.times(x);
	        if (truncate(r.d, k)) isTruncated = true;
	      }

	      n = mathfloor(n / 2);
	      if (n === 0) {

	        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
	        n = r.d.length - 1;
	        if (isTruncated && r.d[n] === 0) ++r.d[n];
	        break;
	      }

	      x = x.times(x);
	      truncate(x.d, k);
	    }

	    external = true;

	    return r;
	  }


	  function isOdd(n) {
	    return n.d[n.d.length - 1] & 1;
	  }


	  /*
	   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
	   */
	  function maxOrMin(Ctor, args, ltgt) {
	    var y,
	      x = new Ctor(args[0]),
	      i = 0;

	    for (; ++i < args.length;) {
	      y = new Ctor(args[i]);
	      if (!y.s) {
	        x = y;
	        break;
	      } else if (x[ltgt](y)) {
	        x = y;
	      }
	    }

	    return x;
	  }


	  /*
	   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
	   * digits.
	   *
	   * Taylor/Maclaurin series.
	   *
	   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	   *
	   * Argument reduction:
	   *   Repeat x = x / 32, k += 5, until |x| < 0.1
	   *   exp(x) = exp(x / 2^k)^(2^k)
	   *
	   * Previously, the argument was initially reduced by
	   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	   * found to be slower than just dividing repeatedly by 32 as above.
	   *
	   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	   *
	   *  exp(Infinity)  = Infinity
	   *  exp(-Infinity) = 0
	   *  exp(NaN)       = NaN
	   *  exp(±0)        = 1
	   *
	   *  exp(x) is non-terminating for any finite, non-zero x.
	   *
	   *  The result will always be correctly rounded.
	   *
	   */
	  function naturalExponential(x, sd) {
	    var denominator, guard, j, pow, sum, t, wpr,
	      rep = 0,
	      i = 0,
	      k = 0,
	      Ctor = x.constructor,
	      rm = Ctor.rounding,
	      pr = Ctor.precision;

	    // 0/NaN/Infinity?
	    if (!x.d || !x.d[0] || x.e > 17) {

	      return new Ctor(x.d
	        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
	        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
	    }

	    if (sd == null) {
	      external = false;
	      wpr = pr;
	    } else {
	      wpr = sd;
	    }

	    t = new Ctor(0.03125);

	    // while abs(x) >= 0.1
	    while (x.e > -2) {

	      // x = x / 2^5
	      x = x.times(t);
	      k += 5;
	    }

	    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
	    // necessary to ensure the first 4 rounding digits are correct.
	    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
	    wpr += guard;
	    denominator = pow = sum = new Ctor(1);
	    Ctor.precision = wpr;

	    for (;;) {
	      pow = finalise(pow.times(x), wpr, 1);
	      denominator = denominator.times(++i);
	      t = sum.plus(divide(pow, denominator, wpr, 1));

	      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	        j = k;
	        while (j--) sum = finalise(sum.times(sum), wpr, 1);

	        // Check to see if the first 4 rounding digits are [49]999.
	        // If so, repeat the summation with a higher precision, otherwise
	        // e.g. with precision: 18, rounding: 1
	        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
	        // `wpr - guard` is the index of first rounding digit.
	        if (sd == null) {

	          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	            Ctor.precision = wpr += 10;
	            denominator = pow = t = new Ctor(1);
	            i = 0;
	            rep++;
	          } else {
	            return finalise(sum, Ctor.precision = pr, rm, external = true);
	          }
	        } else {
	          Ctor.precision = pr;
	          return sum;
	        }
	      }

	      sum = t;
	    }
	  }


	  /*
	   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
	   * digits.
	   *
	   *  ln(-n)        = NaN
	   *  ln(0)         = -Infinity
	   *  ln(-0)        = -Infinity
	   *  ln(1)         = 0
	   *  ln(Infinity)  = Infinity
	   *  ln(-Infinity) = NaN
	   *  ln(NaN)       = NaN
	   *
	   *  ln(n) (n != 1) is non-terminating.
	   *
	   */
	  function naturalLogarithm(y, sd) {
	    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
	      n = 1,
	      guard = 10,
	      x = y,
	      xd = x.d,
	      Ctor = x.constructor,
	      rm = Ctor.rounding,
	      pr = Ctor.precision;

	    // Is x negative or Infinity, NaN, 0 or 1?
	    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
	      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
	    }

	    if (sd == null) {
	      external = false;
	      wpr = pr;
	    } else {
	      wpr = sd;
	    }

	    Ctor.precision = wpr += guard;
	    c = digitsToString(xd);
	    c0 = c.charAt(0);

	    if (Math.abs(e = x.e) < 1.5e15) {

	      // Argument reduction.
	      // The series converges faster the closer the argument is to 1, so using
	      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	      // later be divided by this number, then separate out the power of 10 using
	      // ln(a*10^b) = ln(a) + b*ln(10).

	      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	      // max n is 6 (gives 0.7 - 1.3)
	      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
	        x = x.times(y);
	        c = digitsToString(x.d);
	        c0 = c.charAt(0);
	        n++;
	      }

	      e = x.e;

	      if (c0 > 1) {
	        x = new Ctor('0.' + c);
	        e++;
	      } else {
	        x = new Ctor(c0 + '.' + c.slice(1));
	      }
	    } else {

	      // The argument reduction method above may result in overflow if the argument y is a massive
	      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	      // function using ln(x*10^e) = ln(x) + e*ln(10).
	      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
	      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
	      Ctor.precision = pr;

	      return sd == null ? finalise(x, pr, rm, external = true) : x;
	    }

	    // x1 is x reduced to a value near 1.
	    x1 = x;

	    // Taylor series.
	    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	    // where x = (y - 1)/(y + 1)    (|x| < 1)
	    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
	    x2 = finalise(x.times(x), wpr, 1);
	    denominator = 3;

	    for (;;) {
	      numerator = finalise(numerator.times(x2), wpr, 1);
	      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

	      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	        sum = sum.times(2);

	        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
	        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
	        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
	        sum = divide(sum, new Ctor(n), wpr, 1);

	        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	        // been repeated previously) and the first 4 rounding digits 9999?
	        // If so, restart the summation with a higher precision, otherwise
	        // e.g. with precision: 12, rounding: 1
	        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
	        // `wpr - guard` is the index of first rounding digit.
	        if (sd == null) {
	          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	            Ctor.precision = wpr += guard;
	            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
	            x2 = finalise(x.times(x), wpr, 1);
	            denominator = rep = 1;
	          } else {
	            return finalise(sum, Ctor.precision = pr, rm, external = true);
	          }
	        } else {
	          Ctor.precision = pr;
	          return sum;
	        }
	      }

	      sum = t;
	      denominator += 2;
	    }
	  }


	  // ±Infinity, NaN.
	  function nonFiniteToString(x) {
	    // Unsigned.
	    return String(x.s * x.s / 0);
	  }


	  /*
	   * Parse the value of a new Decimal `x` from string `str`.
	   */
	  function parseDecimal(x, str) {
	    var e, i, len;

	    // Decimal point?
	    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	    // Exponential form?
	    if ((i = str.search(/e/i)) > 0) {

	      // Determine exponent.
	      if (e < 0) e = i;
	      e += +str.slice(i + 1);
	      str = str.substring(0, i);
	    } else if (e < 0) {

	      // Integer.
	      e = str.length;
	    }

	    // Determine leading zeros.
	    for (i = 0; str.charCodeAt(i) === 48; i++);

	    // Determine trailing zeros.
	    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
	    str = str.slice(i, len);

	    if (str) {
	      len -= i;
	      x.e = e = e - i - 1;
	      x.d = [];

	      // Transform base

	      // e is the base 10 exponent.
	      // i is where to slice str to get the first word of the digits array.
	      i = (e + 1) % LOG_BASE;
	      if (e < 0) i += LOG_BASE;

	      if (i < len) {
	        if (i) x.d.push(+str.slice(0, i));
	        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
	        str = str.slice(i);
	        i = LOG_BASE - str.length;
	      } else {
	        i -= len;
	      }

	      for (; i--;) str += '0';
	      x.d.push(+str);

	      if (external) {

	        // Overflow?
	        if (x.e > x.constructor.maxE) {

	          // Infinity.
	          x.d = null;
	          x.e = NaN;

	        // Underflow?
	        } else if (x.e < x.constructor.minE) {

	          // Zero.
	          x.e = 0;
	          x.d = [0];
	          // x.constructor.underflow = true;
	        } // else x.constructor.underflow = false;
	      }
	    } else {

	      // Zero.
	      x.e = 0;
	      x.d = [0];
	    }

	    return x;
	  }


	  /*
	   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
	   */
	  function parseOther(x, str) {
	    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

	    if (str === 'Infinity' || str === 'NaN') {
	      if (!+str) x.s = NaN;
	      x.e = NaN;
	      x.d = null;
	      return x;
	    }

	    if (isHex.test(str))  {
	      base = 16;
	      str = str.toLowerCase();
	    } else if (isBinary.test(str))  {
	      base = 2;
	    } else if (isOctal.test(str))  {
	      base = 8;
	    } else {
	      throw Error(invalidArgument + str);
	    }

	    // Is there a binary exponent part?
	    i = str.search(/p/i);

	    if (i > 0) {
	      p = +str.slice(i + 1);
	      str = str.substring(2, i);
	    } else {
	      str = str.slice(2);
	    }

	    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
	    // fraction part will be restored.
	    i = str.indexOf('.');
	    isFloat = i >= 0;
	    Ctor = x.constructor;

	    if (isFloat) {
	      str = str.replace('.', '');
	      len = str.length;
	      i = len - i;

	      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
	      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
	    }

	    xd = convertBase(str, base, BASE);
	    xe = xd.length - 1;

	    // Remove trailing zeros.
	    for (i = xe; xd[i] === 0; --i) xd.pop();
	    if (i < 0) return new Ctor(x.s * 0);
	    x.e = getBase10Exponent(xd, xe);
	    x.d = xd;
	    external = false;

	    // At what precision to perform the division to ensure exact conversion?
	    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
	    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
	    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
	    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
	    // Therefore using 4 * the number of digits of str will always be enough.
	    if (isFloat) x = divide(x, divisor, len * 4);

	    // Multiply by the binary exponent part if present.
	    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
	    external = true;

	    return x;
	  }


	  /*
	   * sin(x) = x - x^3/3! + x^5/5! - ...
	   * |x| < pi/2
	   *
	   */
	  function sine(Ctor, x) {
	    var k,
	      len = x.d.length;

	    if (len < 3) return taylorSeries(Ctor, 2, x, x);

	    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
	    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
	    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

	    // Estimate the optimum number of times to use the argument reduction.
	    k = 1.4 * Math.sqrt(len);
	    k = k > 16 ? 16 : k | 0;

	    // Max k before Math.pow precision loss is 22
	    x = x.times(Math.pow(5, -k));
	    x = taylorSeries(Ctor, 2, x, x);

	    // Reverse argument reduction
	    var sin2_x,
	      d5 = new Ctor(5),
	      d16 = new Ctor(16),
	      d20 = new Ctor(20);
	    for (; k--;) {
	      sin2_x = x.times(x);
	      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
	    }

	    return x;
	  }


	  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
	  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
	    var j, t, u, x2,
	      pr = Ctor.precision,
	      k = Math.ceil(pr / LOG_BASE);

	    external = false;
	    x2 = x.times(x);
	    u = new Ctor(y);

	    for (;;) {
	      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
	      u = isHyperbolic ? y.plus(t) : y.minus(t);
	      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
	      t = u.plus(y);

	      if (t.d[k] !== void 0) {
	        for (j = k; t.d[j] === u.d[j] && j--;);
	        if (j == -1) break;
	      }

	      j = u;
	      u = y;
	      y = t;
	      t = j;
	    }

	    external = true;
	    t.d.length = k + 1;

	    return t;
	  }


	  // Return the absolute value of `x` reduced to less than or equal to half pi.
	  function toLessThanHalfPi(Ctor, x) {
	    var t,
	      isNeg = x.s < 0,
	      pi = getPi(Ctor, Ctor.precision, 1),
	      halfPi = pi.times(0.5);

	    x = x.abs();

	    if (x.lte(halfPi)) {
	      quadrant = isNeg ? 4 : 1;
	      return x;
	    }

	    t = x.divToInt(pi);

	    if (t.isZero()) {
	      quadrant = isNeg ? 3 : 2;
	    } else {
	      x = x.minus(t.times(pi));

	      // 0 <= x < pi
	      if (x.lte(halfPi)) {
	        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
	        return x;
	      }

	      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
	    }

	    return x.minus(pi).abs();
	  }


	  /*
	   * Return the value of Decimal `x` as a string in base `baseOut`.
	   *
	   * If the optional `sd` argument is present include a binary exponent suffix.
	   */
	  function toStringBinary(x, baseOut, sd, rm) {
	    var base, e, i, k, len, roundUp, str, xd, y,
	      Ctor = x.constructor,
	      isExp = sd !== void 0;

	    if (isExp) {
	      checkInt32(sd, 1, MAX_DIGITS);
	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	    } else {
	      sd = Ctor.precision;
	      rm = Ctor.rounding;
	    }

	    if (!x.isFinite()) {
	      str = nonFiniteToString(x);
	    } else {
	      str = finiteToString(x);
	      i = str.indexOf('.');

	      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
	      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
	      // minBinaryExponent = floor(decimalExponent * log[2](10))
	      // log[2](10) = 3.321928094887362347870319429489390175864

	      if (isExp) {
	        base = 2;
	        if (baseOut == 16) {
	          sd = sd * 4 - 3;
	        } else if (baseOut == 8) {
	          sd = sd * 3 - 2;
	        }
	      } else {
	        base = baseOut;
	      }

	      // Convert the number as an integer then divide the result by its base raised to a power such
	      // that the fraction part will be restored.

	      // Non-integer.
	      if (i >= 0) {
	        str = str.replace('.', '');
	        y = new Ctor(1);
	        y.e = str.length - i;
	        y.d = convertBase(finiteToString(y), 10, base);
	        y.e = y.d.length;
	      }

	      xd = convertBase(str, 10, base);
	      e = len = xd.length;

	      // Remove trailing zeros.
	      for (; xd[--len] == 0;) xd.pop();

	      if (!xd[0]) {
	        str = isExp ? '0p+0' : '0';
	      } else {
	        if (i < 0) {
	          e--;
	        } else {
	          x = new Ctor(x);
	          x.d = xd;
	          x.e = e;
	          x = divide(x, y, sd, rm, 0, base);
	          xd = x.d;
	          e = x.e;
	          roundUp = inexact;
	        }

	        // The rounding digit, i.e. the digit after the digit that may be rounded up.
	        i = xd[sd];
	        k = base / 2;
	        roundUp = roundUp || xd[sd + 1] !== void 0;

	        roundUp = rm < 4
	          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
	          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
	            rm === (x.s < 0 ? 8 : 7));

	        xd.length = sd;

	        if (roundUp) {

	          // Rounding up may mean the previous digit has to be rounded up and so on.
	          for (; ++xd[--sd] > base - 1;) {
	            xd[sd] = 0;
	            if (!sd) {
	              ++e;
	              xd.unshift(1);
	            }
	          }
	        }

	        // Determine trailing zeros.
	        for (len = xd.length; !xd[len - 1]; --len);

	        // E.g. [4, 11, 15] becomes 4bf.
	        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

	        // Add binary exponent suffix?
	        if (isExp) {
	          if (len > 1) {
	            if (baseOut == 16 || baseOut == 8) {
	              i = baseOut == 16 ? 4 : 3;
	              for (--len; len % i; len++) str += '0';
	              xd = convertBase(str, base, baseOut);
	              for (len = xd.length; !xd[len - 1]; --len);

	              // xd[0] will always be be 1
	              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
	            } else {
	              str = str.charAt(0) + '.' + str.slice(1);
	            }
	          }

	          str =  str + (e < 0 ? 'p' : 'p+') + e;
	        } else if (e < 0) {
	          for (; ++e;) str = '0' + str;
	          str = '0.' + str;
	        } else {
	          if (++e > len) for (e -= len; e-- ;) str += '0';
	          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
	        }
	      }

	      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
	    }

	    return x.s < 0 ? '-' + str : str;
	  }


	  // Does not strip trailing zeros.
	  function truncate(arr, len) {
	    if (arr.length > len) {
	      arr.length = len;
	      return true;
	    }
	  }


	  // Decimal methods


	  /*
	   *  abs
	   *  acos
	   *  acosh
	   *  add
	   *  asin
	   *  asinh
	   *  atan
	   *  atanh
	   *  atan2
	   *  cbrt
	   *  ceil
	   *  clone
	   *  config
	   *  cos
	   *  cosh
	   *  div
	   *  exp
	   *  floor
	   *  hypot
	   *  ln
	   *  log
	   *  log2
	   *  log10
	   *  max
	   *  min
	   *  mod
	   *  mul
	   *  pow
	   *  random
	   *  round
	   *  set
	   *  sign
	   *  sin
	   *  sinh
	   *  sqrt
	   *  sub
	   *  tan
	   *  tanh
	   *  trunc
	   */


	  /*
	   * Return a new Decimal whose value is the absolute value of `x`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function abs(x) {
	    return new this(x).abs();
	  }


	  /*
	   * Return a new Decimal whose value is the arccosine in radians of `x`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function acos(x) {
	    return new this(x).acos();
	  }


	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function acosh(x) {
	    return new this(x).acosh();
	  }


	  /*
	   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function add(x, y) {
	    return new this(x).plus(y);
	  }


	  /*
	   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function asin(x) {
	    return new this(x).asin();
	  }


	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function asinh(x) {
	    return new this(x).asinh();
	  }


	  /*
	   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function atan(x) {
	    return new this(x).atan();
	  }


	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function atanh(x) {
	    return new this(x).atanh();
	  }


	  /*
	   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
	   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi, pi]
	   *
	   * y {number|string|Decimal} The y-coordinate.
	   * x {number|string|Decimal} The x-coordinate.
	   *
	   * atan2(±0, -0)               = ±pi
	   * atan2(±0, +0)               = ±0
	   * atan2(±0, -x)               = ±pi for x > 0
	   * atan2(±0, x)                = ±0 for x > 0
	   * atan2(-y, ±0)               = -pi/2 for y > 0
	   * atan2(y, ±0)                = pi/2 for y > 0
	   * atan2(±y, -Infinity)        = ±pi for finite y > 0
	   * atan2(±y, +Infinity)        = ±0 for finite y > 0
	   * atan2(±Infinity, x)         = ±pi/2 for finite x
	   * atan2(±Infinity, -Infinity) = ±3*pi/4
	   * atan2(±Infinity, +Infinity) = ±pi/4
	   * atan2(NaN, x) = NaN
	   * atan2(y, NaN) = NaN
	   *
	   */
	  function atan2(y, x) {
	    y = new this(y);
	    x = new this(x);
	    var r,
	      pr = this.precision,
	      rm = this.rounding,
	      wpr = pr + 4;

	    // Either NaN
	    if (!y.s || !x.s) {
	      r = new this(NaN);

	    // Both ±Infinity
	    } else if (!y.d && !x.d) {
	      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
	      r.s = y.s;

	    // x is ±Infinity or y is ±0
	    } else if (!x.d || y.isZero()) {
	      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
	      r.s = y.s;

	    // y is ±Infinity or x is ±0
	    } else if (!y.d || x.isZero()) {
	      r = getPi(this, wpr, 1).times(0.5);
	      r.s = y.s;

	    // Both non-zero and finite
	    } else if (x.s < 0) {
	      this.precision = wpr;
	      this.rounding = 1;
	      r = this.atan(divide(y, x, wpr, 1));
	      x = getPi(this, wpr, 1);
	      this.precision = pr;
	      this.rounding = rm;
	      r = y.s < 0 ? r.minus(x) : r.plus(x);
	    } else {
	      r = this.atan(divide(y, x, wpr, 1));
	    }

	    return r;
	  }


	  /*
	   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function cbrt(x) {
	    return new this(x).cbrt();
	  }


	  /*
	   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function ceil(x) {
	    return finalise(x = new this(x), x.e + 1, 2);
	  }


	  /*
	   * Configure global settings for a Decimal constructor.
	   *
	   * `obj` is an object with one or more of the following properties,
	   *
	   *   precision  {number}
	   *   rounding   {number}
	   *   toExpNeg   {number}
	   *   toExpPos   {number}
	   *   maxE       {number}
	   *   minE       {number}
	   *   modulo     {number}
	   *   crypto     {boolean|number}
	   *   defaults   {true}
	   *
	   * E.g. Decimal.config({ precision: 20, rounding: 4 })
	   *
	   */
	  function config(obj) {
	    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
	    var i, p, v,
	      useDefaults = obj.defaults === true,
	      ps = [
	        'precision', 1, MAX_DIGITS,
	        'rounding', 0, 8,
	        'toExpNeg', -EXP_LIMIT, 0,
	        'toExpPos', 0, EXP_LIMIT,
	        'maxE', 0, EXP_LIMIT,
	        'minE', -EXP_LIMIT, 0,
	        'modulo', 0, 9
	      ];

	    for (i = 0; i < ps.length; i += 3) {
	      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
	      if ((v = obj[p]) !== void 0) {
	        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
	        else throw Error(invalidArgument + p + ': ' + v);
	      }
	    }

	    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
	    if ((v = obj[p]) !== void 0) {
	      if (v === true || v === false || v === 0 || v === 1) {
	        if (v) {
	          if (typeof crypto != 'undefined' && crypto &&
	            (crypto.getRandomValues || crypto.randomBytes)) {
	            this[p] = true;
	          } else {
	            throw Error(cryptoUnavailable);
	          }
	        } else {
	          this[p] = false;
	        }
	      } else {
	        throw Error(invalidArgument + p + ': ' + v);
	      }
	    }

	    return this;
	  }


	  /*
	   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function cos(x) {
	    return new this(x).cos();
	  }


	  /*
	   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function cosh(x) {
	    return new this(x).cosh();
	  }


	  /*
	   * Create and return a Decimal constructor with the same configuration properties as this Decimal
	   * constructor.
	   *
	   */
	  function clone(obj) {
	    var i, p, ps;

	    /*
	     * The Decimal constructor and exported function.
	     * Return a new Decimal instance.
	     *
	     * v {number|string|Decimal} A numeric value.
	     *
	     */
	    function Decimal(v) {
	      var e, i, t,
	        x = this;

	      // Decimal called without new.
	      if (!(x instanceof Decimal)) return new Decimal(v);

	      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	      // which points to Object.
	      x.constructor = Decimal;

	      // Duplicate.
	      if (v instanceof Decimal) {
	        x.s = v.s;
	        x.e = v.e;
	        x.d = (v = v.d) ? v.slice() : v;
	        return;
	      }

	      t = typeof v;

	      if (t === 'number') {
	        if (v === 0) {
	          x.s = 1 / v < 0 ? -1 : 1;
	          x.e = 0;
	          x.d = [0];
	          return;
	        }

	        if (v < 0) {
	          v = -v;
	          x.s = -1;
	        } else {
	          x.s = 1;
	        }

	        // Fast path for small integers.
	        if (v === ~~v && v < 1e7) {
	          for (e = 0, i = v; i >= 10; i /= 10) e++;
	          x.e = e;
	          x.d = [v];
	          return;

	        // Infinity, NaN.
	        } else if (v * 0 !== 0) {
	          if (!v) x.s = NaN;
	          x.e = NaN;
	          x.d = null;
	          return;
	        }

	        return parseDecimal(x, v.toString());

	      } else if (t !== 'string') {
	        throw Error(invalidArgument + v);
	      }

	      // Minus sign?
	      if (v.charCodeAt(0) === 45) {
	        v = v.slice(1);
	        x.s = -1;
	      } else {
	        x.s = 1;
	      }

	      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
	    }

	    Decimal.prototype = P;

	    Decimal.ROUND_UP = 0;
	    Decimal.ROUND_DOWN = 1;
	    Decimal.ROUND_CEIL = 2;
	    Decimal.ROUND_FLOOR = 3;
	    Decimal.ROUND_HALF_UP = 4;
	    Decimal.ROUND_HALF_DOWN = 5;
	    Decimal.ROUND_HALF_EVEN = 6;
	    Decimal.ROUND_HALF_CEIL = 7;
	    Decimal.ROUND_HALF_FLOOR = 8;
	    Decimal.EUCLID = 9;

	    Decimal.config = Decimal.set = config;
	    Decimal.clone = clone;
	    Decimal.isDecimal = isDecimalInstance;

	    Decimal.abs = abs;
	    Decimal.acos = acos;
	    Decimal.acosh = acosh;        // ES6
	    Decimal.add = add;
	    Decimal.asin = asin;
	    Decimal.asinh = asinh;        // ES6
	    Decimal.atan = atan;
	    Decimal.atanh = atanh;        // ES6
	    Decimal.atan2 = atan2;
	    Decimal.cbrt = cbrt;          // ES6
	    Decimal.ceil = ceil;
	    Decimal.cos = cos;
	    Decimal.cosh = cosh;          // ES6
	    Decimal.div = div;
	    Decimal.exp = exp;
	    Decimal.floor = floor;
	    Decimal.hypot = hypot;        // ES6
	    Decimal.ln = ln;
	    Decimal.log = log;
	    Decimal.log10 = log10;        // ES6
	    Decimal.log2 = log2;          // ES6
	    Decimal.max = max;
	    Decimal.min = min;
	    Decimal.mod = mod;
	    Decimal.mul = mul;
	    Decimal.pow = pow;
	    Decimal.random = random;
	    Decimal.round = round;
	    Decimal.sign = sign;          // ES6
	    Decimal.sin = sin;
	    Decimal.sinh = sinh;          // ES6
	    Decimal.sqrt = sqrt;
	    Decimal.sub = sub;
	    Decimal.tan = tan;
	    Decimal.tanh = tanh;          // ES6
	    Decimal.trunc = trunc;        // ES6

	    if (obj === void 0) obj = {};
	    if (obj) {
	      if (obj.defaults !== true) {
	        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
	        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
	      }
	    }

	    Decimal.config(obj);

	    return Decimal;
	  }


	  /*
	   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function div(x, y) {
	    return new this(x).div(y);
	  }


	  /*
	   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} The power to which to raise the base of the natural log.
	   *
	   */
	  function exp(x) {
	    return new this(x).exp();
	  }


	  /*
	   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function floor(x) {
	    return finalise(x = new this(x), x.e + 1, 3);
	  }


	  /*
	   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
	   * rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
	   *
	   */
	  function hypot() {
	    var i, n,
	      t = new this(0);

	    external = false;

	    for (i = 0; i < arguments.length;) {
	      n = new this(arguments[i++]);
	      if (!n.d) {
	        if (n.s) {
	          external = true;
	          return new this(1 / 0);
	        }
	        t = n;
	      } else if (t.d) {
	        t = t.plus(n.times(n));
	      }
	    }

	    external = true;

	    return t.sqrt();
	  }


	  /*
	   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
	   * otherwise return false.
	   *
	   */
	  function isDecimalInstance(obj) {
	    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
	  }


	  /*
	   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function ln(x) {
	    return new this(x).ln();
	  }


	  /*
	   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
	   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * log[y](x)
	   *
	   * x {number|string|Decimal} The argument of the logarithm.
	   * y {number|string|Decimal} The base of the logarithm.
	   *
	   */
	  function log(x, y) {
	    return new this(x).log(y);
	  }


	  /*
	   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function log2(x) {
	    return new this(x).log(2);
	  }


	  /*
	   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function log10(x) {
	    return new this(x).log(10);
	  }


	  /*
	   * Return a new Decimal whose value is the maximum of the arguments.
	   *
	   * arguments {number|string|Decimal}
	   *
	   */
	  function max() {
	    return maxOrMin(this, arguments, 'lt');
	  }


	  /*
	   * Return a new Decimal whose value is the minimum of the arguments.
	   *
	   * arguments {number|string|Decimal}
	   *
	   */
	  function min() {
	    return maxOrMin(this, arguments, 'gt');
	  }


	  /*
	   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function mod(x, y) {
	    return new this(x).mod(y);
	  }


	  /*
	   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function mul(x, y) {
	    return new this(x).mul(y);
	  }


	  /*
	   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} The base.
	   * y {number|string|Decimal} The exponent.
	   *
	   */
	  function pow(x, y) {
	    return new this(x).pow(y);
	  }


	  /*
	   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
	   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
	   * are produced).
	   *
	   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
	   *
	   */
	  function random(sd) {
	    var d, e, k, n,
	      i = 0,
	      r = new this(1),
	      rd = [];

	    if (sd === void 0) sd = this.precision;
	    else checkInt32(sd, 1, MAX_DIGITS);

	    k = Math.ceil(sd / LOG_BASE);

	    if (!this.crypto) {
	      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

	    // Browsers supporting crypto.getRandomValues.
	    } else if (crypto.getRandomValues) {
	      d = crypto.getRandomValues(new Uint32Array(k));

	      for (; i < k;) {
	        n = d[i];

	        // 0 <= n < 4294967296
	        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
	        if (n >= 4.29e9) {
	          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
	        } else {

	          // 0 <= n <= 4289999999
	          // 0 <= (n % 1e7) <= 9999999
	          rd[i++] = n % 1e7;
	        }
	      }

	    // Node.js supporting crypto.randomBytes.
	    } else if (crypto.randomBytes) {

	      // buffer
	      d = crypto.randomBytes(k *= 4);

	      for (; i < k;) {

	        // 0 <= n < 2147483648
	        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

	        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
	        if (n >= 2.14e9) {
	          crypto.randomBytes(4).copy(d, i);
	        } else {

	          // 0 <= n <= 2139999999
	          // 0 <= (n % 1e7) <= 9999999
	          rd.push(n % 1e7);
	          i += 4;
	        }
	      }

	      i = k / 4;
	    } else {
	      throw Error(cryptoUnavailable);
	    }

	    k = rd[--i];
	    sd %= LOG_BASE;

	    // Convert trailing digits to zeros according to sd.
	    if (k && sd) {
	      n = mathpow(10, LOG_BASE - sd);
	      rd[i] = (k / n | 0) * n;
	    }

	    // Remove trailing words which are zero.
	    for (; rd[i] === 0; i--) rd.pop();

	    // Zero?
	    if (i < 0) {
	      e = 0;
	      rd = [0];
	    } else {
	      e = -1;

	      // Remove leading words which are zero and adjust exponent accordingly.
	      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

	      // Count the digits of the first word of rd to determine leading zeros.
	      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

	      // Adjust the exponent for leading zeros of the first word of rd.
	      if (k < LOG_BASE) e -= LOG_BASE - k;
	    }

	    r.e = e;
	    r.d = rd;

	    return r;
	  }


	  /*
	   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
	   *
	   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function round(x) {
	    return finalise(x = new this(x), x.e + 1, this.rounding);
	  }


	  /*
	   * Return
	   *   1    if x > 0,
	   *  -1    if x < 0,
	   *   0    if x is 0,
	   *  -0    if x is -0,
	   *   NaN  otherwise
	   *
	   */
	  function sign(x) {
	    x = new this(x);
	    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
	  }


	  /*
	   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function sin(x) {
	    return new this(x).sin();
	  }


	  /*
	   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function sinh(x) {
	    return new this(x).sinh();
	  }


	  /*
	   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function sqrt(x) {
	    return new this(x).sqrt();
	  }


	  /*
	   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function sub(x, y) {
	    return new this(x).sub(y);
	  }


	  /*
	   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function tan(x) {
	    return new this(x).tan();
	  }


	  /*
	   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function tanh(x) {
	    return new this(x).tanh();
	  }


	  /*
	   * Return a new Decimal whose value is `x` truncated to an integer.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function trunc(x) {
	    return finalise(x = new this(x), x.e + 1, 1);
	  }


	  // Create and configure initial Decimal constructor.
	  Decimal = clone(DEFAULTS);

	  Decimal['default'] = Decimal.Decimal = Decimal;

	  // Create the internal constants from their string values.
	  LN10 = new Decimal(LN10);
	  PI = new Decimal(PI);


	  // Export.


	  // AMD.
	  if (module.exports) {
	    module.exports = Decimal;

	  // Browser.
	  } else {
	    if (!globalScope) {
	      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;
	    }

	    noConflict = globalScope.Decimal;
	    Decimal.noConflict = function () {
	      globalScope.Decimal = noConflict;
	      return Decimal;
	    };

	    globalScope.Decimal = Decimal;
	  }
	})(commonjsGlobal);
	});

	var BigNumber = createCommonjsModule(function (module, exports) {



	var _decimal2 = _interopRequireDefault(decimal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function factory(type, config, load, typed, math) {
	  var BigNumber = _decimal2.default.clone({ precision: config.precision });

	  /**
	   * Attach type information
	   */
	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;

	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */
	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };

	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */
	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  };

	  // listen for changed in the configuration, automatically apply changed precision
	  math.on('config', function (curr, prev) {
	    if (curr.precision !== prev.precision) {
	      BigNumber.config({ precision: curr.precision });
	    }
	  });

	  return BigNumber;
	}

	exports.name = 'BigNumber';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace
	});

	unwrapExports(BigNumber);
	var BigNumber_1 = BigNumber.name;
	var BigNumber_2 = BigNumber.path;
	var BigNumber_3 = BigNumber.factory;
	var BigNumber_4 = BigNumber.math;

	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */

	var deepMap = function deepMap(array, callback, skipZeros) {
	  if (array && typeof array.map === 'function') {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback, skipZeros);
	    });
	  } else {
	    return callback(array);
	  }
	};

	function factory$2(type, config, load, typed) {
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500                                    // returns number Infinity
	   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */
	  var bignumber = typed('bignumber', {
	    '': function _() {
	      return new type.BigNumber(0);
	    },

	    'number': function number(x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new type.BigNumber(x + '');
	    },

	    'string': function string(x) {
	      return new type.BigNumber(x);
	    },

	    'BigNumber': function BigNumber(x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },

	    'Fraction': function Fraction(x) {
	      return new type.BigNumber(x.n).div(x.d);
	    },

	    'null': function _null(x) {
	      return new type.BigNumber(0);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bignumber);
	    }
	  });

	  bignumber.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)'
	  };

	  return bignumber;
	}

	var name$2 = 'bignumber';
	var factory_1$2 = factory$2;

	var bignumber = {
		name: name$2,
		factory: factory_1$2
	};

	var bignumber$1 = [
	// type
	BigNumber,

	// construction function
	bignumber];

	function factory$3(type, config, load, typed) {
	  /**
	   * Create a boolean or convert a string or number to a boolean.
	   * In case of a number, `true` is returned for non-zero numbers, and `false` in
	   * case of zero.
	   * Strings can be `'true'` or `'false'`, or can contain a number.
	   * When value is a matrix, all elements will be converted to boolean.
	   *
	   * Syntax:
	   *
	   *    math.boolean(x)
	   *
	   * Examples:
	   *
	   *    math.boolean(0)     // returns false
	   *    math.boolean(1)     // returns true
	   *    math.boolean(-3)     // returns true
	   *    math.boolean('true')     // returns true
	   *    math.boolean('false')     // returns false
	   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
	   *
	   * See also:
	   *
	   *    bignumber, complex, index, matrix, string, unit
	   *
	   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
	   * @return {boolean | Array | Matrix} The boolean value
	   */
	  var bool = typed('bool', {
	    '': function _() {
	      return false;
	    },

	    'boolean': function boolean(x) {
	      return x;
	    },

	    'number': function number(x) {
	      return !!x;
	    },

	    'null': function _null(x) {
	      return false;
	    },

	    'BigNumber': function BigNumber(x) {
	      return !x.isZero();
	    },

	    'string': function string(x) {
	      // try case insensitive
	      var lcase = x.toLowerCase();
	      if (lcase === 'true') {
	        return true;
	      } else if (lcase === 'false') {
	        return false;
	      }

	      // test whether value is a valid number
	      var num = Number(x);
	      if (x !== '' && !isNaN(num)) {
	        return !!num;
	      }

	      throw new Error('Cannot convert "' + x + '" to a boolean');
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bool);
	    }
	  });

	  return bool;
	}

	var name$3 = 'boolean';
	var factory_1$3 = factory$3;

	var boolean_1 = {
		name: name$3,
		factory: factory_1$3
	};

	var formatter = createCommonjsModule(function (module, exports) {



	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
	 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
	 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
	 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision = void 0;

	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (typeof options === 'number') {
	      precision = options;
	    } else if (options.precision) {
	      precision = options.precision;
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'auto':
	      // TODO: clean up some day. Deprecated since: 2018-01-24
	      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
	      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
	        var fixedOptions = object.map(options, function (x) {
	          return x;
	        });
	        fixedOptions.exponential = undefined;
	        if (options.exponential.lower !== undefined) {
	          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
	        }
	        if (options.exponential.upper !== undefined) {
	          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
	        }

	        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));

	        return exports.format(value, fixedOptions);
	      }

	      // determine lower and upper bound for exponential notation.
	      // TODO: implement support for upper and lower to be BigNumbers themselves
	      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;

	      // handle special case zero
	      if (value.isZero()) return '0';

	      // determine whether or not to output exponential notation
	      var str = void 0;
	      var exp = value.logarithm();
	      if (exp.gte(lowerExp) && exp.lt(upperExp)) {
	        // normal number notation
	        str = value.toSignificantDigits(precision).toFixed();
	      } else {
	        // exponential notation
	        str = exports.toExponential(value, precision);
	      }

	      // remove trailing zeros after the decimal point
	      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toExponential = function (value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  } else {
	    return value.toExponential();
	  }
	};

	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=undefined] Optional number of decimals after the
	 *                                       decimal point. Undefined by default.
	 */
	exports.toFixed = function (value, precision) {
	  return value.toFixed(precision);
	};
	});
	var formatter_1 = formatter.format;
	var formatter_2 = formatter.toExponential;
	var formatter_3 = formatter.toFixed;

	var string = createCommonjsModule(function (module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var formatNumber = number.format;
	var formatBigNumber = formatter.format;


	/**
	 * Test whether value is a string
	 * @param {*} value
	 * @return {boolean} isString
	 */
	exports.isString = function (value) {
	  return typeof value === 'string';
	};

	/**
	 * Check if a text ends with a certain string.
	 * @param {string} text
	 * @param {string} search
	 */
	exports.endsWith = function (text, search) {
	  var start = text.length - search.length;
	  var end = text.length;
	  return text.substring(start, end) === search;
	};

	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *
	 * When value is a function:
	 *
	 * - When the function has a property `syntax`, it returns this
	 *   syntax description.
	 * - In other cases, a string `'function'` is returned.
	 *
	 * When `value` is an Object:
	 *
	 * - When the object contains a property `format` being a function, this
	 *   function is invoked as `value.format(options)` and the result is returned.
	 * - When the object has its own `toString` method, this method is invoked
	 *   and the result is returned.
	 * - In other cases the function will loop over all object properties and
	 *   return JSON object notation like '{"a": 2, "b": 3}'.
	 *
	 * Example usage:
	 *     math.format(2/7)                // '0.2857142857142857'
	 *     math.format(math.pi, 3)         // '3.14'
	 *     math.format(new Complex(2, 3))  // '2 + 3i'
	 *     math.format('hello')            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @return {string} str
	 */
	exports.format = function (value, options) {
	  if (typeof value === 'number') {
	    return formatNumber(value, options);
	  }

	  if (isBigNumber(value)) {
	    return formatBigNumber(value, options);
	  }

	  // note: we use unsafe duck-typing here to check for Fractions, this is
	  // ok here since we're only invoking toString or concatenating its values
	  if (looksLikeFraction(value)) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return value.s * value.n + '/' + value.d;
	    } else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }

	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }

	  if (exports.isString(value)) {
	    return '"' + value + '"';
	  }

	  if (typeof value === 'function') {
	    return value.syntax ? String(value.syntax) : 'function';
	  }

	  if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    } else if (value && value.toString() !== {}.toString()) {
	      // this object has a non-native toString method, use that one
	      return value.toString();
	    } else {
	      var entries = [];

	      for (var key in value) {
	        if (value.hasOwnProperty(key)) {
	          entries.push('"' + key + '": ' + exports.format(value[key], options));
	        }
	      }

	      return '{' + entries.join(', ') + '}';
	    }
	  }

	  return String(value);
	};

	/**
	 * Stringify a value into a string enclosed in double quotes.
	 * Unescaped double quotes and backslashes inside the value are escaped.
	 * @param {*} value
	 * @return {string}
	 */
	exports.stringify = function (value) {
	  var text = String(value);
	  var escaped = '';
	  var i = 0;
	  while (i < text.length) {
	    var c = text.charAt(i);

	    if (c === '\\') {
	      escaped += c;
	      i++;

	      c = text.charAt(i);
	      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
	        escaped += '\\'; // no valid escape character -> escape it
	      }
	      escaped += c;
	    } else if (c === '"') {
	      escaped += '\\"';
	    } else {
	      escaped += c;
	    }
	    i++;
	  }

	  return '"' + escaped + '"';
	};

	/**
	 * Escape special HTML characters
	 * @param {*} value
	 * @return {string}
	 */
	exports.escape = function (value) {
	  var text = String(value);
	  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

	  return text;
	};

	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */
	function formatArray(array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;
	    for (var i = 0; i < len; i++) {
	      if (i !== 0) {
	        str += ', ';
	      }
	      str += formatArray(array[i], options);
	    }
	    str += ']';
	    return str;
	  } else {
	    return exports.format(array, options);
	  }
	}

	/**
	 * Check whether a value looks like a Fraction (unsafe duck-type check)
	 * @param {*} value
	 * @return {boolean}
	 */
	function looksLikeFraction(value) {
	  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
	}
	});
	var string_1 = string.isString;
	var string_2 = string.endsWith;
	var string_3 = string.format;
	var string_4 = string.stringify;
	var string_5 = string.escape;

	var format = string.format;
	var lazy$1 = object.lazy;

	function factory$4(type, config, load, typed, math) {
	  /**
	   * @constructor Chain
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing chain.done(), which will return
	   * the final value.
	   *
	   * The Chain has a number of special functions:
	   * - done()             Finalize the chained operation and return the
	   *                      chain's value.
	   * - valueOf()          The same as done()
	   * - toString()         Returns a string representation of the chain's value.
	   *
	   * @param {*} [value]
	   */
	  function Chain(value) {
	    if (!(this instanceof Chain)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (type.isChain(value)) {
	      this.value = value.value;
	    } else {
	      this.value = value;
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Chain.prototype.type = 'Chain';
	  Chain.prototype.isChain = true;

	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method valueOf()
	   * @returns {*} value
	   */
	  Chain.prototype.done = function () {
	    return this.value;
	  };

	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method done()
	   * @returns {*} value
	   */
	  Chain.prototype.valueOf = function () {
	    return this.value;
	  };

	  /**
	   * Get a string representation of the value in the chain
	   * @returns {string}
	   */
	  Chain.prototype.toString = function () {
	    return format(this.value);
	  };

	  /**
	   * Get a JSON representation of the chain
	   * @returns {Object}
	   */
	  Chain.prototype.toJSON = function () {
	    return {
	      mathjs: 'Chain',
	      value: this.value
	    };
	  };

	  /**
	   * Instantiate a Chain from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "Chain", value: ...}`,
	   *                       where mathjs is optional
	   * @returns {Chain}
	   */
	  Chain.fromJSON = function (json) {
	    return new Chain(json.value);
	  };

	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {Function} fn      The function to be proxied
	   *                           If fn is no function, it is silently ignored.
	   * @private
	   */
	  function createProxy(name, fn) {
	    if (typeof fn === 'function') {
	      Chain.prototype[name] = chainify(fn);
	    }
	  }

	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {function} resolver   The function resolving with the
	   *                              function to be proxied
	   * @private
	   */
	  function createLazyProxy(name, resolver) {
	    lazy$1(Chain.prototype, name, function outerResolver() {
	      var fn = resolver();
	      if (typeof fn === 'function') {
	        return chainify(fn);
	      }

	      return undefined; // if not a function, ignore
	    });
	  }

	  /**
	   * Make a function chainable
	   * @param {function} fn
	   * @return {Function} chain function
	   * @private
	   */
	  function chainify(fn) {
	    return function () {
	      var args = [this.value]; // `this` will be the context of a Chain instance
	      for (var i = 0; i < arguments.length; i++) {
	        args[i + 1] = arguments[i];
	      }

	      return new Chain(fn.apply(fn, args));
	    };
	  }

	  /**
	   * Create a proxy for a single method, or an object with multiple methods.
	   * Example usage:
	   *
	   *   Chain.createProxy('add', function add (x, y) {...})
	   *   Chain.createProxy({
	   *     add:      function add (x, y) {...},
	   *     subtract: function subtract (x, y) {...}
	   *   }
	   *
	   * @param {string | Object} arg0   A name (string), or an object with
	   *                                 functions
	   * @param {*} [arg1]               A function, when arg0 is a name
	   */
	  Chain.createProxy = function (arg0, arg1) {
	    if (typeof arg0 === 'string') {
	      // createProxy(name, value)
	      createProxy(arg0, arg1);
	    } else {
	      // createProxy(values)
	      for (var prop in arg0) {
	        if (arg0.hasOwnProperty(prop)) {
	          createProxy(prop, arg0[prop]);
	        }
	      }
	    }
	  };

	  // create proxy for everything that is in math.js
	  Chain.createProxy(math);

	  // register on the import event, automatically add a proxy for every imported function.
	  math.on('import', function (name, resolver, path) {
	    if (path === undefined) {
	      // an imported function (not a data type or something special)
	      createLazyProxy(name, resolver);
	    }
	  });

	  return Chain;
	}

	var name$4 = 'Chain';
	var path = 'type';
	var factory_1$4 = factory$4;
	var math$2 = true; // require providing the math namespace as 5th argument
	var lazy_1$1 = false; // we need to register a listener on the import events, so no lazy loading

	var Chain = {
		name: name$4,
		path: path,
		factory: factory_1$4,
		math: math$2,
		lazy: lazy_1$1
	};

	function factory$5(type, config, load, typed) {
	  /**
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing `chain.done()`, which returns
	   * the final value.
	   *
	   * The chain has a number of special functions:
	   *
	   * - `done()`     Finalize the chain and return the chain's value.
	   * - `valueOf()`  The same as `done()`
	   * - `toString()` Executes `math.format()` onto the chain's value, returning
	   *                a string representation of the value.
	   *
	   * Syntax:
	   *
	   *    math.chain(value)
	   *
	   * Examples:
	   *
	   *     math.chain(3)
	   *         .add(4)
	   *         .subtract(2)
	   *         .done()     // 5
	   *
	   *     math.chain( [[1, 2], [3, 4]] )
	   *         .subset(math.index(0, 0), 8)
	   *         .multiply(3)
	   *         .done()     // [[24, 6], [9, 12]]
	   *
	   * @param {*} [value]   A value of any type on which to start a chained operation.
	   * @return {math.type.Chain} The created chain
	   */
	  return typed('chain', {
	    '': function _() {
	      return new type.Chain();
	    },

	    'any': function any(value) {
	      return new type.Chain(value);
	    }
	  });
	}

	var name$5 = 'chain';
	var factory_1$5 = factory$5;

	var chain = {
		name: name$5,
		factory: factory_1$5
	};

	var chain$1 = [
	// type
	Chain,

	// construction function
	chain];

	var complex = createCommonjsModule(function (module, exports) {
	/**
	 * @license Complex.js v2.0.11 11/02/2016
	 *
	 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/

	/**
	 *
	 * This class allows the manipulation of complex numbers.
	 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
	 *
	 * Object form
	 * { re: <real>, im: <imaginary> }
	 * { arg: <angle>, abs: <radius> }
	 * { phi: <angle>, r: <radius> }
	 *
	 * Array / Vector form
	 * [ real, imaginary ]
	 *
	 * Double form
	 * 99.3 - Single double value
	 *
	 * String form
	 * '23.1337' - Simple real number
	 * '15+3i' - a simple complex number
	 * '3-i' - a simple complex number
	 *
	 * Example:
	 *
	 * var c = new Complex('99.3+8i');
	 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
	 *
	 */

	(function(root) {

	  var cosh = function(x) {
	    return (Math.exp(x) + Math.exp(-x)) * 0.5;
	  };

	  var sinh = function(x) {
	    return (Math.exp(x) - Math.exp(-x)) * 0.5;
	  };

	  /**
	   * Calculates cos(x) - 1 using Taylor series if x is small.
	   *
	   * @param {number} x
	   * @returns {number} cos(x) - 1
	   */

	  var cosm1 = function(x) {
	    var limit = Math.PI/4;
	    if (x < -limit || x > limit) {
	      return (Math.cos(x) - 1.0);
	    }

	    var xx = x * x;
	    return xx *
	      (-0.5 + xx *
	        (1/24 + xx *
	          (-1/720 + xx *
	            (1/40320 + xx *
	              (-1/3628800 + xx *
	                (1/4790014600 + xx *
	                  (-1/87178291200 + xx *
	                    (1/20922789888000)
	                  )
	                )
	              )
	            )
	          )
	        )
	      )
	  };

	  var hypot = function(x, y) {

	    var a = Math.abs(x);
	    var b = Math.abs(y);

	    if (a < 3000 && b < 3000) {
	      return Math.sqrt(a * a + b * b);
	    }

	    if (a < b) {
	      a = b;
	      b = x / y;
	    } else {
	      b = y / x;
	    }
	    return a * Math.sqrt(1 + b * b);
	  };

	  var parser_exit = function() {
	    throw SyntaxError('Invalid Param');
	  };

	  /**
	   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
	   *
	   * @param {number} a
	   * @param {number} b
	   * @returns {number}
	   */
	  function logHypot(a, b) {

	    var _a = Math.abs(a);
	    var _b = Math.abs(b);

	    if (a === 0) {
	      return Math.log(_b);
	    }

	    if (b === 0) {
	      return Math.log(_a);
	    }

	    if (_a < 3000 && _b < 3000) {
	      return Math.log(a * a + b * b) * 0.5;
	    }

	    /* I got 4 ideas to compute this property without overflow:
	     *
	     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
	     *
	     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

	     Math.log(a * a + b * b) / 2

	     *
	     *
	     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

	     var fn = function(a, b) {
	     a = Math.abs(a);
	     b = Math.abs(b);
	     var t = Math.min(a, b);
	     a = Math.max(a, b);
	     t = t / a;

	     return Math.log(a) + Math.log(1 + t * t) / 2;
	     };

	     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

	     Math.log(a / Math.cos(Math.atan2(b, a)))

	     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

	     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

	     */

	    return Math.log(a / Math.cos(Math.atan2(b, a)));
	  }

	  var parse = function(a, b) {

	    var z = {'re': 0, 'im': 0};

	    if (a === undefined || a === null) {
	      z['re'] =
	              z['im'] = 0;
	    } else if (b !== undefined) {
	      z['re'] = a;
	      z['im'] = b;
	    } else
	      switch (typeof a) {

	        case 'object':

	          if ('im' in a && 're' in a) {
	            z['re'] = a['re'];
	            z['im'] = a['im'];
	          } else if ('abs' in a && 'arg' in a) {
	            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
	              return Complex['INFINITY'];
	            }
	            z['re'] = a['abs'] * Math.cos(a['arg']);
	            z['im'] = a['abs'] * Math.sin(a['arg']);
	          } else if ('r' in a && 'phi' in a) {
	            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
	              return Complex['INFINITY'];
	            }
	            z['re'] = a['r'] * Math.cos(a['phi']);
	            z['im'] = a['r'] * Math.sin(a['phi']);
	          } else if (a.length === 2) { // Quick array check
	            z['re'] = a[0];
	            z['im'] = a[1];
	          } else {
	            parser_exit();
	          }
	          break;

	        case 'string':

	          z['im'] = /* void */
	                  z['re'] = 0;

	          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
	          var plus = 1;
	          var minus = 0;

	          if (tokens === null) {
	            parser_exit();
	          }

	          for (var i = 0; i < tokens.length; i++) {

	            var c = tokens[i];

	            if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
	              plus++;
	            } else if (c === '-') {
	              minus++;
	            } else if (c === 'i' || c === 'I') {

	              if (plus + minus === 0) {
	                parser_exit();
	              }

	              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
	                i++;
	              } else {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
	              }
	              plus = minus = 0;

	            } else {

	              if (plus + minus === 0 || isNaN(c)) {
	                parser_exit();
	              }

	              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
	                i++;
	              } else {
	                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
	              }
	              plus = minus = 0;
	            }
	          }

	          // Still something on the stack
	          if (plus + minus > 0) {
	            parser_exit();
	          }
	          break;

	        case 'number':
	          z['im'] = 0;
	          z['re'] = a;
	          break;

	        default:
	          parser_exit();
	      }

	    return z;
	  };

	  /**
	   * @constructor
	   * @returns {Complex}
	   */
	  function Complex(a, b) {

	    if (!(this instanceof Complex)) {
	      return new Complex(a, b);
	    }

	    var z = parse(a, b);

	    this['re'] = z['re'];
	    this['im'] = z['im'];
	  }

	  Complex.prototype = {

	    're': 0,
	    'im': 0,

	    /**
	     * Calculates the sign of a complex number, which is a normalized complex
	     *
	     * @returns {Complex}
	     */
	    'sign': function() {

	      var abs = this['abs']();

	      return new Complex(
	              this['re'] / abs,
	              this['im'] / abs);
	    },

	    /**
	     * Adds two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'add': function(a, b) {

	      var z = new Complex(a, b);

	      // Infinity + Infinity = NaN
	      if (this['isInfinite']() && z['isInfinite']()) {
	        return Complex['NAN'];
	      }

	      // Infinity + z = Infinity { where z != Infinity }
	      if (this['isInfinite']() || z['isInfinite']()) {
	        return Complex['INFINITY'];
	      }

	      return new Complex(
	              this['re'] + z['re'],
	              this['im'] + z['im']);
	    },

	    /**
	     * Subtracts two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'sub': function(a, b) {

	      var z = new Complex(a, b);

	      // Infinity - Infinity = NaN
	      if (this['isInfinite']() && z['isInfinite']()) {
	        return Complex['NAN'];
	      }

	      // Infinity - z = Infinity { where z != Infinity }
	      if (this['isInfinite']() || z['isInfinite']()) {
	        return Complex['INFINITY'];
	      }

	      return new Complex(
	              this['re'] - z['re'],
	              this['im'] - z['im']);
	    },

	    /**
	     * Multiplies two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'mul': function(a, b) {

	      var z = new Complex(a, b);

	      // Infinity * 0 = NaN
	      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
	        return Complex['NAN'];
	      }

	      // Infinity * z = Infinity { where z != 0 }
	      if (this['isInfinite']() || z['isInfinite']()) {
	        return Complex['INFINITY'];
	      }

	      // Short circuit for real values
	      if (z['im'] === 0 && this['im'] === 0) {
	        return new Complex(this['re'] * z['re'], 0);
	      }

	      return new Complex(
	              this['re'] * z['re'] - this['im'] * z['im'],
	              this['re'] * z['im'] + this['im'] * z['re']);
	    },

	    /**
	     * Divides two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'div': function(a, b) {

	      var z = new Complex(a, b);

	      // 0 / 0 = NaN and Infinity / Infinity = NaN
	      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
	        return Complex['NAN'];
	      }

	      // Infinity / 0 = Infinity
	      if (this['isInfinite']() || z['isZero']()) {
	        return Complex['INFINITY'];
	      }

	      // 0 / Infinity = 0
	      if (this['isZero']() || z['isInfinite']()) {
	        return Complex['ZERO'];
	      }

	      a = this['re'];
	      b = this['im'];

	      var c = z['re'];
	      var d = z['im'];
	      var t, x;

	      if (0 === d) {
	        // Divisor is real
	        return new Complex(a / c, b / c);
	      }

	      if (Math.abs(c) < Math.abs(d)) {

	        x = c / d;
	        t = c * x + d;

	        return new Complex(
	                (a * x + b) / t,
	                (b * x - a) / t);

	      } else {

	        x = d / c;
	        t = d * x + c;

	        return new Complex(
	                (a + b * x) / t,
	                (b - a * x) / t);
	      }
	    },

	    /**
	     * Calculate the power of two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'pow': function(a, b) {

	      var z = new Complex(a, b);

	      a = this['re'];
	      b = this['im'];

	      if (z['isZero']()) {
	        return Complex['ONE'];
	      }

	      // If the exponent is real
	      if (z['im'] === 0) {

	        if (b === 0 && a >= 0) {

	          return new Complex(Math.pow(a, z['re']), 0);

	        } else if (a === 0) { // If base is fully imaginary

	          switch ((z['re'] % 4 + 4) % 4) {
	            case 0:
	              return new Complex(Math.pow(b, z['re']), 0);
	            case 1:
	              return new Complex(0, Math.pow(b, z['re']));
	            case 2:
	              return new Complex(-Math.pow(b, z['re']), 0);
	            case 3:
	              return new Complex(0, -Math.pow(b, z['re']));
	          }
	        }
	      }

	      /* I couldn't find a good formula, so here is a derivation and optimization
	       *
	       * z_1^z_2 = (a + bi)^(c + di)
	       *         = exp((c + di) * log(a + bi)
	       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
	       * =>...
	       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       *
	       * =>...
	       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       *
	       * =>
	       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
	       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
	       *
	       */

	      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
	        return Complex['ZERO'];
	      }

	      var arg = Math.atan2(b, a);
	      var loh = logHypot(a, b);

	      a = Math.exp(z['re'] * loh - z['im'] * arg);
	      b = z['im'] * loh + z['re'] * arg;
	      return new Complex(
	              a * Math.cos(b),
	              a * Math.sin(b));
	    },

	    /**
	     * Calculate the complex square root
	     *
	     * @returns {Complex}
	     */
	    'sqrt': function() {

	      var a = this['re'];
	      var b = this['im'];
	      var r = this['abs']();

	      var re, im;

	      if (a >= 0) {

	        if (b === 0) {
	          return new Complex(Math.sqrt(a), 0);
	        }

	        re = 0.5 * Math.sqrt(2.0 * (r + a));
	      } else {
	        re = Math.abs(b) / Math.sqrt(2 * (r - a));
	      }

	      if (a <= 0) {
	        im = 0.5 * Math.sqrt(2.0 * (r - a));
	      } else {
	        im = Math.abs(b) / Math.sqrt(2 * (r + a));
	      }

	      return new Complex(re, b < 0 ? -im : im);
	    },

	    /**
	     * Calculate the complex exponent
	     *
	     * @returns {Complex}
	     */
	    'exp': function() {

	      var tmp = Math.exp(this['re']);

	      if (this['im'] === 0) ;
	      return new Complex(
	              tmp * Math.cos(this['im']),
	              tmp * Math.sin(this['im']));
	    },

	    /**
	     * Calculate the complex exponent and subtracts one.
	     *
	     * This may be more accurate than `Complex(x).exp().sub(1)` if
	     * `x` is small.
	     *
	     * @returns {Complex}
	     */
	    'expm1': function() {

	      /**
	       * exp(a + i*b) - 1
	       = exp(a) * (cos(b) + j*sin(b)) - 1
	       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
	       */

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              Math.expm1(a) * Math.cos(b) + cosm1(b),
	              Math.exp(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the natural log
	     *
	     * @returns {Complex}
	     */
	    'log': function() {

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              logHypot(a, b),
	              Math.atan2(b, a));
	    },

	    /**
	     * Calculate the magnitude of the complex number
	     *
	     * @returns {number}
	     */
	    'abs': function() {

	      return hypot(this['re'], this['im']);
	    },

	    /**
	     * Calculate the angle of the complex number
	     *
	     * @returns {number}
	     */
	    'arg': function() {

	      return Math.atan2(this['im'], this['re']);
	    },

	    /**
	     * Calculate the sine of the complex number
	     *
	     * @returns {Complex}
	     */
	    'sin': function() {

	      // sin(c) = (e^b - e^(-b)) / (2i)

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              Math.sin(a) * cosh(b),
	              Math.cos(a) * sinh(b));
	    },

	    /**
	     * Calculate the cosine
	     *
	     * @returns {Complex}
	     */
	    'cos': function() {

	      // cos(z) = (e^b + e^(-b)) / 2

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              Math.cos(a) * cosh(b),
	              -Math.sin(a) * sinh(b));
	    },

	    /**
	     * Calculate the tangent
	     *
	     * @returns {Complex}
	     */
	    'tan': function() {

	      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = Math.cos(a) + cosh(b);

	      return new Complex(
	              Math.sin(a) / d,
	              sinh(b) / d);
	    },

	    /**
	     * Calculate the cotangent
	     *
	     * @returns {Complex}
	     */
	    'cot': function() {

	      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = Math.cos(a) - cosh(b);

	      return new Complex(
	              -Math.sin(a) / d,
	              sinh(b) / d);
	    },

	    /**
	     * Calculate the secant
	     *
	     * @returns {Complex}
	     */
	    'sec': function() {

	      // sec(c) = 2 / (e^(ci) + e^(-ci))

	      var a = this['re'];
	      var b = this['im'];
	      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

	      return new Complex(
	              Math.cos(a) * cosh(b) / d,
	              Math.sin(a) * sinh(b) / d);
	    },

	    /**
	     * Calculate the cosecans
	     *
	     * @returns {Complex}
	     */
	    'csc': function() {

	      // csc(c) = 2i / (e^(ci) - e^(-ci))

	      var a = this['re'];
	      var b = this['im'];
	      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

	      return new Complex(
	              Math.sin(a) * cosh(b) / d,
	              -Math.cos(a) * sinh(b) / d);
	    },

	    /**
	     * Calculate the complex arcus sinus
	     *
	     * @returns {Complex}
	     */
	    'asin': function() {

	      // asin(c) = -i * log(ci + sqrt(1 - c^2))

	      var a = this['re'];
	      var b = this['im'];

	      var t1 = new Complex(
	              b * b - a * a + 1,
	              -2 * a * b)['sqrt']();

	      var t2 = new Complex(
	              t1['re'] - b,
	              t1['im'] + a)['log']();

	      return new Complex(t2['im'], -t2['re']);
	    },

	    /**
	     * Calculate the complex arcus cosinus
	     *
	     * @returns {Complex}
	     */
	    'acos': function() {

	      // acos(c) = i * log(c - i * sqrt(1 - c^2))

	      var a = this['re'];
	      var b = this['im'];

	      var t1 = new Complex(
	              b * b - a * a + 1,
	              -2 * a * b)['sqrt']();

	      var t2 = new Complex(
	              t1['re'] - b,
	              t1['im'] + a)['log']();

	      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
	    },

	    /**
	     * Calculate the complex arcus tangent
	     *
	     * @returns {Complex}
	     */
	    'atan': function() {

	      // atan(c) = i / 2 log((i + x) / (i - x))

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0) {

	        if (b === 1) {
	          return new Complex(0, Infinity);
	        }

	        if (b === -1) {
	          return new Complex(0, -Infinity);
	        }
	      }

	      var d = a * a + (1.0 - b) * (1.0 - b);

	      var t1 = new Complex(
	              (1 - b * b - a * a) / d,
	              -2 * a / d).log();

	      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
	    },

	    /**
	     * Calculate the complex arcus cotangent
	     *
	     * @returns {Complex}
	     */
	    'acot': function() {

	      // acot(c) = i / 2 log((c - i) / (c + i))

	      var a = this['re'];
	      var b = this['im'];

	      if (b === 0) {
	        return new Complex(Math.atan2(1, a), 0);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).atan()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).atan();
	    },

	    /**
	     * Calculate the complex arcus secant
	     *
	     * @returns {Complex}
	     */
	    'asec': function() {

	      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0 && b === 0) {
	        return new Complex(0, Infinity);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).acos()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).acos();
	    },

	    /**
	     * Calculate the complex arcus cosecans
	     *
	     * @returns {Complex}
	     */
	    'acsc': function() {

	      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0 && b === 0) {
	        return new Complex(Math.PI / 2, Infinity);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).asin()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).asin();
	    },

	    /**
	     * Calculate the complex sinh
	     *
	     * @returns {Complex}
	     */
	    'sinh': function() {

	      // sinh(c) = (e^c - e^-c) / 2

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              sinh(a) * Math.cos(b),
	              cosh(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the complex cosh
	     *
	     * @returns {Complex}
	     */
	    'cosh': function() {

	      // cosh(c) = (e^c + e^-c) / 2

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              cosh(a) * Math.cos(b),
	              sinh(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the complex tanh
	     *
	     * @returns {Complex}
	     */
	    'tanh': function() {

	      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = cosh(a) + Math.cos(b);

	      return new Complex(
	              sinh(a) / d,
	              Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    'coth': function() {

	      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = cosh(a) - Math.cos(b);

	      return new Complex(
	              sinh(a) / d,
	              -Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    'csch': function() {

	      // csch(c) = 2 / (e^c - e^-c)

	      var a = this['re'];
	      var b = this['im'];
	      var d = Math.cos(2 * b) - cosh(2 * a);

	      return new Complex(
	              -2 * sinh(a) * Math.cos(b) / d,
	              2 * cosh(a) * Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex sech
	     *
	     * @returns {Complex}
	     */
	    'sech': function() {

	      // sech(c) = 2 / (e^c + e^-c)

	      var a = this['re'];
	      var b = this['im'];
	      var d = Math.cos(2 * b) + cosh(2 * a);

	      return new Complex(
	              2 * cosh(a) * Math.cos(b) / d,
	              -2 * sinh(a) * Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    'asinh': function() {

	      // asinh(c) = log(c + sqrt(c^2 + 1))

	      var tmp = this['im'];
	      this['im'] = -this['re'];
	      this['re'] = tmp;
	      var res = this['asin']();

	      this['re'] = -this['im'];
	      this['im'] = tmp;
	      tmp = res['re'];

	      res['re'] = -res['im'];
	      res['im'] = tmp;
	      return res;
	    },

	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    'acosh': function() {

	      // acosh(c) = log(c + sqrt(c^2 - 1))

	      var res = this['acos']();
	      if (res['im'] <= 0) {
	        var tmp = res['re'];
	        res['re'] = -res['im'];
	        res['im'] = tmp;
	      } else {
	        var tmp = res['im'];
	        res['im'] = -res['re'];
	        res['re'] = tmp;
	      }
	      return res;
	    },

	    /**
	     * Calculate the complex atanh
	     *
	     * @returns {Complex}
	     */
	    'atanh': function() {

	      // atanh(c) = log((1+c) / (1-c)) / 2

	      var a = this['re'];
	      var b = this['im'];

	      var noIM = a > 1 && b === 0;
	      var oneMinus = 1 - a;
	      var onePlus = 1 + a;
	      var d = oneMinus * oneMinus + b * b;

	      var x = (d !== 0)
	              ? new Complex(
	                      (onePlus * oneMinus - b * b) / d,
	                      (b * oneMinus + onePlus * b) / d)
	              : new Complex(
	                      (a !== -1) ? (a / 0) : 0,
	                      (b !== 0) ? (b / 0) : 0);

	      var temp = x['re'];
	      x['re'] = logHypot(x['re'], x['im']) / 2;
	      x['im'] = Math.atan2(x['im'], temp) / 2;
	      if (noIM) {
	        x['im'] = -x['im'];
	      }
	      return x;
	    },

	    /**
	     * Calculate the complex acoth
	     *
	     * @returns {Complex}
	     */
	    'acoth': function() {

	      // acoth(c) = log((c+1) / (c-1)) / 2

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0 && b === 0) {
	        return new Complex(0, Math.PI / 2);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).atanh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).atanh();
	    },

	    /**
	     * Calculate the complex acsch
	     *
	     * @returns {Complex}
	     */
	    'acsch': function() {

	      // acsch(c) = log((1+sqrt(1+c^2))/c)

	      var a = this['re'];
	      var b = this['im'];

	      if (b === 0) {

	        return new Complex(
	                (a !== 0)
	                ? Math.log(a + Math.sqrt(a * a + 1))
	                : Infinity, 0);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).asinh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).asinh();
	    },

	    /**
	     * Calculate the complex asech
	     *
	     * @returns {Complex}
	     */
	    'asech': function() {

	      // asech(c) = log((1+sqrt(1-c^2))/c)

	      var a = this['re'];
	      var b = this['im'];

	      if (this['isZero']()) {
	        return Complex['INFINITY'];
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).acosh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).acosh();
	    },

	    /**
	     * Calculate the complex inverse 1/z
	     *
	     * @returns {Complex}
	     */
	    'inverse': function() {

	      // 1 / 0 = Infinity and 1 / Infinity = 0
	      if (this['isZero']()) {
	        return Complex['INFINITY'];
	      }

	      if (this['isInfinite']()) {
	        return Complex['ZERO'];
	      }

	      var a = this['re'];
	      var b = this['im'];

	      var d = a * a + b * b;

	      return new Complex(a / d, -b / d);
	    },

	    /**
	     * Returns the complex conjugate
	     *
	     * @returns {Complex}
	     */
	    'conjugate': function() {

	      return new Complex(this['re'], -this['im']);
	    },

	    /**
	     * Gets the negated complex number
	     *
	     * @returns {Complex}
	     */
	    'neg': function() {

	      return new Complex(-this['re'], -this['im']);
	    },

	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    'ceil': function(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(
	              Math.ceil(this['re'] * places) / places,
	              Math.ceil(this['im'] * places) / places);
	    },

	    /**
	     * Floors the actual complex number
	     *
	     * @returns {Complex}
	     */
	    'floor': function(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(
	              Math.floor(this['re'] * places) / places,
	              Math.floor(this['im'] * places) / places);
	    },

	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    'round': function(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(
	              Math.round(this['re'] * places) / places,
	              Math.round(this['im'] * places) / places);
	    },

	    /**
	     * Compares two complex numbers
	     *
	     * **Note:** new Complex(Infinity).equals(Infinity) === false
	     *
	     * @returns {boolean}
	     */
	    'equals': function(a, b) {

	      var z = new Complex(a, b);

	      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
	              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
	    },

	    /**
	     * Clones the actual object
	     *
	     * @returns {Complex}
	     */
	    'clone': function() {

	      return new Complex(this['re'], this['im']);
	    },

	    /**
	     * Gets a string of the actual complex number
	     *
	     * @returns {string}
	     */
	    'toString': function() {

	      var a = this['re'];
	      var b = this['im'];
	      var ret = '';

	      if (this['isNaN']()) {
	        return 'NaN';
	      }

	      if (this['isZero']()) {
	        return '0';
	      }

	      if (this['isInfinite']()) {
	        return 'Infinity';
	      }

	      if (a !== 0) {
	        ret += a;
	      }

	      if (b !== 0) {

	        if (a !== 0) {
	          ret += b < 0 ? ' - ' : ' + ';
	        } else if (b < 0) {
	          ret += '-';
	        }

	        b = Math.abs(b);

	        if (1 !== b) {
	          ret += b;
	        }
	        ret += 'i';
	      }

	      if (!ret)
	        return '0';

	      return ret;
	    },

	    /**
	     * Returns the actual number as a vector
	     *
	     * @returns {Array}
	     */
	    'toVector': function() {

	      return [this['re'], this['im']];
	    },

	    /**
	     * Returns the actual real value of the current object
	     *
	     * @returns {number|null}
	     */
	    'valueOf': function() {

	      if (this['im'] === 0) {
	        return this['re'];
	      }
	      return null;
	    },

	    /**
	     * Determines whether a complex number is not on the Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isNaN': function() {
	      return isNaN(this['re']) || isNaN(this['im']);
	    },

	    /**
	     * Determines whether or not a complex number is at the zero pole of the
	     * Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isZero': function() {
	      return (
	              (this['re'] === 0 || this['re'] === -0) &&
	              (this['im'] === 0 || this['im'] === -0)
	              );
	    },

	    /**
	     * Determines whether a complex number is not at the infinity pole of the
	     * Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isFinite': function() {
	      return isFinite(this['re']) && isFinite(this['im']);
	    },

	    /**
	     * Determines whether or not a complex number is at the infinity pole of the
	     * Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isInfinite': function() {
	      return !(this['isNaN']() || this['isFinite']());
	    }
	  };

	  Complex['ZERO'] = new Complex(0, 0);
	  Complex['ONE'] = new Complex(1, 0);
	  Complex['I'] = new Complex(0, 1);
	  Complex['PI'] = new Complex(Math.PI, 0);
	  Complex['E'] = new Complex(Math.E, 0);
	  Complex['INFINITY'] = new Complex(Infinity, Infinity);
	  Complex['NAN'] = new Complex(NaN, NaN);
	  Complex['EPSILON'] = 1e-16;

	  {
	    Object.defineProperty(exports, "__esModule", {'value': true});
	    Complex['default'] = Complex;
	    Complex['Complex'] = Complex;
	    module['exports'] = Complex;
	  }

	})(commonjsGlobal);
	});

	unwrapExports(complex);

	var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };


	var format$1 = number.format;
	var isNumber = number.isNumber;

	function factory$6(type, config, load, typed, math) {
	  /**
	   * Attach type information
	   */
	  complex.prototype.type = 'Complex';
	  complex.prototype.isComplex = true;

	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */
	  complex.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };

	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */
	  complex.prototype.toPolar = function () {
	    return {
	      r: this.abs(),
	      phi: this.arg()
	    };
	  };

	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */
	  complex.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format$1(this.re, options);
	    var strIm = format$1(this.im, options);

	    // round either re or im when smaller than the configured precision
	    var precision = isNumber(options) ? options : options ? options.precision : null;
	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);
	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }
	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }

	    if (im === 0) {
	      // real value
	      str = strRe;
	    } else if (re === 0) {
	      // purely complex value
	      if (im === 1) {
	        str = 'i';
	      } else if (im === -1) {
	        str = '-i';
	      } else {
	        str = strIm + 'i';
	      }
	    } else {
	      // complex value
	      if (im < 0) {
	        if (im === -1) {
	          str = strRe + ' - i';
	        } else {
	          str = strRe + ' - ' + strIm.substring(1) + 'i';
	        }
	      } else {
	        if (im === 1) {
	          str = strRe + ' + i';
	        } else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      }
	    }
	    return str;
	  };

	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */
	  complex.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        var arg = arguments[0];
	        if ((typeof arg === 'undefined' ? 'undefined' : _typeof$2(arg)) === 'object') {
	          return complex(arg);
	        }
	        throw new TypeError('Input has to be an object with r and phi keys.');

	      case 2:
	        var r = arguments[0];
	        var phi = arguments[1];
	        if (isNumber(r)) {
	          if (type.isUnit(phi) && phi.hasBase('ANGLE')) {
	            // convert unit to a number in radians
	            phi = phi.toNumber('rad');
	          }

	          if (isNumber(phi)) {
	            return new complex({ r: r, phi: phi });
	          }

	          throw new TypeError('Phi is not a number nor an angle unit.');
	        } else {
	          throw new TypeError('Radius r is not a number.');
	        }

	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };

	  complex.prototype.valueOf = complex.prototype.toString;

	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */
	  complex.fromJSON = function (json) {
	    return new complex(json);
	  };

	  // apply the current epsilon
	  complex.EPSILON = config.epsilon;

	  // listen for changed in the configuration, automatically apply changed epsilon
	  math.on('config', function (curr, prev) {
	    if (curr.epsilon !== prev.epsilon) {
	      complex.EPSILON = curr.epsilon;
	    }
	  });

	  /**
	   * Compare two complex numbers, `a` and `b`:
	   *
	   * - Returns 1 when the real part of `a` is larger than the real part of `b`
	   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
	   * - Returns 1 when the real parts are equal
	   *   and the imaginary part of `a` is larger than the imaginary part of `b`
	   * - Returns -1 when the real parts are equal
	   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
	   * - Returns 0 when both real and imaginary parts are equal.
	   *
	   * @params {Complex} a
	   * @params {Complex} b
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */
	  complex.compare = function (a, b) {
	    if (a.re > b.re) {
	      return 1;
	    }
	    if (a.re < b.re) {
	      return -1;
	    }

	    if (a.im > b.im) {
	      return 1;
	    }
	    if (a.im < b.im) {
	      return -1;
	    }

	    return 0;
	  };

	  return complex;
	}

	var name$6 = 'Complex';
	var path$1 = 'type';
	var factory_1$6 = factory$6;
	var math$3 = true; // request access to the math namespace

	var Complex_1 = {
		name: name$6,
		path: path$1,
		factory: factory_1$6,
		math: math$3
	};

	// Map the characters to escape to their escaped values. The list is derived
	// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var defaultEscapes = {
	  "{": "\\{",
	  "}": "\\}",
	  "\\": "\\textbackslash{}",
	  "#": "\\#",
	  $: "\\$",
	  "%": "\\%",
	  "&": "\\&",
	  "^": "\\textasciicircum{}",
	  _: "\\_",
	  "~": "\\textasciitilde{}"
	};
	var formatEscapes = {
	  "–": "\\--",
	  "—": "\\---",
	  " ": "~",
	  "\t": "\\qquad{}",
	  "\r\n": "\\\\newline{}",
	  "\n": "\\\\newline{}"
	};

	var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
	  return _extends({}, defaultEscapes, formatEscapes);
	};

	/**
	 * Escape a string to be used in LaTeX documents.
	 * @param {string} str the string to be escaped.
	 * @param {boolean} params.preserveFormatting whether formatting escapes should
	 *  be performed (default: false).
	 * @param {function} params.escapeMapFn the function to modify the escape maps.
	 * @return {string} the escaped string, ready to be used in LaTeX.
	 */
	var dist = function (str) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$preserveFormatti = _ref.preserveFormatting,
	      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
	      _ref$escapeMapFn = _ref.escapeMapFn,
	      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

	  var runningStr = String(str);
	  var result = "";

	  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
	  var escapeKeys = Object.keys(escapes); // as it is reused later on

	  // Algorithm: Go through the string character by character, if it matches
	  // with one of the special characters then we'll replace it with the escaped
	  // version.

	  var _loop = function _loop() {
	    var specialCharFound = false;
	    escapeKeys.forEach(function (key, index) {
	      if (specialCharFound) {
	        return;
	      }
	      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
	        result += escapes[escapeKeys[index]];
	        runningStr = runningStr.slice(key.length, runningStr.length);
	        specialCharFound = true;
	      }
	    });
	    if (!specialCharFound) {
	      result += runningStr.slice(0, 1);
	      runningStr = runningStr.slice(1, runningStr.length);
	    }
	  };

	  while (runningStr) {
	    _loop();
	  }
	  return result;
	};

	var latex = createCommonjsModule(function (module, exports) {



	exports.symbols = {
	  // GREEK LETTERS
	  Alpha: 'A',
	  alpha: '\\alpha',
	  Beta: 'B',
	  beta: '\\beta',
	  Gamma: '\\Gamma',
	  gamma: '\\gamma',
	  Delta: '\\Delta',
	  delta: '\\delta',
	  Epsilon: 'E',
	  epsilon: '\\epsilon',
	  varepsilon: '\\varepsilon',
	  Zeta: 'Z',
	  zeta: '\\zeta',
	  Eta: 'H',
	  eta: '\\eta',
	  Theta: '\\Theta',
	  theta: '\\theta',
	  vartheta: '\\vartheta',
	  Iota: 'I',
	  iota: '\\iota',
	  Kappa: 'K',
	  kappa: '\\kappa',
	  varkappa: '\\varkappa',
	  Lambda: '\\Lambda',
	  lambda: '\\lambda',
	  Mu: 'M',
	  mu: '\\mu',
	  Nu: 'N',
	  nu: '\\nu',
	  Xi: '\\Xi',
	  xi: '\\xi',
	  Omicron: 'O',
	  omicron: 'o',
	  Pi: '\\Pi',
	  pi: '\\pi',
	  varpi: '\\varpi',
	  Rho: 'P',
	  rho: '\\rho',
	  varrho: '\\varrho',
	  Sigma: '\\Sigma',
	  sigma: '\\sigma',
	  varsigma: '\\varsigma',
	  Tau: 'T',
	  tau: '\\tau',
	  Upsilon: '\\Upsilon',
	  upsilon: '\\upsilon',
	  Phi: '\\Phi',
	  phi: '\\phi',
	  varphi: '\\varphi',
	  Chi: 'X',
	  chi: '\\chi',
	  Psi: '\\Psi',
	  psi: '\\psi',
	  Omega: '\\Omega',
	  omega: '\\omega',
	  // logic
	  'true': '\\mathrm{True}',
	  'false': '\\mathrm{False}',
	  // other
	  i: 'i', // TODO use \i ??
	  inf: '\\infty',
	  Inf: '\\infty',
	  infinity: '\\infty',
	  Infinity: '\\infty',
	  oo: '\\infty',
	  lim: '\\lim',
	  'undefined': '\\mathbf{?}'
	};

	exports.operators = {
	  'transpose': '^\\top',
	  'ctranspose': '^H',
	  'factorial': '!',
	  'pow': '^',
	  'dotPow': '.^\\wedge', // TODO find ideal solution
	  'unaryPlus': '+',
	  'unaryMinus': '-',
	  'bitNot': '~', // TODO find ideal solution
	  'not': '\\neg',
	  'multiply': '\\cdot',
	  'divide': '\\frac', // TODO how to handle that properly?
	  'dotMultiply': '.\\cdot', // TODO find ideal solution
	  'dotDivide': '.:', // TODO find ideal solution
	  'mod': '\\mod',
	  'add': '+',
	  'subtract': '-',
	  'to': '\\rightarrow',
	  'leftShift': '<<',
	  'rightArithShift': '>>',
	  'rightLogShift': '>>>',
	  'equal': '=',
	  'unequal': '\\neq',
	  'smaller': '<',
	  'larger': '>',
	  'smallerEq': '\\leq',
	  'largerEq': '\\geq',
	  'bitAnd': '\\&',
	  'bitXor': '\\underline{|}',
	  'bitOr': '|',
	  'and': '\\wedge',
	  'xor': '\\veebar',
	  'or': '\\vee'
	};

	exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';

	var units = {
	  deg: '^\\circ'
	};

	exports.escape = function (string) {
	  return dist(string, { 'preserveFormatting': true });
	};

	// @param {string} name
	// @param {boolean} isUnit
	exports.toSymbol = function (name, isUnit) {
	  isUnit = typeof isUnit === 'undefined' ? false : isUnit;
	  if (isUnit) {
	    if (units.hasOwnProperty(name)) {
	      return units[name];
	    }

	    return '\\mathrm{' + exports.escape(name) + '}';
	  }

	  if (exports.symbols.hasOwnProperty(name)) {
	    return exports.symbols[name];
	  }

	  return exports.escape(name);
	};
	});
	var latex_1 = latex.symbols;
	var latex_2 = latex.operators;
	var latex_3 = latex.defaultTemplate;
	var latex_4 = latex.escape;
	var latex_5 = latex.toSymbol;

	function factory$7(type, config, load, typed) {
	  var latex$$1 = latex;

	  /**
	   * Create a complex value or convert a value to a complex value.
	   *
	   * Syntax:
	   *
	   *     math.complex()                           // creates a complex value with zero
	   *                                              // as real and imaginary part.
	   *     math.complex(re : number, im : string)   // creates a complex value with provided
	   *                                              // values for real and imaginary part.
	   *     math.complex(re : number)                // creates a complex value with provided
	   *                                              // real value and zero imaginary part.
	   *     math.complex(complex : Complex)          // clones the provided complex value.
	   *     math.complex(arg : string)               // parses a string into a complex value.
	   *     math.complex(array : Array)              // converts the elements of the array
	   *                                              // or matrix element wise into a
	   *                                              // complex value.
	   *     math.complex({re: number, im: number})   // creates a complex value with provided
	   *                                              // values for real an imaginary part.
	   *     math.complex({r: number, phi: number})   // creates a complex value with provided
	   *                                              // polar coordinates
	   *
	   * Examples:
	   *
	   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
	   *    a.re = 5                          // a = Complex 5 - 4i
	   *    const i = a.im                    // Number -4
	   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
	   *    const c = math.complex()          // Complex 0 + 0i
	   *    const d = math.add(a, b)          // Complex 5 + 2i
	   *
	   * See also:
	   *
	   *    bignumber, boolean, index, matrix, number, string, unit
	   *
	   * @param {* | Array | Matrix} [args]
	   *            Arguments specifying the real and imaginary part of the complex number
	   * @return {Complex | Array | Matrix} Returns a complex value
	   */
	  var complex = typed('complex', {
	    '': function _() {
	      return type.Complex.ZERO;
	    },

	    'number': function number(x) {
	      return new type.Complex(x, 0);
	    },

	    'number, number': function numberNumber(re, im) {
	      return new type.Complex(re, im);
	    },

	    // TODO: this signature should be redundant
	    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
	      return new type.Complex(re.toNumber(), im.toNumber());
	    },

	    'Complex': function Complex(x) {
	      return x.clone();
	    },

	    'string': function string(x) {
	      return type.Complex(x); // for example '2 + 3i'
	    },

	    'null': function _null(x) {
	      return type.Complex(0);
	    },

	    'Object': function Object(x) {
	      if ('re' in x && 'im' in x) {
	        return new type.Complex(x.re, x.im);
	      }

	      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
	        return new type.Complex(x);
	      }

	      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, complex);
	    }
	  });

	  complex.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)+' + latex$$1.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
	  };

	  return complex;
	}

	var name$7 = 'complex';
	var factory_1$7 = factory$7;

	var complex$2 = {
		name: name$7,
		factory: factory_1$7
	};

	var complex$3 = [
	// type
	Complex_1,

	// construction function
	complex$2];

	var fraction = createCommonjsModule(function (module, exports) {
	/**
	 * @license Fraction.js v4.0.8 09/09/2015
	 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
	 *
	 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/


	/**
	 *
	 * This class offers the possibility to calculate fractions.
	 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
	 *
	 * Array/Object form
	 * [ 0 => <nominator>, 1 => <denominator> ]
	 * [ n => <nominator>, d => <denominator> ]
	 *
	 * Integer form
	 * - Single integer value
	 *
	 * Double form
	 * - Single double value
	 *
	 * String form
	 * 123.456 - a simple double
	 * 123/456 - a string fraction
	 * 123.'456' - a double with repeating decimal places
	 * 123.(456) - synonym
	 * 123.45'6' - a double with repeating last place
	 * 123.45(6) - synonym
	 *
	 * Example:
	 *
	 * var f = new Fraction("9.4'31'");
	 * f.mul([-4, 3]).div(4.9);
	 *
	 */

	(function(root) {

	  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
	  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
	  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
	  var MAX_CYCLE_LEN = 2000;

	  // Parsed data to avoid calling "new" all the time
	  var P = {
	    "s": 1,
	    "n": 0,
	    "d": 1
	  };

	  function createError(name) {

	    function errorConstructor() {
	      var temp = Error.apply(this, arguments);
	      temp['name'] = this['name'] = name;
	      this['stack'] = temp['stack'];
	      this['message'] = temp['message'];
	    }

	    /**
	     * Error constructor
	     *
	     * @constructor
	     */
	    function IntermediateInheritor() {}
	    IntermediateInheritor.prototype = Error.prototype;
	    errorConstructor.prototype = new IntermediateInheritor();

	    return errorConstructor;
	  }

	  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
	  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

	  function assign(n, s) {

	    if (isNaN(n = parseInt(n, 10))) {
	      throwInvalidParam();
	    }
	    return n * s;
	  }

	  function throwInvalidParam() {
	    throw new InvalidParameter();
	  }

	  var parse = function(p1, p2) {

	    var n = 0, d = 1, s = 1;
	    var v = 0, w = 0, x = 0, y = 1, z = 1;

	    var A = 0, B = 1;
	    var C = 1, D = 1;

	    var N = 10000000;
	    var M;

	    if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
	      n = p1;
	      d = p2;
	      s = n * d;
	    } else
	      switch (typeof p1) {

	        case "object":
	        {
	          if ("d" in p1 && "n" in p1) {
	            n = p1["n"];
	            d = p1["d"];
	            if ("s" in p1)
	              n *= p1["s"];
	          } else if (0 in p1) {
	            n = p1[0];
	            if (1 in p1)
	              d = p1[1];
	          } else {
	            throwInvalidParam();
	          }
	          s = n * d;
	          break;
	        }
	        case "number":
	        {
	          if (p1 < 0) {
	            s = p1;
	            p1 = -p1;
	          }

	          if (p1 % 1 === 0) {
	            n = p1;
	          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

	            if (p1 >= 1) {
	              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
	              p1 /= z;
	            }

	            // Using Farey Sequences
	            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

	            while (B <= N && D <= N) {
	              M = (A + C) / (B + D);

	              if (p1 === M) {
	                if (B + D <= N) {
	                  n = A + C;
	                  d = B + D;
	                } else if (D > B) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	                break;

	              } else {

	                if (p1 > M) {
	                  A += C;
	                  B += D;
	                } else {
	                  C += A;
	                  D += B;
	                }

	                if (B > N) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	              }
	            }
	            n *= z;
	          } else if (isNaN(p1) || isNaN(p2)) {
	            d = n = NaN;
	          }
	          break;
	        }
	        case "string":
	        {
	          B = p1.match(/\d+|./g);

	          if (B === null)
	            throwInvalidParam();

	          if (B[A] === '-') {// Check for minus sign at the beginning
	            s = -1;
	            A++;
	          } else if (B[A] === '+') {// Check for plus sign at the beginning
	            A++;
	          }

	          if (B.length === A + 1) { // Check if it's just a simple number "1234"
	            w = assign(B[A++], s);
	          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

	            if (B[A] !== '.') { // Handle 0.5 and .5
	              v = assign(B[A++], s);
	            }
	            A++;

	            // Check for decimal places
	            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
	              w = assign(B[A], s);
	              y = Math.pow(10, B[A].length);
	              A++;
	            }

	            // Check for repeating places
	            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
	              x = assign(B[A + 1], s);
	              z = Math.pow(10, B[A + 1].length) - 1;
	              A += 3;
	            }

	          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
	            w = assign(B[A], s);
	            y = assign(B[A + 2], 1);
	            A += 3;
	          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
	            v = assign(B[A], s);
	            w = assign(B[A + 2], s);
	            y = assign(B[A + 4], 1);
	            A += 5;
	          }

	          if (B.length <= A) { // Check for more tokens on the stack
	            d = y * z;
	            s = /* void */
	                    n = x + d * v + z * w;
	            break;
	          }

	          /* Fall through on error */
	        }
	        default:
	          throwInvalidParam();
	      }

	    if (d === 0) {
	      throw new DivisionByZero();
	    }

	    P["s"] = s < 0 ? -1 : 1;
	    P["n"] = Math.abs(n);
	    P["d"] = Math.abs(d);
	  };

	  function modpow(b, e, m) {

	    var r = 1;
	    for (; e > 0; b = (b * b) % m, e >>= 1) {

	      if (e & 1) {
	        r = (r * b) % m;
	      }
	    }
	    return r;
	  }


	  function cycleLen(n, d) {

	    for (; d % 2 === 0;
	            d /= 2) {
	    }

	    for (; d % 5 === 0;
	            d /= 5) {
	    }

	    if (d === 1) // Catch non-cyclic numbers
	      return 0;

	    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
	    // 10^(d-1) % d == 1
	    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
	    // as we want to translate the numbers to strings.

	    var rem = 10 % d;
	    var t = 1;

	    for (; rem !== 1; t++) {
	      rem = rem * 10 % d;

	      if (t > MAX_CYCLE_LEN)
	        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
	    }
	    return t;
	  }


	     function cycleStart(n, d, len) {

	    var rem1 = 1;
	    var rem2 = modpow(10, len, d);

	    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
	      // Solve 10^s == 10^(s+t) (mod d)

	      if (rem1 === rem2)
	        return t;

	      rem1 = rem1 * 10 % d;
	      rem2 = rem2 * 10 % d;
	    }
	    return 0;
	  }

	  function gcd(a, b) {

	    if (!a)
	      return b;
	    if (!b)
	      return a;

	    while (1) {
	      a %= b;
	      if (!a)
	        return b;
	      b %= a;
	      if (!b)
	        return a;
	    }
	  }
	  /**
	   * Module constructor
	   *
	   * @constructor
	   * @param {number|Fraction=} a
	   * @param {number=} b
	   */
	  function Fraction(a, b) {

	    if (!(this instanceof Fraction)) {
	      return new Fraction(a, b);
	    }

	    parse(a, b);

	    if (Fraction['REDUCE']) {
	      a = gcd(P["d"], P["n"]); // Abuse a
	    } else {
	      a = 1;
	    }

	    this["s"] = P["s"];
	    this["n"] = P["n"] / a;
	    this["d"] = P["d"] / a;
	  }

	  /**
	   * Boolean global variable to be able to disable automatic reduction of the fraction
	   *
	   */
	  Fraction['REDUCE'] = 1;

	  Fraction.prototype = {

	    "s": 1,
	    "n": 0,
	    "d": 1,

	    /**
	     * Calculates the absolute value
	     *
	     * Ex: new Fraction(-4).abs() => 4
	     **/
	    "abs": function() {

	      return new Fraction(this["n"], this["d"]);
	    },

	    /**
	     * Inverts the sign of the current fraction
	     *
	     * Ex: new Fraction(-4).neg() => 4
	     **/
	    "neg": function() {

	      return new Fraction(-this["s"] * this["n"], this["d"]);
	    },

	    /**
	     * Adds two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
	     **/
	    "add": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },

	    /**
	     * Subtracts two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
	     **/
	    "sub": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },

	    /**
	     * Multiplies two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
	     **/
	    "mul": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * P["s"] * this["n"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },

	    /**
	     * Divides two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").inverse().div(3)
	     **/
	    "div": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * P["s"] * this["n"] * P["d"],
	              this["d"] * P["n"]
	              );
	    },

	    /**
	     * Clones the actual object
	     *
	     * Ex: new Fraction("-17.(345)").clone()
	     **/
	    "clone": function() {
	      return new Fraction(this);
	    },

	    /**
	     * Calculates the modulo of two rational numbers - a more precise fmod
	     *
	     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
	     **/
	    "mod": function(a, b) {

	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return new Fraction(NaN);
	      }

	      if (a === undefined) {
	        return new Fraction(this["s"] * this["n"] % this["d"], 1);
	      }

	      parse(a, b);
	      if (0 === P["n"] && 0 === this["d"]) {
	        Fraction(0, 0); // Throw DivisionByZero
	      }

	      /*
	       * First silly attempt, kinda slow
	       *
	       return that["sub"]({
	       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
	       "d": num["d"],
	       "s": this["s"]
	       });*/

	      /*
	       * New attempt: a1 / b1 = a2 / b2 * q + r
	       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
	       * => (b2 * a1 % a2 * b1) / (b1 * b2)
	       */
	      return new Fraction(
	              this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
	              P["d"] * this["d"]
	              );
	    },

	    /**
	     * Calculates the fractional gcd of two rational numbers
	     *
	     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
	     */
	    "gcd": function(a, b) {

	      parse(a, b);

	      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

	      return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
	    },

	    /**
	     * Calculates the fractional lcm of two rational numbers
	     *
	     * Ex: new Fraction(5,8).lcm(3,7) => 15
	     */
	    "lcm": function(a, b) {

	      parse(a, b);

	      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

	      if (P["n"] === 0 && this["n"] === 0) {
	        return new Fraction;
	      }
	      return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
	    },

	    /**
	     * Calculates the ceil of a rational number
	     *
	     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
	     **/
	    "ceil": function(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Calculates the floor of a rational number
	     *
	     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
	     **/
	    "floor": function(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Rounds a rational numbers
	     *
	     * Ex: new Fraction('4.(3)').round() => (4 / 1)
	     **/
	    "round": function(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
	     *
	     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
	     **/
	    "inverse": function() {

	      return new Fraction(this["s"] * this["d"], this["n"]);
	    },

	    /**
	     * Calculates the fraction to some integer exponent
	     *
	     * Ex: new Fraction(-1,2).pow(-3) => -8
	     */
	    "pow": function(m) {

	      if (m < 0) {
	        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
	      } else {
	        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
	      }
	    },

	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "equals": function(a, b) {

	      parse(a, b);
	      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
	    },

	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "compare": function(a, b) {

	      parse(a, b);
	      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
	      return (0 < t) - (t < 0);
	    },
	    
	    "simplify": function(eps) {
	      
	      // First naive implementation, needs improvement
	      
	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return this;
	      }

	      var cont = this['abs']()['toContinued']();
	      
	      eps = eps || 0.001;
	      
	      function rec(a) {
	        if (a.length === 1)
	          return new Fraction(a[0]);
	        return rec(a.slice(1))['inverse']()['add'](a[0]);
	      }
	      
	      for (var i = 0; i < cont.length; i++) {
	        var tmp = rec(cont.slice(0, i + 1));
	        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
	          return tmp['mul'](this['s']);
	        }
	      }
	      return this;
	    },

	    /**
	     * Check if two rational numbers are divisible
	     *
	     * Ex: new Fraction(19.6).divisible(1.5);
	     */
	    "divisible": function(a, b) {

	      parse(a, b);
	      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
	    },

	    /**
	     * Returns a decimal representation of the fraction
	     *
	     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
	     **/
	    'valueOf': function() {

	      return this["s"] * this["n"] / this["d"];
	    },

	    /**
	     * Returns a string-fraction representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
	     **/
	    'toFraction': function(excludeWhole) {

	      var whole, str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str += '-';
	      }

	      if (d === 1) {
	        str += n;
	      } else {

	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str += whole;
	          str += " ";
	          n %= d;
	        }

	        str += n;
	        str += '/';
	        str += d;
	      }
	      return str;
	    },

	    /**
	     * Returns a latex representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
	     **/
	    'toLatex': function(excludeWhole) {

	      var whole, str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str += '-';
	      }

	      if (d === 1) {
	        str += n;
	      } else {

	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str += whole;
	          n %= d;
	        }

	        str += "\\frac{";
	        str += n;
	        str += '}{';
	        str += d;
	        str += '}';
	      }
	      return str;
	    },

	    /**
	     * Returns an array of continued fraction elements
	     *
	     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
	     */
	    'toContinued': function() {

	      var t;
	      var a = this['n'];
	      var b = this['d'];
	      var res = [];

	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return res;
	      }

	      do {
	        res.push(Math.floor(a / b));
	        t = a % b;
	        a = b;
	        b = t;
	      } while (a !== 1);

	      return res;
	    },

	    /**
	     * Creates a string representation of a fraction with all digits
	     *
	     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
	     **/
	    'toString': function() {

	      var g;
	      var N = this["n"];
	      var D = this["d"];

	      if (isNaN(N) || isNaN(D)) {
	        return "NaN";
	      }

	      if (!Fraction['REDUCE']) {
	        g = gcd(N, D);
	        N /= g;
	        D /= g;
	      }

	      var dec = 15; // 15 = decimal places when no repitation

	      var cycLen = cycleLen(N, D); // Cycle length
	      var cycOff = cycleStart(N, D, cycLen); // Cycle start

	      var str = this['s'] === -1 ? "-" : "";

	      str += N / D | 0;

	      N %= D;
	      N *= 10;

	      if (N)
	        str += ".";

	      if (cycLen) {

	        for (var i = cycOff; i--; ) {
	          str += N / D | 0;
	          N %= D;
	          N *= 10;
	        }
	        str += "(";
	        for (var i = cycLen; i--; ) {
	          str += N / D | 0;
	          N %= D;
	          N *= 10;
	        }
	        str += ")";
	      } else {
	        for (var i = dec; N && i--; ) {
	          str += N / D | 0;
	          N %= D;
	          N *= 10;
	        }
	      }
	      return str;
	    }
	  };

	  {
	    Object.defineProperty(exports, "__esModule", {'value': true});
	    Fraction['default'] = Fraction;
	    Fraction['Fraction'] = Fraction;
	    module['exports'] = Fraction;
	  }

	})(commonjsGlobal);
	});

	unwrapExports(fraction);

	/**
	 * Attach type information
	 */
	fraction.prototype.type = 'Fraction';
	fraction.prototype.isFraction = true;

	/**
	 * Get a JSON representation of a Fraction containing type information
	 * @returns {Object} Returns a JSON object structured as:
	 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 */
	fraction.prototype.toJSON = function () {
	  return {
	    mathjs: 'Fraction',
	    n: this.s * this.n,
	    d: this.d
	  };
	};

	/**
	 * Instantiate a Fraction from a JSON object
	 * @param {Object} json  a JSON object structured as:
	 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 * @return {BigNumber}
	 */
	fraction.fromJSON = function (json) {
	  return new fraction(json);
	};

	function factory$8(type, config, load, typed) {
	  return fraction;
	}

	var name$8 = 'Fraction';
	var path$2 = 'type';
	var factory_1$8 = factory$8;

	var Fraction_1 = {
		name: name$8,
		path: path$2,
		factory: factory_1$8
	};

	function factory$9(type, config, load, typed) {
	  /**
	   * Create a fraction convert a value to a fraction.
	   *
	   * Syntax:
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
	   *                                                   into fractions
	   *
	   * Examples:
	   *
	   *     math.fraction(1, 3)
	   *     math.fraction('2/3')
	   *     math.fraction({n: 2, d: 3})
	   *     math.fraction([0.2, 0.25, 1.25])
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
	   *            Arguments specifying the numerator and denominator of
	   *            the fraction
	   * @return {Fraction | Array | Matrix} Returns a fraction
	   */
	  var fraction = typed('fraction', {
	    'number': function number(x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }

	      return new type.Fraction(x);
	    },

	    'string': function string(x) {
	      return new type.Fraction(x);
	    },

	    'number, number': function numberNumber(numerator, denominator) {
	      return new type.Fraction(numerator, denominator);
	    },

	    'null': function _null(x) {
	      return new type.Fraction(0);
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.Fraction(x.toString());
	    },

	    'Fraction': function Fraction(x) {
	      return x; // fractions are immutable
	    },

	    'Object': function Object(x) {
	      return new type.Fraction(x);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, fraction);
	    }
	  });

	  return fraction;
	}

	var name$9 = 'fraction';
	var factory_1$9 = factory$9;

	var fraction$2 = {
		name: name$9,
		factory: factory_1$9
	};

	var fraction$3 = [
	// type
	Fraction_1,

	// construction function
	fraction$2];

	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */

	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.actual = actual;
	  this.expected = expected;
	  this.relation = relation;

	  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';

	  this.stack = new Error().stack;
	}

	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;

	var DimensionError_1 = DimensionError;

	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */

	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.index = index;
	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  } else {
	    this.min = min;
	    this.max = max;
	  }

	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  } else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  } else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }

	  this.stack = new Error().stack;
	}

	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;

	var IndexError_1 = IndexError;

	var array = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.size = size;
	exports.validate = validate;
	exports.resize = resize;
	exports.reshape = reshape;
	exports.unsqueeze = unsqueeze;
	exports.flatten = flatten;
	exports.map = map;
	exports.forEach = forEach;
	exports.filter = filter;
	exports.filterRegExp = filterRegExp;
	exports.join = join;
	exports.identify = identify;



	var _number2 = _interopRequireDefault(number);



	var _string2 = _interopRequireDefault(string);



	var _DimensionError2 = _interopRequireDefault(DimensionError_1);



	var _IndexError2 = _interopRequireDefault(IndexError_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */
	function size(x) {
	  var s = [];

	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }

	  return s;
	}

	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */
	function _validate(array, size, dim) {
	  var i = void 0;
	  var len = array.length;

	  if (len !== size[dim]) {
	    throw new _DimensionError2.default(len, size[dim]);
	  }

	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;
	    for (i = 0; i < len; i++) {
	      var child = array[i];
	      if (!Array.isArray(child)) {
	        throw new _DimensionError2.default(size.length - 1, size.length, '<');
	      }
	      _validate(array[i], size, dimNext);
	    }
	  } else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new _DimensionError2.default(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}

	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */
	function validate(array, size) {
	  var isScalar = size.length === 0;
	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new _DimensionError2.default(array.length, 0);
	    }
	  } else {
	    // array
	    _validate(array, size, 0);
	  }
	}

	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * when length is provided
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */
	exports.validateIndex = function (index, length) {
	  if (!_number2.default.isNumber(index) || !_number2.default.isInteger(index)) {
	    throw new TypeError('Index must be an integer (value: ' + index + ')');
	  }
	  if (index < 0 || typeof length === 'number' && index >= length) {
	    throw new _IndexError2.default(index, length);
	  }
	};

	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array} array         Array to be resized
	 * @param {Array.<number>} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. Specify for example `null`,
	 *                              to clearly see entries that are not explicitly
	 *                              set.
	 * @return {Array} array         The resized array
	 */
	function resize(array, size, defaultValue) {
	  // TODO: add support for scalars, having size=[] ?

	  // check the type of the arguments
	  if (!Array.isArray(array) || !Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }
	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  }

	  // check whether size contains positive integers
	  size.forEach(function (value) {
	    if (!_number2.default.isNumber(value) || !_number2.default.isInteger(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + _string2.default.format(size) + ')');
	    }
	  });

	  // recursively resize the array
	  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;
	  _resize(array, size, 0, _defaultValue);

	  return array;
	}

	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */
	function _resize(array, size, dim, defaultValue) {
	  var i = void 0;
	  var elem = void 0;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen);

	  // apply new length
	  array.length = newLen;

	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1;

	    // resize existing child arrays
	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];
	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension
	        array[i] = elem;
	      }
	      _resize(elem, size, dimNext, defaultValue);
	    }

	    // create new child arrays
	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem;

	      // resize new child array
	      _resize(elem, size, dimNext, defaultValue);
	    }
	  } else {
	    // last dimension

	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    }

	    // fill new elements with the default value
	    for (i = minLen; i < newLen; i++) {
	      array[i] = defaultValue;
	    }
	  }
	}

	/**
	 * Re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 *
	 * @throws {DimensionError}       If the product of the new dimension sizes does
	 *                                not equal that of the old ones
	 */
	function reshape(array, sizes) {
	  var flatArray = exports.flatten(array);
	  var newArray = void 0;

	  function product(arr) {
	    return arr.reduce(function (prev, curr) {
	      return prev * curr;
	    });
	  }

	  if (!Array.isArray(array) || !Array.isArray(sizes)) {
	    throw new TypeError('Array expected');
	  }

	  if (sizes.length === 0) {
	    throw new _DimensionError2.default(0, product(exports.size(array)), '!=');
	  }

	  var totalSize = 1;
	  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
	    totalSize *= sizes[sizeIndex];
	  }

	  if (flatArray.length !== totalSize) {
	    throw new _DimensionError2.default(product(sizes), product(exports.size(array)), '!=');
	  }

	  try {
	    newArray = _reshape(flatArray, sizes);
	  } catch (e) {
	    if (e instanceof _DimensionError2.default) {
	      throw new _DimensionError2.default(product(sizes), product(exports.size(array)), '!=');
	    }
	    throw e;
	  }

	  return newArray;
	}

	/**
	 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 */

	function _reshape(array, sizes) {
	  // testing if there are enough elements for the requested shape
	  var tmpArray = array;
	  var tmpArray2;
	  // for each dimensions starting by the last one and ignoring the first one
	  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
	    var size = sizes[sizeIndex];
	    tmpArray2 = [];

	    // aggregate the elements of the current tmpArray in elements of the requested size
	    var length = tmpArray.length / size;
	    for (var i = 0; i < length; i++) {
	      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
	    }
	    // set it as the new tmpArray for the next loop turn or for return
	    tmpArray = tmpArray2;
	  }

	  return tmpArray;
	}

	/**
	 * Squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {Array} [size]
	 * @returns {Array} returns the array itself
	 */
	exports.squeeze = function (array, size) {
	  var s = size || exports.size(array);

	  // squeeze outer dimensions
	  while (Array.isArray(array) && array.length === 1) {
	    array = array[0];
	    s.shift();
	  }

	  // find the first dimension to be squeezed
	  var dims = s.length;
	  while (s[dims - 1] === 1) {
	    dims--;
	  }

	  // squeeze inner dimensions
	  if (dims < s.length) {
	    array = _squeeze(array, dims, 0);
	    s.length = dims;
	  }

	  return array;
	};

	/**
	 * Recursively squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _squeeze(array, dims, dim) {
	  var i = void 0,
	      ii = void 0;

	  if (dim < dims) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _squeeze(array[i], dims, next);
	    }
	  } else {
	    while (Array.isArray(array)) {
	      array = array[0];
	    }
	  }

	  return array;
	}

	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 *
	 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
	 *
	 * @param {Array} array
	 * @param {number} dims     Desired number of dimensions of the array
	 * @param {number} [outer]  Number of outer dimensions to be added
	 * @param {Array} [size]    Current size of array.
	 * @returns {Array} returns the array itself
	 * @private
	 */
	function unsqueeze(array, dims, outer, size) {
	  var s = size || exports.size(array);

	  // unsqueeze outer dimensions
	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  }

	  // unsqueeze inner dimensions
	  array = _unsqueeze(array, dims, 0);
	  while (s.length < dims) {
	    s.push(1);
	  }

	  return array;
	}

	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _unsqueeze(array, dims, dim) {
	  var i = void 0,
	      ii = void 0;

	  if (Array.isArray(array)) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  } else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }

	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */
	function flatten(array) {
	  if (!Array.isArray(array)) {
	    // if not an array, return as is
	    return array;
	  }
	  var flat = [];

	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback); // traverse through sub-arrays recursively
	    } else {
	      flat.push(value);
	    }
	  });

	  return flat;
	}

	/**
	 * A safe map
	 * @param {Array} array
	 * @param {function} callback
	 */
	function map(array, callback) {
	  return Array.prototype.map.call(array, callback);
	}

	/**
	 * A safe forEach
	 * @param {Array} array
	 * @param {function} callback
	 */
	function forEach(array, callback) {
	  Array.prototype.forEach.call(array, callback);
	}

	/**
	 * A safe filter
	 * @param {Array} array
	 * @param {function} callback
	 */
	function filter(array, callback) {
	  if (exports.size(array).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return Array.prototype.filter.call(array, callback);
	}

	/**
	 * Filter values in a callback given a regular expression
	 * @param {Array} array
	 * @param {RegExp} regexp
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function filterRegExp(array, regexp) {
	  if (exports.size(array).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return Array.prototype.filter.call(array, function (entry) {
	    return regexp.test(entry);
	  });
	}

	/**
	 * A safe join
	 * @param {Array} array
	 * @param {string} separator
	 */
	function join(array, separator) {
	  return Array.prototype.join.call(array, separator);
	}

	/**
	 * Assign a numeric identifier to every element of a sorted array
	 * @param {Array} a  An array
	 * @return {Array} An array of objects containing the original value and its identifier
	 */
	function identify(a) {
	  if (!Array.isArray(a)) {
	    throw new TypeError('Array input expected');
	  }

	  if (a.length === 0) {
	    return a;
	  }

	  var b = [];
	  var count = 0;
	  b[0] = { value: a[0], identifier: 0 };
	  for (var i = 1; i < a.length; i++) {
	    if (a[i] === a[i - 1]) {
	      count++;
	    } else {
	      count = 0;
	    }
	    b.push({ value: a[i], identifier: count });
	  }
	  return b;
	}

	/**
	 * Remove the numeric identifier from the elements
	 * @param {array} a  An array
	 * @return {array} An array of values without identifiers
	 */
	exports.generalize = function (a) {
	  if (!Array.isArray(a)) {
	    throw new TypeError('Array input expected');
	  }

	  if (a.length === 0) {
	    return a;
	  }

	  var b = [];
	  for (var i = 0; i < a.length; i++) {
	    b.push(a[i].value);
	  }
	  return b;
	};

	/**
	 * Test whether an object is an array
	 * @param {*} value
	 * @return {boolean} isArray
	 */
	exports.isArray = Array.isArray;
	});

	unwrapExports(array);
	var array_1 = array.size;
	var array_2 = array.validate;
	var array_3 = array.resize;
	var array_4 = array.reshape;
	var array_5 = array.unsqueeze;
	var array_6 = array.flatten;
	var array_7 = array.map;
	var array_8 = array.forEach;
	var array_9 = array.filter;
	var array_10 = array.filterRegExp;
	var array_11 = array.join;
	var array_12 = array.identify;
	var array_13 = array.validateIndex;
	var array_14 = array.squeeze;
	var array_15 = array.generalize;
	var array_16 = array.isArray;

	/**
	 * Test whether value is a boolean
	 * @param {*} value
	 * @return {boolean} isBoolean
	 */

	var isBoolean = function (value) {
	  return typeof value === 'boolean';
	};

	var boolean_1$1 = {
		isBoolean: isBoolean
	};

	// function utils

	/**
	 * Memoize a given function by caching the computed result.
	 * The cache of a memoized function can be cleared by deleting the `cache`
	 * property of the function.
	 *
	 * @param {function} fn                     The function to be memoized.
	 *                                          Must be a pure function.
	 * @param {function(args: Array)} [hasher]  A custom hash builder.
	 *                                          Is JSON.stringify by default.
	 * @return {function}                       Returns the memoized function
	 */

	var _typeof$3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var memoize = function (fn, hasher) {
	  return function memoize() {
	    if (_typeof$3(memoize.cache) !== 'object') {
	      memoize.cache = {};
	    }

	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }

	    var hash = hasher ? hasher(args) : JSON.stringify(args);
	    if (!(hash in memoize.cache)) {
	      memoize.cache[hash] = fn.apply(fn, args);
	    }
	    return memoize.cache[hash];
	  };
	};

	/**
	 * Find the maximum number of arguments expected by a typed function.
	 * @param {function} fn   A typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */
	var maxArgumentCount = function (fn) {
	  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
	    var count = (signature.match(/,/g) || []).length + 1;
	    return Math.max(args, count);
	  }, -1);
	};

	/**
	 * Call a typed function with the
	 * @param {function} fn   A function or typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */
	var callWithRightArgumentCount = function (fn, args, argCount) {
	  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
	    var count = (signature.match(/,/g) || []).length + 1;
	    return Math.max(args, count);
	  }, -1);
	};

	var _function = {
		memoize: memoize,
		maxArgumentCount: maxArgumentCount,
		callWithRightArgumentCount: callWithRightArgumentCount
	};

	var utils = createCommonjsModule(function (module, exports) {

	exports.array = array;
	exports['boolean'] = boolean_1$1;
	exports['function'] = _function;
	exports.number = number;
	exports.object = object;
	exports.string = string;
	exports.emitter = emitter;
	});
	var utils_1 = utils.array;
	var utils_2 = utils.number;
	var utils_3 = utils.object;
	var utils_4 = utils.string;
	var utils_5 = utils.emitter;

	var string$1 = utils.string;

	var isString = string$1.isString;

	function factory$a(type, config, load, typed) {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *
	   *     let matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *
	   *     let matrix = math.matrix([[1, 2], [3, 4]])
	   *     matix.size()              // [2, 2]
	   *     matrix.resize([3, 2], 5)
	   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;

	  /**
	   * Get the Matrix storage constructor for the given format.
	   *
	   * @param {string} format       The Matrix storage format.
	   *
	   * @return {Function}           The Matrix storage constructor.
	   */
	  Matrix.storage = function (format) {
	    // check storage format is a string
	    if (!isString(format)) {
	      throw new TypeError('format must be a string value');
	    }

	    // get storage format constructor
	    var constructor = Matrix._storage[format];
	    if (!constructor) {
	      throw new SyntaxError('Unsupported matrix storage format: ' + format);
	    }

	    // return storage constructor
	    return constructor;
	  };

	  // a map with all constructors for all storage types
	  Matrix._storage = {};

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };

	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */
	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };

	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */
	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };

	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  Matrix.prototype.reshape = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke reshape on a Matrix interface');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */
	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  Matrix.prototype.size = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */
	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };

	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */
	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };

	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */
	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  };

	  // exports
	  return Matrix;
	}

	var name$a = 'Matrix';
	var path$3 = 'type';
	var factory_1$a = factory$a;

	var Matrix = {
		name: name$a,
		path: path$3,
		factory: factory_1$a
	};

	var string$2 = utils.string;
	var array$2 = utils.array;
	var object$1 = utils.object;
	var number$1 = utils.number;

	var isArray = Array.isArray;
	var isNumber$1 = number$1.isNumber;
	var isInteger = number$1.isInteger;
	var isString$1 = string$2.isString;

	var validateIndex = array$2.validateIndex;

	function factory$b(type, config, load, typed) {
	  var Matrix$$1 = load(Matrix); // force loading Matrix (do not use via type.Matrix)

	  /**
	   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
	   * @class DenseMatrix
	   */
	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (datatype && !isString$1(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (type.isMatrix(data)) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = object$1.clone(data._data);
	        this._size = object$1.clone(data._size);
	        this._datatype = datatype || data._datatype;
	      } else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data);
	      // get the dimensions of the array
	      this._size = array$2.size(this._data);
	      // verify the dimensions of the array, TODO: compute size while processing array
	      array$2.validate(this._data, this._size);
	      // data type unknown
	      this._datatype = datatype;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + utils.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }

	  DenseMatrix.prototype = new Matrix$$1();

	  /**
	   * Attach type information
	   */
	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()  // retrieve storage format
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The storage format.
	   */
	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()   // retrieve matrix datatype
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The datatype.
	   */
	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new DenseMatrix
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof DenseMatrix
	   * @param {Index} index
	   * @param {Array | DenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);

	      // intentional fall through
	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Get a single element from the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length !== this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length);
	    }

	    // check index
	    for (var x = 0; x < index.length; x++) {
	      validateIndex(index[x], this._size[x]);
	    }

	    var data = this._data;
	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    }

	    return data;
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */
	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length < this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length, '<');
	    }

	    var i = void 0,
	        ii = void 0,
	        indexI = void 0;

	    // enlarge matrix when needed
	    var size = index.map(function (i) {
	      return i + 1;
	    });
	    _fit(this, size, defaultValue);

	    // traverse over the dimensions
	    var data = this._data;
	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    }

	    // set new value
	    indexI = index[index.length - 1];
	    validateIndex(indexI, data.length);
	    data[indexI] = value;

	    return this;
	  };

	  /**
	   * Get a submatrix of this matrix
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */
	  function _get(matrix, index) {
	    if (!type.isIndex(index)) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = index.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    } else {
	      // validate dimensions
	      var size = index.size();
	      if (size.length !== matrix._size.length) {
	        throw new DimensionError_1(size.length, matrix._size.length);
	      }

	      // validate if any of the ranges in the index is out of range
	      var min = index.min();
	      var max = index.max();
	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      }

	      // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually
	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }

	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */
	  function _getSubmatrix(data, index, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        return data[i];
	      }).valueOf();
	    } else {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }

	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */
	  function _set(matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size();
	    var isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize = void 0;
	    if (type.isMatrix(submatrix)) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    } else {
	      sSize = array$2.size(submatrix);
	    }

	    if (isScalar) {
	      // set a scalar

	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }

	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // set a submatrix

	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError_1(iSize.length, matrix._size.length, '<');
	      }

	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }

	        // unsqueeze both outer and inner dimensions
	        submatrix = array$2.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!object$1.deepEqual(iSize, sSize)) {
	        throw new DimensionError_1(iSize, sSize, '>');
	      }

	      // enlarge matrix when needed
	      var size = index.max().map(function (i) {
	        return i + 1;
	      });
	      _fit(matrix, size, defaultValue);

	      // insert the sub matrix
	      var dims = iSize.length;
	      var dim = 0;
	      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
	    }

	    return matrix;
	  }

	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */
	  function _setSubmatrix(data, index, submatrix, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    } else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray(size)) {
	      throw new TypeError('Array expected');
	    }

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size, defaultValue);
	  };

	  function _resize(matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data;
	      // go deep
	      while (isArray(v)) {
	        v = v[0];
	      }
	      return v;
	    }
	    // resize matrix
	    matrix._size = size.slice(0); // copy the array
	    matrix._data = array$2.resize(matrix._data, matrix._size, defaultValue);
	    // return matrix
	    return matrix;
	  }

	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  DenseMatrix.prototype.reshape = function (size, copy) {
	    var m = copy ? this.clone() : this;

	    m._data = array$2.reshape(m._data, size);
	    m._size = size.slice(0);
	    return m;
	  };

	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */
	  function _fit(matrix, size, defaultValue) {
	    var // copy the array
	    newSize = matrix._size.slice(0);

	    var changed = false;

	    // add dimensions when needed
	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    }

	    // enlarge size when needed
	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }

	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }

	  /**
	   * Create a clone of the matrix
	   * @memberof DenseMatrix
	   * @return {DenseMatrix} clone
	   */
	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: object$1.clone(this._data),
	      size: object$1.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @memberof DenseMatrix
	   * @returns {number[]} size
	   */
	  DenseMatrix.prototype.size = function () {
	    return this._size.slice(0); // return a clone of _size
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */
	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      } else {
	        return callback(value, index, me);
	      }
	    };
	    // return dense format
	    return new DenseMatrix({
	      data: recurse(this._data, []),
	      size: object$1.clone(this._size),
	      datatype: this._datatype
	    });
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      } else {
	        callback(value, index, me);
	      }
	    };
	    recurse(this._data, []);
	  };

	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.toArray = function () {
	    return object$1.clone(this._data);
	  };

	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof DenseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.format = function (options) {
	    return string$2.format(this._data, options);
	  };

	  /**
	   * Get a string representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.toString = function () {
	    return string$2.format(this._data);
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {Object}
	   */
	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof DenseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Array}                      The array vector with the diagonal values.
	   */
	  DenseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber$1(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // x is a matrix get diagonal from matrix
	    var data = [];

	    // loop rows
	    for (var i = 0; i < n; i++) {
	      data[i] = this._data[i + kSub][i + kSuper];
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {Array} size                   The matrix size.
	   * @param {number | Array} value          The values for the diagonal.
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]        The default value for non-diagonal
	   *
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }
	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    }

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (type.isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber$1(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber$1(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    if (defaultValue && isString$1(datatype)) {
	      // convert defaultValue to the same datatype
	      defaultValue = typed.convert(defaultValue, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // value extraction function
	    var _value = void 0;

	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (type.isMatrix(value)) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    }

	    // discover default value if needed
	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;
	    }

	    // empty array
	    var data = [];

	    // check we need to resize array
	    if (size.length > 0) {
	      // resize array
	      data = array$2.resize(data, size, defaultValue);
	      // fill diagonal
	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @memberof DenseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber$1(i) || !isInteger(i) || !isNumber$1(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);

	    // swap rows
	    DenseMatrix._swapRows(i, j, this._data);
	    // return current instance
	    return this;
	  };

	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   */
	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };

	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Replaces all nested Matrices with Arrays
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @return {Array} data
	   */
	  function preprocess(data) {
	    for (var i = 0, ii = data.length; i < ii; i++) {
	      var elem = data[i];
	      if (isArray(elem)) {
	        data[i] = preprocess(elem);
	      } else if (elem && elem.isMatrix === true) {
	        data[i] = preprocess(elem.valueOf());
	      }
	    }

	    return data;
	  }

	  // register this type in the base class Matrix
	  type.Matrix._storage.dense = DenseMatrix;
	  type.Matrix._storage['default'] = DenseMatrix;

	  // exports
	  return DenseMatrix;
	}

	var name$b = 'DenseMatrix';
	var path$4 = 'type';
	var factory_1$b = factory$b;
	var lazy$2 = false; // no lazy loading, as we alter type.Matrix._storage

	var DenseMatrix = {
		name: name$b,
		path: path$4,
		factory: factory_1$b,
		lazy: lazy$2
	};

	/**
	 * Compares two BigNumbers.
	 * @param {BigNumber} x       First value to compare
	 * @param {BigNumber} y       Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	 */

	var nearlyEqual = function nearlyEqual(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x.eq(y);
	  }

	  // use "==" operator, handles infinities
	  if (x.eq(y)) {
	    return true;
	  }

	  // NaN
	  if (x.isNaN() || y.isNaN()) {
	    return false;
	  }

	  // at this point x and y should be finite
	  if (x.isFinite() && y.isFinite()) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = x.minus(y).abs();
	    if (diff.isZero()) {
	      return true;
	    } else {
	      // use relative error
	      var max = x.constructor.max(x.abs(), y.abs());
	      return diff.lte(max.times(epsilon));
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};

	var nearlyEqual$1 = number.nearlyEqual;


	function factory$c(type, config, load, typed) {
	  /**
	   * Test whether two values are equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */
	  var equalScalar = typed('equalScalar', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x === y || nearlyEqual$1(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || nearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.equals(y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.equals(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return equalScalar(x.value, y.value);
	    }
	  });

	  return equalScalar;
	}

	var factory_1$c = factory$c;

	var equalScalar = {
		factory: factory_1$c
	};

	var array$3 = utils.array;
	var object$2 = utils.object;
	var string$3 = utils.string;
	var number$2 = utils.number;

	var isArray$1 = Array.isArray;
	var isNumber$2 = number$2.isNumber;
	var isInteger$1 = number$2.isInteger;
	var isString$2 = string$3.isString;

	var validateIndex$1 = array$3.validateIndex;

	function factory$d(type, config, load, typed) {
	  var Matrix$$1 = load(Matrix); // force loading Matrix (do not use via type.Matrix)
	  var equalScalar$$1 = load(equalScalar);

	  /**
	   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
	   * for sparse matrices.
	   * @class SparseMatrix
	   */
	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (datatype && !isString$2(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (type.isMatrix(data)) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    } else if (data && isArray$1(data.index) && isArray$1(data.ptr) && isArray$1(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray$1(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + utils.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0, 0];
	      this._datatype = datatype;
	    }
	  }

	  function _createFromMatrix(matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? object$2.clone(source._values) : undefined;
	      matrix._index = object$2.clone(source._index);
	      matrix._ptr = object$2.clone(source._ptr);
	      matrix._size = object$2.clone(source._size);
	      matrix._datatype = datatype || source._datatype;
	    } else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  }

	  function _createFromArray(matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype;
	    // discover rows & columns, do not use math.size() to avoid looping array twice
	    var rows = data.length;
	    var columns = 0;

	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    if (isString$2(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$$1, [datatype, datatype]) || equalScalar$$1;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }

	    // check we have rows (empty array)
	    if (rows > 0) {
	      // column index
	      var j = 0;
	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length);
	        // loop rows
	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i];
	          // check row is an array
	          if (isArray$1(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length) {
	              columns = row.length;
	            }
	            // check row has column
	            if (j < row.length) {
	              // value
	              var v = row[j];
	              // check value != 0
	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v);
	                // index
	                matrix._index.push(i);
	              }
	            }
	          } else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1) {
	              columns = 1;
	            }
	            // check value != 0 (row is a scalar)
	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row);
	              // index
	              matrix._index.push(i);
	            }
	          }
	        }
	        // increment index
	        j++;
	      } while (j < columns);
	    }
	    // store number of values in ptr
	    matrix._ptr.push(matrix._index.length);
	    // size
	    matrix._size = [rows, columns];
	  }

	  SparseMatrix.prototype = new Matrix$$1();

	  /**
	   * Attach type information
	   */
	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The storage format.
	   */
	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The datatype.
	   */
	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new SparseMatrix
	   * @memberof SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };

	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     const density = matrix.density()                   // retrieve matrix density
	   *
	   * @memberof SparseMatrix
	   * @return {number}           The matrix density.
	   */
	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // calculate density
	    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof SparseMatrix
	   * @param {Index} index
	   * @param {Array | Maytrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke subset on a Pattern only matrix');
	    }

	    // check arguments
	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);

	      // intentional fall through
	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  function _getsubset(matrix, idx) {
	    // check idx
	    if (!type.isIndex(idx)) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = idx.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    }
	    // validate dimensions
	    var size = idx.size();
	    if (size.length !== matrix._size.length) {
	      throw new DimensionError_1(size.length, matrix._size.length);
	    }

	    // vars
	    var i = void 0,
	        ii = void 0,
	        k = void 0,
	        kk = void 0;

	    // validate if any of the ranges in the index is out of range
	    var min = idx.min();
	    var max = idx.max();
	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex$1(min[i], matrix._size[i]);
	      validateIndex$1(max[i], matrix._size[i]);
	    }

	    // matrix arrays
	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr;

	    // rows & columns dimensions for result matrix
	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1);

	    // workspace & permutation vector
	    var w = [];
	    var pv = [];

	    // loop rows in resulting matrix
	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0];
	      // mark i in workspace
	      w[i] = true;
	    });

	    // result matrix arrays
	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = [];

	    // loop columns in result matrix
	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length);
	      // loop values in column j
	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k];
	        // check row is in result matrix
	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]);
	          // check we need to process values
	          if (values) {
	            values.push(mvalues[k]);
	          }
	        }
	      }
	    });
	    // update ptr
	    ptr.push(index.length);

	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: size,
	      datatype: matrix._datatype
	    });
	  }

	  function _setsubset(matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size();
	    var isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize = void 0;
	    if (type.isMatrix(submatrix)) {
	      // submatrix size
	      sSize = submatrix.size();
	      // use array representation
	      submatrix = submatrix.toArray();
	    } else {
	      // get submatrix size (array, scalar)
	      sSize = array$3.size(submatrix);
	    }

	    // check index is a scalar
	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	      // set value
	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError_1(iSize.length, matrix._size.length, '<');
	      }

	      // check submatrix and index have the same dimensions
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }
	        // unsqueeze both outer and inner dimensions
	        submatrix = array$3.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!object$2.deepEqual(iSize, sSize)) {
	        throw new DimensionError_1(iSize, sSize, '>');
	      }

	      // offsets
	      var x0 = index.min()[0];
	      var y0 = index.min()[1];

	      // submatrix rows and columns
	      var m = sSize[0];
	      var n = sSize[1];

	      // loop submatrix
	      for (var x = 0; x < m; x++) {
	        // loop columns
	        for (var y = 0; y < n; y++) {
	          // value at i, j
	          var v = submatrix[x][y];
	          // invoke set (zero value will remove entry from matrix)
	          matrix.set([x + x0, y + y0], v, defaultValue);
	        }
	      }
	    }
	    return matrix;
	  }

	  /**
	   * Get a single element from the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray$1(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length !== this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length);
	    }

	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke get on a Pattern only matrix');
	    }

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // check i, j are valid
	    validateIndex$1(i, this._size[0]);
	    validateIndex$1(j, this._size[1]);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      return this._values[k];
	    }

	    return 0;
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */
	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray$1(index)) {
	      throw new TypeError('Array expected');
	    }
	    if (index.length !== this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length);
	    }

	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke set on a Pattern only matrix');
	    }

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    if (isString$2(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$$1, [this._datatype, this._datatype]) || equalScalar$$1;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, this._datatype);
	    }

	    // check we need to resize matrix
	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
	      // update rows & columns
	      rows = this._size[0];
	      columns = this._size[1];
	    }

	    // check i, j are valid
	    validateIndex$1(i, rows);
	    validateIndex$1(j, columns);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      } else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    } else {
	      // insert value @ (i, j)
	      _insert(k, i, j, v, this._values, this._index, this._ptr);
	    }

	    return this;
	  };

	  function _getValueIndex(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0) {
	      return bottom;
	    }
	    // loop rows [top, bottom[
	    for (var r = top; r < bottom; r++) {
	      // check we found value index
	      if (index[r] === i) {
	        return r;
	      }
	    }
	    // we did not find row
	    return top;
	  }

	  function _remove(k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1);
	    // update pointers
	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]--;
	    }
	  }

	  function _insert(k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v);
	    // update row for k
	    index.splice(k, 0, i);
	    // update column pointers
	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]++;
	    }
	  }

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray$1(size)) {
	      throw new TypeError('Array expected');
	    }
	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    }

	    // check sizes
	    size.forEach(function (value) {
	      if (!number$2.isNumber(value) || !number$2.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string$3.format(size) + ')');
	      }
	    });

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size[0], size[1], defaultValue);
	  };

	  function _resize(matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0;

	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    if (isString$2(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$$1, [matrix._datatype, matrix._datatype]) || equalScalar$$1;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	      // convert value to the same datatype
	      value = typed.convert(value, matrix._datatype);
	    }

	    // should we insert the value?
	    var ins = !eq(value, zero);

	    // old columns and rows
	    var r = matrix._size[0];
	    var c = matrix._size[1];

	    var i = void 0,
	        j = void 0,
	        k = void 0;

	    // check we need to increase columns
	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length;
	        // check we need to insert matrix._values
	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value);
	            // update matrix._index
	            matrix._index.push(i);
	          }
	        }
	      }
	      // store number of matrix._values in matrix._ptr
	      matrix._ptr[columns] = matrix._values.length;
	    } else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns);
	      // truncate matrix._values and matrix._index
	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    }
	    // update columns
	    c = columns;

	    // check we need to increase rows
	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0;
	        // loop columns
	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n;
	          // where to insert matrix._values
	          k = matrix._ptr[j + 1] + n;
	          // pointer
	          var p = 0;
	          // loop new rows, initialize pointer
	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value);
	            // update matrix._index
	            matrix._index.splice(k + p, 0, i);
	            // increment inserts
	            n++;
	          }
	        }
	        // store number of matrix._values in matrix._ptr
	        matrix._ptr[c] = matrix._values.length;
	      }
	    } else if (rows < r) {
	      // deletes
	      var d = 0;
	      // loop columns
	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d;
	        // where matrix._values start for next column
	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d;
	        // loop matrix._index
	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k];
	          // check we need to delete value and matrix._index
	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1);
	            // remove item from matrix._index
	            matrix._index.splice(k, 1);
	            // increase deletes
	            d++;
	          }
	        }
	      }
	      // update matrix._ptr for current column
	      matrix._ptr[j] = matrix._values.length;
	    }
	    // update matrix._size
	    matrix._size[0] = rows;
	    matrix._size[1] = columns;
	    // return matrix
	    return matrix;
	  }

	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  SparseMatrix.prototype.reshape = function (size, copy) {
	    // validate arguments
	    if (!isArray$1(size)) {
	      throw new TypeError('Array expected');
	    }
	    if (size.length !== 2) {
	      throw new Error('Sparse matrices can only be reshaped in two dimensions');
	    }

	    // check sizes
	    size.forEach(function (value) {
	      if (!number$2.isNumber(value) || !number$2.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string$3.format(size) + ')');
	      }
	    });

	    // m * n must not change
	    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
	      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
	    }

	    // matrix to reshape
	    var m = copy ? this.clone() : this;

	    // return unchanged if the same shape
	    if (this._size[0] === size[0] && this._size[1] === size[1]) {
	      return m;
	    }

	    // Convert to COO format (generate a column index)
	    var colIndex = [];
	    for (var i = 0; i < m._ptr.length; i++) {
	      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
	        colIndex.push(i);
	      }
	    }

	    // Clone the values array
	    var values = m._values.slice();

	    // Clone the row index array
	    var rowIndex = m._index.slice();

	    // Transform the (row, column) indices
	    for (var _i = 0; _i < m._index.length; _i++) {
	      var r1 = rowIndex[_i];
	      var c1 = colIndex[_i];
	      var flat = r1 * m._size[1] + c1;
	      colIndex[_i] = flat % size[1];
	      rowIndex[_i] = Math.floor(flat / size[1]);
	    }

	    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
	    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
	    // sorting several arrays based on some other array.

	    // OR, we could easily just:

	    // 1. Remove all values from the matrix
	    m._values.length = 0;
	    m._index.length = 0;
	    m._ptr.length = size[1] + 1;
	    m._size = size.slice();
	    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
	      m._ptr[_i2] = 0;
	    }

	    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
	    // This step is probably the most time-consuming
	    for (var h = 0; h < values.length; h++) {
	      var _i3 = rowIndex[h];
	      var _j = colIndex[h];
	      var v = values[h];
	      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);
	      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
	    }

	    // The value indices are inserted out of order, but apparently that's... still OK?

	    return m;
	  };

	  /**
	   * Create a clone of the matrix
	   * @memberof SparseMatrix
	   * @return {SparseMatrix} clone
	   */
	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? object$2.clone(this._values) : undefined,
	      index: object$2.clone(this._index),
	      ptr: object$2.clone(this._ptr),
	      size: object$2.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @memberof SparseMatrix
	   * @returns {number[]} size
	   */
	  SparseMatrix.prototype.size = function () {
	    return this._size.slice(0); // copy the Array
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */
	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke map on a Pattern only matrix');
	    }
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // invoke callback
	    var invoke = function invoke(v, i, j) {
	      // invoke callback
	      return callback(v, [i, j], me);
	    };
	    // invoke _map
	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */
	  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = [];

	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    if (isString$2(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$$1, [matrix._datatype, matrix._datatype]) || equalScalar$$1;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	    }

	    // invoke callback
	    var invoke = function invoke(v, x, y) {
	      // invoke callback
	      v = callback(v, x, y);
	      // check value != 0
	      if (!eq(v, zero)) {
	        // store value
	        values.push(v);
	        // index
	        index.push(x);
	      }
	    };
	    // loop columns
	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1];
	      // row pointer
	      var p = minRow;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = matrix._index[k];
	        // check i is in range
	        if (i >= minRow && i <= maxRow) {
	          // zero values
	          if (!skipZeros) {
	            for (var x = p; x < i; x++) {
	              invoke(0, x - minRow, j - minColumn);
	            }
	          }
	          // value @ k
	          invoke(matrix._values[k], i - minRow, j - minColumn);
	        }
	        // update pointer
	        p = i + 1;
	      }
	      // zero values
	      if (!skipZeros) {
	        for (var y = p; y <= maxRow; y++) {
	          invoke(0, y - minRow, j - minColumn);
	        }
	      }
	    }
	    // store number of values in ptr
	    ptr.push(values.length);
	    // return sparse matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  }

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   */
	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    }
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // column pointer
	      var p = 0;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // check we need to process zeros
	        if (!skipZeros) {
	          // zero values
	          for (var x = p; x < i; x++) {
	            callback(0, [x, j], me);
	          } // eslint-disable-line standard/no-callback-literal
	        }
	        // value @ k
	        callback(this._values[k], [i, j], me);
	        // update pointer
	        p = i + 1;
	      }
	      // check we need to process zeros
	      if (!skipZeros) {
	        // zero values
	        for (var y = p; y < rows; y++) {
	          callback(0, [y, j], me);
	        } // eslint-disable-line standard/no-callback-literal
	      }
	    }
	  };

	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };

	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };

	  function _toArray(values, index, ptr, size, copy) {
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    // result
	    var a = [];
	    // vars
	    var i = void 0,
	        j = void 0;
	    // initialize array
	    for (i = 0; i < rows; i++) {
	      a[i] = [];
	      for (j = 0; j < columns; j++) {
	        a[i][j] = 0;
	      }
	    }

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k];
	        // set value (use one for pattern matrix)
	        a[i][j] = values ? copy ? object$2.clone(values[k]) : values[k] : 1;
	      }
	    }
	    return a;
	  }

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof SparseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // density
	    var density = this.density();
	    // rows & columns
	    var str = 'Sparse Matrix [' + string$3.format(rows, options) + ' x ' + string$3.format(columns, options) + '] density: ' + string$3.format(density, options) + '\n';
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // append value
	        str += '\n    (' + string$3.format(i, options) + ', ' + string$3.format(j, options) + ') ==> ' + (this._values ? string$3.format(this._values[k], options) : 'X');
	      }
	    }
	    return str;
	  };

	  /**
	   * Get a string representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.toString = function () {
	    return string$3.format(this.toArray());
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {Object}
	   */
	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof SparseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */
	  SparseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber$2(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // diagonal arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    // initial ptr value
	    ptr[0] = 0;
	    // loop columns
	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop x within [k0, k1[
	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x];
	        // check row
	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(this._values[x]);
	          // store row
	          index[values.length - 1] = i - kSub;
	          // exit loop
	          break;
	        }
	      }
	    }
	    // close ptr
	    ptr.push(values.length);
	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [n, 1]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @memberof SparseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray$1(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }
	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    }

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (type.isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber$2(s) || !isInteger$1(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      }
	      // is must be an integer
	      if (!isNumber$2(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    if (isString$2(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$$1, [datatype, datatype]) || equalScalar$$1;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // value extraction function
	    var _value = void 0;

	    // check value
	    if (isArray$1(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (type.isMatrix(value)) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    }

	    // create arrays
	    var values = [];
	    var index = [];
	    var ptr = [];

	    // loop items
	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length);
	      // diagonal index
	      var i = j - kSuper;
	      // check we need to set diagonal value
	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i);
	        // check for zero
	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub);
	          // add value
	          values.push(v);
	        }
	      }
	    }
	    // last value should be number of values
	    ptr.push(values.length);
	    // create SparseMatrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber$2(i) || !isInteger$1(i) || !isNumber$2(j) || !isInteger$1(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex$1(i, this._size[0]);
	    validateIndex$1(j, this._size[0]);

	    // swap rows
	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
	    // return current instance
	    return this;
	  };

	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */
	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1];
	    // loop
	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };

	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */
	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // find value index @ x
	      var kx = _getValueIndex(x, k0, k1, index);
	      // find value index @ x
	      var ky = _getValueIndex(y, k0, k1, index);
	      // check both rows exist in matrix
	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        }
	        // next column
	        continue;
	      }
	      // check x row exist & no y row
	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined;
	        // insert value @ y
	        index.splice(ky, 0, y);
	        if (values) {
	          values.splice(ky, 0, vx);
	        }
	        // remove value @ x (adjust array index if needed)
	        index.splice(ky <= kx ? kx + 1 : kx, 1);
	        if (values) {
	          values.splice(ky <= kx ? kx + 1 : kx, 1);
	        }
	        // next column
	        continue;
	      }
	      // check y row exist & no x row
	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined;
	        // insert value @ x
	        index.splice(kx, 0, x);
	        if (values) {
	          values.splice(kx, 0, vy);
	        }
	        // remove value @ y (adjust array index if needed)
	        index.splice(kx <= ky ? ky + 1 : ky, 1);
	        if (values) {
	          values.splice(kx <= ky ? ky + 1 : ky, 1);
	        }
	      }
	    }
	  };

	  // register this type in the base class Matrix
	  type.Matrix._storage.sparse = SparseMatrix;

	  return SparseMatrix;
	}

	var name$c = 'SparseMatrix';
	var path$5 = 'type';
	var factory_1$d = factory$d;
	var lazy$3 = false; // no lazy loading, as we alter type.Matrix._storage

	var SparseMatrix = {
		name: name$c,
		path: path$5,
		factory: factory_1$d,
		lazy: lazy$3
	};

	function factory$e(type, config, load, typed) {
	  /**
	   * Create a Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    let m = math.matrix([[1, 2], [3, 4]])
	   *    m.size()                        // Array [2, 2]
	   *    m.resize([3, 2], 5)
	   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format
	   *
	   * @return {Matrix} The created matrix
	   */
	  var matrix = typed('matrix', {
	    '': function _() {
	      return _create([]);
	    },

	    'string': function string(format) {
	      return _create([], format);
	    },

	    'string, string': function stringString(format, datatype) {
	      return _create([], format, datatype);
	    },

	    'Array': function Array(data) {
	      return _create(data);
	    },

	    'Matrix': function Matrix(data) {
	      return _create(data, data.storage());
	    },

	    'Array | Matrix, string': _create,

	    'Array | Matrix, string, string': _create
	  });

	  matrix.toTex = {
	    0: '\\begin{bmatrix}\\end{bmatrix}',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(${args[0]}\\right)'
	  };

	  return matrix;

	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */
	  function _create(data, format, datatype) {
	    // get storage format constructor
	    var M = type.Matrix.storage(format || 'default');

	    // create instance
	    return new M(data, datatype);
	  }
	}

	var name$d = 'matrix';
	var factory_1$e = factory$e;

	var matrix = {
		name: name$d,
		factory: factory_1$e
	};

	function factory$f(type, config, load, typed) {
	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
	   * @private
	   */
	  var add = typed('add', {

	    'number, number': function numberNumber(x, y) {
	      return x + y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.add(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.plus(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.add(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
	      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
	      if (!x.equalBase(y)) throw new Error('Units do not match');

	      var res = x.clone();
	      res.value = add(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    }
	  });

	  return add;
	}

	var factory_1$f = factory$f;

	var addScalar = {
		factory: factory_1$f
	};

	function factory$g(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // process data types
	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
	    // callback function
	    var cf = dt ? typed.find(callback, [dt, dt]) : callback;

	    // vars
	    var i = void 0,
	        j = void 0;

	    // result (DenseMatrix)
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    }

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // mark i as updated
	        w[i] = mark;
	      }
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        } else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm01;
	}

	var name$e = 'algorithm01';
	var factory_1$g = factory$g;

	var algorithm01 = {
		name: name$e,
		factory: factory_1$g
	};

	function factory$h(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  B(i,j)       ; B(i,j) !== 0
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm04 = function algorithm04(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspace
	    var xa = avalues && bvalues ? [] : undefined;
	    var xb = avalues && bvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0,
	        k0 = void 0,
	        k1 = void 0;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // update c
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      }
	      // loop B(:,j)
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row exists in A
	        if (wa[i] === mark) {
	          // update record in xa @ i
	          if (xa) {
	            // invoke callback
	            var v = cf(xa[i], bvalues[k]);
	            // check for zero
	            if (!eq(v, zero)) {
	              // update workspace
	              xa[i] = v;
	            } else {
	              // remove mark (index will be removed later)
	              wa[i] = null;
	            }
	          }
	        } else {
	          // update c
	          cindex.push(i);
	          // update workspace
	          wb[i] = mark;
	          // check we need to process values
	          if (xb) {
	            xb[i] = bvalues[k];
	          }
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (xa && xb) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // check workspace has value @ i
	          if (wa[i] === mark) {
	            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
	            cvalues[k] = xa[i];
	            // increment pointer
	            k++;
	          } else if (wb[i] === mark) {
	            // push value (bij != 0)
	            cvalues[k] = xb[i];
	            // increment pointer
	            k++;
	          } else {
	            // remove index @ k
	            cindex.splice(k, 1);
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm04;
	}

	var name$f = 'algorithm04';
	var factory_1$h = factory$h;

	var algorithm04 = {
		name: name$f,
		factory: factory_1$h
	};

	function factory$i(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm10 = function algorithm10(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  return algorithm10;
	}

	var name$g = 'algorithm10';
	var factory_1$i = factory$i;

	var algorithm10 = {
		name: name$g,
		factory: factory_1$i
	};

	function factory$j(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */
	  var algorithm13 = function algorithm13(a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b arrays
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // c arrays
	    var csize = [];

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // validate each one of the dimension sizes
	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s]) {
	        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      }
	      // update dimension in c
	      csize[s] = asize[s];
	    }

	    // datatype
	    var dt = void 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];

	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  };

	  // recursive function
	  function _iterate(f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }
	    return cv;
	  }

	  return algorithm13;
	}

	var name$h = 'algorithm13';
	var factory_1$j = factory$j;

	var algorithm13 = {
		name: name$h,
		factory: factory_1$j
	};

	var clone = object.clone;

	function factory$k(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */
	  var algorithm14 = function algorithm14(a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;

	    // datatype
	    var dt = void 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: clone(asize),
	      datatype: dt
	    });
	  };

	  // recursive function
	  function _iterate(f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }
	    return cv;
	  }

	  return algorithm14;
	}

	var name$i = 'algorithm14';
	var factory_1$k = factory$k;

	var algorithm14 = {
		name: name$i,
		factory: factory_1$k
	};

	var extend = object.extend;

	function factory$l(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var addScalar$$1 = load(addScalar);
	  var latex$$1 = latex;

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm04$$1 = load(algorithm04);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Add two or more values, `x + y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.add(x, y)
	   *    math.add(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.add(2, 3)               // returns number 5
	   *    math.add(2, 3, 4)            // returns number 9
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(-4, 1)
	   *    math.add(a, b)               // returns Complex -2 + 4i
	   *
	   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
	   *
	   *    const c = math.unit('5 cm')
	   *    const d = math.unit('2.1 mm')
	   *    math.add(c, d)               // returns Unit 52.1 mm
	   *
	   *    math.add("2.3", "4")         // returns number 6.3
	   *
	   * See also:
	   *
	   *    subtract, sum
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
	   */
	  var add = typed('add', extend({
	    // we extend the signatures of addScalar with signatures dealing with matrices

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, addScalar$$1);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$$1(x, y, addScalar$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm01$$1(y, x, addScalar$$1, true);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm04$$1(x, y, addScalar$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return add(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return add(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return add(x, matrix$$1(y));
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, addScalar$$1, false);
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10$$1(x, y, addScalar$$1, false);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, addScalar$$1, true);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10$$1(y, x, addScalar$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, addScalar$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, addScalar$$1, true).valueOf();
	    },

	    'any, any': addScalar$$1,

	    'any, any, ...any': function anyAnyAny(x, y, rest) {
	      var result = add(x, y);

	      for (var i = 0; i < rest.length; i++) {
	        result = add(result, rest[i]);
	      }

	      return result;
	    }
	  }, addScalar$$1.signatures));

	  add.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['add'] + '${args[1]}\\right)'
	  };

	  return add;
	}

	var name$j = 'add';
	var factory_1$l = factory$l;

	var add = {
		name: name$j,
		factory: factory_1$l
	};

	function factory$m(type, config, load) {
	  var add$$1 = load(add);
	  var equalScalar$$1 = load(equalScalar);

	  /**
	   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
	   * of the vector elements and an ordered list of non-zero elements.
	   */
	  function Spa() {
	    if (!(this instanceof Spa)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // allocate vector, TODO use typed arrays
	    this._values = [];
	    this._heap = new type.FibonacciHeap();
	  }

	  /**
	   * Attach type information
	   */
	  Spa.prototype.type = 'Spa';
	  Spa.prototype.isSpa = true;

	  /**
	   * Set the value for index i.
	   *
	   * @param {number} i                       The index
	   * @param {number | BigNumber | Complex}   The value at index i
	   */
	  Spa.prototype.set = function (i, v) {
	    // check we have a value @ i
	    if (!this._values[i]) {
	      // insert in heap
	      var node = this._heap.insert(i, v);
	      // set the value @ i
	      this._values[i] = node;
	    } else {
	      // update the value @ i
	      this._values[i].value = v;
	    }
	  };

	  Spa.prototype.get = function (i) {
	    var node = this._values[i];
	    if (node) {
	      return node.value;
	    }
	    return 0;
	  };

	  Spa.prototype.accumulate = function (i, v) {
	    // node @ i
	    var node = this._values[i];
	    if (!node) {
	      // insert in heap
	      node = this._heap.insert(i, v);
	      // initialize value
	      this._values[i] = node;
	    } else {
	      // accumulate value
	      node.value = add$$1(node.value, v);
	    }
	  };

	  Spa.prototype.forEach = function (from, to, callback) {
	    // references
	    var heap = this._heap;
	    var values = this._values;
	    // nodes
	    var nodes = [];
	    // node with minimum key, save it
	    var node = heap.extractMinimum();
	    if (node) {
	      nodes.push(node);
	    }
	    // extract nodes from heap (ordered)
	    while (node && node.key <= to) {
	      // check it is in range
	      if (node.key >= from) {
	        // check value is not zero
	        if (!equalScalar$$1(node.value, 0)) {
	          // invoke callback
	          callback(node.key, node.value, this);
	        }
	      }
	      // extract next node, save it
	      node = heap.extractMinimum();
	      if (node) {
	        nodes.push(node);
	      }
	    }
	    // reinsert all nodes in heap
	    for (var i = 0; i < nodes.length; i++) {
	      // current node
	      var n = nodes[i];
	      // insert node in heap
	      node = heap.insert(n.key, n.value);
	      // update values
	      values[node.key] = node;
	    }
	  };

	  Spa.prototype.swap = function (i, j) {
	    // node @ i and j
	    var nodei = this._values[i];
	    var nodej = this._values[j];
	    // check we need to insert indeces
	    if (!nodei && nodej) {
	      // insert in heap
	      nodei = this._heap.insert(i, nodej.value);
	      // remove from heap
	      this._heap.remove(nodej);
	      // set values
	      this._values[i] = nodei;
	      this._values[j] = undefined;
	    } else if (nodei && !nodej) {
	      // insert in heap
	      nodej = this._heap.insert(j, nodei.value);
	      // remove from heap
	      this._heap.remove(nodei);
	      // set values
	      this._values[j] = nodej;
	      this._values[i] = undefined;
	    } else if (nodei && nodej) {
	      // swap values
	      var v = nodei.value;
	      nodei.value = nodej.value;
	      nodej.value = v;
	    }
	  };

	  return Spa;
	}

	var name$k = 'Spa';
	var path$6 = 'type';
	var factory_1$m = factory$m;

	var Spa = {
		name: name$k,
		path: path$6,
		factory: factory_1$m
	};

	function factory$n(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (DenseMatrix)
	    var cdata = [];

	    // initialize dense matrix
	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    }

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      }
	      // process workspace
	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        } else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm03;
	}

	var name$l = 'algorithm03';
	var factory_1$n = factory$n;

	var algorithm03 = {
		name: name$l,
		factory: factory_1$n
	};

	function factory$o(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j) = f(Aij, Bij)
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm07 = function algorithm07(a, b, callback) {
	    // sparse matrix arrays
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // vars
	    var i = void 0,
	        j = void 0;

	    // result arrays
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    }

	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var xa = [];
	    var xb = [];
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      _scatter(a, j, wa, xa, mark);
	      // scatter the values of B(:,j) into workspace
	      _scatter(b, j, wb, xb, mark);
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // matrix values @ i,j
	        var va = wa[i] === mark ? xa[i] : zero;
	        var vb = wb[i] === mark ? xb[i] : zero;
	        // invoke callback
	        cdata[i][j] = cf(va, vb);
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  function _scatter(m, j, w, x, mark) {
	    // a arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // loop values in column j
	    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
	      // row
	      var i = index[k];
	      // update workspace
	      w[i] = mark;
	      x[i] = values[k];
	    }
	  }

	  return algorithm07;
	}

	var name$m = 'algorithm07';
	var factory_1$o = factory$o;

	var algorithm07 = {
		name: name$m,
		factory: factory_1$o
	};

	function factory$p(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked MxN times.
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(0, b)    ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm12 = function algorithm12(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
	        }
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  return algorithm12;
	}

	var name$n = 'algorithm12';
	var factory_1$p = factory$p;

	var algorithm12 = {
		name: name$n,
		factory: factory_1$p
	};

	var nearlyEqual$2 = number.nearlyEqual;


	function factory$q(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  var latex$$1 = latex;

	  /**
	   * Test whether value x is smaller than y.
	   *
	   * The function returns true when x is smaller than y and the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.smaller(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(2, 3)            // returns true
	   *    math.smaller(5, 2 * 2)        // returns false
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('2 inch')
	   *    math.smaller(a, b)            // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smallerEq, smaller, smallerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smaller = typed('smaller', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x < y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x < y && !nearlyEqual$2(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lt(y) && !nearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) === -1;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return smaller(x.value, y.value);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, smaller);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, smaller, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, smaller, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, smaller);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return smaller(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return smaller(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return smaller(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, smaller, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, smaller, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, smaller, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, smaller, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, smaller, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, smaller, true).valueOf();
	    }
	  });

	  smaller.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['smaller'] + '${args[1]}\\right)'
	  };

	  return smaller;
	}

	var name$o = 'smaller';
	var factory_1$q = factory$q;

	var smaller = {
		name: name$o,
		factory: factory_1$q
	};

	var nearlyEqual$3 = number.nearlyEqual;


	function factory$r(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  var latex$$1 = latex;

	  /**
	   * Test whether value x is larger than y.
	   *
	   * The function returns true when x is larger than y and the relative
	   * difference between x and y is larger than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.larger(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 3)             // returns false
	   *    math.larger(5, 2 + 2)         // returns true
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('2 inch')
	   *    math.larger(a, b)             // returns false
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
	   */
	  var larger = typed('larger', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x > y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x > y && !nearlyEqual$3(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gt(y) && !nearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) === 1;
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return larger(x.value, y.value);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, larger);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, larger, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, larger, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, larger);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return larger(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return larger(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return larger(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, larger, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, larger, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, larger, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, larger, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, larger, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, larger, true).valueOf();
	    }
	  });

	  larger.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['larger'] + '${args[1]}\\right)'
	  };

	  return larger;
	}

	var name$p = 'larger';
	var factory_1$r = factory$r;

	var larger = {
		name: name$p,
		factory: factory_1$r
	};

	function factory$s(type, config, load, typed) {
	  var smaller$$1 = load(smaller);
	  var larger$$1 = load(larger);

	  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);

	  /**
	   * Fibonacci Heap implementation, used interally for Matrix math.
	   * @class FibonacciHeap
	   * @constructor FibonacciHeap
	   */
	  function FibonacciHeap() {
	    if (!(this instanceof FibonacciHeap)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // initialize fields
	    this._minimum = null;
	    this._size = 0;
	  }

	  /**
	   * Attach type information
	   */
	  FibonacciHeap.prototype.type = 'FibonacciHeap';
	  FibonacciHeap.prototype.isFibonacciHeap = true;

	  /**
	   * Inserts a new data element into the heap. No heap consolidation is
	   * performed at this time, the new node is simply inserted into the root
	   * list of this heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.insert = function (key, value) {
	    // create node
	    var node = {
	      key: key,
	      value: value,
	      degree: 0
	      // check we have a node in the minimum
	    };if (this._minimum) {
	      // minimum node
	      var minimum = this._minimum;
	      // update left & right of node
	      node.left = minimum;
	      node.right = minimum.right;
	      minimum.right = node;
	      node.right.left = node;
	      // update minimum node in heap if needed
	      if (smaller$$1(key, minimum.key)) {
	        // node has a smaller key, use it as minimum
	        this._minimum = node;
	      }
	    } else {
	      // set left & right
	      node.left = node;
	      node.right = node;
	      // this is the first node
	      this._minimum = node;
	    }
	    // increment number of nodes in heap
	    this._size++;
	    // return node
	    return node;
	  };

	  /**
	   * Returns the number of nodes in heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.size = function () {
	    return this._size;
	  };

	  /**
	   * Removes all elements from this heap.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.clear = function () {
	    this._minimum = null;
	    this._size = 0;
	  };

	  /**
	   * Returns true if the heap is empty, otherwise false.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.isEmpty = function () {
	    return this._size === 0;
	  };

	  /**
	   * Extracts the node with minimum key from heap. Amortized running
	   * time: O(log n).
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.extractMinimum = function () {
	    // node to remove
	    var node = this._minimum;
	    // check we have a minimum
	    if (node === null) {
	      return node;
	    }
	    // current minimum
	    var minimum = this._minimum;
	    // get number of children
	    var numberOfChildren = node.degree;
	    // pointer to the first child
	    var x = node.child;
	    // for each child of node do...
	    while (numberOfChildren > 0) {
	      // store node in right side
	      var tempRight = x.right;
	      // remove x from child list
	      x.left.right = x.right;
	      x.right.left = x.left;
	      // add x to root list of heap
	      x.left = minimum;
	      x.right = minimum.right;
	      minimum.right = x;
	      x.right.left = x;
	      // set Parent[x] to null
	      x.parent = null;
	      x = tempRight;
	      numberOfChildren--;
	    }
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // update minimum
	    if (node === node.right) {
	      // empty
	      minimum = null;
	    } else {
	      // update minimum
	      minimum = node.right;
	      // we need to update the pointer to the root with minimum key
	      minimum = _findMinimumNode(minimum, this._size);
	    }
	    // decrement size of heap
	    this._size--;
	    // update minimum
	    this._minimum = minimum;
	    // return node
	    return node;
	  };

	  /**
	   * Removes a node from the heap given the reference to the node. The trees
	   * in the heap will be consolidated, if necessary. This operation may fail
	   * to remove the correct element if there are nodes with key value -Infinity.
	   * Running time: O(log n) amortized.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.remove = function (node) {
	    // decrease key value
	    this._minimum = _decreaseKey(this._minimum, node, -1);
	    // remove the smallest
	    this.extractMinimum();
	  };

	  /**
	   * Decreases the key value for a heap node, given the new value to take on.
	   * The structure of the heap may be changed and will not be consolidated.
	   * Running time: O(1) amortized.
	   * @memberof FibonacciHeap
	   */
	  function _decreaseKey(minimum, node, key) {
	    // set node key
	    node.key = key;
	    // get parent node
	    var parent = node.parent;
	    if (parent && smaller$$1(node.key, parent.key)) {
	      // remove node from parent
	      _cut(minimum, node, parent);
	      // remove all nodes from parent to the root parent
	      _cascadingCut(minimum, parent);
	    }
	    // update minimum node if needed
	    if (smaller$$1(node.key, minimum.key)) {
	      minimum = node;
	    }
	    // return minimum
	    return minimum;
	  }

	  /**
	   * The reverse of the link operation: removes node from the child list of parent.
	   * This method assumes that min is non-null. Running time: O(1).
	   * @memberof FibonacciHeap
	   */
	  function _cut(minimum, node, parent) {
	    // remove node from parent children and decrement Degree[parent]
	    node.left.right = node.right;
	    node.right.left = node.left;
	    parent.degree--;
	    // reset y.child if necessary
	    if (parent.child === node) {
	      parent.child = node.right;
	    }
	    // remove child if degree is 0
	    if (parent.degree === 0) {
	      parent.child = null;
	    }
	    // add node to root list of heap
	    node.left = minimum;
	    node.right = minimum.right;
	    minimum.right = node;
	    node.right.left = node;
	    // set parent[node] to null
	    node.parent = null;
	    // set mark[node] to false
	    node.mark = false;
	  }

	  /**
	   * Performs a cascading cut operation. This cuts node from its parent and then
	   * does the same for its parent, and so on up the tree.
	   * Running time: O(log n); O(1) excluding the recursion.
	   * @memberof FibonacciHeap
	   */
	  function _cascadingCut(minimum, node) {
	    // store parent node
	    var parent = node.parent;
	    // if there's a parent...
	    if (!parent) {
	      return;
	    }
	    // if node is unmarked, set it marked
	    if (!node.mark) {
	      node.mark = true;
	    } else {
	      // it's marked, cut it from parent
	      _cut(minimum, node, parent);
	      // cut its parent as well
	      _cascadingCut(parent);
	    }
	  }

	  /**
	   * Make the first node a child of the second one. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  var _linkNodes = function _linkNodes(node, parent) {
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // make node a Child of parent
	    node.parent = parent;
	    if (!parent.child) {
	      parent.child = node;
	      node.right = node;
	      node.left = node;
	    } else {
	      node.left = parent.child;
	      node.right = parent.child.right;
	      parent.child.right = node;
	      node.right.left = node;
	    }
	    // increase degree[parent]
	    parent.degree++;
	    // set mark[node] false
	    node.mark = false;
	  };

	  function _findMinimumNode(minimum, size) {
	    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
	    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
	    // create list with initial capacity
	    var array = new Array(arraySize);
	    // find the number of root nodes.
	    var numRoots = 0;
	    var x = minimum;
	    if (x) {
	      numRoots++;
	      x = x.right;
	      while (x !== minimum) {
	        numRoots++;
	        x = x.right;
	      }
	    }
	    // vars
	    var y = void 0;
	    // For each node in root list do...
	    while (numRoots > 0) {
	      // access this node's degree..
	      var d = x.degree;
	      // get next node
	      var next = x.right;
	      // check if there is a node already in array with the same degree
	      while (true) {
	        // get node with the same degree is any
	        y = array[d];
	        if (!y) {
	          break;
	        }
	        // make one node with the same degree a child of the other, do this based on the key value.
	        if (larger$$1(x.key, y.key)) {
	          var temp = y;
	          y = x;
	          x = temp;
	        }
	        // make y a child of x
	        _linkNodes(y, x);
	        // we have handled this degree, go to next one.
	        array[d] = null;
	        d++;
	      }
	      // save this node for later when we might encounter another of the same degree.
	      array[d] = x;
	      // move forward through list.
	      x = next;
	      numRoots--;
	    }
	    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
	    minimum = null;
	    // loop nodes in array
	    for (var i = 0; i < arraySize; i++) {
	      // get current node
	      y = array[i];
	      if (!y) {
	        continue;
	      }
	      // check if we have a linked list
	      if (minimum) {
	        // First remove node from root list.
	        y.left.right = y.right;
	        y.right.left = y.left;
	        // now add to root list, again.
	        y.left = minimum;
	        y.right = minimum.right;
	        minimum.right = y;
	        y.right.left = y;
	        // check if this is a new min.
	        if (smaller$$1(y.key, minimum.key)) {
	          minimum = y;
	        }
	      } else {
	        minimum = y;
	      }
	    }
	    return minimum;
	  }

	  return FibonacciHeap;
	}

	var name$q = 'FibonacciHeap';
	var path$7 = 'type';
	var factory_1$s = factory$s;

	var FibonacciHeap = {
		name: name$q,
		path: path$7,
		factory: factory_1$s
	};

	var string$4 = utils.string;
	var object$3 = utils.object;

	var isArray$2 = Array.isArray;
	var isString$3 = string$4.isString;

	function factory$t(type, config, load) {
	  var DenseMatrix$$1 = load(DenseMatrix);

	  var smaller$$1 = load(smaller);

	  function ImmutableDenseMatrix(data, datatype) {
	    if (!(this instanceof ImmutableDenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (datatype && !isString$3(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (type.isMatrix(data) || isArray$2(data)) {
	      // use DenseMatrix implementation
	      var matrix = new DenseMatrix$$1(data, datatype);
	      // internal structures
	      this._data = matrix._data;
	      this._size = matrix._size;
	      this._datatype = matrix._datatype;
	      this._min = null;
	      this._max = null;
	    } else if (data && isArray$2(data.data) && isArray$2(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = data.datatype;
	      this._min = typeof data.min !== 'undefined' ? data.min : null;
	      this._max = typeof data.max !== 'undefined' ? data.max : null;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + utils.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	      this._min = null;
	      this._max = null;
	    }
	  }

	  ImmutableDenseMatrix.prototype = new DenseMatrix$$1();

	  /**
	   * Attach type information
	   */
	  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
	  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | ImmutableDenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  ImmutableDenseMatrix.prototype.subset = function (index) {
	    switch (arguments.length) {
	      case 1:
	        // use base implementation
	        var m = DenseMatrix$$1.prototype.subset.call(this, index);
	        // check result is a matrix
	        if (type.isMatrix(m)) {
	          // return immutable matrix
	          return new ImmutableDenseMatrix({
	            data: m._data,
	            size: m._size,
	            datatype: m._datatype
	          });
	        }
	        return m;

	      // intentional fall through
	      case 2:
	      case 3:
	        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {Number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {ImmutableDenseMatrix} self
	   */
	  ImmutableDenseMatrix.prototype.set = function () {
	    throw new Error('Cannot invoke set on an Immutable Matrix instance');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {Number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  ImmutableDenseMatrix.prototype.resize = function () {
	    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
	  };

	  /**
	   * Disallows reshaping in favor of immutability.
	   *
	   * @throws {Error} Operation not allowed
	   */
	  ImmutableDenseMatrix.prototype.reshape = function () {
	    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {ImmutableDenseMatrix} clone
	   */
	  ImmutableDenseMatrix.prototype.clone = function () {
	    var m = new ImmutableDenseMatrix({
	      data: object$3.clone(this._data),
	      size: object$3.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  ImmutableDenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'ImmutableDenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {ImmutableDenseMatrix}
	   */
	  ImmutableDenseMatrix.fromJSON = function (json) {
	    return new ImmutableDenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {Number} i       Matrix row index 1
	   * @param {Number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  ImmutableDenseMatrix.prototype.swapRows = function () {
	    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
	  };

	  /**
	   * Calculate the minimum value in the set
	   * @return {Number | undefined} min
	   */
	  ImmutableDenseMatrix.prototype.min = function () {
	    // check min has been calculated before
	    if (this._min === null) {
	      // minimum
	      var m = null;
	      // compute min
	      this.forEach(function (v) {
	        if (m === null || smaller$$1(v, m)) {
	          m = v;
	        }
	      });
	      this._min = m !== null ? m : undefined;
	    }
	    return this._min;
	  };

	  /**
	   * Calculate the maximum value in the set
	   * @return {Number | undefined} max
	   */
	  ImmutableDenseMatrix.prototype.max = function () {
	    // check max has been calculated before
	    if (this._max === null) {
	      // maximum
	      var m = null;
	      // compute max
	      this.forEach(function (v) {
	        if (m === null || smaller$$1(m, v)) {
	          m = v;
	        }
	      });
	      this._max = m !== null ? m : undefined;
	    }
	    return this._max;
	  };

	  // exports
	  return ImmutableDenseMatrix;
	}

	var name$r = 'ImmutableDenseMatrix';
	var path$8 = 'type';
	var factory_1$t = factory$t;

	var ImmutableDenseMatrix = {
		name: name$r,
		path: path$8,
		factory: factory_1$t
	};

	var clone$1 = object.clone;
	var isInteger$2 = number.isInteger;

	function factory$u(type) {
	  /**
	   * Create an index. An Index can store ranges and sets for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Usage:
	   *     const index = new Index(range1, range2, matrix1, array1, ...)
	   *
	   * Where each parameter can be any of:
	   *     A number
	   *     A string (containing a name of an object property)
	   *     An instance of Range
	   *     An Array with the Set values
	   *     A Matrix with the Set values
	   *
	   * The parameters start, end, and step must be integer numbers.
	   *
	   * @class Index
	   * @Constructor Index
	   * @param {...*} ranges
	   */
	  function Index(ranges) {
	    if (!(this instanceof Index)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this._dimensions = [];
	    this._isScalar = true;

	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      if (type.isRange(arg)) {
	        this._dimensions.push(arg);
	        this._isScalar = false;
	      } else if (Array.isArray(arg) || type.isMatrix(arg)) {
	        // create matrix
	        var m = _createImmutableMatrix(arg.valueOf());
	        this._dimensions.push(m);
	        // size
	        var size = m.size();
	        // scalar
	        if (size.length !== 1 || size[0] !== 1) {
	          this._isScalar = false;
	        }
	      } else if (typeof arg === 'number') {
	        this._dimensions.push(_createImmutableMatrix([arg]));
	      } else if (typeof arg === 'string') {
	        // object property (arguments.count should be 1)
	        this._dimensions.push(arg);
	      } else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }
	      // TODO: implement support for wildcard '*'
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Index.prototype.type = 'Index';
	  Index.prototype.isIndex = true;

	  function _createImmutableMatrix(arg) {
	    // loop array elements
	    for (var i = 0, l = arg.length; i < l; i++) {
	      if (typeof arg[i] !== 'number' || !isInteger$2(arg[i])) {
	        throw new TypeError('Index parameters must be positive integer numbers');
	      }
	    }
	    // create matrix
	    return new type.ImmutableDenseMatrix(arg);
	  }

	  /**
	   * Create a clone of the index
	   * @memberof Index
	   * @return {Index} clone
	   */
	  Index.prototype.clone = function () {
	    var index = new Index();
	    index._dimensions = clone$1(this._dimensions);
	    index._isScalar = this._isScalar;
	    return index;
	  };

	  /**
	   * Create an index from an array with ranges/numbers
	   * @memberof Index
	   * @param {Array.<Array | number>} ranges
	   * @return {Index} index
	   * @private
	   */
	  Index.create = function (ranges) {
	    var index = new Index();
	    Index.apply(index, ranges);
	    return index;
	  };

	  /**
	   * Retrieve the size of the index, the number of elements for each dimension.
	   * @memberof Index
	   * @returns {number[]} size
	   */
	  Index.prototype.size = function () {
	    var size = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var d = this._dimensions[i];
	      size[i] = typeof d === 'string' ? 1 : d.size()[0];
	    }

	    return size;
	  };

	  /**
	   * Get the maximum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} max
	   */
	  Index.prototype.max = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.max();
	    }

	    return values;
	  };

	  /**
	   * Get the minimum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} min
	   */
	  Index.prototype.min = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.min();
	    }

	    return values;
	  };

	  /**
	   * Loop over each of the ranges of the index
	   * @memberof Index
	   * @param {Function} callback   Called for each range with a Range as first
	   *                              argument, the dimension as second, and the
	   *                              index object as third.
	   */
	  Index.prototype.forEach = function (callback) {
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      callback(this._dimensions[i], i, this);
	    }
	  };

	  /**
	   * Retrieve the dimension for the given index
	   * @memberof Index
	   * @param {Number} dim                  Number of the dimension
	   * @returns {Range | null} range
	   */
	  Index.prototype.dimension = function (dim) {
	    return this._dimensions[dim] || null;
	  };

	  /**
	   * Test whether this index contains an object property
	   * @returns {boolean} Returns true if the index is an object property
	   */
	  Index.prototype.isObjectProperty = function () {
	    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
	  };

	  /**
	   * Returns the object property name when the Index holds a single object property,
	   * else returns null
	   * @returns {string | null}
	   */
	  Index.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this._dimensions[0] : null;
	  };

	  /**
	   * Test whether this index contains only a single value.
	   *
	   * This is the case when the index is created with only scalar values as ranges,
	   * not for ranges resolving into a single value.
	   * @memberof Index
	   * @return {boolean} isScalar
	   */
	  Index.prototype.isScalar = function () {
	    return this._isScalar;
	  };

	  /**
	   * Expand the Index into an array.
	   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.toArray = function () {
	    var array = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
	    }
	    return array;
	  };

	  /**
	   * Get the primitive value of the Index, a two dimensional array.
	   * Equivalent to Index.toArray().
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.valueOf = Index.prototype.toArray;

	  /**
	   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
	   * @memberof Index
	   * @returns {String} str
	   */
	  Index.prototype.toString = function () {
	    var strings = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      if (typeof dimension === 'string') {
	        strings.push(JSON.stringify(dimension));
	      } else {
	        strings.push(dimension.toString());
	      }
	    }

	    return '[' + strings.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the Index
	   * @memberof Index
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   */
	  Index.prototype.toJSON = function () {
	    return {
	      mathjs: 'Index',
	      dimensions: this._dimensions
	    };
	  };

	  /**
	   * Instantiate an Index from a JSON object
	   * @memberof Index
	   * @param {Object} json A JSON object structured as:
	   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   * @return {Index}
	   */
	  Index.fromJSON = function (json) {
	    return Index.create(json.dimensions);
	  };

	  return Index;
	}

	var name$s = 'Index';
	var path$9 = 'type';
	var factory_1$u = factory$u;

	var MatrixIndex = {
		name: name$s,
		path: path$9,
		factory: factory_1$u
	};

	function factory$v(type, config, load, typed) {
	  /**
	   * Create a range. A range has a start, step, and end, and contains functions
	   * to iterate over the range.
	   *
	   * A range can be constructed as:
	   *
	   *     const range = new Range(start, end)
	   *     const range = new Range(start, end, step)
	   *
	   * To get the result of the range:
	   *     range.forEach(function (x) {
	   *         console.log(x)
	   *     })
	   *     range.map(function (x) {
	   *         return math.sin(x)
	   *     })
	   *     range.toArray()
	   *
	   * Example usage:
	   *
	   *     const c = new Range(2, 6)       // 2:1:5
	   *     c.toArray()                     // [2, 3, 4, 5]
	   *     const d = new Range(2, -3, -1)  // 2:-1:-2
	   *     d.toArray()                     // [2, 1, 0, -1, -2]
	   *
	   * @class Range
	   * @constructor Range
	   * @param {number} start  included lower bound
	   * @param {number} end    excluded upper bound
	   * @param {number} [step] step size, default value is 1
	   */
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    var hasStart = start !== null && start !== undefined;
	    var hasEnd = end !== null && end !== undefined;
	    var hasStep = step !== null && step !== undefined;

	    if (hasStart) {
	      if (type.isBigNumber(start)) {
	        start = start.toNumber();
	      } else if (typeof start !== 'number') {
	        throw new TypeError('Parameter start must be a number');
	      }
	    }
	    if (hasEnd) {
	      if (type.isBigNumber(end)) {
	        end = end.toNumber();
	      } else if (typeof end !== 'number') {
	        throw new TypeError('Parameter end must be a number');
	      }
	    }
	    if (hasStep) {
	      if (type.isBigNumber(step)) {
	        step = step.toNumber();
	      } else if (typeof step !== 'number') {
	        throw new TypeError('Parameter step must be a number');
	      }
	    }

	    this.start = hasStart ? parseFloat(start) : 0;
	    this.end = hasEnd ? parseFloat(end) : 0;
	    this.step = hasStep ? parseFloat(step) : 1;
	  }

	  /**
	   * Attach type information
	   */
	  Range.prototype.type = 'Range';
	  Range.prototype.isRange = true;

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @memberof Range
	   * @param {string} str
	   * @return {Range | null} range
	   */
	  Range.parse = function (str) {
	    if (typeof str !== 'string') {
	      return null;
	    }

	    var args = str.split(':');
	    var nums = args.map(function (arg) {
	      return parseFloat(arg);
	    });

	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return new Range(nums[0], nums[1]);
	      case 3:
	        return new Range(nums[0], nums[2], nums[1]);
	      default:
	        return null;
	    }
	  };

	  /**
	   * Create a clone of the range
	   * @return {Range} clone
	   */
	  Range.prototype.clone = function () {
	    return new Range(this.start, this.end, this.step);
	  };

	  /**
	   * Retrieve the size of the range.
	   * Returns an array containing one number, the number of elements in the range.
	   * @memberof Range
	   * @returns {number[]} size
	   */
	  Range.prototype.size = function () {
	    var len = 0;
	    var start = this.start;
	    var step = this.step;
	    var end = this.end;
	    var diff = end - start;

	    if (number.sign(step) === number.sign(diff)) {
	      len = Math.ceil(diff / step);
	    } else if (diff === 0) {
	      len = 0;
	    }

	    if (isNaN(len)) {
	      len = 0;
	    }
	    return [len];
	  };

	  /**
	   * Calculate the minimum value in the range
	   * @memberof Range
	   * @return {number | undefined} min
	   */
	  Range.prototype.min = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start;
	      } else {
	        // negative step
	        return this.start + (size - 1) * this.step;
	      }
	    } else {
	      return undefined;
	    }
	  };

	  /**
	   * Calculate the maximum value in the range
	   * @memberof Range
	   * @return {number | undefined} max
	   */
	  Range.prototype.max = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start + (size - 1) * this.step;
	      } else {
	        // negative step
	        return this.start;
	      }
	    } else {
	      return undefined;
	    }
	  };

	  /**
	   * Execute a callback function for each value in the range.
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Range being traversed.
	   */
	  Range.prototype.forEach = function (callback) {
	    var x = this.start;
	    var step = this.step;
	    var end = this.end;
	    var i = 0;

	    if (step > 0) {
	      while (x < end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    } else if (step < 0) {
	      while (x > end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	  };

	  /**
	   * Execute a callback function for each value in the Range, and return the
	   * results as an array
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @returns {Array} array
	   */
	  Range.prototype.map = function (callback) {
	    var array = [];
	    this.forEach(function (value, index, obj) {
	      array[index[0]] = callback(value, index, obj);
	    });
	    return array;
	  };

	  /**
	   * Create an Array with a copy of the Ranges data
	   * @memberof Range
	   * @returns {Array} array
	   */
	  Range.prototype.toArray = function () {
	    var array = [];
	    this.forEach(function (value, index) {
	      array[index[0]] = value;
	    });
	    return array;
	  };

	  /**
	   * Get the primitive value of the Range, a one dimensional array
	   * @memberof Range
	   * @returns {Array} array
	   */
	  Range.prototype.valueOf = function () {
	    // TODO: implement a caching mechanism for range.valueOf()
	    return this.toArray();
	  };

	  /**
	   * Get a string representation of the range, with optional formatting options.
	   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
	   * @memberof Range
	   * @param {Object | number | function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Range.prototype.format = function (options) {
	    var str = number.format(this.start, options);

	    if (this.step !== 1) {
	      str += ':' + number.format(this.step, options);
	    }
	    str += ':' + number.format(this.end, options);
	    return str;
	  };

	  /**
	   * Get a string representation of the range.
	   * @memberof Range
	   * @returns {string}
	   */
	  Range.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the range
	   * @memberof Range
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   */
	  Range.prototype.toJSON = function () {
	    return {
	      mathjs: 'Range',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };

	  /**
	   * Instantiate a Range from a JSON object
	   * @memberof Range
	   * @param {Object} json A JSON object structured as:
	   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   * @return {Range}
	   */
	  Range.fromJSON = function (json) {
	    return new Range(json.start, json.end, json.step);
	  };

	  return Range;
	}

	var name$t = 'Range';
	var path$a = 'type';
	var factory_1$v = factory$v;

	var Range = {
		name: name$t,
		path: path$a,
		factory: factory_1$v
	};

	function factory$w(type, config, load, typed) {
	  /**
	   * Create an index. An Index can store ranges having start, step, and end
	   * for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Syntax:
	   *
	   *     math.index(range1, range2, ...)
	   *
	   * Where each range can be any of:
	   *
	   * - A number
	   * - A string for getting/setting an object property
	   * - An instance of `Range`
	   * - A one-dimensional Array or a Matrix with numbers
	   *
	   * Indexes must be zero-based, integer numbers.
	   *
	   * Examples:
	   *
	   *    const math = require('mathjs')
	   *
	   *    const b = [1, 2, 3, 4, 5]
	   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
	   *
	   *    const a = math.matrix([[1, 2], [3, 4]])
	   *    a.subset(math.index(0, 1))             // returns 2
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, matrix, number, string, unit
	   *
	   * @param {...*} ranges   Zero or more ranges or numbers.
	   * @return {Index}        Returns the created index
	   */
	  return typed('index', {
	    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
	      var ranges = args.map(function (arg) {
	        if (type.isBigNumber(arg)) {
	          return arg.toNumber(); // convert BigNumber to Number
	        } else if (Array.isArray(arg) || type.isMatrix(arg)) {
	          return arg.map(function (elem) {
	            // convert BigNumber to Number
	            return type.isBigNumber(elem) ? elem.toNumber() : elem;
	          });
	        } else {
	          return arg;
	        }
	      });

	      var res = new type.Index();
	      type.Index.apply(res, ranges);
	      return res;
	    }
	  });
	}

	var name$u = 'index';
	var factory_1$w = factory$w;

	var _function$1 = {
		name: name$u,
		factory: factory_1$w
	};

	function factory$x(type, config, load, typed) {
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   *
	   * Syntax:
	   *
	   *    math.sparse()               // creates an empty sparse matrix.
	   *    math.sparse(data)           // creates a sparse matrix with initial data.
	   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
	   *
	   * Examples:
	   *
	   *    let m = math.sparse([[1, 2], [3, 4]])
	   *    m.size()                        // Array [2, 2]
	   *    m.resize([3, 2], 5)
	   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, matrix
	   *
	   * @param {Array | Matrix} [data]    A two dimensional array
	   *
	   * @return {Matrix} The created matrix
	   */
	  var sparse = typed('sparse', {
	    '': function _() {
	      return new SparseMatrix([]);
	    },

	    'string': function string(datatype) {
	      return new SparseMatrix([], datatype);
	    },

	    'Array | Matrix': function ArrayMatrix(data) {
	      return new SparseMatrix(data);
	    },

	    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
	      return new SparseMatrix(data, datatype);
	    }
	  });

	  sparse.toTex = {
	    0: '\\begin{bsparse}\\end{bsparse}',
	    1: '\\left(${args[0]}\\right)'
	  };

	  return sparse;
	}

	var name$v = 'sparse';
	var factory_1$x = factory$x;

	var sparse = {
		name: name$v,
		factory: factory_1$x
	};

	var matrix$1 = [
	// types
	Matrix, DenseMatrix, SparseMatrix, Spa, FibonacciHeap, ImmutableDenseMatrix, MatrixIndex, Range,

	// construction functions
	_function$1, matrix, sparse];

	function factory$y(type, config, load, typed) {
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2)                         // returns number 2
	   *    math.number('7.2')                     // returns number 7.2
	   *    math.number(true)                      // returns number 1
	   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */
	  var number = typed('number', {
	    '': function _() {
	      return 0;
	    },

	    'number': function number(x) {
	      return x;
	    },

	    'string': function string(x) {
	      var num = Number(x);
	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }
	      return num;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.toNumber();
	    },

	    'Fraction': function Fraction(x) {
	      return x.valueOf();
	    },

	    'Unit': function Unit(x) {
	      throw new Error('Second argument with valueless unit expected');
	    },

	    'null': function _null(x) {
	      return 0;
	    },

	    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, number);
	    }
	  });

	  number.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };

	  return number;
	}

	var name$w = 'number';
	var factory_1$y = factory$y;

	var number$3 = {
		name: name$w,
		factory: factory_1$y
	};

	function factory$z(type, config, load, typed) {
	  /**
	   * A ResultSet contains a list or results
	   * @class ResultSet
	   * @param {Array} entries
	   * @constructor ResultSet
	   */
	  function ResultSet(entries) {
	    if (!(this instanceof ResultSet)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.entries = entries || [];
	  }

	  /**
	   * Attach type information
	   */
	  ResultSet.prototype.type = 'ResultSet';
	  ResultSet.prototype.isResultSet = true;

	  /**
	   * Returns the array with results hold by this ResultSet
	   * @memberof ResultSet
	   * @returns {Array} entries
	   */
	  ResultSet.prototype.valueOf = function () {
	    return this.entries;
	  };

	  /**
	   * Returns the stringified results of the ResultSet
	   * @memberof ResultSet
	   * @returns {string} string
	   */
	  ResultSet.prototype.toString = function () {
	    return '[' + this.entries.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the ResultSet
	   * @memberof ResultSet
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "ResultSet", "entries": [...]}`
	   */
	  ResultSet.prototype.toJSON = function () {
	    return {
	      mathjs: 'ResultSet',
	      entries: this.entries
	    };
	  };

	  /**
	   * Instantiate a ResultSet from a JSON object
	   * @memberof ResultSet
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "ResultSet", "entries": [...]}`
	   * @return {ResultSet}
	   */
	  ResultSet.fromJSON = function (json) {
	    return new ResultSet(json.entries);
	  };

	  return ResultSet;
	}

	var name$x = 'ResultSet';
	var path$b = 'type';
	var factory_1$z = factory$z;

	var ResultSet = {
		name: name$x,
		path: path$b,
		factory: factory_1$z
	};

	var resultset = [
	// type
	ResultSet];

	function factory$A(type, config, load, typed) {
	  /**
	   * Create a string or convert any object into a string.
	   * Elements of Arrays and Matrices are processed element wise.
	   *
	   * Syntax:
	   *
	   *    math.string(value)
	   *
	   * Examples:
	   *
	   *    math.string(4.2)               // returns string '4.2'
	   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
	   *
	   *    const u = math.unit(5, 'km')
	   *    math.string(u.to('m'))         // returns string '5000 m'
	   *
	   *    math.string([true, false])     // returns ['true', 'false']
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, unit
	   *
	   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
	   * @return {string | Array | Matrix} The created string
	   */
	  var string = typed('string', {
	    '': function _() {
	      return '';
	    },

	    'number': number.format,

	    'null': function _null(x) {
	      return 'null';
	    },

	    'boolean': function boolean(x) {
	      return x + '';
	    },

	    'string': function string(x) {
	      return x;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, string);
	    },

	    'any': function any(x) {
	      return String(x);
	    }
	  });

	  string.toTex = {
	    0: '\\mathtt{""}',
	    1: '\\mathrm{string}\\left(${args[0]}\\right)'
	  };

	  return string;
	}

	var name$y = 'string';
	var factory_1$A = factory$A;

	var string$5 = {
		name: name$y,
		factory: factory_1$A
	};

	var constants = createCommonjsModule(function (module, exports) {

	var memoize = _function.memoize;

	/**
	 * Calculate BigNumber e
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns e
	 */
	exports.e = memoize(function (BigNumber) {
	  return new BigNumber(1).exp();
	}, hasher);

	/**
	 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns phi
	 */
	exports.phi = memoize(function (BigNumber) {
	  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
	}, hasher);

	/**
	 * Calculate BigNumber pi.
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns pi
	 */
	exports.pi = memoize(function (BigNumber) {
	  return BigNumber.acos(-1);
	}, hasher);

	/**
	 * Calculate BigNumber tau, tau = 2 * pi
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns tau
	 */
	exports.tau = memoize(function (BigNumber) {
	  return exports.pi(BigNumber).times(2);
	}, hasher);

	/**
	 * Create a hash for a BigNumber constructor function. The created has is
	 * the configured precision
	 * @param {Array} args         Supposed to contain a single entry with
	 *                             a BigNumber constructor
	 * @return {number} precision
	 * @private
	 */
	function hasher(args) {
	  return args[0].precision;
	}
	});
	var constants_1 = constants.e;
	var constants_2 = constants.phi;
	var constants_3 = constants.pi;
	var constants_4 = constants.tau;

	function factory$B(type, config, load, typed) {
	  var latex$$1 = latex;

	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5)      // returns -3.5
	   *    math.unaryMinus(-4.2)     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */
	  var unaryMinus = typed('unaryMinus', {
	    'number': function number(x) {
	      return -x;
	    },

	    'Complex': function Complex(x) {
	      return x.neg();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.neg();
	    },

	    'Fraction': function Fraction(x) {
	      return x.neg();
	    },

	    'Unit': function Unit(x) {
	      var res = x.clone();
	      res.value = unaryMinus(x.value);
	      return res;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryMinus(0) = 0
	      return deepMap(x, unaryMinus, true);
	    }

	    // TODO: add support for string
	  });

	  unaryMinus.toTex = {
	    1: latex$$1.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
	  };

	  return unaryMinus;
	}

	var name$z = 'unaryMinus';
	var factory_1$B = factory$B;

	var unaryMinus = {
		name: name$z,
		factory: factory_1$B
	};

	function factory$C(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm05 = function algorithm05(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0,
	        k1 = void 0;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values A(:,j)
	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // push index
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      }
	      // loop values B(:,j)
	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row existed in A
	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        }
	        // update workspace
	        wb[i] = mark;
	        // check we need to process values
	        if (xb) {
	          xb[i] = bvalues[k];
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // marks
	          var wai = wa[i];
	          var wbi = wb[i];
	          // check Aij or Bij are nonzero
	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero;
	            // Cij
	            var vc = cf(va, vb);
	            // check for zero
	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc);
	              // increment pointer
	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm05;
	}

	var name$A = 'algorithm05';
	var factory_1$C = factory$C;

	var algorithm05 = {
		name: name$A,
		factory: factory_1$C
	};

	function factory$D(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);
	  var addScalar$$1 = load(addScalar);
	  var unaryMinus$$1 = load(unaryMinus);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm03$$1 = load(algorithm03);
	  var algorithm05$$1 = load(algorithm05);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  // TODO: split function subtract in two: subtract and subtractScalar

	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2)        // returns number 3.3
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.subtract(a, b)          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
	   *
	   *    const c = math.unit('2.1 km')
	   *    const d = math.unit('500m')
	   *    math.subtract(c, d)          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */
	  var subtract = typed('subtract', {

	    'number, number': function numberNumber(x, y) {
	      return x - y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.sub(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.minus(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.sub(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value === null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }

	      if (y.value === null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }

	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }

	      var res = x.clone();
	      res.value = subtract(res.value, y.value);
	      res.fixPrefix = false;

	      return res;
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm05$$1(x, y, subtract);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm03$$1(y, x, subtract, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm01$$1(x, y, subtract, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm13$$1(x, y, subtract);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return subtract(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return subtract(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return subtract(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10$$1(x, unaryMinus$$1(y), addScalar$$1);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, subtract);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10$$1(y, x, subtract, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, subtract, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, subtract, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, subtract, true).valueOf();
	    }
	  });

	  subtract.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['subtract'] + '${args[1]}\\right)'
	  };

	  return subtract;
	}

	/**
	 * Check whether matrix x and y have the same number of dimensions.
	 * Throws a DimensionError when dimensions are not equal
	 * @param {Matrix} x
	 * @param {Matrix} y
	 */
	function checkEqualDimensions(x, y) {
	  var xsize = x.size();
	  var ysize = y.size();

	  if (xsize.length !== ysize.length) {
	    throw new DimensionError_1(xsize.length, ysize.length);
	  }
	}

	var name$B = 'subtract';
	var factory_1$D = factory$D;

	var subtract = {
		name: name$B,
		factory: factory_1$D
	};

	function factory$E(type, config, load, typed) {
	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
	   * @private
	   */
	  var multiplyScalar = typed('multiplyScalar', {

	    'number, number': function numberNumber(x, y) {
	      return x * y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.mul(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.times(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mul(y);
	    },

	    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
	      var res = y.clone();
	      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
	      return res;
	    },

	    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
	      var res = x.clone();
	      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
	      return res;
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.multiply(y);
	    }

	  });

	  return multiplyScalar;
	}

	var factory_1$E = factory$E;

	var multiplyScalar = {
		factory: factory_1$E
	};

	function factory$F(type, config, load, typed) {
	  var multiplyScalar$$1 = load(multiplyScalar);

	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
	   * @private
	   */
	  var divideScalar = typed('divide', {
	    'number, number': function numberNumber(x, y) {
	      return x / y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.div(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.div(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.div(y);
	    },

	    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
	      var res = x.clone();
	      // TODO: move the divide function to Unit.js, it uses internals of Unit
	      res.value = divideScalar(res.value === null ? res._normalize(1) : res.value, y);
	      return res;
	    },

	    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
	      var res = y.pow(-1);
	      // TODO: move the divide function to Unit.js, it uses internals of Unit
	      res.value = multiplyScalar$$1(res.value === null ? res._normalize(1) : res.value, x);
	      return res;
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.divide(y);
	    }

	  });

	  return divideScalar;
	}

	var factory_1$F = factory$F;

	var divideScalar = {
		factory: factory_1$F
	};

	var isInteger$3 = number.isInteger;

	function factory$G(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Create a 2-dimensional identity matrix with size m x n or n x n.
	   * The matrix has ones on the diagonal and zeros elsewhere.
	   *
	   * Syntax:
	   *
	   *    math.identity(n)
	   *    math.identity(n, format)
	   *    math.identity(m, n)
	   *    math.identity(m, n, format)
	   *    math.identity([m, n])
	   *    math.identity([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
	   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
	   *
	   * See also:
	   *
	   *    diag, ones, zeros, size, range
	   *
	   * @param {...number | Matrix | Array} size   The size for the matrix
	   * @param {string} [format]                   The Matrix storage format
	   *
	   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
	   */
	  var identity = typed('identity', {
	    '': function _() {
	      return config.matrix === 'Matrix' ? matrix$$1([]) : [];
	    },

	    'string': function string(format) {
	      return matrix$$1(format);
	    },

	    'number | BigNumber': function numberBigNumber(rows) {
	      return _identity(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
	    },

	    'number | BigNumber, string': function numberBigNumberString(rows, format) {
	      return _identity(rows, rows, format);
	    },

	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
	      return _identity(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
	    },

	    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
	      return _identity(rows, cols, format);
	    },

	    'Array': function Array(size) {
	      return _identityVector(size);
	    },

	    'Array, string': function ArrayString(size, format) {
	      return _identityVector(size, format);
	    },

	    'Matrix': function Matrix(size) {
	      return _identityVector(size.valueOf(), size.storage());
	    },

	    'Matrix, string': function MatrixString(size, format) {
	      return _identityVector(size.valueOf(), format);
	    }
	  });

	  identity.toTex = undefined; // use default template

	  return identity;

	  function _identityVector(size, format) {
	    switch (size.length) {
	      case 0:
	        return format ? matrix$$1(format) : [];
	      case 1:
	        return _identity(size[0], size[0], format);
	      case 2:
	        return _identity(size[0], size[1], format);
	      default:
	        throw new Error('Vector containing two values expected');
	    }
	  }

	  /**
	   * Create an identity matrix
	   * @param {number | BigNumber} rows
	   * @param {number | BigNumber} cols
	   * @param {string} [format]
	   * @returns {Matrix}
	   * @private
	   */
	  function _identity(rows, cols, format) {
	    // BigNumber constructor with the right precision
	    var Big = type.isBigNumber(rows) || type.isBigNumber(cols) ? type.BigNumber : null;

	    if (type.isBigNumber(rows)) rows = rows.toNumber();
	    if (type.isBigNumber(cols)) cols = cols.toNumber();

	    if (!isInteger$3(rows) || rows < 1) {
	      throw new Error('Parameters in function identity must be positive integers');
	    }
	    if (!isInteger$3(cols) || cols < 1) {
	      throw new Error('Parameters in function identity must be positive integers');
	    }

	    var one = Big ? new type.BigNumber(1) : 1;
	    var defaultValue = Big ? new Big(0) : 0;
	    var size = [rows, cols];

	    // check we need to return a matrix
	    if (format) {
	      // get matrix storage constructor
	      var F = type.Matrix.storage(format);
	      // create diagonal matrix (use optimized implementation for storage format)
	      return F.diagonal(size, one, 0, defaultValue);
	    }

	    // create and resize array
	    var res = array.resize([], size, defaultValue);
	    // fill in ones on the diagonal
	    var minimum = rows < cols ? rows : cols;
	    // fill diagonal
	    for (var d = 0; d < minimum; d++) {
	      res[d][d] = one;
	    }
	    return res;
	  }
	}

	var name$C = 'identity';
	var factory_1$G = factory$G;

	var identity = {
		name: name$C,
		factory: factory_1$G
	};

	function factory$H(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm11 = function algorithm11(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k];
	        // invoke callback
	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
	        // check value is zero
	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    }
	    // update ptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm11;
	}

	var name$D = 'algorithm11';
	var factory_1$H = factory$H;

	var algorithm11 = {
		name: name$D,
		factory: factory_1$H
	};

	var extend$1 = object.extend;


	function factory$I(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);
	  var addScalar$$1 = load(addScalar);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var equalScalar$$1 = load(equalScalar);

	  var algorithm11$$1 = load(algorithm11);
	  var algorithm14$$1 = load(algorithm14);

	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Multiply two or more values, `x * y`.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *    math.multiply(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2)        // returns number 20.8
	   *    math.multiply(2, 3, 4)       // returns number 24
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.multiply(a, b)          // returns Complex 5 + 14i
	   *
	   *    const c = [[1, 2], [4, 3]]
	   *    const d = [[1, 2, 3], [3, -4, 7]]
	   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    const e = math.unit('2.1 km')
	   *    math.multiply(3, e)          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide, prod, cross, dot
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */
	  var multiply = typed('multiply', extend$1({
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices

	    'Array, Array': function ArrayArray(x, y) {
	      // check dimensions
	      _validateMatrixDimensions(array.size(x), array.size(y));

	      // use dense matrix implementation
	      var m = multiply(matrix$$1(x), matrix$$1(y));
	      // return array or scalar
	      return type.isMatrix(m) ? m.valueOf() : m;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size();

	      // check dimensions
	      _validateMatrixDimensions(xsize, ysize);

	      // process dimensions
	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        }
	        // Vector * Matrix
	        return _multiplyVectorMatrix(x, y);
	      }
	      // process y dimensions
	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      }
	      // Matrix * Matrix
	      return _multiplyMatrixMatrix(x, y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(x, matrix$$1(y));
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(matrix$$1(x, y.storage()), y);
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, multiplyScalar$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, multiplyScalar$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11$$1(y, x, multiplyScalar$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, multiplyScalar$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, multiplyScalar$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, multiplyScalar$$1, true).valueOf();
	    },

	    'any, any': multiplyScalar$$1,

	    'any, any, ...any': function anyAnyAny(x, y, rest) {
	      var result = multiply(x, y);

	      for (var i = 0; i < rest.length; i++) {
	        result = multiply(result, rest[i]);
	      }

	      return result;
	    }
	  }, multiplyScalar$$1.signatures));

	  function _validateMatrixDimensions(size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }
	            break;
	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }
	            break;
	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */
	  function _multiplyVectorVector(a, b, n) {
	    // check empty vector
	    if (n === 0) {
	      throw new Error('Cannot multiply two empty vectors');
	    }

	    // a dense
	    var adata = a._data;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	    }

	    // result (do not initialize it with zero)
	    var c = mf(adata[0], bdata[0]);
	    // loop data
	    for (var i = 1; i < n; i++) {
	      // multiply and accumulate
	      c = af(c, mf(adata[i], bdata[i]));
	    }
	    return c;
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  function _multiplyVectorMatrix(a, b) {
	    // process storage
	    if (b.storage() !== 'dense') {
	      throw new Error('Support for SparseMatrix not implemented');
	    }
	    return _multiplyVectorDenseMatrix(a, b);
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  function _multiplyVectorDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var alength = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix columns
	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]);
	      // loop vector
	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }
	      c[j] = sum;
	    }

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */
	  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
	    'DenseMatrix, any': _multiplyDenseMatrixVector,
	    'SparseMatrix, any': _multiplySparseMatrixVector
	  });

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */
	  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
	    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
	    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
	    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
	    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
	  });

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M)
	   */
	  function _multiplyDenseMatrixVector(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // sum (do not initialize it with zero)
	      var sum = mf(row[0], bdata[0]);
	      // loop matrix a columns
	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }
	      c[i] = sum;
	    }

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */
	  function _multiplyDenseMatrixDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // initialize row array
	      c[i] = [];
	      // loop matrix b columns
	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]);
	        // loop matrix a columns
	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }
	        c[i][j] = sum;
	      }
	    }

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */
	  function _multiplyDenseMatrixSparseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // validate b matrix
	    if (!bvalues) {
	      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    }
	    // rows & columns
	    var arows = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;
	    // equalScalar signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // indeces in column jb
	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1];
	      // do not process column jb if no data exists
	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0;
	        // loop a rows
	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1;
	          // C[i, jb]
	          var cij = void 0;
	          // values in b column j
	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb];
	            // check value has been initialized
	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]);
	              // update mark
	              last = mark;
	            } else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          }
	          // check column has been processed and value != 0
	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1)
	   */
	  function _multiplySparseMatrixVector(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    }
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;
	    // equalScalar signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // update ptr
	    cptr[0] = 0;
	    // rows in b
	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib];
	      // check b[ib] != 0, avoid loops
	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka];
	          // check value exists in current j
	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true;
	            // add i to pattern of C
	            cindex.push(ia);
	            // x(ia) = A
	            x[ia] = mf(vbi, avalues[ka]);
	          } else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    }
	    // copy values from x to column jb of c
	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p];
	      // copy value
	      cvalues[p] = x[ic];
	    }
	    // update ptr
	    cptr[1] = cindex.length;

	    // return sparse matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  function _multiplySparseMatrixDenseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    }
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1];

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;
	    // equalScalar signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // rows in jb
	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb];
	        // check b[ib, jb] != 0, avoid loops
	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(vbij, avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      }
	      // copy values from x to column jb of c
	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p];
	        // copy value
	        cvalues[p] = x[ic];
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  }

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  function _multiplySparseMatrixSparseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype;

	    // rows & columns
	    var arows = a._size[0];
	    var bcolumns = b._size[1];
	    // flag indicating both matrices (a & b) contain data
	    var values = avalues && bvalues;

	    // datatype
	    var dt = void 0;
	    // addScalar signature to use
	    var af = addScalar$$1;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar$$1;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar$$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$$1, [dt, dt]);
	    }

	    // result
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = values ? [] : undefined;
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	    // variables
	    var ka = void 0,
	        ka0 = void 0,
	        ka1 = void 0,
	        kb = void 0,
	        kb0 = void 0,
	        kb1 = void 0,
	        ia = void 0,
	        ib = void 0;
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // B values & index in j
	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb];
	        // check we need to process values
	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        } else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	            }
	          }
	        }
	      }
	      // check we need to process matrix values (pattern matrix)
	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p];
	          // copy value
	          cvalues[p] = x[ic];
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  }

	  multiply.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['multiply'] + '${args[1]}\\right)'
	  };

	  return multiply;
	}

	var name$E = 'multiply';
	var factory_1$I = factory$I;

	var multiply = {
		name: name$E,
		factory: factory_1$I
	};

	var isInteger$4 = number.isInteger;
	var size = array.size;

	function factory$J(type, config, load, typed) {
	  var latex$$1 = latex;
	  var identity$$1 = load(identity);
	  var multiply$$1 = load(multiply);
	  var matrix$$1 = load(matrix);
	  var fraction = load(fraction$2);
	  var number$$1 = load(number$3);

	  /**
	   * Calculates the power of x to y, `x ^ y`.
	   * Matrix exponentiation is supported for square matrices `x`, and positive
	   * integer exponents `y`.
	   *
	   * For cubic roots of negative numbers, the function returns the principal
	   * root by default. In order to let the function return the real root,
	   * math.js can be configured with `math.config({predictable: true})`.
	   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
	   *
	   * Syntax:
	   *
	   *    math.pow(x, y)
	   *
	   * Examples:
	   *
	   *    math.pow(2, 3)               // returns number 8
	   *
	   *    const a = math.complex(2, 3)
	   *    math.pow(a, 2)                // returns Complex -5 + 12i
	   *
	   *    const b = [[1, 2], [4, 3]]
	   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    multiply, sqrt, cbrt, nthRoot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex} y                   The exponent
	   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
	   */
	  var pow = typed('pow', {
	    'number, number': _pow,

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.pow(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      if (y.isInteger() || x >= 0 || config.predictable) {
	        return x.pow(y);
	      } else {
	        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
	      }
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      if (y.d !== 1) {
	        if (config.predictable) {
	          throw new Error('Function pow does not support non-integer exponents for fractions.');
	        } else {
	          return _pow(x.valueOf(), y.valueOf());
	        }
	      } else {
	        return x.pow(y);
	      }
	    },

	    'Array, number': _powArray,

	    'Array, BigNumber': function ArrayBigNumber(x, y) {
	      return _powArray(x, y.toNumber());
	    },

	    'Matrix, number': _powMatrix,

	    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
	      return _powMatrix(x, y.toNumber());
	    },

	    'Unit, number': function UnitNumber(x, y) {
	      return x.pow(y);
	    }

	  });

	  /**
	   * Calculates the power of x to y, x^y, for two numbers.
	   * @param {number} x
	   * @param {number} y
	   * @return {number | Complex} res
	   * @private
	   */
	  function _pow(x, y) {
	    // Alternatively could define a 'realmode' config option or something, but
	    // 'predictable' will work for now
	    if (config.predictable && !isInteger$4(y) && x < 0) {
	      // Check to see if y can be represented as a fraction
	      try {
	        var yFrac = fraction(y);
	        var yNum = number$$1(yFrac);
	        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
	          if (yFrac.d % 2 === 1) {
	            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
	          }
	        }
	      } catch (ex) {}
	      // fraction() throws an error if y is Infinity, etc.


	      // Unable to express y as a fraction, so continue on
	    }

	    // x^Infinity === 0 if -1 < x < 1
	    // A real number 0 is returned instead of complex(0)
	    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
	      return 0;
	    }

	    // **for predictable mode** x^Infinity === NaN if x < -1
	    // N.B. this behavour is different from `Math.pow` which gives
	    // (-2)^Infinity === Infinity
	    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
	      return NaN;
	    }

	    if (isInteger$4(y) || x >= 0 || config.predictable) {
	      return Math.pow(x, y);
	    } else {
	      return new type.Complex(x, 0).pow(y, 0);
	    }
	  }

	  /**
	   * Calculate the power of a 2d array
	   * @param {Array} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Array}
	   * @private
	   */
	  function _powArray(x, y) {
	    if (!isInteger$4(y) || y < 0) {
	      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
	    }
	    // verify that A is a 2 dimensional square matrix
	    var s = size(x);
	    if (s.length !== 2) {
	      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
	    }
	    if (s[0] !== s[1]) {
	      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
	    }

	    var res = identity$$1(s[0]).valueOf();
	    var px = x;
	    while (y >= 1) {
	      if ((y & 1) === 1) {
	        res = multiply$$1(px, res);
	      }
	      y >>= 1;
	      px = multiply$$1(px, px);
	    }
	    return res;
	  }

	  /**
	   * Calculate the power of a 2d matrix
	   * @param {Matrix} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Matrix}
	   * @private
	   */
	  function _powMatrix(x, y) {
	    return matrix$$1(_powArray(x.valueOf(), y));
	  }

	  pow.toTex = {
	    2: '\\left(${args[0]}\\right)' + latex$$1.operators['pow'] + '{${args[1]}}'
	  };

	  return pow;
	}

	var name$F = 'pow';
	var factory_1$J = factory$J;

	var pow = {
		name: name$F,
		factory: factory_1$J
	};

	function factory$K(type, config, load, typed) {
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5)                // returns number 3.5
	   *    math.abs(-4.2)               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Absolute value of `x`
	   */
	  var abs = typed('abs', {
	    'number': Math.abs,

	    'Complex': function Complex(x) {
	      return x.abs();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.abs();
	    },

	    'Fraction': function Fraction(x) {
	      return x.abs();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since abs(0) = 0
	      return deepMap(x, abs, true);
	    },

	    'Unit': function Unit(x) {
	      return x.abs();
	    }
	  });

	  abs.toTex = { 1: '\\left|${args[0]}\\right|' };

	  return abs;
	}

	var name$G = 'abs';
	var factory_1$K = factory$K;

	var abs = {
		name: name$G,
		factory: factory_1$K
	};

	function factory$L(type, config, load, typed) {
	  /**
	   * Round a value towards zero.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.fix(x)
	   *
	   * Examples:
	   *
	   *    math.fix(3.2)                // returns number 3
	   *    math.fix(3.8)                // returns number 3
	   *    math.fix(-4.2)               // returns number -4
	   *    math.fix(-4.7)               // returns number -4
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.fix(c)                  // returns Complex 3 - 2i
	   *
	   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]
	   *
	   * See also:
	   *
	   *    ceil, floor, round
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var fix = typed('fix', {
	    'number': function number(x) {
	      return x > 0 ? Math.floor(x) : Math.ceil(x);
	    },

	    'Complex': function Complex(x) {
	      return new type.Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isNegative() ? x.ceil() : x.floor();
	    },

	    'Fraction': function Fraction(x) {
	      return x.s < 0 ? x.ceil() : x.floor();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since fix(0) = 0
	      return deepMap(x, fix, true);
	    }
	  });

	  fix.toTex = { 1: '\\mathrm{${name}}\\left(${args[0]}\\right)' };

	  return fix;
	}

	var name$H = 'fix';
	var factory_1$L = factory$L;

	var fix = {
		name: name$H,
		factory: factory_1$L
	};

	var isInteger$5 = number.isInteger;
	var resize = array.resize;

	function factory$M(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Create a matrix filled with zeros. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.zeros(m)
	   *    math.zeros(m, format)
	   *    math.zeros(m, n)
	   *    math.zeros(m, n, format)
	   *    math.zeros([m, n])
	   *    math.zeros([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.zeros(3)                  // returns [0, 0, 0]
	   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
	   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
	   *
	   * See also:
	   *
	   *    ones, identity, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix}           A matrix filled with zeros
	   */
	  var zeros = typed('zeros', {
	    '': function _() {
	      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
	    },

	    // math.zeros(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _zeros(size, format);
	      } else if (config.matrix === 'Array') {
	        return _zeros(size);
	      } else {
	        return _zeros(size, 'default');
	      }
	    },

	    'Array': _zeros,

	    'Matrix': function Matrix(size) {
	      var format = size.storage();
	      return _zeros(size.valueOf(), format);
	    },

	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _zeros(size.valueOf(), format);
	    }
	  });

	  zeros.toTex = undefined; // use default template

	  return zeros;

	  /**
	   * Create an Array or Matrix with zeros
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _zeros(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix$$1(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    } else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (type.isBigNumber(value)) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger$5(value) || value < 0) {
	        throw new Error('Parameters in function zeros must be positive integers');
	      }
	    });
	  }
	}

	// TODO: zeros contains almost the same code as ones. Reuse this?

	var name$I = 'zeros';
	var factory_1$M = factory$M;

	var zeros = {
		name: name$I,
		factory: factory_1$M
	};

	var isInteger$6 = number.isInteger;
	var toFixed = number.toFixed;


	var NO_INT = 'Number of decimals in function round must be an integer';

	function factory$N(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var equalScalar$$1 = load(equalScalar);
	  var zeros$$1 = load(zeros);

	  var algorithm11$$1 = load(algorithm11);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Round a value towards the nearest integer.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.round(x)
	   *    math.round(x, n)
	   *
	   * Examples:
	   *
	   *    math.round(3.2)              // returns number 3
	   *    math.round(3.8)              // returns number 4
	   *    math.round(-4.2)             // returns number -4
	   *    math.round(-4.7)             // returns number -5
	   *    math.round(math.pi, 3)       // returns number 3.142
	   *    math.round(123.45678, 2)     // returns number 123.46
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.round(c)                // returns Complex 3 - 3i
	   *
	   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, floor
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var round = typed('round', {

	    'number': Math.round,

	    'number, number': function numberNumber(x, n) {
	      if (!isInteger$6(n)) {
	        throw new TypeError(NO_INT);
	      }
	      if (n < 0 || n > 15) {
	        throw new Error('Number of decimals in function round must be in te range of 0-15');
	      }

	      return _round(x, n);
	    },

	    'Complex': function Complex(x) {
	      return x.round();
	    },

	    'Complex, number': function ComplexNumber(x, n) {
	      if (n % 1) {
	        throw new TypeError(NO_INT);
	      }

	      return x.round(n);
	    },

	    'Complex, BigNumber': function ComplexBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      var _n = n.toNumber();
	      return x.round(_n);
	    },

	    'number, BigNumber': function numberBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.toDecimalPlaces(0);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      return x.toDecimalPlaces(n.toNumber());
	    },

	    'Fraction': function Fraction(x) {
	      return x.round();
	    },

	    'Fraction, number': function FractionNumber(x, n) {
	      if (n % 1) {
	        throw new TypeError(NO_INT);
	      }
	      return x.round(n);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since round(0) = 0
	      return deepMap(x, round, true);
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$$1(x, y, round, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$$1(x, y, round, false);
	    },

	    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
	      // check scalar is zero
	      if (equalScalar$$1(x, 0)) {
	        // do not execute algorithm, result will be a zero matrix
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm12$$1(y, x, round, true);
	    },

	    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
	      // check scalar is zero
	      if (equalScalar$$1(x, 0)) {
	        // do not execute algorithm, result will be a zero matrix
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm14$$1(y, x, round, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, round, false).valueOf();
	    },

	    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, round, true).valueOf();
	    }
	  });

	  round.toTex = {
	    1: '\\left\\lfloor${args[0]}\\right\\rceil',
	    2: undefined // use default template
	  };

	  return round;
	}

	/**
	 * round a number to the given number of decimals, or to zero if decimals is
	 * not provided
	 * @param {number} value
	 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
	 * @return {number} roundedValue
	 * @private
	 */
	function _round(value, decimals) {
	  return parseFloat(toFixed(value, decimals));
	}

	var name$J = 'round';
	var factory_1$N = factory$N;

	var round = {
		name: name$J,
		factory: factory_1$N
	};

	function factory$O(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var equalScalar$$1 = load(equalScalar);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  var latex$$1 = latex;

	  /**
	   * Test whether two values are equal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is only
	   * equal to `null` and nothing else, and `undefined` is only equal to
	   * `undefined` and nothing else. Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.equal(x, y)
	   *
	   * Examples:
	   *
	   *    math.equal(2 + 2, 3)         // returns false
	   *    math.equal(2 + 2, 4)         // returns true
	   *
	   *    const a = math.unit('50 cm')
	   *    const b = math.unit('5 m')
	   *    math.equal(a, b)             // returns true
	   *
	   *    const c = [2, 5, 1]
	   *    const d = [2, 7, 1]
	   *
	   *    math.equal(c, d)             // returns [true, false, true]
	   *    math.deepEqual(c, d)         // returns false
	   *
	   *    math.equal("1000", "1e3")    // returns true
	   *    math.equal(0, null)          // returns false
	   *
	   * See also:
	   *
	   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
	   *
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
	   */
	  var equal = typed('equal', {

	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y === null;
	      }
	      if (y === null) {
	        return x === null;
	      }
	      if (x === undefined) {
	        return y === undefined;
	      }
	      if (y === undefined) {
	        return x === undefined;
	      }

	      return equalScalar$$1(x, y);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, equalScalar$$1);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, equalScalar$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, equalScalar$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, equalScalar$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return equal(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return equal(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return equal(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, equalScalar$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, equalScalar$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, equalScalar$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, equalScalar$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, equalScalar$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, equalScalar$$1, true).valueOf();
	    }
	  });

	  equal.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['equal'] + '${args[1]}\\right)'
	  };

	  return equal;
	}

	var name$K = 'equal';
	var factory_1$O = factory$O;

	var equal = {
		name: name$K,
		factory: factory_1$O
	};

	function factory$P(type, config, load, typed) {
	  /**
	   * Test whether a value is an numeric value.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNumeric(x)
	   *
	   * Examples:
	   *
	   *    math.isNumeric(2)                     // returns true
	   *    math.isNumeric(0)                     // returns true
	   *    math.isNumeric(math.bignumber(500))   // returns true
	   *    math.isNumeric(math.fraction(4))      // returns true
	   *    math.isNumeric(math.complex('2-4i')   // returns false
	   *    math.isNumeric('3')                   // returns false
	   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    isZero, isPositive, isNegative, isInteger
	   *
	   * @param {*} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
	   *                    `Fraction`, or `boolean`. Returns false for other types.
	   *                    Throws an error in case of unknown types.
	   */
	  var isNumeric = typed('isNumeric', {
	    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
	      return true;
	    },

	    'Complex | Unit | string': function ComplexUnitString() {
	      return false;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isNumeric);
	    }
	  });

	  return isNumeric;
	}

	var name$L = 'isNumeric';
	var factory_1$P = factory$P;

	var isNumeric = {
		name: name$L,
		factory: factory_1$P
	};

	function factory$Q(type, config, load, typed) {
	  /**
	   * Format a value of any type into a string.
	   *
	   * Syntax:
	   *
	   *    math.format(value)
	   *    math.format(value, options)
	   *    math.format(value, precision)
	   *    math.format(value, callback)
	   *
	   * Where:
	   *
	   *  - `value: *`
	   *    The value to be formatted
	   *  - `options: Object`
	   *    An object with formatting options. Available options:
	   *    - `notation: string`
	   *      Number notation. Choose from:
	   *      - 'fixed'
	   *        Always use regular number notation.
	   *        For example '123.40' and '14000000'
	   *      - 'exponential'
	   *        Always use exponential notation.
	   *        For example '1.234e+2' and '1.4e+7'
	   *      - 'engineering'
	   *        Always use engineering notation.
	   *        For example '123.4e+0' and '14.0e+6'
	   *      - 'auto' (default)
	   *        Regular number notation for numbers having an absolute value between
	   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
	   *        Lower bound is included, upper bound is excluded.
	   *        For example '123.4' and '1.4e7'.
	   *    - `precision: number`
	   *      A number between 0 and 16 to round the digits of the number. In case
	   *      of notations 'exponential', 'engineering', and 'auto', `precision`
	   *      defines the total number of significant digits returned.
	   *      In case of notation 'fixed', `precision` defines the number of
	   *      significant digits after the decimal point.
	   *      `precision` is undefined by default.
	   *    - `lowerExp: number`
	   *      Exponent determining the lower boundary for formatting a value with
	   *      an exponent when `notation='auto`. Default value is `-3`.
	   *    - `upperExp: number`
	   *      Exponent determining the upper boundary for formatting a value with
	   *      an exponent when `notation='auto`. Default value is `5`.
	   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
	   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
	   *      configured, and will output `0.(3)` when 'decimal' is configured.
	   * - `callback: function`
	   *   A custom formatting function, invoked for all numeric elements in `value`,
	   *   for example all elements of a matrix, or the real and imaginary
	   *   parts of a complex number. This callback can be used to override the
	   *   built-in numeric notation with any type of formatting. Function `callback`
	   *   is called with `value` as parameter and must return a string.
	   *
	   * When `value` is an Object:
	   *
	   * - When the object contains a property `format` being a function, this function
	   *   is invoked as `value.format(options)` and the result is returned.
	   * - When the object has its own `toString` method, this method is invoked
	   *   and the result is returned.
	   * - In other cases the function will loop over all object properties and
	   *   return JSON object notation like '{"a": 2, "b": 3}'.
	   *
	   * When value is a function:
	   *
	   * - When the function has a property `syntax`, it returns this
	   *   syntax description.
	   * - In other cases, a string `'function'` is returned.
	   *
	   * Examples:
	   *
	   *    math.format(6.4)                                        // returns '6.4'
	   *    math.format(1240000)                                    // returns '1.24e6'
	   *    math.format(1/3)                                        // returns '0.3333333333333333'
	   *    math.format(1/3, 3)                                     // returns '0.333'
	   *    math.format(21385, 2)                                   // returns '21000'
	   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
	   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
	   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
	   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
	   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
	   *
	   *    function formatCurrency(value) {
	   *      // return currency notation with two digits:
	   *      return '$' + value.toFixed(2)
	   *
	   *      // you could also use math.format inside the callback:
	   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
	   *    }
	   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
	   *
	   * See also:
	   *
	   *    print
	   *
	   * @param {*} value                               Value to be stringified
	   * @param {Object | Function | number} [options]  Formatting options
	   * @return {string} The formatted value
	   */
	  var format = typed('format', {
	    'any': string.format,
	    'any, Object | function | number': string.format
	  });

	  format.toTex = undefined; // use default template

	  return format;
	}

	var name$M = 'format';
	var factory_1$Q = factory$Q;

	var format$2 = {
		name: name$M,
		factory: factory_1$Q
	};

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function factory$R(type, config, load, typed) {
	  /**
	   * Determine the type of a variable.
	   *
	   * Function `typeof` recognizes the following types of objects:
	   *
	   * Object                 | Returns       | Example
	   * ---------------------- | ------------- | ------------------------------------------
	   * null                   | `'null'`      | `math.typeof(null)`
	   * number                 | `'number'`    | `math.typeof(3.5)`
	   * boolean                | `'boolean'`   | `math.typeof(true)`
	   * string                 | `'string'`    | `math.typeof('hello world')`
	   * Array                  | `'Array'`     | `math.typeof([1, 2, 3])`
	   * Date                   | `'Date'`      | `math.typeof(new Date())`
	   * Function               | `'Function'`  | `math.typeof(function () {})`
	   * Object                 | `'Object'`    | `math.typeof({a: 2, b: 3})`
	   * RegExp                 | `'RegExp'`    | `math.typeof(/a regexp/)`
	   * undefined              | `'undefined'` | `math.typeof(undefined)`
	   * math.type.BigNumber    | `'BigNumber'` | `math.typeof(math.bignumber('2.3e500'))`
	   * math.type.Chain        | `'Chain'`     | `math.typeof(math.chain(2))`
	   * math.type.Complex      | `'Complex'`   | `math.typeof(math.complex(2, 3))`
	   * math.type.Fraction     | `'Fraction'`  | `math.typeof(math.fraction(1, 3))`
	   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`
	   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`
	   * math.type.Index        | `'Index'`     | `math.typeof(math.index(1, 3))`
	   * math.type.Matrix       | `'Matrix'`    | `math.typeof(math.matrix([[1,2], [3, 4]]))`
	   * math.type.Range        | `'Range'`     | `math.typeof(math.range(0, 10))`
	   * math.type.ResultSet    | `'ResultSet'` | `math.typeof(math.eval('a=2\nb=3'))`
	   * math.type.Unit         | `'Unit'`      | `math.typeof(math.unit('45 deg'))`
	   * math.expression.node&#8203;.AccessorNode            | `'AccessorNode'`            | `math.typeof(math.parse('A[2]'))`
	   * math.expression.node&#8203;.ArrayNode               | `'ArrayNode'`               | `math.typeof(math.parse('[1,2,3]'))`
	   * math.expression.node&#8203;.AssignmentNode          | `'AssignmentNode'`          | `math.typeof(math.parse('x=2'))`
	   * math.expression.node&#8203;.BlockNode               | `'BlockNode'`               | `math.typeof(math.parse('a=2; b=3'))`
	   * math.expression.node&#8203;.ConditionalNode         | `'ConditionalNode'`         | `math.typeof(math.parse('x<0 ? -x : x'))`
	   * math.expression.node&#8203;.ConstantNode            | `'ConstantNode'`            | `math.typeof(math.parse('2.3'))`
	   * math.expression.node&#8203;.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeof(math.parse('f(x)=x^2'))`
	   * math.expression.node&#8203;.FunctionNode            | `'FunctionNode'`            | `math.typeof(math.parse('sqrt(4)'))`
	   * math.expression.node&#8203;.IndexNode               | `'IndexNode'`               | `math.typeof(math.parse('A[2]').index)`
	   * math.expression.node&#8203;.ObjectNode              | `'ObjectNode'`              | `math.typeof(math.parse('{a:2}'))`
	   * math.expression.node&#8203;.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeof(math.parse('(2+3)'))`
	   * math.expression.node&#8203;.RangeNode               | `'RangeNode'`               | `math.typeof(math.parse('1:10'))`
	   * math.expression.node&#8203;.SymbolNode              | `'SymbolNode'`              | `math.typeof(math.parse('x'))`
	   *
	   * Syntax:
	   *
	   *    math.typeof(x)
	   *
	   * Examples:
	   *
	   *    math.typeof(3.5)                     // returns 'number'
	   *    math.typeof(math.complex('2-4i'))    // returns 'Complex'
	   *    math.typeof(math.unit('45 deg'))     // returns 'Unit'
	   *    math.typeof('hello world')           // returns 'string'
	   *
	   * @param {*} x     The variable for which to test the type.
	   * @return {string} Returns the name of the type. Primitive types are lower case,
	   *                  non-primitive types are upper-camel-case.
	   *                  For example 'number', 'string', 'Array', 'Date'.
	   */
	  var _typeof = typed('_typeof', {
	    'any': function any(x) {
	      var t = typeof x === 'undefined' ? 'undefined' : _typeof2(x);

	      if (t === 'object') {
	        // JavaScript types
	        if (x === null) return 'null';
	        if (Array.isArray(x)) return 'Array';
	        if (x instanceof Date) return 'Date';
	        if (x instanceof RegExp) return 'RegExp';

	        // math.js types
	        if (type.isBigNumber(x)) return 'BigNumber';
	        if (type.isComplex(x)) return 'Complex';
	        if (type.isFraction(x)) return 'Fraction';
	        if (type.isMatrix(x)) return 'Matrix';
	        if (type.isUnit(x)) return 'Unit';
	        if (type.isIndex(x)) return 'Index';
	        if (type.isRange(x)) return 'Range';
	        if (type.isResultSet(x)) return 'ResultSet';
	        if (type.isNode(x)) return x.type;
	        if (type.isChain(x)) return 'Chain';
	        if (type.isHelp(x)) return 'Help';

	        return 'Object';
	      }

	      if (t === 'function') return 'Function';

	      return t; // can be 'string', 'number', 'boolean', ...
	    }
	  });

	  _typeof.toTex = undefined; // use default template

	  return _typeof;
	}

	var name$N = 'typeof';
	var factory_1$R = factory$R;

	var _typeof$4 = {
		name: name$N,
		factory: factory_1$R
	};

	var _typeof$5 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var endsWith = string.endsWith;
	var clone$2 = object.clone;


	function factory$S(type, config, load, typed, math) {
	  var add = load(addScalar);
	  var subtract$$1 = load(subtract);
	  var multiply = load(multiplyScalar);
	  var divide = load(divideScalar);
	  var pow$$1 = load(pow);
	  var abs$$1 = load(abs);
	  var fix$$1 = load(fix);
	  var round$$1 = load(round);
	  var equal$$1 = load(equal);
	  var isNumeric$$1 = load(isNumeric);
	  var format = load(format$2);
	  var getTypeOf = load(_typeof$4);
	  var toNumber = load(number$3);
	  var Complex = load(Complex_1);

	  /**
	   * A unit can be constructed in the following ways:
	   *
	   *     const a = new Unit(value, name)
	   *     const b = new Unit(null, name)
	   *     const c = Unit.parse(str)
	   *
	   * Example usage:
	   *
	   *     const a = new Unit(5, 'cm')               // 50 mm
	   *     const b = Unit.parse('23 kg')             // 23 kg
	   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
	   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
	   *
	   * @class Unit
	   * @constructor Unit
	   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
	   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
	   */
	  function Unit(value, name) {
	    if (!(this instanceof Unit)) {
	      throw new Error('Constructor must be called with the new operator');
	    }

	    if (!(value === null || value === undefined || isNumeric$$1(value) || type.isComplex(value))) {
	      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
	    }
	    if (name !== undefined && (typeof name !== 'string' || name === '')) {
	      throw new TypeError('Second parameter in Unit constructor must be a string');
	    }

	    if (name !== undefined) {
	      var u = Unit.parse(name);
	      this.units = u.units;
	      this.dimensions = u.dimensions;
	    } else {
	      this.units = [{
	        unit: UNIT_NONE,
	        prefix: PREFIXES.NONE, // link to a list with supported prefixes
	        power: 0
	      }];
	      this.dimensions = [];
	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        this.dimensions[i] = 0;
	      }
	    }

	    this.value = value !== undefined && value !== null ? this._normalize(value) : null;

	    this.fixPrefix = false; // if true, function format will not search for the
	    // best prefix but leave it as initially provided.
	    // fixPrefix is set true by the method Unit.to

	    // The justification behind this is that if the constructor is explicitly called,
	    // the caller wishes the units to be returned exactly as he supplied.
	    this.isUnitListSimplified = true;
	  }

	  /**
	   * Attach type information
	   */
	  Unit.prototype.type = 'Unit';
	  Unit.prototype.isUnit = true;

	  // private variables and functions for the Unit parser
	  var text = void 0,
	      index = void 0,
	      c = void 0;

	  function skipWhitespace() {
	    while (c === ' ' || c === '\t') {
	      next();
	    }
	  }

	  function isDigitDot(c) {
	    return c >= '0' && c <= '9' || c === '.';
	  }

	  function isDigit(c) {
	    return c >= '0' && c <= '9';
	  }

	  function next() {
	    index++;
	    c = text.charAt(index);
	  }

	  function revert(oldIndex) {
	    index = oldIndex;
	    c = text.charAt(index);
	  }

	  function parseNumber() {
	    var number = '';
	    var oldIndex = void 0;
	    oldIndex = index;

	    if (c === '+') {
	      next();
	    } else if (c === '-') {
	      number += c;
	      next();
	    }

	    if (!isDigitDot(c)) {
	      // a + or - must be followed by a digit
	      revert(oldIndex);
	      return null;
	    }

	    // get number, can have a single dot
	    if (c === '.') {
	      number += c;
	      next();
	      if (!isDigit(c)) {
	        // this is no legal number, it is just a dot
	        revert(oldIndex);
	        return null;
	      }
	    } else {
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	      if (c === '.') {
	        number += c;
	        next();
	      }
	    }
	    while (isDigit(c)) {
	      number += c;
	      next();
	    }

	    // check for exponential notation like "2.3e-4" or "1.23e50"
	    if (c === 'E' || c === 'e') {
	      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"

	      var tentativeNumber = '';
	      var tentativeIndex = index;

	      tentativeNumber += c;
	      next();

	      if (c === '+' || c === '-') {
	        tentativeNumber += c;
	        next();
	      }

	      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)
	      if (!isDigit(c)) {
	        // The e or E must belong to something else, so return the number without the e or E.
	        revert(tentativeIndex);
	        return number;
	      }

	      // We can now safely say that this is scientific notation.
	      number = number + tentativeNumber;
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	    }

	    return number;
	  }

	  function parseUnit() {
	    var unitName = '';

	    // Alphanumeric characters only; matches [a-zA-Z0-9]
	    var code = text.charCodeAt(index);
	    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
	      unitName += c;
	      next();
	      code = text.charCodeAt(index);
	    }

	    // Must begin with [a-zA-Z]
	    code = unitName.charCodeAt(0);
	    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
	      return unitName || null;
	    } else {
	      return null;
	    }
	  }

	  function parseCharacter(toFind) {
	    if (c === toFind) {
	      next();
	      return toFind;
	    } else {
	      return null;
	    }
	  }

	  /**
	   * Parse a string into a unit. The value of the unit is parsed as number,
	   * BigNumber, or Fraction depending on the math.js config setting `number`.
	   *
	   * Throws an exception if the provided string does not contain a valid unit or
	   * cannot be parsed.
	   * @memberof Unit
	   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
	   * @return {Unit} unit
	   */
	  Unit.parse = function (str, options) {
	    options = options || {};
	    text = str;
	    index = -1;
	    c = '';

	    if (typeof text !== 'string') {
	      throw new TypeError('Invalid argument in Unit.parse, string expected');
	    }

	    var unit = new Unit();
	    unit.units = [];

	    var powerMultiplierCurrent = 1;
	    var expectingUnit = false;

	    // A unit should follow this pattern:
	    // [number] ...[ [*/] unit[^number] ]
	    // unit[^number] ... [ [*/] unit[^number] ]

	    // Rules:
	    // number is any floating point number.
	    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
	    // The string may optionally begin with a number.
	    // Each unit may optionally be followed by ^number.
	    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
	    //   2m^2kg/s^2
	    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
	    //   4erg

	    next();
	    skipWhitespace();

	    // Optional number at the start of the string
	    var valueStr = parseNumber();
	    var value = null;
	    if (valueStr) {
	      if (config.number === 'BigNumber') {
	        value = new type.BigNumber(valueStr);
	      } else if (config.number === 'Fraction') {
	        value = new type.Fraction(valueStr);
	      } else {
	        // number
	        value = parseFloat(valueStr);
	      }

	      skipWhitespace(); // Whitespace is not required here

	      // handle multiplication or division right after the value, like '1/s'
	      if (parseCharacter('*')) {
	        powerMultiplierCurrent = 1;
	        expectingUnit = true;
	      } else if (parseCharacter('/')) {
	        powerMultiplierCurrent = -1;
	        expectingUnit = true;
	      }
	    }

	    // Stack to keep track of powerMultipliers applied to each parentheses group
	    var powerMultiplierStack = [];

	    // Running product of all elements in powerMultiplierStack
	    var powerMultiplierStackProduct = 1;

	    while (true) {
	      skipWhitespace();

	      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
	      // A '(' will always appear directly before a unit.
	      while (c === '(') {
	        powerMultiplierStack.push(powerMultiplierCurrent);
	        powerMultiplierStackProduct *= powerMultiplierCurrent;
	        powerMultiplierCurrent = 1;
	        next();
	        skipWhitespace();
	      }

	      // Is there something here?
	      var uStr = void 0;
	      if (c) {
	        var oldC = c;
	        uStr = parseUnit();
	        if (uStr === null) {
	          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
	        }
	      } else {
	        // End of input.
	        break;
	      }

	      // Verify the unit exists and get the prefix (if any)
	      var res = _findUnit(uStr);
	      if (res === null) {
	        // Unit not found.
	        throw new SyntaxError('Unit "' + uStr + '" not found.');
	      }

	      var power = powerMultiplierCurrent * powerMultiplierStackProduct;
	      // Is there a "^ number"?
	      skipWhitespace();
	      if (parseCharacter('^')) {
	        skipWhitespace();
	        var p = parseNumber();
	        if (p === null) {
	          // No valid number found for the power!
	          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
	        }
	        power *= p;
	      }

	      // Add the unit to the list
	      unit.units.push({
	        unit: res.unit,
	        prefix: res.prefix,
	        power: power
	      });
	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
	      }

	      // Check for and consume closing parentheses, popping from the stack.
	      // A ')' will always follow a unit.
	      skipWhitespace();
	      while (c === ')') {
	        if (powerMultiplierStack.length === 0) {
	          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
	        }
	        powerMultiplierStackProduct /= powerMultiplierStack.pop();
	        next();
	        skipWhitespace();
	      }

	      // "*" and "/" should mean we are expecting something to come next.
	      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.
	      expectingUnit = false;

	      if (parseCharacter('*')) {
	        // explicit multiplication
	        powerMultiplierCurrent = 1;
	        expectingUnit = true;
	      } else if (parseCharacter('/')) {
	        // division
	        powerMultiplierCurrent = -1;
	        expectingUnit = true;
	      } else {
	        // implicit multiplication
	        powerMultiplierCurrent = 1;
	      }

	      // Replace the unit into the auto unit system
	      if (res.unit.base) {
	        var baseDim = res.unit.base.key;
	        UNIT_SYSTEMS.auto[baseDim] = {
	          unit: res.unit,
	          prefix: res.prefix
	        };
	      }
	    }

	    // Has the string been entirely consumed?
	    skipWhitespace();
	    if (c) {
	      throw new SyntaxError('Could not parse: "' + str + '"');
	    }

	    // Is there a trailing slash?
	    if (expectingUnit) {
	      throw new SyntaxError('Trailing characters: "' + str + '"');
	    }

	    // Is the parentheses stack empty?
	    if (powerMultiplierStack.length !== 0) {
	      throw new SyntaxError('Unmatched "(" in "' + text + '"');
	    }

	    // Are there any units at all?
	    if (unit.units.length === 0 && !options.allowNoUnits) {
	      throw new SyntaxError('"' + str + '" contains no units');
	    }

	    unit.value = value !== undefined ? unit._normalize(value) : null;
	    return unit;
	  };

	  /**
	   * create a copy of this unit
	   * @memberof Unit
	   * @return {Unit} Returns a cloned version of the unit
	   */
	  Unit.prototype.clone = function () {
	    var unit = new Unit();

	    unit.fixPrefix = this.fixPrefix;
	    unit.isUnitListSimplified = this.isUnitListSimplified;

	    unit.value = clone$2(this.value);
	    unit.dimensions = this.dimensions.slice(0);
	    unit.units = [];
	    for (var i = 0; i < this.units.length; i++) {
	      unit.units[i] = {};
	      for (var p in this.units[i]) {
	        if (this.units[i].hasOwnProperty(p)) {
	          unit.units[i][p] = this.units[i][p];
	        }
	      }
	    }

	    return unit;
	  };

	  /**
	   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
	   * @memberof Unit
	   * @return {boolean} True if the unit is derived
	   */
	  Unit.prototype._isDerived = function () {
	    if (this.units.length === 0) {
	      return false;
	    }
	    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
	  };

	  /**
	   * Normalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number | BigNumber | Fraction | boolean} value
	   * @return {number | BigNumber | Fraction | boolean} normalized value
	   * @private
	   */
	  Unit.prototype._normalize = function (value) {
	    var unitValue = void 0,
	        unitOffset = void 0,
	        unitPower = void 0,
	        unitPrefixValue = void 0;
	    var convert = void 0;

	    if (value === null || value === undefined || this.units.length === 0) {
	      return value;
	    } else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      for (var i = 0; i < this.units.length; i++) {
	        unitValue = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower = convert(this.units[i].power);
	        res = multiply(res, pow$$1(multiply(unitValue, unitPrefixValue), unitPower));
	      }

	      return res;
	    } else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      unitValue = convert(this.units[0].unit.value);
	      unitOffset = convert(this.units[0].unit.offset);
	      unitPrefixValue = convert(this.units[0].prefix.value);

	      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
	    }
	  };

	  /**
	   * Denormalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number} value
	   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
	   * @return {number} denormalized value
	   * @private
	   */
	  Unit.prototype._denormalize = function (value, prefixValue) {
	    var unitValue = void 0,
	        unitOffset = void 0,
	        unitPower = void 0,
	        unitPrefixValue = void 0;
	    var convert = void 0;

	    if (value === null || value === undefined || this.units.length === 0) {
	      return value;
	    } else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      for (var i = 0; i < this.units.length; i++) {
	        unitValue = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower = convert(this.units[i].power);
	        res = divide(res, pow$$1(multiply(unitValue, unitPrefixValue), unitPower));
	      }

	      return res;
	    } else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      unitValue = convert(this.units[0].unit.value);
	      unitPrefixValue = convert(this.units[0].prefix.value);
	      unitOffset = convert(this.units[0].unit.offset);

	      if (prefixValue === undefined || prefixValue === null) {
	        return subtract$$1(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
	      } else {
	        return subtract$$1(divide(divide(value, unitValue), prefixValue), unitOffset);
	      }
	    }
	  };

	  /**
	   * Find a unit from a string
	   * @memberof Unit
	   * @param {string} str              A string like 'cm' or 'inch'
	   * @returns {Object | null} result  When found, an object with fields unit and
	   *                                  prefix is returned. Else, null is returned.
	   * @private
	   */
	  function _findUnit(str) {
	    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
	    if (UNITS.hasOwnProperty(str)) {
	      var unit = UNITS[str];
	      var prefix = unit.prefixes[''];
	      return {
	        unit: unit,
	        prefix: prefix
	      };
	    }

	    for (var name in UNITS) {
	      if (UNITS.hasOwnProperty(name)) {
	        if (endsWith(str, name)) {
	          var _unit = UNITS[name];
	          var prefixLen = str.length - name.length;
	          var prefixName = str.substring(0, prefixLen);
	          var _prefix = _unit.prefixes.hasOwnProperty(prefixName) ? _unit.prefixes[prefixName] : undefined;
	          if (_prefix !== undefined) {
	            // store unit, prefix, and value
	            return {
	              unit: _unit,
	              prefix: _prefix
	            };
	          }
	        }
	      }
	    }

	    return null;
	  }

	  /**
	   * Test if the given expression is a unit.
	   * The unit can have a prefix but cannot have a value.
	   * @memberof Unit
	   * @param {string} name   A string to be tested whether it is a value less unit.
	   *                        The unit can have prefix, like "cm"
	   * @return {boolean}      true if the given string is a unit
	   */
	  Unit.isValuelessUnit = function (name) {
	    return _findUnit(name) !== null;
	  };

	  /**
	   * check if this unit has given base unit
	   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
	   * @memberof Unit
	   * @param {BASE_UNITS | string | undefined} base
	   */
	  Unit.prototype.hasBase = function (base) {
	    if (typeof base === 'string') {
	      base = BASE_UNITS[base];
	    }

	    if (!base) {
	      return false;
	    }

	    // All dimensions must be the same
	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }
	    return true;
	  };

	  /**
	   * Check if this unit has a base or bases equal to another base or bases
	   * For derived units, the exponent on each base also must match
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if equal base
	   */
	  Unit.prototype.equalBase = function (other) {
	    // All dimensions must be the same
	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }
	    return true;
	  };

	  /**
	   * Check if this unit equals another unit
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if both units are equal
	   */
	  Unit.prototype.equals = function (other) {
	    return this.equalBase(other) && equal$$1(this.value, other.value);
	  };

	  /**
	   * Multiply this unit with another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} product of this unit and the other unit
	   */
	  Unit.prototype.multiply = function (other) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
	    }

	    // Append other's units list onto res (simplify later in Unit.prototype.format)
	    for (var _i = 0; _i < other.units.length; _i++) {
	      // Make a deep copy
	      var inverted = {};
	      for (var key in other.units[_i]) {
	        inverted[key] = other.units[_i][key];
	      }
	      res.units.push(inverted);
	    }

	    // If at least one operand has a value, then the result should also have a value
	    if (this.value !== null || other.value !== null) {
	      var valThis = this.value === null ? this._normalize(1) : this.value;
	      var valOther = other.value === null ? other._normalize(1) : other.value;
	      res.value = multiply(valThis, valOther);
	    } else {
	      res.value = null;
	    }

	    // Trigger simplification of the unit list at some future time
	    res.isUnitListSimplified = false;

	    return getNumericIfUnitless(res);
	  };

	  /**
	   * Divide this unit by another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} result of dividing this unit by the other unit
	   */
	  Unit.prototype.divide = function (other) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
	    }

	    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)
	    for (var _i2 = 0; _i2 < other.units.length; _i2++) {
	      // Make a deep copy
	      var inverted = {};
	      for (var key in other.units[_i2]) {
	        inverted[key] = other.units[_i2][key];
	      }
	      inverted.power = -inverted.power;
	      res.units.push(inverted);
	    }

	    // If at least one operand has a value, the result should have a value
	    if (this.value !== null || other.value !== null) {
	      var valThis = this.value === null ? this._normalize(1) : this.value;
	      var valOther = other.value === null ? other._normalize(1) : other.value;
	      res.value = divide(valThis, valOther);
	    } else {
	      res.value = null;
	    }

	    // Trigger simplification of the unit list at some future time
	    res.isUnitListSimplified = false;

	    return getNumericIfUnitless(res);
	  };

	  /**
	   * Calculate the power of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} p
	   * @returns {Unit}      The result: this^p
	   */
	  Unit.prototype.pow = function (p) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) * p;
	    }

	    // Adjust the power of each unit in the list
	    for (var _i3 = 0; _i3 < res.units.length; _i3++) {
	      res.units[_i3].power *= p;
	    }

	    if (res.value !== null) {
	      res.value = pow$$1(res.value, p);

	      // only allow numeric output, we don't want to return a Complex number
	      // if (!isNumeric(res.value)) {
	      //  res.value = NaN
	      // }
	      // Update: Complex supported now
	    } else {
	      res.value = null;
	    }

	    // Trigger lazy evaluation of the unit list
	    res.isUnitListSimplified = false;

	    return getNumericIfUnitless(res);
	  };

	  /**
	   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
	   * @param {Unit} unit
	   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
	   */
	  function getNumericIfUnitless(unit) {
	    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
	      return unit.value;
	    } else {
	      return unit;
	    }
	  }

	  /**
	   * Calculate the absolute value of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} x
	   * @returns {Unit}      The result: |x|, absolute value of x
	   */
	  Unit.prototype.abs = function () {
	    // This gives correct, but unexpected, results for units with an offset.
	    // For example, abs(-283.15 degC) = -263.15 degC !!!
	    var ret = this.clone();
	    ret.value = ret.value !== null ? abs$$1(ret.value) : null;

	    for (var i in ret.units) {
	      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
	        ret.units[i].unit = UNITS['W'];
	      }
	    }

	    return ret;
	  };

	  /**
	   * Convert the unit to a specific unit name.
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
	   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
	   */
	  Unit.prototype.to = function (valuelessUnit) {
	    var other = void 0;
	    var value = this.value === null ? this._normalize(1) : this.value;
	    if (typeof valuelessUnit === 'string') {
	      // other = new Unit(null, valuelessUnit)
	      other = Unit.parse(valuelessUnit);
	      if (!this.equalBase(other)) {
	        throw new Error('Units do not match (\'' + other.toString() + '\' != \'' + this.toString() + '\')');
	      }
	      if (other.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }

	      other.value = clone$2(value);
	      other.fixPrefix = true;
	      other.isUnitListSimplified = true;
	      return other;
	    } else if (type.isUnit(valuelessUnit)) {
	      if (!this.equalBase(valuelessUnit)) {
	        throw new Error('Units do not match (\'' + valuelessUnit.toString() + '\' != \'' + this.toString() + '\')');
	      }
	      if (valuelessUnit.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }
	      other = valuelessUnit.clone();
	      other.value = clone$2(value);
	      other.fixPrefix = true;
	      other.isUnitListSimplified = true;
	      return other;
	    } else {
	      throw new Error('String or Unit expected as parameter');
	    }
	  };

	  /**
	   * Return the value of the unit when represented with given valueless unit
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number} Returns the unit value as number.
	   */
	  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric
	  Unit.prototype.toNumber = function (valuelessUnit) {
	    return toNumber(this.toNumeric(valuelessUnit));
	  };

	  /**
	   * Return the value of the unit in the original numeric type
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number | BigNumber | Fraction} Returns the unit value
	   */
	  Unit.prototype.toNumeric = function (valuelessUnit) {
	    var other = this;
	    if (valuelessUnit) {
	      // Allow getting the numeric value without converting to a different unit
	      other = this.to(valuelessUnit);
	    }

	    other.simplifyUnitListLazy();

	    if (other._isDerived()) {
	      return other._denormalize(other.value);
	    } else {
	      return other._denormalize(other.value, other.units[0].prefix.value);
	    }
	  };

	  /**
	   * Get a string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the unit
	   * @memberof Unit
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   */
	  Unit.prototype.toJSON = function () {
	    return {
	      mathjs: 'Unit',
	      value: this._denormalize(this.value),
	      unit: this.formatUnits(),
	      fixPrefix: this.fixPrefix
	    };
	  };

	  /**
	   * Instantiate a Unit from a JSON object
	   * @memberof Unit
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   * @return {Unit}
	   */
	  Unit.fromJSON = function (json) {
	    var unit = new Unit(json.value, json.unit);
	    unit.fixPrefix = json.fixPrefix || false;
	    return unit;
	  };

	  /**
	   * Returns the string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.valueOf = Unit.prototype.toString;

	  /**
	   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the "best" units for formatting.
	   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.
	   */
	  Unit.prototype.simplifyUnitListLazy = function () {
	    if (this.isUnitListSimplified || this.value === null) {
	      return;
	    }

	    var proposedUnitList = [];

	    // Search for a matching base
	    var matchingBase = void 0;
	    for (var key in currentUnitSystem) {
	      if (this.hasBase(BASE_UNITS[key])) {
	        matchingBase = key;
	        break;
	      }
	    }

	    if (matchingBase === 'NONE') {
	      this.units = [];
	    } else {
	      var matchingUnit = void 0;
	      if (matchingBase) {
	        // Does the unit system have a matching unit?
	        if (currentUnitSystem.hasOwnProperty(matchingBase)) {
	          matchingUnit = currentUnitSystem[matchingBase];
	        }
	      }
	      if (matchingUnit) {
	        this.units = [{
	          unit: matchingUnit.unit,
	          prefix: matchingUnit.prefix,
	          power: 1.0
	        }];
	      } else {
	        // Multiple units or units with powers are formatted like this:
	        // 5 (kg m^2) / (s^3 mol)
	        // Build an representation from the base units of the current unit system
	        var missingBaseDim = false;
	        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	          var baseDim = BASE_DIMENSIONS[i];
	          if (Math.abs(this.dimensions[i] || 0) > 1e-12) {
	            if (currentUnitSystem.hasOwnProperty(baseDim)) {
	              proposedUnitList.push({
	                unit: currentUnitSystem[baseDim].unit,
	                prefix: currentUnitSystem[baseDim].prefix,
	                power: this.dimensions[i] || 0
	              });
	            } else {
	              missingBaseDim = true;
	            }
	          }
	        }

	        // Is the proposed unit list "simpler" than the existing one?
	        if (proposedUnitList.length < this.units.length && !missingBaseDim) {
	          // Replace this unit list with the proposed list
	          this.units = proposedUnitList;
	        }
	      }
	    }

	    this.isUnitListSimplified = true;
	  };

	  Unit.prototype.toSI = function () {
	    var ret = this.clone();

	    var proposedUnitList = [];

	    // Multiple units or units with powers are formatted like this:
	    // 5 (kg m^2) / (s^3 mol)
	    // Build an representation from the base units of the SI unit system
	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      var baseDim = BASE_DIMENSIONS[i];
	      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
	        if (UNIT_SYSTEMS['si'].hasOwnProperty(baseDim)) {
	          proposedUnitList.push({
	            unit: UNIT_SYSTEMS['si'][baseDim].unit,
	            prefix: UNIT_SYSTEMS['si'][baseDim].prefix,
	            power: ret.dimensions[i] || 0
	          });
	        } else {
	          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
	        }
	      }
	    }

	    // Replace this unit list with the proposed list
	    ret.units = proposedUnitList;

	    ret.isUnitListSimplified = true;

	    return ret;
	  };

	  /**
	   * Get a string representation of the units of this Unit, without the value.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.formatUnits = function () {
	    // Lazy evaluation of the unit list
	    this.simplifyUnitListLazy();

	    var strNum = '';
	    var strDen = '';
	    var nNum = 0;
	    var nDen = 0;

	    for (var i = 0; i < this.units.length; i++) {
	      if (this.units[i].power > 0) {
	        nNum++;
	        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;
	        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
	          strNum += '^' + this.units[i].power;
	        }
	      } else if (this.units[i].power < 0) {
	        nDen++;
	      }
	    }

	    if (nDen > 0) {
	      for (var _i4 = 0; _i4 < this.units.length; _i4++) {
	        if (this.units[_i4].power < 0) {
	          if (nNum > 0) {
	            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
	            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
	              strDen += '^' + -this.units[_i4].power;
	            }
	          } else {
	            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
	            strDen += '^' + this.units[_i4].power;
	          }
	        }
	      }
	    }
	    // Remove leading " "
	    strNum = strNum.substr(1);
	    strDen = strDen.substr(1);

	    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting
	    if (nNum > 1 && nDen > 0) {
	      strNum = '(' + strNum + ')';
	    }
	    if (nDen > 1 && nNum > 0) {
	      strDen = '(' + strDen + ')';
	    }

	    var str = strNum;
	    if (nNum > 0 && nDen > 0) {
	      str += ' / ';
	    }
	    str += strDen;

	    return str;
	  };

	  /**
	   * Get a string representation of the Unit, with optional formatting options.
	   * @memberof Unit
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string}
	   */
	  Unit.prototype.format = function (options) {
	    // Simplfy the unit list, if necessary
	    this.simplifyUnitListLazy();

	    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.
	    var isImaginary = false;
	    if (typeof this.value !== 'undefined' && this.value !== null && type.isComplex(this.value)) {
	      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
	      isImaginary = Math.abs(this.value.re) < 1e-14;
	    }

	    for (var i in this.units) {
	      if (this.units[i].unit) {
	        if (this.units[i].unit.name === 'VA' && isImaginary) {
	          this.units[i].unit = UNITS['VAR'];
	        } else if (this.units[i].unit.name === 'VAR' && !isImaginary) {
	          this.units[i].unit = UNITS['VA'];
	        }
	      }
	    }

	    // Now apply the best prefix
	    // Units must have only one unit and not have the fixPrefix flag set
	    if (this.units.length === 1 && !this.fixPrefix) {
	      // Units must have integer powers, otherwise the prefix will change the
	      // outputted value by not-an-integer-power-of-ten
	      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
	        // Apply the best prefix
	        this.units[0].prefix = this._bestPrefix();
	      }
	    }

	    var value = this._denormalize(this.value);
	    var str = this.value !== null ? format(value, options || {}) : '';
	    var unitStr = this.formatUnits();
	    if (this.value && type.isComplex(this.value)) {
	      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
	    }
	    if (unitStr.length > 0 && str.length > 0) {
	      str += ' ';
	    }
	    str += unitStr;

	    return str;
	  };

	  /**
	   * Calculate the best prefix using current value.
	   * @memberof Unit
	   * @returns {Object} prefix
	   * @private
	   */
	  Unit.prototype._bestPrefix = function () {
	    if (this.units.length !== 1) {
	      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
	    }
	    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
	      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
	    }

	    // find the best prefix value (resulting in the value of which
	    // the absolute value of the log10 is closest to zero,
	    // though with a little offset of 1.2 for nicer values: you get a
	    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...

	    // Note: the units value can be any numeric type, but to find the best
	    // prefix it's enough to work with limited precision of a regular number
	    // Update: using mathjs abs since we also allow complex numbers
	    var absValue = this.value !== null ? abs$$1(this.value) : 0;
	    var absUnitValue = abs$$1(this.units[0].unit.value);
	    var bestPrefix = this.units[0].prefix;
	    if (absValue === 0) {
	      return bestPrefix;
	    }
	    var power = this.units[0].power;
	    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
	    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix
	    bestDiff = Math.abs(bestDiff);
	    var prefixes = this.units[0].unit.prefixes;
	    for (var p in prefixes) {
	      if (prefixes.hasOwnProperty(p)) {
	        var prefix = prefixes[p];
	        if (prefix.scientific) {
	          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

	          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
	            // choose the prefix with the smallest diff, or if equal, choose the one
	            // with the shortest name (can happen with SHORTLONG for example)
	            bestPrefix = prefix;
	            bestDiff = diff;
	          }
	        }
	      }
	    }

	    return bestPrefix;
	  };

	  /**
	   * Returns an array of units whose sum is equal to this unit
	   * @memberof Unit
	   * @param {Array} [parts] An array of strings or valueless units.
	   *
	   *   Example:
	   *
	   *   const u = new Unit(1, 'm')
	   *   u.splitUnit(['feet', 'inch'])
	   *     [ 3 feet, 3.3700787401575 inch ]
	   *
	   * @return {Array} An array of units.
	   */
	  Unit.prototype.splitUnit = function (parts) {
	    var x = this.clone();
	    var ret = [];
	    for (var i = 0; i < parts.length; i++) {
	      // Convert x to the requested unit
	      x = x.to(parts[i]);
	      if (i === parts.length - 1) break;

	      // Get the numeric value of this unit
	      var xNumeric = x.toNumeric();

	      // Check to see if xNumeric is nearly equal to an integer,
	      // since fix can incorrectly round down if there is round-off error
	      var xRounded = round$$1(xNumeric);
	      var xFixed = void 0;
	      var isNearlyEqual = equal$$1(xRounded, xNumeric);
	      if (isNearlyEqual) {
	        xFixed = xRounded;
	      } else {
	        xFixed = fix$$1(x.toNumeric());
	      }

	      var y = new Unit(xFixed, parts[i].toString());
	      ret.push(y);
	      x = subtract$$1(x, y);
	    }

	    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
	    // But instead of comparing x, the remainder, with zero--we will compare the sum of
	    // all the parts so far with the original value. If they are nearly equal,
	    // we set the remainder to 0.
	    var testSum = 0;
	    for (var _i5 = 0; _i5 < ret.length; _i5++) {
	      testSum = add(testSum, ret[_i5].value);
	    }
	    if (equal$$1(testSum, this.value)) {
	      x.value = 0;
	    }

	    ret.push(x);

	    return ret;
	  };

	  var PREFIXES = {
	    NONE: {
	      '': { name: '', value: 1, scientific: true }
	    },
	    SHORT: {
	      '': { name: '', value: 1, scientific: true },

	      'da': { name: 'da', value: 1e1, scientific: false },
	      'h': { name: 'h', value: 1e2, scientific: false },
	      'k': { name: 'k', value: 1e3, scientific: true },
	      'M': { name: 'M', value: 1e6, scientific: true },
	      'G': { name: 'G', value: 1e9, scientific: true },
	      'T': { name: 'T', value: 1e12, scientific: true },
	      'P': { name: 'P', value: 1e15, scientific: true },
	      'E': { name: 'E', value: 1e18, scientific: true },
	      'Z': { name: 'Z', value: 1e21, scientific: true },
	      'Y': { name: 'Y', value: 1e24, scientific: true },

	      'd': { name: 'd', value: 1e-1, scientific: false },
	      'c': { name: 'c', value: 1e-2, scientific: false },
	      'm': { name: 'm', value: 1e-3, scientific: true },
	      'u': { name: 'u', value: 1e-6, scientific: true },
	      'n': { name: 'n', value: 1e-9, scientific: true },
	      'p': { name: 'p', value: 1e-12, scientific: true },
	      'f': { name: 'f', value: 1e-15, scientific: true },
	      'a': { name: 'a', value: 1e-18, scientific: true },
	      'z': { name: 'z', value: 1e-21, scientific: true },
	      'y': { name: 'y', value: 1e-24, scientific: true }
	    },
	    LONG: {
	      '': { name: '', value: 1, scientific: true },

	      'deca': { name: 'deca', value: 1e1, scientific: false },
	      'hecto': { name: 'hecto', value: 1e2, scientific: false },
	      'kilo': { name: 'kilo', value: 1e3, scientific: true },
	      'mega': { name: 'mega', value: 1e6, scientific: true },
	      'giga': { name: 'giga', value: 1e9, scientific: true },
	      'tera': { name: 'tera', value: 1e12, scientific: true },
	      'peta': { name: 'peta', value: 1e15, scientific: true },
	      'exa': { name: 'exa', value: 1e18, scientific: true },
	      'zetta': { name: 'zetta', value: 1e21, scientific: true },
	      'yotta': { name: 'yotta', value: 1e24, scientific: true },

	      'deci': { name: 'deci', value: 1e-1, scientific: false },
	      'centi': { name: 'centi', value: 1e-2, scientific: false },
	      'milli': { name: 'milli', value: 1e-3, scientific: true },
	      'micro': { name: 'micro', value: 1e-6, scientific: true },
	      'nano': { name: 'nano', value: 1e-9, scientific: true },
	      'pico': { name: 'pico', value: 1e-12, scientific: true },
	      'femto': { name: 'femto', value: 1e-15, scientific: true },
	      'atto': { name: 'atto', value: 1e-18, scientific: true },
	      'zepto': { name: 'zepto', value: 1e-21, scientific: true },
	      'yocto': { name: 'yocto', value: 1e-24, scientific: true }
	    },
	    SQUARED: {
	      '': { name: '', value: 1, scientific: true },

	      'da': { name: 'da', value: 1e2, scientific: false },
	      'h': { name: 'h', value: 1e4, scientific: false },
	      'k': { name: 'k', value: 1e6, scientific: true },
	      'M': { name: 'M', value: 1e12, scientific: true },
	      'G': { name: 'G', value: 1e18, scientific: true },
	      'T': { name: 'T', value: 1e24, scientific: true },
	      'P': { name: 'P', value: 1e30, scientific: true },
	      'E': { name: 'E', value: 1e36, scientific: true },
	      'Z': { name: 'Z', value: 1e42, scientific: true },
	      'Y': { name: 'Y', value: 1e48, scientific: true },

	      'd': { name: 'd', value: 1e-2, scientific: false },
	      'c': { name: 'c', value: 1e-4, scientific: false },
	      'm': { name: 'm', value: 1e-6, scientific: true },
	      'u': { name: 'u', value: 1e-12, scientific: true },
	      'n': { name: 'n', value: 1e-18, scientific: true },
	      'p': { name: 'p', value: 1e-24, scientific: true },
	      'f': { name: 'f', value: 1e-30, scientific: true },
	      'a': { name: 'a', value: 1e-36, scientific: true },
	      'z': { name: 'z', value: 1e-42, scientific: true },
	      'y': { name: 'y', value: 1e-48, scientific: true }
	    },
	    CUBIC: {
	      '': { name: '', value: 1, scientific: true },

	      'da': { name: 'da', value: 1e3, scientific: false },
	      'h': { name: 'h', value: 1e6, scientific: false },
	      'k': { name: 'k', value: 1e9, scientific: true },
	      'M': { name: 'M', value: 1e18, scientific: true },
	      'G': { name: 'G', value: 1e27, scientific: true },
	      'T': { name: 'T', value: 1e36, scientific: true },
	      'P': { name: 'P', value: 1e45, scientific: true },
	      'E': { name: 'E', value: 1e54, scientific: true },
	      'Z': { name: 'Z', value: 1e63, scientific: true },
	      'Y': { name: 'Y', value: 1e72, scientific: true },

	      'd': { name: 'd', value: 1e-3, scientific: false },
	      'c': { name: 'c', value: 1e-6, scientific: false },
	      'm': { name: 'm', value: 1e-9, scientific: true },
	      'u': { name: 'u', value: 1e-18, scientific: true },
	      'n': { name: 'n', value: 1e-27, scientific: true },
	      'p': { name: 'p', value: 1e-36, scientific: true },
	      'f': { name: 'f', value: 1e-45, scientific: true },
	      'a': { name: 'a', value: 1e-54, scientific: true },
	      'z': { name: 'z', value: 1e-63, scientific: true },
	      'y': { name: 'y', value: 1e-72, scientific: true }
	    },
	    BINARY_SHORT: {
	      '': { name: '', value: 1, scientific: true },
	      'k': { name: 'k', value: 1e3, scientific: true },
	      'M': { name: 'M', value: 1e6, scientific: true },
	      'G': { name: 'G', value: 1e9, scientific: true },
	      'T': { name: 'T', value: 1e12, scientific: true },
	      'P': { name: 'P', value: 1e15, scientific: true },
	      'E': { name: 'E', value: 1e18, scientific: true },
	      'Z': { name: 'Z', value: 1e21, scientific: true },
	      'Y': { name: 'Y', value: 1e24, scientific: true },

	      'Ki': { name: 'Ki', value: 1024, scientific: true },
	      'Mi': { name: 'Mi', value: Math.pow(1024, 2), scientific: true },
	      'Gi': { name: 'Gi', value: Math.pow(1024, 3), scientific: true },
	      'Ti': { name: 'Ti', value: Math.pow(1024, 4), scientific: true },
	      'Pi': { name: 'Pi', value: Math.pow(1024, 5), scientific: true },
	      'Ei': { name: 'Ei', value: Math.pow(1024, 6), scientific: true },
	      'Zi': { name: 'Zi', value: Math.pow(1024, 7), scientific: true },
	      'Yi': { name: 'Yi', value: Math.pow(1024, 8), scientific: true }
	    },
	    BINARY_LONG: {
	      '': { name: '', value: 1, scientific: true },
	      'kilo': { name: 'kilo', value: 1e3, scientific: true },
	      'mega': { name: 'mega', value: 1e6, scientific: true },
	      'giga': { name: 'giga', value: 1e9, scientific: true },
	      'tera': { name: 'tera', value: 1e12, scientific: true },
	      'peta': { name: 'peta', value: 1e15, scientific: true },
	      'exa': { name: 'exa', value: 1e18, scientific: true },
	      'zetta': { name: 'zetta', value: 1e21, scientific: true },
	      'yotta': { name: 'yotta', value: 1e24, scientific: true },

	      'kibi': { name: 'kibi', value: 1024, scientific: true },
	      'mebi': { name: 'mebi', value: Math.pow(1024, 2), scientific: true },
	      'gibi': { name: 'gibi', value: Math.pow(1024, 3), scientific: true },
	      'tebi': { name: 'tebi', value: Math.pow(1024, 4), scientific: true },
	      'pebi': { name: 'pebi', value: Math.pow(1024, 5), scientific: true },
	      'exi': { name: 'exi', value: Math.pow(1024, 6), scientific: true },
	      'zebi': { name: 'zebi', value: Math.pow(1024, 7), scientific: true },
	      'yobi': { name: 'yobi', value: Math.pow(1024, 8), scientific: true }
	    },
	    BTU: {
	      '': { name: '', value: 1, scientific: true },
	      'MM': { name: 'MM', value: 1e6, scientific: true }
	    }

	    // Add a prefix list for both short and long prefixes (for example for ohm and bar which support both Mohm and megaohm, mbar and millibar):
	  };PREFIXES.SHORTLONG = {};
	  for (var key in PREFIXES.SHORT) {
	    if (PREFIXES.SHORT.hasOwnProperty(key)) {
	      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
	    }
	  }
	  for (var _key in PREFIXES.LONG) {
	    if (PREFIXES.LONG.hasOwnProperty(_key)) {
	      PREFIXES.SHORTLONG[_key] = PREFIXES.LONG[_key];
	    }
	  }

	  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
	   * Index  Dimension
	   * -----  ---------
	   *   0    Length
	   *   1    Mass
	   *   2    Time
	   *   3    Current
	   *   4    Temperature
	   *   5    Luminous intensity
	   *   6    Amount of substance
	   *   7    Angle
	   *   8    Bit (digital)
	   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
	   *
	   */

	  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];

	  var BASE_UNITS = {
	    NONE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    MASS: {
	      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    LENGTH: {
	      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
	    },
	    TIME: {
	      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
	    },
	    CURRENT: {
	      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
	    },
	    TEMPERATURE: {
	      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
	    },
	    LUMINOUS_INTENSITY: {
	      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
	    },
	    AMOUNT_OF_SUBSTANCE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
	    },

	    FORCE: {
	      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
	    },
	    SURFACE: {
	      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
	    },
	    VOLUME: {
	      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
	    },
	    ENERGY: {
	      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
	    },
	    POWER: {
	      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
	    },
	    PRESSURE: {
	      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
	    },

	    ELECTRIC_CHARGE: {
	      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CAPACITANCE: {
	      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_POTENTIAL: {
	      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_RESISTANCE: {
	      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_INDUCTANCE: {
	      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CONDUCTANCE: {
	      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX: {
	      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX_DENSITY: {
	      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
	    },

	    FREQUENCY: {
	      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
	    },
	    ANGLE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
	    },
	    BIT: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
	    }
	  };

	  for (var _key2 in BASE_UNITS) {
	    BASE_UNITS[_key2].key = _key2;
	  }

	  var BASE_UNIT_NONE = {};

	  var UNIT_NONE = { name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0] };

	  var UNITS = {
	    // length
	    meter: {
	      name: 'meter',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    inch: {
	      name: 'inch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    foot: {
	      name: 'foot',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yard: {
	      name: 'yard',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mile: {
	      name: 'mile',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    link: {
	      name: 'link',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rod: {
	      name: 'rod',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    chain: {
	      name: 'chain',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    angstrom: {
	      name: 'angstrom',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1e-10,
	      offset: 0
	    },

	    m: {
	      name: 'm',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    'in': {
	      name: 'in',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    ft: {
	      name: 'ft',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yd: {
	      name: 'yd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mi: {
	      name: 'mi',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    li: {
	      name: 'li',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rd: {
	      name: 'rd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    ch: {
	      name: 'ch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    mil: {
	      name: 'mil',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000254,
	      offset: 0
	    }, // 1/1000 inch

	    // Surface
	    m2: {
	      name: 'm2',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.SQUARED,
	      value: 1,
	      offset: 0
	    },
	    sqin: {
	      name: 'sqin',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.00064516,
	      offset: 0
	    }, // 645.16 mm2
	    sqft: {
	      name: 'sqft',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.09290304,
	      offset: 0
	    }, // 0.09290304 m2
	    sqyd: {
	      name: 'sqyd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.83612736,
	      offset: 0
	    }, // 0.83612736 m2
	    sqmi: {
	      name: 'sqmi',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 2589988.110336,
	      offset: 0
	    }, // 2.589988110336 km2
	    sqrd: {
	      name: 'sqrd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 25.29295,
	      offset: 0
	    }, // 25.29295 m2
	    sqch: {
	      name: 'sqch',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 404.6873,
	      offset: 0
	    }, // 404.6873 m2
	    sqmil: {
	      name: 'sqmil',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 6.4516e-10,
	      offset: 0
	    }, // 6.4516 * 10^-10 m2
	    acre: {
	      name: 'acre',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 4046.86,
	      offset: 0
	    }, // 4046.86 m2
	    hectare: {
	      name: 'hectare',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 10000,
	      offset: 0
	    }, // 10000 m2

	    // Volume
	    m3: {
	      name: 'm3',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.CUBIC,
	      value: 1,
	      offset: 0
	    },
	    L: {
	      name: 'L',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    l: {
	      name: 'l',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    litre: {
	      name: 'litre',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	    cuin: {
	      name: 'cuin',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1.6387064e-5,
	      offset: 0
	    }, // 1.6387064e-5 m3
	    cuft: {
	      name: 'cuft',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.028316846592,
	      offset: 0
	    }, // 28.316 846 592 L
	    cuyd: {
	      name: 'cuyd',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.764554857984,
	      offset: 0
	    }, // 764.554 857 984 L
	    teaspoon: {
	      name: 'teaspoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000005,
	      offset: 0
	    }, // 5 mL
	    tablespoon: {
	      name: 'tablespoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000015,
	      offset: 0
	    }, // 15 mL
	    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
	    drop: {
	      name: 'drop',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    }, // 0.05 mL = 5e-8 m3
	    gtt: {
	      name: 'gtt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    }, // 0.05 mL = 5e-8 m3

	    // Liquid volume
	    minim: {
	      name: 'minim',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00000006161152,
	      offset: 0
	    }, // 0.06161152 mL
	    fluiddram: {
	      name: 'fluiddram',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    }, // 3.696691 mL
	    fluidounce: {
	      name: 'fluidounce',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gill: {
	      name: 'gill',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cc: {
	      name: 'cc',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1e-6,
	      offset: 0
	    }, // 1e-6 L
	    cup: {
	      name: 'cup',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pint: {
	      name: 'pint',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    quart: {
	      name: 'quart',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gallon: {
	      name: 'gallon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    beerbarrel: {
	      name: 'beerbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    oilbarrel: {
	      name: 'oilbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    hogshead: {
	      name: 'hogshead',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.2384810,
	      offset: 0
	    }, // 238.4810 L

	    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
	    fldr: {
	      name: 'fldr',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    }, // 3.696691 mL
	    floz: {
	      name: 'floz',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gi: {
	      name: 'gi',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cp: {
	      name: 'cp',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pt: {
	      name: 'pt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    qt: {
	      name: 'qt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gal: {
	      name: 'gal',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    bbl: {
	      name: 'bbl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    obl: {
	      name: 'obl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?

	    // Mass
	    g: {
	      name: 'g',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    gram: {
	      name: 'gram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },

	    ton: {
	      name: 'ton',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 907.18474,
	      offset: 0
	    },
	    tonne: {
	      name: 'tonne',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 1000,
	      offset: 0
	    },

	    grain: {
	      name: 'grain',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dram: {
	      name: 'dram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    ounce: {
	      name: 'ounce',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    poundmass: {
	      name: 'poundmass',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    hundredweight: {
	      name: 'hundredweight',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	    stick: {
	      name: 'stick',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 115e-3,
	      offset: 0
	    },
	    stone: {
	      name: 'stone',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 6.35029318,
	      offset: 0
	    },

	    gr: {
	      name: 'gr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dr: {
	      name: 'dr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    oz: {
	      name: 'oz',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    lbm: {
	      name: 'lbm',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    cwt: {
	      name: 'cwt',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },

	    // Time
	    s: {
	      name: 's',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    min: {
	      name: 'min',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    h: {
	      name: 'h',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    second: {
	      name: 'second',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    sec: {
	      name: 'sec',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    minute: {
	      name: 'minute',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    hour: {
	      name: 'hour',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    day: {
	      name: 'day',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 86400,
	      offset: 0
	    },
	    week: {
	      name: 'week',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 7 * 86400,
	      offset: 0
	    },
	    month: {
	      name: 'month',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 2629800, // 1/12th of Julian year
	      offset: 0
	    },
	    year: {
	      name: 'year',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600, // Julian year
	      offset: 0
	    },
	    decade: {
	      name: 'decade',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 315576000, // Julian decade
	      offset: 0
	    },
	    century: {
	      name: 'century',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3155760000, // Julian century
	      offset: 0
	    },
	    millennium: {
	      name: 'millennium',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600000, // Julian millennium
	      offset: 0
	    },

	    // Frequency
	    hertz: {
	      name: 'Hertz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },
	    Hz: {
	      name: 'Hz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },

	    // Angle
	    rad: {
	      name: 'rad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    radian: {
	      name: 'radian',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
	    deg: {
	      name: 'deg',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.SHORT,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    degree: {
	      name: 'degree',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
	    grad: {
	      name: 'grad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.SHORT,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    gradian: {
	      name: 'gradian',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
	    cycle: {
	      name: 'cycle',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
	    arcsec: {
	      name: 'arcsec',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
	    arcmin: {
	      name: 'arcmin',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },

	    // Electric current
	    A: {
	      name: 'A',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    ampere: {
	      name: 'ampere',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },

	    // Temperature
	    // K(C) = °C + 273.15
	    // K(F) = (°F + 459.67) / 1.8
	    // K(R) = °R / 1.8
	    K: {
	      name: 'K',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    degC: {
	      name: 'degC',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    degF: {
	      name: 'degF',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    degR: {
	      name: 'degR',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	    kelvin: {
	      name: 'kelvin',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    celsius: {
	      name: 'celsius',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    fahrenheit: {
	      name: 'fahrenheit',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    rankine: {
	      name: 'rankine',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },

	    // amount of substance
	    mol: {
	      name: 'mol',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    mole: {
	      name: 'mole',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },

	    // luminous intensity
	    cd: {
	      name: 'cd',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    candela: {
	      name: 'candela',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // TODO: units STERADIAN
	    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},

	    // Force
	    N: {
	      name: 'N',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    newton: {
	      name: 'newton',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    dyn: {
	      name: 'dyn',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 0.00001,
	      offset: 0
	    },
	    dyne: {
	      name: 'dyne',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 0.00001,
	      offset: 0
	    },
	    lbf: {
	      name: 'lbf',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    poundforce: {
	      name: 'poundforce',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    kip: {
	      name: 'kip',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 4448.2216,
	      offset: 0
	    },

	    // Energy
	    J: {
	      name: 'J',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    joule: {
	      name: 'joule',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    erg: {
	      name: 'erg',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.NONE,
	      value: 1e-7,
	      offset: 0
	    },
	    Wh: {
	      name: 'Wh',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 3600,
	      offset: 0
	    },
	    BTU: {
	      name: 'BTU',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.BTU,
	      value: 1055.05585262,
	      offset: 0
	    },
	    eV: {
	      name: 'eV',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1.602176565e-19,
	      offset: 0
	    },
	    electronvolt: {
	      name: 'electronvolt',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.LONG,
	      value: 1.602176565e-19,
	      offset: 0
	    },

	    // Power
	    W: {
	      name: 'W',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    watt: {
	      name: 'watt',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    hp: {
	      name: 'hp',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.NONE,
	      value: 745.6998715386,
	      offset: 0
	    },

	    // Electrical power units
	    VAR: {
	      name: 'VAR',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: Complex.I,
	      offset: 0
	    },

	    VA: {
	      name: 'VA',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },

	    // Pressure
	    Pa: {
	      name: 'Pa',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    psi: {
	      name: 'psi',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 6894.75729276459,
	      offset: 0
	    },
	    atm: {
	      name: 'atm',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 101325,
	      offset: 0
	    },
	    bar: {
	      name: 'bar',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.SHORTLONG,
	      value: 100000,
	      offset: 0
	    },
	    torr: {
	      name: 'torr',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmHg: {
	      name: 'mmHg',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmH2O: {
	      name: 'mmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 9.80665,
	      offset: 0
	    },
	    cmH2O: {
	      name: 'cmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 98.0665,
	      offset: 0
	    },

	    // Electric charge
	    coulomb: {
	      name: 'coulomb',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    C: {
	      name: 'C',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric capacitance
	    farad: {
	      name: 'farad',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    F: {
	      name: 'F',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric potential
	    volt: {
	      name: 'volt',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    V: {
	      name: 'V',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric resistance
	    ohm: {
	      name: 'ohm',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORTLONG, // Both Mohm and megaohm are acceptable
	      value: 1,
	      offset: 0
	    },
	    /*
	     * Unicode breaks in browsers if charset is not specified
	    Ω: {
	      name: 'Ω',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    */
	    // Electric inductance
	    henry: {
	      name: 'henry',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    H: {
	      name: 'H',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric conductance
	    siemens: {
	      name: 'siemens',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    S: {
	      name: 'S',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux
	    weber: {
	      name: 'weber',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    Wb: {
	      name: 'Wb',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux density
	    tesla: {
	      name: 'tesla',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    T: {
	      name: 'T',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },

	    // Binary
	    b: {
	      name: 'b',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 1,
	      offset: 0
	    },
	    bits: {
	      name: 'bits',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 1,
	      offset: 0
	    },
	    B: {
	      name: 'B',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 8,
	      offset: 0
	    },
	    bytes: {
	      name: 'bytes',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 8,
	      offset: 0
	    }

	    // aliases (formerly plurals)
	  };var ALIASES = {
	    meters: 'meter',
	    inches: 'inch',
	    feet: 'foot',
	    yards: 'yard',
	    miles: 'mile',
	    links: 'link',
	    rods: 'rod',
	    chains: 'chain',
	    angstroms: 'angstrom',

	    lt: 'l',
	    litres: 'litre',
	    liter: 'litre',
	    liters: 'litre',
	    teaspoons: 'teaspoon',
	    tablespoons: 'tablespoon',
	    minims: 'minim',
	    fluiddrams: 'fluiddram',
	    fluidounces: 'fluidounce',
	    gills: 'gill',
	    cups: 'cup',
	    pints: 'pint',
	    quarts: 'quart',
	    gallons: 'gallon',
	    beerbarrels: 'beerbarrel',
	    oilbarrels: 'oilbarrel',
	    hogsheads: 'hogshead',
	    gtts: 'gtt',

	    grams: 'gram',
	    tons: 'ton',
	    tonnes: 'tonne',
	    grains: 'grain',
	    drams: 'dram',
	    ounces: 'ounce',
	    poundmasses: 'poundmass',
	    hundredweights: 'hundredweight',
	    sticks: 'stick',
	    lb: 'lbm',
	    lbs: 'lbm',

	    kips: 'kip',

	    acres: 'acre',
	    hectares: 'hectare',
	    sqfeet: 'sqft',
	    sqyard: 'sqyd',
	    sqmile: 'sqmi',
	    sqmiles: 'sqmi',

	    mmhg: 'mmHg',
	    mmh2o: 'mmH2O',
	    cmh2o: 'cmH2O',

	    seconds: 'second',
	    secs: 'second',
	    minutes: 'minute',
	    mins: 'minute',
	    hours: 'hour',
	    hr: 'hour',
	    hrs: 'hour',
	    days: 'day',
	    weeks: 'week',
	    months: 'month',
	    years: 'year',
	    decades: 'decade',
	    centuries: 'century',
	    millennia: 'millennium',

	    hertz: 'hertz',

	    radians: 'radian',
	    degrees: 'degree',
	    gradians: 'gradian',
	    cycles: 'cycle',
	    arcsecond: 'arcsec',
	    arcseconds: 'arcsec',
	    arcminute: 'arcmin',
	    arcminutes: 'arcmin',

	    BTUs: 'BTU',
	    watts: 'watt',
	    joules: 'joule',

	    amperes: 'ampere',
	    coulombs: 'coulomb',
	    volts: 'volt',
	    ohms: 'ohm',
	    farads: 'farad',
	    webers: 'weber',
	    teslas: 'tesla',
	    electronvolts: 'electronvolt',
	    moles: 'mole'

	    /**
	     * Calculate the values for the angle units.
	     * Value is calculated as number or BigNumber depending on the configuration
	     * @param {{number: 'number' | 'BigNumber'}} config
	     */
	  };function calculateAngleValues(config) {
	    if (config.number === 'BigNumber') {
	      var pi = constants.pi(type.BigNumber);
	      UNITS.rad.value = new type.BigNumber(1);
	      UNITS.deg.value = pi.div(180); // 2 * pi / 360
	      UNITS.grad.value = pi.div(200); // 2 * pi / 400
	      UNITS.cycle.value = pi.times(2); // 2 * pi
	      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600
	      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
	    } else {
	      // number
	      UNITS.rad.value = 1;
	      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360
	      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400
	      UNITS.cycle.value = Math.PI * 2; // 2 * pi
	      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600
	      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
	    }

	    // copy to the full names of the angles
	    UNITS.radian.value = UNITS.rad.value;
	    UNITS.degree.value = UNITS.deg.value;
	    UNITS.gradian.value = UNITS.grad.value;
	  }

	  // apply the angle values now
	  calculateAngleValues(config);

	  // recalculate the values on change of configuration
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      calculateAngleValues(curr);
	    }
	  });

	  /**
	   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
	   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
	   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
	   */
	  var UNIT_SYSTEMS = {
	    si: {
	      // Base units
	      NONE: { unit: UNIT_NONE, prefix: PREFIXES.NONE[''] },
	      LENGTH: { unit: UNITS.m, prefix: PREFIXES.SHORT[''] },
	      MASS: { unit: UNITS.g, prefix: PREFIXES.SHORT['k'] },
	      TIME: { unit: UNITS.s, prefix: PREFIXES.SHORT[''] },
	      CURRENT: { unit: UNITS.A, prefix: PREFIXES.SHORT[''] },
	      TEMPERATURE: { unit: UNITS.K, prefix: PREFIXES.SHORT[''] },
	      LUMINOUS_INTENSITY: { unit: UNITS.cd, prefix: PREFIXES.SHORT[''] },
	      AMOUNT_OF_SUBSTANCE: { unit: UNITS.mol, prefix: PREFIXES.SHORT[''] },
	      ANGLE: { unit: UNITS.rad, prefix: PREFIXES.SHORT[''] },
	      BIT: { unit: UNITS.bit, prefix: PREFIXES.SHORT[''] },

	      // Derived units
	      FORCE: { unit: UNITS.N, prefix: PREFIXES.SHORT[''] },
	      ENERGY: { unit: UNITS.J, prefix: PREFIXES.SHORT[''] },
	      POWER: { unit: UNITS.W, prefix: PREFIXES.SHORT[''] },
	      PRESSURE: { unit: UNITS.Pa, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_CHARGE: { unit: UNITS.C, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_CAPACITANCE: { unit: UNITS.F, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_POTENTIAL: { unit: UNITS.V, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_RESISTANCE: { unit: UNITS.ohm, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_INDUCTANCE: { unit: UNITS.H, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_CONDUCTANCE: { unit: UNITS.S, prefix: PREFIXES.SHORT[''] },
	      MAGNETIC_FLUX: { unit: UNITS.Wb, prefix: PREFIXES.SHORT[''] },
	      MAGNETIC_FLUX_DENSITY: { unit: UNITS.T, prefix: PREFIXES.SHORT[''] },
	      FREQUENCY: { unit: UNITS.Hz, prefix: PREFIXES.SHORT[''] }
	    }

	    // Clone to create the other unit systems
	  };UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.cgs.LENGTH = { unit: UNITS.m, prefix: PREFIXES.SHORT['c'] };
	  UNIT_SYSTEMS.cgs.MASS = { unit: UNITS.g, prefix: PREFIXES.SHORT[''] };
	  UNIT_SYSTEMS.cgs.FORCE = { unit: UNITS.dyn, prefix: PREFIXES.SHORT[''] };
	  UNIT_SYSTEMS.cgs.ENERGY = { unit: UNITS.erg, prefix: PREFIXES.NONE['']
	    // there are wholly 4 unique cgs systems for electricity and magnetism,
	    // so let's not worry about it unless somebody complains

	  };UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.us.LENGTH = { unit: UNITS.ft, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.MASS = { unit: UNITS.lbm, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.TEMPERATURE = { unit: UNITS.degF, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.FORCE = { unit: UNITS.lbf, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.ENERGY = { unit: UNITS.BTU, prefix: PREFIXES.BTU[''] };
	  UNIT_SYSTEMS.us.POWER = { unit: UNITS.hp, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.PRESSURE = { unit: UNITS.psi, prefix: PREFIXES.NONE['']

	    // Add additional unit systems here.

	    // Choose a unit system to seed the auto unit system.
	  };UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));

	  // Set the current unit system
	  var currentUnitSystem = UNIT_SYSTEMS.auto;

	  /**
	   * Set a unit system for formatting derived units.
	   * @param {string} [name] The name of the unit system.
	   */
	  Unit.setUnitSystem = function (name) {
	    if (UNIT_SYSTEMS.hasOwnProperty(name)) {
	      currentUnitSystem = UNIT_SYSTEMS[name];
	    } else {
	      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
	    }
	  };

	  /**
	   * Return the current unit system.
	   * @return {string} The current unit system.
	   */
	  Unit.getUnitSystem = function () {
	    for (var _key3 in UNIT_SYSTEMS) {
	      if (UNIT_SYSTEMS[_key3] === currentUnitSystem) {
	        return _key3;
	      }
	    }
	  };

	  /**
	   * Converters to convert from number to an other numeric type like BigNumber
	   * or Fraction
	   */
	  Unit.typeConverters = {
	    BigNumber: function BigNumber(x) {
	      return new type.BigNumber(x + ''); // stringify to prevent constructor error
	    },

	    Fraction: function Fraction(x) {
	      return new type.Fraction(x);
	    },

	    Complex: function Complex(x) {
	      return x;
	    },

	    number: function number(x) {
	      return x;
	    }

	    /**
	     * Retrieve the right convertor function corresponding with the type
	     * of provided exampleValue.
	     *
	     * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
	     *                        In case of an unknown type,
	     * @return {Function}
	     */
	  };Unit._getNumberConverter = function (type) {
	    if (!Unit.typeConverters[type]) {
	      throw new TypeError('Unsupported type "' + type + '"');
	    }

	    return Unit.typeConverters[type];
	  };

	  // Add dimensions to each built-in unit
	  for (var _key4 in UNITS) {
	    var unit = UNITS[_key4];
	    unit.dimensions = unit.base.dimensions;
	  }

	  // Create aliases
	  for (var name in ALIASES) {
	    if (ALIASES.hasOwnProperty(name)) {
	      var _unit2 = UNITS[ALIASES[name]];
	      var alias = {};
	      for (var _key5 in _unit2) {
	        if (_unit2.hasOwnProperty(_key5)) {
	          alias[_key5] = _unit2[_key5];
	        }
	      }
	      alias.name = name;
	      UNITS[name] = alias;
	    }
	  }

	  function assertUnitNameIsValid(name) {
	    for (var i = 0; i < name.length; i++) {
	      var _c = name.charAt(i);

	      var isValidAlpha = function isValidAlpha(p) {
	        return (/^[a-zA-Z]$/.test(p)
	        );
	      };

	      var _isDigit = function _isDigit(c) {
	        return c >= '0' && c <= '9';
	      };

	      if (i === 0 && !isValidAlpha(_c)) {
	        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
	      }

	      if (i > 0 && !(isValidAlpha(_c) || _isDigit(_c))) {
	        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
	      }
	    }
	  }

	  /**
	   * Wrapper around createUnitSingle.
	   * Example:
	   *  createUnit({
	   *    foo: { },
	   *    bar: {
	   *      definition: 'kg/foo',
	   *      aliases: ['ba', 'barr', 'bars'],
	   *      offset: 200
	   *    },
	   *    baz: '4 bar'
	   *  },
	   *  {
	   *    override: true
	   *  })
	   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
	   * @param {object} options
	   */
	  Unit.createUnit = function (obj, options) {
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof$5(obj)) !== 'object') {
	      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
	    }

	    // Remove all units and aliases we are overriding
	    if (options && options.override) {
	      for (var _key6 in obj) {
	        if (obj.hasOwnProperty(_key6)) {
	          Unit.deleteUnit(_key6);
	        }
	        if (obj[_key6].aliases) {
	          for (var i = 0; i < obj[_key6].aliases.length; i++) {
	            Unit.deleteUnit(obj[_key6].aliases[i]);
	          }
	        }
	      }
	    }

	    // TODO: traverse multiple times until all units have been added
	    var lastUnit = void 0;
	    for (var _key7 in obj) {
	      if (obj.hasOwnProperty(_key7)) {
	        lastUnit = Unit.createUnitSingle(_key7, obj[_key7]);
	      }
	    }
	    return lastUnit;
	  };

	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   * Example:
	   *  createUnitSingle('knot', '0.514444444 m/s')
	   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
	   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
	   *
	   * @return {Unit}
	   */
	  Unit.createUnitSingle = function (name, obj, options) {
	    if (typeof obj === 'undefined' || obj === null) {
	      obj = {};
	    }

	    if (typeof name !== 'string') {
	      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
	    }

	    // Check collisions with existing units
	    if (UNITS.hasOwnProperty(name)) {
	      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
	    }

	    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.

	    assertUnitNameIsValid(name);

	    var defUnit = null; // The Unit from which the new unit will be created.
	    var aliases = [];
	    var offset = 0;
	    var definition = void 0;
	    var prefixes = void 0;
	    if (obj && obj.type === 'Unit') {
	      defUnit = obj.clone();
	    } else if (typeof obj === 'string') {
	      if (obj !== '') {
	        definition = obj;
	      }
	    } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof$5(obj)) === 'object') {
	      definition = obj.definition;
	      prefixes = obj.prefixes;
	      offset = obj.offset;
	      if (obj.aliases) {
	        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
	      }
	    } else {
	      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
	    }

	    if (aliases) {
	      for (var i = 0; i < aliases.length; i++) {
	        if (UNITS.hasOwnProperty(aliases[i])) {
	          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
	        }
	      }
	    }

	    if (definition && typeof definition === 'string' && !defUnit) {
	      try {
	        defUnit = Unit.parse(definition, { allowNoUnits: true });
	      } catch (ex) {
	        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
	        throw ex;
	      }
	    } else if (definition && definition.type === 'Unit') {
	      defUnit = definition.clone();
	    }

	    aliases = aliases || [];
	    offset = offset || 0;
	    if (prefixes && prefixes.toUpperCase) {
	      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
	    } else {
	      prefixes = PREFIXES.NONE;
	    }

	    // If defUnit is null, it is because the user did not
	    // specify a defintion. So create a new base dimension.
	    var newUnit = {};
	    if (!defUnit) {
	      // Add a new base dimension
	      var baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
	      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
	        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
	      }
	      BASE_DIMENSIONS.push(baseName);

	      // Push 0 onto existing base units
	      for (var b in BASE_UNITS) {
	        if (BASE_UNITS.hasOwnProperty(b)) {
	          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
	        }
	      }

	      // Add the new base unit
	      var newBaseUnit = { dimensions: [] };
	      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
	        newBaseUnit.dimensions[_i6] = 0;
	      }
	      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
	      newBaseUnit.key = baseName;
	      BASE_UNITS[baseName] = newBaseUnit;

	      newUnit = {
	        name: name,
	        value: 1,
	        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset,
	        base: baseName
	      };

	      currentUnitSystem[baseName] = {
	        unit: newUnit,
	        prefix: PREFIXES.NONE['']
	      };
	    } else {
	      newUnit = {
	        name: name,
	        value: defUnit.value,
	        dimensions: defUnit.dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset

	        // Create a new base if no matching base exists
	      };var anyMatch = false;
	      for (var _i7 in BASE_UNITS) {
	        if (BASE_UNITS.hasOwnProperty(_i7)) {
	          var match = true;
	          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
	            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
	              match = false;
	              break;
	            }
	          }
	          if (match) {
	            anyMatch = true;
	            break;
	          }
	        }
	      }
	      if (!anyMatch) {
	        var _baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
	        // Add the new base unit
	        var _newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
	        _newBaseUnit.key = _baseName;
	        BASE_UNITS[_baseName] = _newBaseUnit;

	        currentUnitSystem[_baseName] = {
	          unit: newUnit,
	          prefix: PREFIXES.NONE['']
	        };

	        newUnit.base = _baseName;
	      }
	    }

	    Unit.UNITS[name] = newUnit;

	    for (var _i8 = 0; _i8 < aliases.length; _i8++) {
	      var aliasName = aliases[_i8];
	      var _alias = {};
	      for (var _key8 in newUnit) {
	        if (newUnit.hasOwnProperty(_key8)) {
	          _alias[_key8] = newUnit[_key8];
	        }
	      }
	      _alias.name = aliasName;
	      Unit.UNITS[aliasName] = _alias;
	    }

	    return new Unit(null, name);
	  };

	  Unit.deleteUnit = function (name) {
	    delete Unit.UNITS[name];
	  };

	  // expose arrays with prefixes, dimensions, units, systems
	  Unit.PREFIXES = PREFIXES;
	  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
	  Unit.BASE_UNITS = BASE_UNITS;
	  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
	  Unit.UNITS = UNITS;

	  return Unit;
	}

	var name$O = 'Unit';
	var path$c = 'type';
	var factory_1$S = factory$S;
	var math$4 = true; // request access to the math namespace

	var Unit = {
		name: name$O,
		path: path$c,
		factory: factory_1$S,
		math: math$4
	};

	function factory$T(type, config, load, typed) {
	  /**
	   * Create a unit. Depending on the passed arguments, the function
	   * will create and return a new math.type.Unit object.
	   * When a matrix is provided, all elements will be converted to units.
	   *
	   * Syntax:
	   *
	   *     math.unit(unit : string)
	   *     math.unit(value : number, unit : string)
	   *
	   * Examples:
	   *
	   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
	   *    const b = math.unit('23 kg')    // returns Unit 23 kg
	   *    a.to('m')                       // returns Unit 0.05 m
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
	   *
	   * @param {* | Array | Matrix} args   A number and unit.
	   * @return {Unit | Array | Matrix}    The created unit
	   */

	  var unit = typed('unit', {
	    'Unit': function Unit(x) {
	      return x.clone();
	    },

	    'string': function string(x) {
	      if (type.Unit.isValuelessUnit(x)) {
	        return new type.Unit(null, x); // a pure unit
	      }

	      return type.Unit.parse(x); // a unit with value, like '5cm'
	    },

	    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
	      return new type.Unit(value, unit);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, unit);
	    }
	  });

	  unit.toTex = {
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };

	  return unit;
	}

	var name$P = 'unit';
	var factory_1$T = factory$T;

	var unit = {
		name: name$P,
		factory: factory_1$T
	};

	function factory$U(type, config, load, typed) {
	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   *
	   * Syntax:
	   *
	   *     math.createUnit({
	   *       baseUnit1: {
	   *         aliases: [string, ...]
	   *         prefixes: object
	   *       },
	   *       unit2: {
	   *         definition: string,
	   *         aliases: [string, ...]
	   *         prefixes: object,
	   *         offset: number
	   *       },
	   *       unit3: string    // Shortcut
	   *     })
	   *
	   *     // Another shortcut:
	   *     math.createUnit(string, unit : string, [object])
	   *
	   * Examples:
	   *
	   *     math.createUnit('foo')
	   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
	   *     math.createUnit('mph', '1 mile/hour')
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
	   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @return {Unit} The new unit
	   */
	  var createUnit = typed('createUnit', {

	    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
	    'Object, Object': function ObjectObject(obj, options) {
	      return type.Unit.createUnit(obj, options);
	    },

	    // Same as above but without the options.
	    'Object': function Object(obj) {
	      return type.Unit.createUnit(obj, {});
	    },

	    // Shortcut method for creating one unit.
	    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, options);
	    },

	    // Same as above but without the options.
	    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, {});
	    },

	    // Without a definition, creates a base unit.
	    'string': function string(name) {
	      var obj = {};
	      obj[name] = {};
	      return type.Unit.createUnit(obj, {});
	    }
	  });

	  return createUnit;
	}

	var name$Q = 'createUnit';
	var factory_1$U = factory$U;

	var createUnit = {
		name: name$Q,
		factory: factory_1$U
	};

	function factory$V(type, config, load, typed) {
	  /**
	   * Split a unit in an array of units whose sum is equal to the original unit.
	   *
	   * Syntax:
	   *
	   *     splitUnit(unit: Unit, parts: Array.<Unit>)
	   *
	   * Example:
	   *
	   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
	   *     // [ 3 feet, 3.3700787401575 inch ]
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @param {Array} [parts] An array of strings or valueless units.
	   * @return {Array} An array of units.
	   */
	  var splitUnit = typed('splitUnit', {
	    'Unit, Array': function UnitArray(unit, parts) {
	      return unit.splitUnit(parts);
	    }
	  });

	  return splitUnit;
	}

	var name$R = 'splitUnit';
	var factory_1$V = factory$V;

	var splitUnit = {
		name: name$R,
		factory: factory_1$V
	};

	var lazy$4 = object.lazy;

	function factory$W(type, config, load, typed, math) {
	  // helper function to create a unit with a fixed prefix
	  function fixedUnit(str) {
	    var unit = type.Unit.parse(str);
	    unit.fixPrefix = true;
	    return unit;
	  }

	  // Source: http://www.wikiwand.com/en/Physical_constant

	  // Universal constants
	  setLazyConstant(math, 'speedOfLight', function () {
	    return fixedUnit('299792458 m s^-1');
	  });
	  setLazyConstant(math, 'gravitationConstant', function () {
	    return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2');
	  });
	  setLazyConstant(math, 'planckConstant', function () {
	    return fixedUnit('6.626069311e-34 J s');
	  });
	  setLazyConstant(math, 'reducedPlanckConstant', function () {
	    return fixedUnit('1.05457172647e-34 J s');
	  });

	  // Electromagnetic constants
	  setLazyConstant(math, 'magneticConstant', function () {
	    return fixedUnit('1.2566370614e-6 N A^-2');
	  });
	  setLazyConstant(math, 'electricConstant', function () {
	    return fixedUnit('8.854187817e-12 F m^-1');
	  });
	  setLazyConstant(math, 'vacuumImpedance', function () {
	    return fixedUnit('376.730313461 ohm');
	  });
	  setLazyConstant(math, 'coulomb', function () {
	    return fixedUnit('8.9875517873681764e9 N m^2 C^-2');
	  });
	  setLazyConstant(math, 'elementaryCharge', function () {
	    return fixedUnit('1.60217656535e-19 C');
	  });
	  setLazyConstant(math, 'bohrMagneton', function () {
	    return fixedUnit('9.2740096820e-24 J T^-1');
	  });
	  setLazyConstant(math, 'conductanceQuantum', function () {
	    return fixedUnit('7.748091734625e-5 S');
	  });
	  setLazyConstant(math, 'inverseConductanceQuantum', function () {
	    return fixedUnit('12906.403721742 ohm');
	  });
	  setLazyConstant(math, 'magneticFluxQuantum', function () {
	    return fixedUnit('2.06783375846e-15 Wb');
	  });
	  setLazyConstant(math, 'nuclearMagneton', function () {
	    return fixedUnit('5.0507835311e-27 J T^-1');
	  });
	  setLazyConstant(math, 'klitzing', function () {
	    return fixedUnit('25812.807443484 ohm');
	  });
	  // setLazyConstant(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')})  // TODO: support for Hz needed

	  // Atomic and nuclear constants
	  setLazyConstant(math, 'bohrRadius', function () {
	    return fixedUnit('5.291772109217e-11 m');
	  });
	  setLazyConstant(math, 'classicalElectronRadius', function () {
	    return fixedUnit('2.817940326727e-15 m');
	  });
	  setLazyConstant(math, 'electronMass', function () {
	    return fixedUnit('9.1093829140e-31 kg');
	  });
	  setLazyConstant(math, 'fermiCoupling', function () {
	    return fixedUnit('1.1663645e-5 GeV^-2');
	  });
	  setLazyConstant(math, 'fineStructure', function () {
	    return 7.297352569824e-3;
	  });
	  setLazyConstant(math, 'hartreeEnergy', function () {
	    return fixedUnit('4.3597443419e-18 J');
	  });
	  setLazyConstant(math, 'protonMass', function () {
	    return fixedUnit('1.67262177774e-27 kg');
	  });
	  setLazyConstant(math, 'deuteronMass', function () {
	    return fixedUnit('3.3435830926e-27 kg');
	  });
	  setLazyConstant(math, 'neutronMass', function () {
	    return fixedUnit('1.6749271613e-27 kg');
	  });
	  setLazyConstant(math, 'quantumOfCirculation', function () {
	    return fixedUnit('3.636947552024e-4 m^2 s^-1');
	  });
	  setLazyConstant(math, 'rydberg', function () {
	    return fixedUnit('10973731.56853955 m^-1');
	  });
	  setLazyConstant(math, 'thomsonCrossSection', function () {
	    return fixedUnit('6.65245873413e-29 m^2');
	  });
	  setLazyConstant(math, 'weakMixingAngle', function () {
	    return 0.222321;
	  });
	  setLazyConstant(math, 'efimovFactor', function () {
	    return 22.7;
	  });

	  // Physico-chemical constants
	  setLazyConstant(math, 'atomicMass', function () {
	    return fixedUnit('1.66053892173e-27 kg');
	  });
	  setLazyConstant(math, 'avogadro', function () {
	    return fixedUnit('6.0221412927e23 mol^-1');
	  });
	  setLazyConstant(math, 'boltzmann', function () {
	    return fixedUnit('1.380648813e-23 J K^-1');
	  });
	  setLazyConstant(math, 'faraday', function () {
	    return fixedUnit('96485.336521 C mol^-1');
	  });
	  setLazyConstant(math, 'firstRadiation', function () {
	    return fixedUnit('3.7417715317e-16 W m^2');
	  });
	  // setLazyConstant(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}) // TODO spectralRadiance
	  setLazyConstant(math, 'loschmidt', function () {
	    return fixedUnit('2.686780524e25 m^-3');
	  });
	  setLazyConstant(math, 'gasConstant', function () {
	    return fixedUnit('8.314462175 J K^-1 mol^-1');
	  });
	  setLazyConstant(math, 'molarPlanckConstant', function () {
	    return fixedUnit('3.990312717628e-10 J s mol^-1');
	  });
	  setLazyConstant(math, 'molarVolume', function () {
	    return fixedUnit('2.241396820e-10 m^3 mol^-1');
	  });
	  setLazyConstant(math, 'sackurTetrode', function () {
	    return -1.164870823;
	  });
	  setLazyConstant(math, 'secondRadiation', function () {
	    return fixedUnit('1.438777013e-2 m K');
	  });
	  setLazyConstant(math, 'stefanBoltzmann', function () {
	    return fixedUnit('5.67037321e-8 W m^-2 K^-4');
	  });
	  setLazyConstant(math, 'wienDisplacement', function () {
	    return fixedUnit('2.897772126e-3 m K');
	  });

	  // Adopted values
	  setLazyConstant(math, 'molarMass', function () {
	    return fixedUnit('1e-3 kg mol^-1');
	  });
	  setLazyConstant(math, 'molarMassC12', function () {
	    return fixedUnit('1.2e-2 kg mol^-1');
	  });
	  setLazyConstant(math, 'gravity', function () {
	    return fixedUnit('9.80665 m s^-2');
	  });
	  // atm is defined in Unit.js

	  // Natural units
	  setLazyConstant(math, 'planckLength', function () {
	    return fixedUnit('1.61619997e-35 m');
	  });
	  setLazyConstant(math, 'planckMass', function () {
	    return fixedUnit('2.1765113e-8 kg');
	  });
	  setLazyConstant(math, 'planckTime', function () {
	    return fixedUnit('5.3910632e-44 s');
	  });
	  setLazyConstant(math, 'planckCharge', function () {
	    return fixedUnit('1.87554595641e-18 C');
	  });
	  setLazyConstant(math, 'planckTemperature', function () {
	    return fixedUnit('1.41683385e+32 K');
	  });
	}

	// create a lazy constant in both math and mathWithTransform
	function setLazyConstant(math, name, resolver) {
	  lazy$4(math, name, resolver);
	  lazy$4(math.expression.mathWithTransform, name, resolver);
	}

	var factory_1$W = factory$W;
	var lazy_1$2 = false; // no lazy loading of constants, the constants themselves are lazy when needed
	var math$5 = true; // request access to the math namespace

	var physicalConstants = {
		factory: factory_1$W,
		lazy: lazy_1$2,
		math: math$5
	};

	var unit$1 = [
	// type
	Unit,

	// construction function
	unit,

	// create new units
	createUnit,

	// split units
	splitUnit,

	// physical constants
	physicalConstants];

	var type = [bignumber$1, boolean_1, chain$1, complex$3, fraction$3, matrix$1, number$3, resultset, string$5, unit$1];

	var version = '5.0.4';

	function factory$X(type, config, load, typed, math) {
	  // listen for changed in the configuration, automatically reload
	  // constants when needed
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      factory$X(type, config, load, typed, math);
	    }
	  });

	  setConstant(math, 'true', true);
	  setConstant(math, 'false', false);
	  setConstant(math, 'null', null);
	  setConstant(math, 'uninitialized', 'Error: Constant uninitialized is removed since v4.0.0. Use null instead');

	  if (config.number === 'BigNumber') {
	    setConstant(math, 'Infinity', new type.BigNumber(Infinity));
	    setConstant(math, 'NaN', new type.BigNumber(NaN));

	    setLazyConstant$1(math, 'pi', function () {
	      return constants.pi(type.BigNumber);
	    });
	    setLazyConstant$1(math, 'tau', function () {
	      return constants.tau(type.BigNumber);
	    });
	    setLazyConstant$1(math, 'e', function () {
	      return constants.e(type.BigNumber);
	    });
	    setLazyConstant$1(math, 'phi', function () {
	      return constants.phi(type.BigNumber);
	    }); // golden ratio, (1+sqrt(5))/2

	    // uppercase constants (for compatibility with built-in Math)
	    setLazyConstant$1(math, 'E', function () {
	      return math.e;
	    });
	    setLazyConstant$1(math, 'LN2', function () {
	      return new type.BigNumber(2).ln();
	    });
	    setLazyConstant$1(math, 'LN10', function () {
	      return new type.BigNumber(10).ln();
	    });
	    setLazyConstant$1(math, 'LOG2E', function () {
	      return new type.BigNumber(1).div(new type.BigNumber(2).ln());
	    });
	    setLazyConstant$1(math, 'LOG10E', function () {
	      return new type.BigNumber(1).div(new type.BigNumber(10).ln());
	    });
	    setLazyConstant$1(math, 'PI', function () {
	      return math.pi;
	    });
	    setLazyConstant$1(math, 'SQRT1_2', function () {
	      return new type.BigNumber('0.5').sqrt();
	    });
	    setLazyConstant$1(math, 'SQRT2', function () {
	      return new type.BigNumber(2).sqrt();
	    });
	  } else {
	    setConstant(math, 'Infinity', Infinity);
	    setConstant(math, 'NaN', NaN);

	    setConstant(math, 'pi', Math.PI);
	    setConstant(math, 'tau', Math.PI * 2);
	    setConstant(math, 'e', Math.E);
	    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545); // golden ratio, (1+sqrt(5))/2

	    // uppercase constants (for compatibility with built-in Math)
	    setConstant(math, 'E', math.e);
	    setConstant(math, 'LN2', Math.LN2);
	    setConstant(math, 'LN10', Math.LN10);
	    setConstant(math, 'LOG2E', Math.LOG2E);
	    setConstant(math, 'LOG10E', Math.LOG10E);
	    setConstant(math, 'PI', math.pi);
	    setConstant(math, 'SQRT1_2', Math.SQRT1_2);
	    setConstant(math, 'SQRT2', Math.SQRT2);
	  }

	  // complex i
	  if (type.Complex) {
	    setConstant(math, 'i', type.Complex.I);
	  }

	  // meta information
	  setConstant(math, 'version', version);
	}

	// create a constant in both math and mathWithTransform
	function setConstant(math, name, value) {
	  math[name] = value;
	  math.expression.mathWithTransform[name] = value;
	}

	// create a lazy constant in both math and mathWithTransform
	function setLazyConstant$1(math, name, resolver) {
	  object.lazy(math, name, resolver);
	  object.lazy(math.expression.mathWithTransform, name, resolver);
	}

	var factory_1$X = factory$X;
	var lazy$5 = false; // no lazy loading of constants, the constants themselves are lazy when needed
	var math$6 = true; // request access to the math namespace

	var constants$1 = {
		factory: factory_1$X,
		lazy: lazy$5,
		math: math$6
	};

	function factory$Y(type, config, load, typed) {
	  // TODO: expose this function to mathjs, add documentation

	  /**
	   * Create a numeric value with a specific type: number, BigNumber, or Fraction
	   *
	   * @param {string | number} value
	   * @param {'number' | 'BigNumber' | 'Fraction'}
	   * @return {number | BigNumber | Fraction} Returns an instance of the
	   *                                         numeric requested type
	   */
	  return function numeric(value, valueType) {
	    if (valueType === 'BigNumber') {
	      return new type.BigNumber(value);
	    } else if (valueType === 'Fraction') {
	      return new type.Fraction(value);
	    } else {
	      // valueType === 'number' or undefined // TODO: check this
	      if (typeof value === 'number') {
	        return value;
	      } else {
	        if (value === 'Infinity') {
	          return Infinity;
	        }

	        if (value === 'NaN') {
	          return NaN;
	        }

	        // The following regexp is relatively permissive
	        if (!/^[-+]?((\d+\.?\d*)|(\d*\.?\d+))([eE][+-]?\d+)?$/.test(value)) {
	          throw new Error('Invalid numeric value "' + value + '"');
	        }

	        // remove leading zeros like '003.2' which are not allowed by JavaScript
	        return parseFloat(value.replace(/^(0*)[0-9]/, function (match, zeros) {
	          return match.substring(zeros.length);
	        }));
	      }
	    }
	  };
	}

	var factory_1$Y = factory$Y;

	var numeric = {
		factory: factory_1$Y
	};

	var _typeof$6 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var hasOwnProperty = object.hasOwnProperty;

	/**
	 * Get a property of a plain object
	 * Throws an error in case the object is not a plain object or the
	 * property is not defined on the object itself
	 * @param {Object} object
	 * @param {string} prop
	 * @return {*} Returns the property value when safe
	 */
	function getSafeProperty(object$$1, prop) {
	  // only allow getting safe properties of a plain object
	  if (isPlainObject(object$$1) && isSafeProperty(object$$1, prop)) {
	    return object$$1[prop];
	  }

	  if (typeof object$$1[prop] === 'function' && isSafeMethod(object$$1, prop)) {
	    throw new Error('Cannot access method "' + prop + '" as a property');
	  }

	  throw new Error('No access to property "' + prop + '"');
	}

	/**
	 * Set a property on a plain object.
	 * Throws an error in case the object is not a plain object or the
	 * property would override an inherited property like .constructor or .toString
	 * @param {Object} object
	 * @param {string} prop
	 * @param {*} value
	 * @return {*} Returns the value
	 */
	// TODO: merge this function into access.js?
	function setSafeProperty(object$$1, prop, value) {
	  // only allow setting safe properties of a plain object
	  if (isPlainObject(object$$1) && isSafeProperty(object$$1, prop)) {
	    object$$1[prop] = value;
	    return value;
	  }

	  throw new Error('No access to property "' + prop + '"');
	}

	/**
	 * Test whether a property is safe to use for an object.
	 * For example .toString and .constructor are not safe
	 * @param {string} prop
	 * @return {boolean} Returns true when safe
	 */
	function isSafeProperty(object$$1, prop) {
	  if (!object$$1 || (typeof object$$1 === 'undefined' ? 'undefined' : _typeof$6(object$$1)) !== 'object') {
	    return false;
	  }
	  // SAFE: whitelisted
	  // e.g length
	  if (hasOwnProperty(safeNativeProperties, prop)) {
	    return true;
	  }
	  // UNSAFE: inherited from Object prototype
	  // e.g constructor
	  if (prop in Object.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Object.prototype is a root object
	    return false;
	  }
	  // UNSAFE: inherited from Function prototype
	  // e.g call, apply
	  if (prop in Function.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Function.prototype is a root object
	    return false;
	  }
	  return true;
	}

	/**
	 * Validate whether a method is safe.
	 * Throws an error when that's not the case.
	 * @param {Object} object
	 * @param {string} method
	 */
	// TODO: merge this function into assign.js?
	function validateSafeMethod(object$$1, method) {
	  if (!isSafeMethod(object$$1, method)) {
	    throw new Error('No access to method "' + method + '"');
	  }
	}

	/**
	 * Check whether a method is safe.
	 * Throws an error when that's not the case (for example for `constructor`).
	 * @param {Object} object
	 * @param {string} method
	 * @return {boolean} Returns true when safe, false otherwise
	 */
	function isSafeMethod(object$$1, method) {
	  if (!object$$1 || typeof object$$1[method] !== 'function') {
	    return false;
	  }
	  // UNSAFE: ghosted
	  // e.g overridden toString
	  // Note that IE10 doesn't support __proto__ and we can't do this check there.
	  if (hasOwnProperty(object$$1, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object$$1)) {
	    return false;
	  }
	  // SAFE: whitelisted
	  // e.g toString
	  if (hasOwnProperty(safeNativeMethods, method)) {
	    return true;
	  }
	  // UNSAFE: inherited from Object prototype
	  // e.g constructor
	  if (method in Object.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Object.prototype is a root object
	    return false;
	  }
	  // UNSAFE: inherited from Function prototype
	  // e.g call, apply
	  if (method in Function.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Function.prototype is a root object
	    return false;
	  }
	  return true;
	}

	function isPlainObject(object$$1) {
	  return (typeof object$$1 === 'undefined' ? 'undefined' : _typeof$6(object$$1)) === 'object' && object$$1 && object$$1.constructor === Object;
	}

	var safeNativeProperties = {
	  length: true,
	  name: true
	};

	var safeNativeMethods = {
	  toString: true,
	  valueOf: true,
	  toLocaleString: true
	};

	var getSafeProperty_1 = getSafeProperty;
	var setSafeProperty_1 = setSafeProperty;
	var isSafeProperty_1 = isSafeProperty;
	var validateSafeMethod_1 = validateSafeMethod;
	var isSafeMethod_1 = isSafeMethod;
	var isPlainObject_1 = isPlainObject;

	var customs = {
		getSafeProperty: getSafeProperty_1,
		setSafeProperty: setSafeProperty_1,
		isSafeProperty: isSafeProperty_1,
		validateSafeMethod: validateSafeMethod_1,
		isSafeMethod: isSafeMethod_1,
		isPlainObject: isPlainObject_1
	};

	// Reserved keywords not allowed to use in the parser

	var keywords = {
	  end: true
	};

	var _typeof$7 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };


	var deepEqual = object.deepEqual;
	var hasOwnProperty$1 = object.hasOwnProperty;

	function factory$Z(type, config, load, typed, math) {
	  /**
	   * Node
	   */
	  function Node() {
	    if (!(this instanceof Node)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Evaluate the node
	   * @param {Object} [scope]  Scope to read/write variables
	   * @return {*}              Returns the result
	   */
	  Node.prototype.eval = function (scope) {
	    return this.compile().eval(scope);
	  };

	  Node.prototype.type = 'Node';

	  Node.prototype.isNode = true;

	  Node.prototype.comment = '';

	  /**
	   * Compile the node into an optimized, evauatable JavaScript function
	   * @return {{eval: function([Object])}} expr  Returns an object with a function 'eval',
	   *                                  which can be invoked as expr.eval([scope: Object]),
	   *                                  where scope is an optional object with
	   *                                  variables.
	   */
	  Node.prototype.compile = function () {
	    var expr = this._compile(math.expression.mathWithTransform, {});
	    var args = {};
	    var context = null;
	    return {
	      eval: function evalNode(scope) {
	        var s = scope || {};
	        _validateScope(s);
	        return expr(s, args, context);
	      }
	    };
	  };

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  Node.prototype._compile = function (math, argNames) {
	    throw new Error('Method _compile should be implemented by type ' + this.type);
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  Node.prototype.forEach = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run forEach on a Node interface');
	  };

	  /**
	   * Create a new Node having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  Node.prototype.map = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run map on a Node interface');
	  };

	  /**
	   * Validate whether an object is a Node, for use with map
	   * @param {Node} node
	   * @returns {Node} Returns the input if it's a node, else throws an Error
	   * @protected
	   */
	  Node.prototype._ifNode = function (node) {
	    if (!type.isNode(node)) {
	      throw new TypeError('Callback function must return a Node');
	    }

	    return node;
	  };

	  /**
	   * Recursively traverse all nodes in a node tree. Executes given callback for
	   * this node and each of its child nodes.
	   * @param {function(node: Node, path: string, parent: Node)} callback
	   *          A callback called for every node in the node tree.
	   */
	  Node.prototype.traverse = function (callback) {
	    // execute callback for itself
	    callback(this, null, null); // eslint-disable-line standard/no-callback-literal

	    // recursively traverse over all childs of a node
	    function _traverse(node, callback) {
	      node.forEach(function (child, path, parent) {
	        callback(child, path, parent);
	        _traverse(child, callback);
	      });
	    }

	    _traverse(this, callback);
	  };

	  /**
	   * Recursively transform a node tree via a transform function.
	   *
	   * For example, to replace all nodes of type SymbolNode having name 'x' with a
	   * ConstantNode with value 2:
	   *
	   *     const res = Node.transform(function (node, path, parent) {
	   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
	   *         return new ConstantNode(2)
	   *       }
	   *       else {
	   *         return node
	   *       }
	   *     })
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *          A mapping function accepting a node, and returning
	   *          a replacement for the node or the original node.
	   *          Signature: callback(node: Node, index: string, parent: Node) : Node
	   * @return {Node} Returns the original node or its replacement
	   */
	  Node.prototype.transform = function (callback) {
	    // traverse over all childs
	    function _transform(node, callback) {
	      return node.map(function (child, path, parent) {
	        var replacement = callback(child, path, parent);
	        return _transform(replacement, callback);
	      });
	    }

	    var replacement = callback(this, null, null); // eslint-disable-line standard/no-callback-literal
	    return _transform(replacement, callback);
	  };

	  /**
	   * Find any node in the node tree matching given filter function. For example, to
	   * find all nodes of type SymbolNode having name 'x':
	   *
	   *     const results = Node.filter(function (node) {
	   *       return (node && node.isSymbolNode) && (node.name === 'x')
	   *     })
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *            A test function returning true when a node matches, and false
	   *            otherwise. Function signature:
	   *            callback(node: Node, index: string, parent: Node) : boolean
	   * @return {Node[]} nodes       An array with nodes matching given filter criteria
	   */
	  Node.prototype.filter = function (callback) {
	    var nodes = [];

	    this.traverse(function (node, path, parent) {
	      if (callback(node, path, parent)) {
	        nodes.push(node);
	      }
	    });

	    return nodes;
	  };

	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.find = function () {
	    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
	  };

	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.match = function () {
	    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
	  };

	  /**
	   * Create a shallow clone of this node
	   * @return {Node}
	   */
	  Node.prototype.clone = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot clone a Node interface');
	  };

	  /**
	   * Create a deep clone of this node
	   * @return {Node}
	   */
	  Node.prototype.cloneDeep = function () {
	    return this.map(function (node) {
	      return node.cloneDeep();
	    });
	  };

	  /**
	   * Deep compare this node with another node.
	   * @param {Node} other
	   * @return {boolean} Returns true when both nodes are of the same type and
	   *                   contain the same values (as do their childs)
	   */
	  Node.prototype.equals = function (other) {
	    return other ? deepEqual(this, other) : false;
	  };

	  /**
	   * Get string representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toString = function (options) {
	    var customString = void 0;
	    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof$7(options)) === 'object') {
	      switch (_typeof$7(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customString = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    return this._toString(options);
	  };

	  /**
	   * Get a JSON representation of the node
	   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
	   * implementations of Node
	   * @returns {Object}
	   */
	  Node.prototype.toJSON = function () {
	    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
	  };

	  /**
	   * Get HTML representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)" or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toHTML = function (options) {
	    var customString = void 0;
	    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof$7(options)) === 'object') {
	      switch (_typeof$7(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customString = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    return this.toHTML(options);
	  };

	  /**
	   * Internal function to generate the string output.
	   * This has to be implemented by every Node
	   *
	   * @throws {Error}
	   */
	  Node.prototype._toString = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('_toString not implemented for ' + this.type);
	  };

	  /**
	   * Get LaTeX representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toTex = function (options) {
	    var customTex = void 0;
	    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof$7(options)) === 'object') {
	      switch (_typeof$7(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customTex = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    return this._toTex(options);
	  };

	  /**
	   * Internal function to generate the LaTeX output.
	   * This has to be implemented by every Node
	   *
	   * @param {Object} [options]
	   * @throws {Error}
	   */
	  Node.prototype._toTex = function (options) {
	    // must be implemented by each of the Node implementations
	    throw new Error('_toTex not implemented for ' + this.type);
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  Node.prototype.getIdentifier = function () {
	    return this.type;
	  };

	  /**
	   * Get the content of the current Node.
	   * @return {Node} node
	   **/
	  Node.prototype.getContent = function () {
	    return this;
	  };

	  /**
	   * Validate the symbol names of a scope.
	   * Throws an error when the scope contains an illegal symbol.
	   * @param {Object} scope
	   */
	  function _validateScope(scope) {
	    for (var symbol in scope) {
	      if (hasOwnProperty$1(scope, symbol)) {
	        if (symbol in keywords) {
	          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
	        }
	      }
	    }
	  }

	  return Node;
	}

	var name$S = 'Node';
	var path$d = 'expression.node';
	var math$7 = true; // request access to the math namespace as 5th argument of the factory function
	var factory_1$Z = factory$Z;

	var Node = {
		name: name$S,
		path: path$d,
		math: math$7,
		factory: factory_1$Z
	};

	/**
	 * Transform zero-based indices to one-based indices in errors
	 * @param {Error} err
	 * @returns {Error} Returns the transformed error
	 */
	var transform = function (err) {
	  if (err && err.isIndexError) {
	    return new IndexError_1(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
	  }

	  return err;
	};

	var error_transform = {
		transform: transform
	};

	var clone$3 = object.clone;
	var validateIndex$2 = array.validateIndex;
	var getSafeProperty$1 = customs.getSafeProperty;
	var setSafeProperty$1 = customs.setSafeProperty;


	function factory$_(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Get or set a subset of a matrix or string.
	   *
	   * Syntax:
	   *     math.subset(value, index)                                // retrieve a subset
	   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
	   *
	   * Examples:
	   *
	   *     // get a subset
	   *     const d = [[1, 2], [3, 4]]
	   *     math.subset(d, math.index(1, 0))        // returns 3
	   *     math.subset(d, math.index([0, 2], 1))   // returns [[2], [4]]
	   *
	   *     // replace a subset
	   *     const e = []
	   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
	   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
	   *
	   * See also:
	   *
	   *     size, resize, squeeze, index
	   *
	   * @param {Array | Matrix | string} matrix  An array, matrix, or string
	   * @param {Index} index                     An index containing ranges for each
	   *                                          dimension
	   * @param {*} [replacement]                 An array, matrix, or scalar.
	   *                                          If provided, the subset is replaced with replacement.
	   *                                          If not provided, the subset is returned
	   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
	   *                                          the matrix is resized. If not provided,
	   *                                          math.matrix elements will be left undefined.
	   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
	   */
	  var subset = typed('subset', {
	    // get subset
	    'Array, Index': function ArrayIndex(value, index) {
	      var m = matrix$$1(value);
	      var subset = m.subset(index); // returns a Matrix
	      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
	    },

	    'Matrix, Index': function MatrixIndex(value, index) {
	      return value.subset(index);
	    },

	    'Object, Index': _getObjectProperty,

	    'string, Index': _getSubstring,

	    // set subset
	    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
	      return matrix$$1(clone$3(value)).subset(index, replacement, undefined).valueOf();
	    },

	    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
	      return matrix$$1(clone$3(value)).subset(index, replacement, defaultValue).valueOf();
	    },

	    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
	      return value.clone().subset(index, replacement);
	    },

	    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
	      return value.clone().subset(index, replacement, defaultValue);
	    },

	    'string, Index, string': _setSubstring,
	    'string, Index, string, string': _setSubstring,
	    'Object, Index, any': _setObjectProperty
	  });

	  subset.toTex = undefined; // use default template

	  return subset;

	  /**
	   * Retrieve a subset of a string
	   * @param {string} str            string from which to get a substring
	   * @param {Index} index           An index containing ranges for each dimension
	   * @returns {string} substring
	   * @private
	   */
	  function _getSubstring(str, index) {
	    if (!type.isIndex(index)) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length !== 1) {
	      throw new DimensionError_1(index.size().length, 1);
	    }

	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex$2(index.min()[0], strLen);
	    validateIndex$2(index.max()[0], strLen);

	    var range = index.dimension(0);

	    var substr = '';
	    range.forEach(function (v) {
	      substr += str.charAt(v);
	    });

	    return substr;
	  }

	  /**
	   * Replace a substring in a string
	   * @param {string} str            string to be replaced
	   * @param {Index} index           An index containing ranges for each dimension
	   * @param {string} replacement    Replacement string
	   * @param {string} [defaultValue] Default value to be uses when resizing
	   *                                the string. is ' ' by default
	   * @returns {string} result
	   * @private
	   */
	  function _setSubstring(str, index, replacement, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length !== 1) {
	      throw new DimensionError_1(index.size().length, 1);
	    }
	    if (defaultValue !== undefined) {
	      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    } else {
	      defaultValue = ' ';
	    }

	    var range = index.dimension(0);
	    var len = range.size()[0];

	    if (len !== replacement.length) {
	      throw new DimensionError_1(range.size()[0], replacement.length);
	    }

	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex$2(index.min()[0]);
	    validateIndex$2(index.max()[0]);

	    // copy the string into an array with characters
	    var chars = [];
	    for (var i = 0; i < strLen; i++) {
	      chars[i] = str.charAt(i);
	    }

	    range.forEach(function (v, i) {
	      chars[v] = replacement.charAt(i[0]);
	    });

	    // initialize undefined characters with a space
	    if (chars.length > strLen) {
	      for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
	        if (!chars[_i]) {
	          chars[_i] = defaultValue;
	        }
	      }
	    }

	    return chars.join('');
	  }
	}

	/**
	 * Retrieve a property from an object
	 * @param {Object} object
	 * @param {Index} index
	 * @return {*} Returns the value of the property
	 * @private
	 */
	function _getObjectProperty(object$$1, index) {
	  if (index.size().length !== 1) {
	    throw new DimensionError_1(index.size(), 1);
	  }

	  var key = index.dimension(0);
	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }

	  return getSafeProperty$1(object$$1, key);
	}

	/**
	 * Set a property on an object
	 * @param {Object} object
	 * @param {Index} index
	 * @param {*} replacement
	 * @return {*} Returns the updated object
	 * @private
	 */
	function _setObjectProperty(object$$1, index, replacement) {
	  if (index.size().length !== 1) {
	    throw new DimensionError_1(index.size(), 1);
	  }

	  var key = index.dimension(0);
	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }

	  // clone the object, and apply the property to the clone
	  var updated = clone$3(object$$1);
	  setSafeProperty$1(updated, key, replacement);

	  return updated;
	}

	var name$T = 'subset';
	var factory_1$_ = factory$_;

	var subset = {
		name: name$T,
		factory: factory_1$_
	};

	var _typeof$8 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var errorTransform = error_transform.transform;
	var getSafeProperty$2 = customs.getSafeProperty;

	function factory$10(type, config, load, typed) {
	  var subset$$1 = load(subset);

	  /**
	   * Retrieve part of an object:
	   *
	   * - Retrieve a property from an object
	   * - Retrieve a part of a string
	   * - Retrieve a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @return {Object | Array | Matrix | string} Returns the subset
	   */
	  return function access(object, index) {
	    try {
	      if (Array.isArray(object)) {
	        return subset$$1(object, index);
	      } else if (object && typeof object.subset === 'function') {
	        // Matrix
	        return object.subset(index);
	      } else if (typeof object === 'string') {
	        // TODO: move getStringSubset into a separate util file, use that
	        return subset$$1(object, index);
	      } else if ((typeof object === 'undefined' ? 'undefined' : _typeof$8(object)) === 'object') {
	        if (!index.isObjectProperty()) {
	          throw new TypeError('Cannot apply a numeric index as object property');
	        }

	        return getSafeProperty$2(object, index.getObjectProperty());
	      } else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    } catch (err) {
	      throw errorTransform(err);
	    }
	  };
	}

	var factory_1$10 = factory$10;

	var access = {
		factory: factory_1$10
	};

	var getSafeProperty$3 = customs.getSafeProperty;

	function factory$11(type, config, load, typed) {
	  var Node$$1 = load(Node);
	  var access$$1 = load(access);

	  /**
	   * @constructor AccessorNode
	   * @extends {Node}
	   * Access an object property or get a matrix subset
	   *
	   * @param {Node} object                 The object from which to retrieve
	   *                                      a property or subset.
	   * @param {IndexNode} index             IndexNode containing ranges
	   */
	  function AccessorNode(object, index) {
	    if (!(this instanceof AccessorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!type.isNode(object)) {
	      throw new TypeError('Node expected for parameter "object"');
	    }
	    if (!type.isIndexNode(index)) {
	      throw new TypeError('IndexNode expected for parameter "index"');
	    }

	    this.object = object || null;
	    this.index = index;

	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
	        } else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }

	  AccessorNode.prototype = new Node$$1();

	  AccessorNode.prototype.type = 'AccessorNode';

	  AccessorNode.prototype.isAccessorNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  AccessorNode.prototype._compile = function (math, argNames) {
	    var evalObject = this.object._compile(math, argNames);
	    var evalIndex = this.index._compile(math, argNames);

	    if (this.index.isObjectProperty()) {
	      var prop = this.index.getObjectProperty();
	      return function evalAccessorNode(scope, args, context) {
	        return getSafeProperty$3(evalObject(scope, args, context), prop);
	      };
	    } else {
	      return function evalAccessorNode(scope, args, context) {
	        var object = evalObject(scope, args, context);
	        var index = evalIndex(scope, args, object); // we pass object here instead of context
	        return access$$1(object, index);
	      };
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AccessorNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    callback(this.index, 'index', this);
	  };

	  /**
	   * Create a new AccessorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AccessorNode} Returns a transformed copy of the node
	   */
	  AccessorNode.prototype.map = function (callback) {
	    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AccessorNode}
	   */
	  AccessorNode.prototype.clone = function () {
	    return new AccessorNode(this.object, this.index);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    if (needParenthesis(this.object)) {
	      object = '(' + object + ')';
	    }

	    return object + this.index.toString(options);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype.toHTML = function (options) {
	    var object = this.object.toHTML(options);
	    if (needParenthesis(this.object)) {
	      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    return object + this.index.toHTML(options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    if (needParenthesis(this.object)) {
	      object = '\\left(\' + object + \'\\right)';
	    }

	    return object + this.index.toTex(options);
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  AccessorNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'AccessorNode',
	      object: this.object,
	      index: this.index
	    };
	  };

	  /**
	   * Instantiate an AccessorNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
	   *                       where mathjs is optional
	   * @returns {AccessorNode}
	   */
	  AccessorNode.fromJSON = function (json) {
	    return new AccessorNode(json.object, json.index);
	  };

	  /**
	   * Are parenthesis needed?
	   * @private
	   */
	  function needParenthesis(node) {
	    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
	    return !(type.isAccessorNode(node) || type.isArrayNode(node) || type.isConstantNode(node) || type.isFunctionNode(node) || type.isObjectNode(node) || type.isParenthesisNode(node) || type.isSymbolNode(node));
	  }

	  return AccessorNode;
	}

	var name$U = 'AccessorNode';
	var path$e = 'expression.node';
	var factory_1$11 = factory$11;

	var AccessorNode = {
		name: name$U,
		path: path$e,
		factory: factory_1$11
	};

	var map = array.map;

	function factory$12(type, config, load, typed) {
	  var Node$$1 = load(Node);

	  /**
	   * @constructor ArrayNode
	   * @extends {Node}
	   * Holds an 1-dimensional array with items
	   * @param {Node[]} [items]   1 dimensional array with items
	   */
	  function ArrayNode(items) {
	    if (!(this instanceof ArrayNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.items = items || [];

	    // validate input
	    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected');
	    }

	    // TODO: deprecated since v3, remove some day
	    var deprecated = function deprecated() {
	      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
	    };
	    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });
	  }

	  ArrayNode.prototype = new Node$$1();

	  ArrayNode.prototype.type = 'ArrayNode';

	  ArrayNode.prototype.isArrayNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  ArrayNode.prototype._compile = function (math, argNames) {
	    var evalItems = map(this.items, function (item) {
	      return item._compile(math, argNames);
	    });

	    var asMatrix = math.config().matrix !== 'Array';
	    if (asMatrix) {
	      var matrix = math.matrix;
	      return function evalArrayNode(scope, args, context) {
	        return matrix(map(evalItems, function (evalItem) {
	          return evalItem(scope, args, context);
	        }));
	      };
	    } else {
	      return function evalArrayNode(scope, args, context) {
	        return map(evalItems, function (evalItem) {
	          return evalItem(scope, args, context);
	        });
	      };
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ArrayNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.items.length; i++) {
	      var node = this.items[i];
	      callback(node, 'items[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new ArrayNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ArrayNode} Returns a transformed copy of the node
	   */
	  ArrayNode.prototype.map = function (callback) {
	    var items = [];
	    for (var i = 0; i < this.items.length; i++) {
	      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
	    }
	    return new ArrayNode(items);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ArrayNode}
	   */
	  ArrayNode.prototype.clone = function () {
	    return new ArrayNode(this.items.slice(0));
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ArrayNode.prototype._toString = function (options) {
	    var items = this.items.map(function (node) {
	      return node.toString(options);
	    });
	    return '[' + items.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  ArrayNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ArrayNode',
	      items: this.items
	    };
	  };

	  /**
	   * Instantiate an ArrayNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ArrayNode", items: [...]}`,
	   *                       where mathjs is optional
	   * @returns {ArrayNode}
	   */
	  ArrayNode.fromJSON = function (json) {
	    return new ArrayNode(json.items);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ArrayNode.prototype.toHTML = function (options) {
	    var items = this.items.map(function (node) {
	      return node.toHTML(options);
	    });
	    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ArrayNode.prototype._toTex = function (options) {
	    var s = '\\begin{bmatrix}';

	    this.items.forEach(function (node) {
	      if (node.items) {
	        s += node.items.map(function (childNode) {
	          return childNode.toTex(options);
	        }).join('&');
	      } else {
	        s += node.toTex(options);
	      }

	      // new line
	      s += '\\\\';
	    });
	    s += '\\end{bmatrix}';
	    return s;
	  };

	  return ArrayNode;
	}

	var name$V = 'ArrayNode';
	var path$f = 'expression.node';
	var factory_1$12 = factory$12;

	var ArrayNode = {
		name: name$V,
		path: path$f,
		factory: factory_1$12
	};

	var _typeof$9 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var errorTransform$1 = error_transform.transform;
	var setSafeProperty$2 = customs.setSafeProperty;

	function factory$13(type, config, load, typed) {
	  var subset$$1 = load(subset);
	  var matrix$$1 = load(matrix);

	  /**
	   * Replace part of an object:
	   *
	   * - Assign a property to an object
	   * - Replace a part of a string
	   * - Replace a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @param {*} value
	   * @return {Object | Array | Matrix | string} Returns the original object
	   *                                            except in case of a string
	   */
	  // TODO: change assign to return the value instead of the object
	  return function assign(object, index, value) {
	    try {
	      if (Array.isArray(object)) {
	        return matrix$$1(object).subset(index, value).valueOf();
	      } else if (object && typeof object.subset === 'function') {
	        // Matrix
	        return object.subset(index, value);
	      } else if (typeof object === 'string') {
	        // TODO: move setStringSubset into a separate util file, use that
	        return subset$$1(object, index, value);
	      } else if ((typeof object === 'undefined' ? 'undefined' : _typeof$9(object)) === 'object') {
	        if (!index.isObjectProperty()) {
	          throw TypeError('Cannot apply a numeric index as object property');
	        }
	        setSafeProperty$2(object, index.getObjectProperty(), value);
	        return object;
	      } else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    } catch (err) {
	      throw errorTransform$1(err);
	    }
	  };
	}

	var factory_1$13 = factory$13;

	var assign = {
		factory: factory_1$13
	};

	// list of identifiers of nodes in order of their precedence
	// also contains information about left/right associativity
	// and which other operator the operator is associative with
	// Example:
	// addition is associative with addition and subtraction, because:
	// (a+b)+c=a+(b+c)
	// (a+b)-c=a+(b-c)
	//
	// postfix operators are left associative, prefix operators
	// are right associative
	//
	// It's also possible to set the following properties:
	// latexParens: if set to false, this node doesn't need to be enclosed
	//              in parentheses when using LaTeX
	// latexLeftParens: if set to false, this !OperatorNode's!
	//                  left argument doesn't need to be enclosed
	//                  in parentheses
	// latexRightParens: the same for the right argument

	var properties = [{ // assignment
	  'AssignmentNode': {},
	  'FunctionAssignmentNode': {}
	}, { // conditional expression
	  'ConditionalNode': {
	    latexLeftParens: false,
	    latexRightParens: false,
	    latexParens: false
	    // conditionals don't need parentheses in LaTeX because
	    // they are 2 dimensional
	  }
	}, { // logical or
	  'OperatorNode:or': {
	    associativity: 'left',
	    associativeWith: []
	  }

	}, { // logical xor
	  'OperatorNode:xor': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // logical and
	  'OperatorNode:and': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // bitwise or
	  'OperatorNode:bitOr': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // bitwise xor
	  'OperatorNode:bitXor': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // bitwise and
	  'OperatorNode:bitAnd': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // relational operators
	  'OperatorNode:equal': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:unequal': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:smaller': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:larger': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:smallerEq': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:largerEq': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // bitshift operators
	  'OperatorNode:leftShift': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:rightArithShift': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:rightLogShift': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // unit conversion
	  'OperatorNode:to': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // range
	  'RangeNode': {}
	}, { // addition, subtraction
	  'OperatorNode:add': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
	  },
	  'OperatorNode:subtract': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // multiply, divide, modulus
	  'OperatorNode:multiply': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
	  },
	  'OperatorNode:divide': {
	    associativity: 'left',
	    associativeWith: [],
	    latexLeftParens: false,
	    latexRightParens: false,
	    latexParens: false
	    // fractions don't require parentheses because
	    // they're 2 dimensional, so parens aren't needed
	    // in LaTeX
	  },
	  'OperatorNode:dotMultiply': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
	  },
	  'OperatorNode:dotDivide': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:mod': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { // unary prefix operators
	  'OperatorNode:unaryPlus': {
	    associativity: 'right'
	  },
	  'OperatorNode:unaryMinus': {
	    associativity: 'right'
	  },
	  'OperatorNode:bitNot': {
	    associativity: 'right'
	  },
	  'OperatorNode:not': {
	    associativity: 'right'
	  }
	}, { // exponentiation
	  'OperatorNode:pow': {
	    associativity: 'right',
	    associativeWith: [],
	    latexRightParens: false
	    // the exponent doesn't need parentheses in
	    // LaTeX because it's 2 dimensional
	    // (it's on top)
	  },
	  'OperatorNode:dotPow': {
	    associativity: 'right',
	    associativeWith: []
	  }
	}, { // factorial
	  'OperatorNode:factorial': {
	    associativity: 'left'
	  }
	}, { // matrix transpose
	  'OperatorNode:transpose': {
	    associativity: 'left'
	  }
	}];

	/**
	 * Get the precedence of a Node.
	 * Higher number for higher precedence, starting with 0.
	 * Returns null if the precedence is undefined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {number|null}
	 */
	function getPrecedence(_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    // ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  for (var i = 0; i < properties.length; i++) {
	    if (identifier in properties[i]) {
	      return i;
	    }
	  }
	  return null;
	}

	/**
	 * Get the associativity of an operator (left or right).
	 * Returns a string containing 'left' or 'right' or null if
	 * the associativity is not defined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {string|null}
	 * @throws {Error}
	 */
	function getAssociativity(_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    // ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  var index = getPrecedence(node, parenthesis);
	  if (index === null) {
	    // node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifier];

	  if (property.hasOwnProperty('associativity')) {
	    if (property.associativity === 'left') {
	      return 'left';
	    }
	    if (property.associativity === 'right') {
	      return 'right';
	    }
	    // associativity is invalid
	    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
	  }

	  // associativity is undefined
	  return null;
	}

	/**
	 * Check if an operator is associative with another operator.
	 * Returns either true or false or null if not defined.
	 *
	 * @param {Node} nodeA
	 * @param {Node} nodeB
	 * @param {string} parenthesis
	 * @return {bool|null}
	 */
	function isAssociativeWith(nodeA, nodeB, parenthesis) {
	  // ParenthesisNodes are only ignored when not in 'keep' mode
	  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
	  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
	  var identifierA = a.getIdentifier();
	  var identifierB = b.getIdentifier();
	  var index = getPrecedence(a, parenthesis);
	  if (index === null) {
	    // node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifierA];

	  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {
	    for (var i = 0; i < property.associativeWith.length; i++) {
	      if (property.associativeWith[i] === identifierB) {
	        return true;
	      }
	    }
	    return false;
	  }

	  // associativeWith is not defined
	  return null;
	}

	var properties_1 = properties;
	var getPrecedence_1 = getPrecedence;
	var getAssociativity_1 = getAssociativity;
	var isAssociativeWith_1 = isAssociativeWith;

	var operators = {
		properties: properties_1,
		getPrecedence: getPrecedence_1,
		getAssociativity: getAssociativity_1,
		isAssociativeWith: isAssociativeWith_1
	};

	var getSafeProperty$4 = customs.getSafeProperty;
	var setSafeProperty$3 = customs.setSafeProperty;

	function factory$14(type, config, load, typed) {
	  var Node$$1 = load(Node);
	  var assign$$1 = load(assign);
	  var access$$1 = load(access);

	  var operators$$1 = operators;

	  /**
	   * @constructor AssignmentNode
	   * @extends {Node}
	   *
	   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
	   * replace a subset of a matrix like `A[2,2]=42`.
	   *
	   * Syntax:
	   *
	   *     new AssignmentNode(symbol, value)
	   *     new AssignmentNode(object, index, value)
	   *
	   * Usage:
	   *
	   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
	   *
	   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
	   * @param {IndexNode} [index=null]            Index, property name or matrix
	   *                                            index. Optional. If not provided
	   *                                            and `object` is a SymbolNode,
	   *                                            the property is assigned to the
	   *                                            global scope.
	   * @param {Node} value                        The value to be assigned
	   */
	  function AssignmentNode(object, index, value) {
	    if (!(this instanceof AssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.object = object;
	    this.index = value ? index : null;
	    this.value = value || index;

	    // validate input
	    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {
	      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
	    }
	    if (type.isSymbolNode(object) && object.name === 'end') {
	      throw new Error('Cannot assign to symbol "end"');
	    }
	    if (this.index && !type.isIndexNode(this.index)) {
	      // index is optional
	      throw new TypeError('IndexNode expected as "index"');
	    }
	    if (!type.isNode(this.value)) {
	      throw new TypeError('Node expected as "value"');
	    }

	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
	        } else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }

	  AssignmentNode.prototype = new Node$$1();

	  AssignmentNode.prototype.type = 'AssignmentNode';

	  AssignmentNode.prototype.isAssignmentNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  AssignmentNode.prototype._compile = function (math, argNames) {
	    var evalObject = this.object._compile(math, argNames);
	    var evalIndex = this.index ? this.index._compile(math, argNames) : null;
	    var evalValue = this.value._compile(math, argNames);
	    var name = this.object.name;

	    if (!this.index) {
	      // apply a variable to the scope, for example `a=2`
	      if (!type.isSymbolNode(this.object)) {
	        throw new TypeError('SymbolNode expected as object');
	      }

	      return function evalAssignmentNode(scope, args, context) {
	        return setSafeProperty$3(scope, name, evalValue(scope, args, context));
	      };
	    } else if (this.index.isObjectProperty()) {
	      // apply an object property for example `a.b=2`
	      var prop = this.index.getObjectProperty();

	      return function evalAssignmentNode(scope, args, context) {
	        var object = evalObject(scope, args, context);
	        var value = evalValue(scope, args, context);
	        return setSafeProperty$3(object, prop, value);
	      };
	    } else if (type.isSymbolNode(this.object)) {
	      // update a matrix subset, for example `a[2]=3`
	      return function evalAssignmentNode(scope, args, context) {
	        var childObject = evalObject(scope, args, context);
	        var value = evalValue(scope, args, context);
	        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context
	        setSafeProperty$3(scope, name, assign$$1(childObject, index, value));
	        return value;
	      };
	    } else {
	      // type.isAccessorNode(node.object) === true
	      // update a matrix subset, for example `a.b[2]=3`

	      // we will not use the compile function of the AccessorNode, but compile it
	      // ourselves here as we need the parent object of the AccessorNode:
	      // wee need to apply the updated object to parent object
	      var evalParentObject = this.object.object._compile(math, argNames);

	      if (this.object.index.isObjectProperty()) {
	        var parentProp = this.object.index.getObjectProperty();

	        return function evalAssignmentNode(scope, args, context) {
	          var parent = evalParentObject(scope, args, context);
	          var childObject = getSafeProperty$4(parent, parentProp);
	          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context
	          var value = evalValue(scope, args, context);
	          setSafeProperty$3(parent, parentProp, assign$$1(childObject, index, value));
	          return value;
	        };
	      } else {
	        // if some parameters use the 'end' parameter, we need to calculate the size
	        var evalParentIndex = this.object.index._compile(math, argNames);

	        return function evalAssignmentNode(scope, args, context) {
	          var parent = evalParentObject(scope, args, context);
	          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context
	          var childObject = access$$1(parent, parentIndex);
	          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context
	          var value = evalValue(scope, args, context);

	          assign$$1(parent, parentIndex, assign$$1(childObject, index, value));

	          return value;
	        };
	      }
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AssignmentNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    if (this.index) {
	      callback(this.index, 'index', this);
	    }
	    callback(this.value, 'value', this);
	  };

	  /**
	   * Create a new AssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AssignmentNode} Returns a transformed copy of the node
	   */
	  AssignmentNode.prototype.map = function (callback) {
	    var object = this._ifNode(callback(this.object, 'object', this));
	    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;
	    var value = this._ifNode(callback(this.value, 'value', this));

	    return new AssignmentNode(object, index, value);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AssignmentNode}
	   */
	  AssignmentNode.prototype.clone = function () {
	    return new AssignmentNode(this.object, this.index, this.value);
	  };

	  /*
	   * Is parenthesis needed?
	   * @param {node} node
	   * @param {string} [parenthesis='keep']
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    if (!parenthesis) {
	      parenthesis = 'keep';
	    }

	    var precedence = operators$$1.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators$$1.getPrecedence(node.value, parenthesis);
	    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    var index = this.index ? this.index.toString(options) : '';
	    var value = this.value.toString(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '(' + value + ')';
	    }

	    return object + index + ' = ' + value;
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  AssignmentNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'AssignmentNode',
	      object: this.object,
	      index: this.index,
	      value: this.value
	    };
	  };

	  /**
	   * Instantiate an AssignmentNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
	   *                       where mathjs is optional
	   * @returns {AssignmentNode}
	   */
	  AssignmentNode.fromJSON = function (json) {
	    return new AssignmentNode(json.object, json.index, json.value);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype.toHTML = function (options) {
	    var object = this.object.toHTML(options);
	    var index = this.index ? this.index.toHTML(options) : '';
	    var value = this.value.toHTML(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
	    }

	    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    var index = this.index ? this.index.toTex(options) : '';
	    var value = this.value.toTex(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '\\left(' + value + '\\right)';
	    }

	    return object + index + ':=' + value;
	  };

	  return AssignmentNode;
	}

	var name$W = 'AssignmentNode';
	var path$g = 'expression.node';
	var factory_1$14 = factory$14;

	var AssignmentNode = {
		name: name$W,
		path: path$g,
		factory: factory_1$14
	};

	var forEach = array.forEach;
	var map$1 = array.map;

	function factory$15(type, config, load, typed) {
	  var Node$$1 = load(Node);
	  var ResultSet$$1 = load(ResultSet);

	  /**
	   * @constructor BlockNode
	   * @extends {Node}
	   * Holds a set with blocks
	   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
	   *            An array with blocks, where a block is constructed as an Object
	   *            with properties block, which is a Node, and visible, which is
	   *            a boolean. The property visible is optional and is true by default
	   */
	  function BlockNode(blocks) {
	    if (!(this instanceof BlockNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input, copy blocks
	    if (!Array.isArray(blocks)) throw new Error('Array expected');
	    this.blocks = blocks.map(function (block) {
	      var node = block && block.node;
	      var visible = block && block.visible !== undefined ? block.visible : true;

	      if (!type.isNode(node)) throw new TypeError('Property "node" must be a Node');
	      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');

	      return {
	        node: node,
	        visible: visible
	      };
	    });
	  }

	  BlockNode.prototype = new Node$$1();

	  BlockNode.prototype.type = 'BlockNode';

	  BlockNode.prototype.isBlockNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  BlockNode.prototype._compile = function (math, argNames) {
	    var evalBlocks = map$1(this.blocks, function (block) {
	      return {
	        eval: block.node._compile(math, argNames),
	        visible: block.visible
	      };
	    });

	    return function evalBlockNodes(scope, args, context) {
	      var results = [];

	      forEach(evalBlocks, function evalBlockNode(block) {
	        var result = block.eval(scope, args, context);
	        if (block.visible) {
	          results.push(result);
	        }
	      });

	      return new ResultSet$$1(results);
	    };
	  };

	  /**
	   * Execute a callback for each of the child blocks of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  BlockNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.blocks.length; i++) {
	      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
	    }
	  };

	  /**
	   * Create a new BlockNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {BlockNode} Returns a transformed copy of the node
	   */
	  BlockNode.prototype.map = function (callback) {
	    var blocks = [];
	    for (var i = 0; i < this.blocks.length; i++) {
	      var block = this.blocks[i];
	      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
	      blocks[i] = {
	        node: node,
	        visible: block.visible
	      };
	    }
	    return new BlockNode(blocks);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {BlockNode}
	   */
	  BlockNode.prototype.clone = function () {
	    var blocks = this.blocks.map(function (block) {
	      return {
	        node: block.node,
	        visible: block.visible
	      };
	    });

	    return new BlockNode(blocks);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  BlockNode.prototype._toString = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toString(options) + (param.visible ? '' : ';');
	    }).join('\n');
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  BlockNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'BlockNode',
	      blocks: this.blocks
	    };
	  };

	  /**
	   * Instantiate an BlockNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
	   *                       where mathjs is optional
	   * @returns {BlockNode}
	   */
	  BlockNode.fromJSON = function (json) {
	    return new BlockNode(json.blocks);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  BlockNode.prototype.toHTML = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
	    }).join('<span class="math-separator"><br /></span>');
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  BlockNode.prototype._toTex = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toTex(options) + (param.visible ? '' : ';');
	    }).join('\\;\\;\n');
	  };

	  return BlockNode;
	}

	var name$X = 'BlockNode';
	var path$h = 'expression.node';
	var factory_1$15 = factory$15;

	var BlockNode = {
		name: name$X,
		path: path$h,
		factory: factory_1$15
	};

	function factory$16(type, config, load, typed) {
	  var Node$$1 = load(Node);
	  var mathTypeOf = load(_typeof$4);

	  /**
	   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
	   *
	   * @param {Node} condition   Condition, must result in a boolean
	   * @param {Node} trueExpr    Expression evaluated when condition is true
	   * @param {Node} falseExpr   Expression evaluated when condition is true
	   *
	   * @constructor ConditionalNode
	   * @extends {Node}
	   */
	  function ConditionalNode(condition, trueExpr, falseExpr) {
	    if (!(this instanceof ConditionalNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (!type.isNode(condition)) throw new TypeError('Parameter condition must be a Node');
	    if (!type.isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
	    if (!type.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');

	    this.condition = condition;
	    this.trueExpr = trueExpr;
	    this.falseExpr = falseExpr;
	  }

	  ConditionalNode.prototype = new Node$$1();

	  ConditionalNode.prototype.type = 'ConditionalNode';

	  ConditionalNode.prototype.isConditionalNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  ConditionalNode.prototype._compile = function (math, argNames) {
	    var evalCondition = this.condition._compile(math, argNames);
	    var evalTrueExpr = this.trueExpr._compile(math, argNames);
	    var evalFalseExpr = this.falseExpr._compile(math, argNames);

	    return function evalConditionalNode(scope, args, context) {
	      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
	    };
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConditionalNode.prototype.forEach = function (callback) {
	    callback(this.condition, 'condition', this);
	    callback(this.trueExpr, 'trueExpr', this);
	    callback(this.falseExpr, 'falseExpr', this);
	  };

	  /**
	   * Create a new ConditionalNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ConditionalNode} Returns a transformed copy of the node
	   */
	  ConditionalNode.prototype.map = function (callback) {
	    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConditionalNode}
	   */
	  ConditionalNode.prototype.clone = function () {
	    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);

	    // Enclose Arguments in parentheses if they are an OperatorNode
	    // or have lower or equal precedence
	    // NOTE: enclosing all OperatorNodes in parentheses is a decision
	    // purely based on aesthetics and readability
	    var condition = this.condition.toString(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
	    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
	      condition = '(' + condition + ')';
	    }

	    var trueExpr = this.trueExpr.toString(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
	    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
	      trueExpr = '(' + trueExpr + ')';
	    }

	    var falseExpr = this.falseExpr.toString(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
	    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
	      falseExpr = '(' + falseExpr + ')';
	    }
	    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  ConditionalNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ConditionalNode',
	      condition: this.condition,
	      trueExpr: this.trueExpr,
	      falseExpr: this.falseExpr
	    };
	  };

	  /**
	   * Instantiate an ConditionalNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
	   *                       where mathjs is optional
	   * @returns {ConditionalNode}
	   */
	  ConditionalNode.fromJSON = function (json) {
	    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);

	    // Enclose Arguments in parentheses if they are an OperatorNode
	    // or have lower or equal precedence
	    // NOTE: enclosing all OperatorNodes in parentheses is a decision
	    // purely based on aesthetics and readability
	    var condition = this.condition.toHTML(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
	    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
	      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    var trueExpr = this.trueExpr.toHTML(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
	    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
	      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    var falseExpr = this.falseExpr.toHTML(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
	    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
	      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }
	    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toTex = function (options) {
	    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
	  };

	  /**
	   * Test whether a condition is met
	   * @param {*} condition
	   * @returns {boolean} true if condition is true or non-zero, else false
	   */
	  function testCondition(condition) {
	    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
	      return !!condition;
	    }

	    if (condition) {
	      if (type.isBigNumber(condition)) {
	        return !condition.isZero();
	      }

	      if (type.isComplex(condition)) {
	        return !!(condition.re || condition.im);
	      }

	      if (type.isUnit(condition)) {
	        return !!condition.value;
	      }
	    }

	    if (condition === null || condition === undefined) {
	      return false;
	    }

	    throw new TypeError('Unsupported type of condition "' + mathTypeOf(condition) + '"');
	  }

	  return ConditionalNode;
	}

	var name$Y = 'ConditionalNode';
	var path$i = 'expression.node';
	var factory_1$16 = factory$16;

	var ConditionalNode = {
		name: name$Y,
		path: path$i,
		factory: factory_1$16
	};

	var format$3 = string.format;
	var escapeLatex = latex.escape;

	function factory$17(type, config, load, typed) {
	  var Node$$1 = load(Node);
	  var getType = load(_typeof$4);

	  /**
	   * A ConstantNode holds a constant value like a number or string.
	   *
	   * Usage:
	   *
	   *     new ConstantNode(2.3)
	   *     new ConstantNode('hello')
	   *
	   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
	   * @constructor ConstantNode
	   * @extends {Node}
	   */
	  function ConstantNode(value) {
	    if (!(this instanceof ConstantNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (arguments.length === 2) {
	      // TODO: remove deprecation error some day (created 2018-01-23)
	      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');
	    }

	    this.value = value;
	  }

	  ConstantNode.prototype = new Node$$1();

	  ConstantNode.prototype.type = 'ConstantNode';

	  ConstantNode.prototype.isConstantNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  ConstantNode.prototype._compile = function (math, argNames) {
	    var value = this.value;

	    return function evalConstantNode() {
	      return value;
	    };
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConstantNode.prototype.forEach = function (callback) {}
	  // nothing to do, we don't have childs


	  /**
	   * Create a new ConstantNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ConstantNode} Returns a clone of the node
	   */
	  ;ConstantNode.prototype.map = function (callback) {
	    return this.clone();
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConstantNode}
	   */
	  ConstantNode.prototype.clone = function () {
	    return new ConstantNode(this.value);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toString = function (options) {
	    return format$3(this.value, options);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype.toHTML = function (options) {
	    var value = this._toString(options);

	    switch (getType(this.value)) {
	      case 'number':
	      case 'BigNumber':
	      case 'Fraction':
	        return '<span class="math-number">' + value + '</span>';
	      case 'string':
	        return '<span class="math-string">' + value + '</span>';
	      case 'boolean':
	        return '<span class="math-boolean">' + value + '</span>';
	      case 'null':
	        return '<span class="math-null-symbol">' + value + '</span>';
	      case 'undefined':
	        return '<span class="math-undefined">' + value + '</span>';

	      default:
	        return '<span class="math-symbol">' + value + '</span>';
	    }
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  ConstantNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ConstantNode',
	      value: this.value
	    };
	  };

	  /**
	   * Instantiate a ConstantNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
	   *                       where mathjs is optional
	   * @returns {ConstantNode}
	   */
	  ConstantNode.fromJSON = function (json) {
	    return new ConstantNode(json.value);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toTex = function (options) {
	    var value = this._toString(options);

	    switch (getType(this.value)) {
	      case 'string':
	        return '\\mathtt{' + escapeLatex(value) + '}';

	      case 'number':
	      case 'BigNumber':
	        var index = value.toLowerCase().indexOf('e');
	        if (index !== -1) {
	          return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
	        }
	        return value;

	      case 'Fraction':
	        return this.value.toLatex();

	      default:
	        return value;
	    }
	  };

	  return ConstantNode;
	}

	var name$Z = 'ConstantNode';
	var path$j = 'expression.node';
	var factory_1$17 = factory$17;

	var ConstantNode = {
		name: name$Z,
		path: path$j,
		factory: factory_1$17
	};

	var escape$1 = string.escape;
	var forEach$1 = array.forEach;
	var join = array.join;


	var setSafeProperty$4 = customs.setSafeProperty;

	function factory$18(type, config, load, typed) {
	  var Node$$1 = load(Node);

	  /**
	   * @constructor FunctionAssignmentNode
	   * @extends {Node}
	   * Function assignment
	   *
	   * @param {string} name           Function name
	   * @param {string[] | Array.<{name: string, type: string}>} params
	   *                                Array with function parameter names, or an
	   *                                array with objects containing the name
	   *                                and type of the parameter
	   * @param {Node} expr             The function expression
	   */
	  function FunctionAssignmentNode(name, params, expr) {
	    if (!(this instanceof FunctionAssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
	    if (!type.isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
	    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');

	    this.name = name;
	    this.params = params.map(function (param) {
	      return param && param.name || param;
	    });
	    this.types = params.map(function (param) {
	      return param && param.type || 'any';
	    });
	    this.expr = expr;
	  }

	  FunctionAssignmentNode.prototype = new Node$$1();

	  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';

	  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
	    var childArgNames = Object.create(argNames);
	    forEach$1(this.params, function (param) {
	      childArgNames[param] = true;
	    });

	    // compile the function expression with the child args
	    var evalExpr = this.expr._compile(math, childArgNames);
	    var name = this.name;
	    var params = this.params;
	    var signature = join(this.types, ',');
	    var syntax = name + '(' + join(this.params, ', ') + ')';

	    return function evalFunctionAssignmentNode(scope, args, context) {
	      var signatures = {};
	      signatures[signature] = function () {
	        var childArgs = Object.create(args);

	        for (var i = 0; i < params.length; i++) {
	          childArgs[params[i]] = arguments[i];
	        }

	        return evalExpr(scope, childArgs, context);
	      };
	      var fn = typed(name, signatures);
	      fn.syntax = syntax;

	      setSafeProperty$4(scope, name, fn);

	      return fn;
	    };
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionAssignmentNode.prototype.forEach = function (callback) {
	    callback(this.expr, 'expr', this);
	  };

	  /**
	   * Create a new FunctionAssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
	   */
	  FunctionAssignmentNode.prototype.map = function (callback) {
	    var expr = this._ifNode(callback(this.expr, 'expr', this));

	    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionAssignmentNode}
	   */
	  FunctionAssignmentNode.prototype.clone = function () {
	    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
	  };

	  /**
	   * Is parenthesis needed?
	   * @param {Node} node
	   * @param {Object} parenthesis
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);

	    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
	  }

	  /**
	   * get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var expr = this.expr.toString(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '(' + expr + ')';
	    }
	    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  FunctionAssignmentNode.prototype.toJSON = function () {
	    var types = this.types;

	    return {
	      mathjs: 'FunctionAssignmentNode',
	      name: this.name,
	      params: this.params.map(function (param, index) {
	        return {
	          name: param,
	          type: types[index]
	        };
	      }),
	      expr: this.expr
	    };
	  };

	  /**
	   * Instantiate an FunctionAssignmentNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
	   *                       where mathjs is optional
	   * @returns {FunctionAssignmentNode}
	   */
	  FunctionAssignmentNode.fromJSON = function (json) {
	    return new FunctionAssignmentNode(json.name, json.params, json.expr);
	  };

	  /**
	   * get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var params = [];
	    for (var i = 0; i < this.params.length; i++) {
	      params.push('<span class="math-symbol math-parameter">' + escape$1(this.params[i]) + '</span>');
	    }
	    var expr = this.expr.toHTML(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }
	    return '<span class="math-function">' + escape$1(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
	  };

	  /**
	   * get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var expr = this.expr.toTex(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '\\left(' + expr + '\\right)';
	    }

	    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
	  };

	  return FunctionAssignmentNode;
	}
	var name$_ = 'FunctionAssignmentNode';
	var path$k = 'expression.node';
	var factory_1$18 = factory$18;

	var FunctionAssignmentNode = {
		name: name$_,
		path: path$k,
		factory: factory_1$18
	};

	var map$2 = array.map;
	var escape$2 = string.escape;

	function factory$19(type, config, load, typed) {
	  var Node$$1 = load(Node);
	  var Range$$1 = load(Range);

	  var isArray = Array.isArray;

	  /**
	   * @constructor IndexNode
	   * @extends Node
	   *
	   * Describes a subset of a matrix or an object property.
	   * Cannot be used on its own, needs to be used within an AccessorNode or
	   * AssignmentNode.
	   *
	   * @param {Node[]} dimensions
	   * @param {boolean} [dotNotation=false]  Optional property describing whether
	   *                                       this index was written using dot
	   *                                       notation like `a.b`, or using bracket
	   *                                       notation like `a["b"]` (default).
	   *                                       Used to stringify an IndexNode.
	   */
	  function IndexNode(dimensions, dotNotation) {
	    if (!(this instanceof IndexNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.dimensions = dimensions;
	    this.dotNotation = dotNotation || false;

	    // validate input
	    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
	    }
	    if (this.dotNotation && !this.isObjectProperty()) {
	      throw new Error('dotNotation only applicable for object properties');
	    }

	    // TODO: deprecated since v3, remove some day
	    var deprecated = function deprecated() {
	      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
	    };
	    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
	  }

	  IndexNode.prototype = new Node$$1();

	  IndexNode.prototype.type = 'IndexNode';

	  IndexNode.prototype.isIndexNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  IndexNode.prototype._compile = function (math, argNames) {
	    // TODO: implement support for bignumber (currently bignumbers are silently
	    //       reduced to numbers when changing the value to zero-based)

	    // TODO: Optimization: when the range values are ConstantNodes,
	    //       we can beforehand resolve the zero-based value

	    // optimization for a simple object property
	    var evalDimensions = map$2(this.dimensions, function (range, i) {
	      if (type.isRangeNode(range)) {
	        if (range.needsEnd()) {
	          // create a range containing end (like '4:end')
	          var childArgNames = Object.create(argNames);
	          childArgNames['end'] = true;

	          var evalStart = range.start._compile(math, childArgNames);
	          var evalEnd = range.end._compile(math, childArgNames);
	          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
	            return 1;
	          };

	          return function evalDimension(scope, args, context) {
	            var size = math.size(context).valueOf();
	            var childArgs = Object.create(args);
	            childArgs['end'] = size[i];

	            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
	          };
	        } else {
	          // create range
	          var _evalStart = range.start._compile(math, argNames);
	          var _evalEnd = range.end._compile(math, argNames);
	          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
	            return 1;
	          };

	          return function evalDimension(scope, args, context) {
	            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
	          };
	        }
	      } else if (type.isSymbolNode(range) && range.name === 'end') {
	        // SymbolNode 'end'
	        var _childArgNames = Object.create(argNames);
	        _childArgNames['end'] = true;

	        var evalRange = range._compile(math, _childArgNames);

	        return function evalDimension(scope, args, context) {
	          var size = math.size(context).valueOf();
	          var childArgs = Object.create(args);
	          childArgs['end'] = size[i];

	          return evalRange(scope, childArgs, context);
	        };
	      } else {
	        // ConstantNode
	        var _evalRange = range._compile(math, argNames);
	        return function evalDimension(scope, args, context) {
	          return _evalRange(scope, args, context);
	        };
	      }
	    });

	    return function evalIndexNode(scope, args, context) {
	      var dimensions = map$2(evalDimensions, function (evalDimension) {
	        return evalDimension(scope, args, context);
	      });
	      return math.index.apply(math, dimensions);
	    };
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  IndexNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.dimensions.length; i++) {
	      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new IndexNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {IndexNode} Returns a transformed copy of the node
	   */
	  IndexNode.prototype.map = function (callback) {
	    var dimensions = [];
	    for (var i = 0; i < this.dimensions.length; i++) {
	      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
	    }

	    return new IndexNode(dimensions);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {IndexNode}
	   */
	  IndexNode.prototype.clone = function () {
	    return new IndexNode(this.dimensions.slice(0));
	  };

	  /**
	   * Test whether this IndexNode contains a single property name
	   * @return {boolean}
	   */
	  IndexNode.prototype.isObjectProperty = function () {
	    return this.dimensions.length === 1 && type.isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
	  };

	  /**
	   * Returns the property name if IndexNode contains a property.
	   * If not, returns null.
	   * @return {string | null}
	   */
	  IndexNode.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this.dimensions[0].value : null;
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toString = function (options) {
	    // format the parameters like "[1, 0:5]"
	    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  IndexNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'IndexNode',
	      dimensions: this.dimensions,
	      dotNotation: this.dotNotation
	    };
	  };

	  /**
	   * Instantiate an IndexNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
	   *                       where mathjs is optional
	   * @returns {IndexNode}
	   */
	  IndexNode.fromJSON = function (json) {
	    return new IndexNode(json.dimensions, json.dotNotation);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype.toHTML = function (options) {
	    // format the parameters like "[1, 0:5]"
	    var dimensions = [];
	    for (var i = 0; i < this.dimensions.length; i++) {
	      dimensions[i] = this.dimensions[i].toHTML();
	    }
	    if (this.dotNotation) {
	      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape$2(this.getObjectProperty()) + '</span>';
	    } else {
	      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
	    }
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toTex = function (options) {
	    var dimensions = this.dimensions.map(function (range) {
	      return range.toTex(options);
	    });

	    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
	  };

	  // helper function to create a Range from start, step and end
	  function createRange(start, end, step) {
	    return new Range$$1(type.isBigNumber(start) ? start.toNumber() : start, type.isBigNumber(end) ? end.toNumber() : end, type.isBigNumber(step) ? step.toNumber() : step);
	  }

	  return IndexNode;
	}

	var name$10 = 'IndexNode';
	var path$l = 'expression.node';
	var factory_1$19 = factory$19;

	var IndexNode = {
		name: name$10,
		path: path$l,
		factory: factory_1$19
	};

	var _typeof$a = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var stringify = string.stringify;
	var escape$3 = string.escape;
	var isSafeProperty$1 = customs.isSafeProperty;
	var hasOwnProperty$2 = object.hasOwnProperty;

	function factory$1a(type, config, load, typed) {
	  var Node$$1 = load(Node);

	  /**
	   * @constructor ObjectNode
	   * @extends {Node}
	   * Holds an object with keys/values
	   * @param {Object.<string, Node>} [properties]   object with key/value pairs
	   */
	  function ObjectNode(properties) {
	    if (!(this instanceof ObjectNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.properties = properties || {};

	    // validate input
	    if (properties) {
	      if (!((typeof properties === 'undefined' ? 'undefined' : _typeof$a(properties)) === 'object') || !Object.keys(properties).every(function (key) {
	        return type.isNode(properties[key]);
	      })) {
	        throw new TypeError('Object containing Nodes expected');
	      }
	    }
	  }

	  ObjectNode.prototype = new Node$$1();

	  ObjectNode.prototype.type = 'ObjectNode';

	  ObjectNode.prototype.isObjectNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  ObjectNode.prototype._compile = function (math, argNames) {
	    var evalEntries = {};

	    for (var key in this.properties) {
	      if (hasOwnProperty$2(this.properties, key)) {
	        // we stringify/parse the key here to resolve unicode characters,
	        // so you cannot create a key like {"co\\u006Estructor": null}
	        var stringifiedKey = stringify(key);
	        var parsedKey = JSON.parse(stringifiedKey);
	        if (!isSafeProperty$1(this.properties, parsedKey)) {
	          throw new Error('No access to property "' + parsedKey + '"');
	        }

	        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
	      }
	    }

	    return function evalObjectNode(scope, args, context) {
	      var obj = {};

	      for (var _key in evalEntries) {
	        if (hasOwnProperty$2(evalEntries, _key)) {
	          obj[_key] = evalEntries[_key](scope, args, context);
	        }
	      }

	      return obj;
	    };
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ObjectNode.prototype.forEach = function (callback) {
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
	      }
	    }
	  };

	  /**
	   * Create a new ObjectNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ObjectNode} Returns a transformed copy of the node
	   */
	  ObjectNode.prototype.map = function (callback) {
	    var properties = {};
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));
	      }
	    }
	    return new ObjectNode(properties);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ObjectNode}
	   */
	  ObjectNode.prototype.clone = function () {
	    var properties = {};
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this.properties[key];
	      }
	    }
	    return new ObjectNode(properties);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ObjectNode.prototype._toString = function (options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
	      }
	    }
	    return '{' + entries.join(', ') + '}';
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  ObjectNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ObjectNode',
	      properties: this.properties
	    };
	  };

	  /**
	   * Instantiate an OperatorNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
	   *                       where mathjs is optional
	   * @returns {ObjectNode}
	   */
	  ObjectNode.fromJSON = function (json) {
	    return new ObjectNode(json.properties);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ObjectNode.prototype.toHTML = function (options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push('<span class="math-symbol math-property">' + escape$3(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
	      }
	    }
	    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ObjectNode.prototype._toTex = function (options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
	      }
	    }
	    return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
	  };

	  return ObjectNode;
	}

	var name$11 = 'ObjectNode';
	var path$m = 'expression.node';
	var factory_1$1a = factory$1a;

	var ObjectNode = {
		name: name$11,
		path: path$m,
		factory: factory_1$1a
	};

	var map$3 = array.map;
	var escape$4 = string.escape;
	var isSafeMethod$1 = customs.isSafeMethod;
	var getSafeProperty$5 = customs.getSafeProperty;


	function factory$1b(type, config, load, typed) {
	  var Node$$1 = load(Node);

	  /**
	   * @constructor OperatorNode
	   * @extends {Node}
	   * An operator with two arguments, like 2+3
	   *
	   * @param {string} op           Operator name, for example '+'
	   * @param {string} fn           Function name, for example 'add'
	   * @param {Node[]} args         Operator arguments
	   * @param {boolean} [implicit]  Is this an implicit multiplication?
	   */
	  function OperatorNode(op, fn, args, implicit) {
	    if (!(this instanceof OperatorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof op !== 'string') {
	      throw new TypeError('string expected for parameter "op"');
	    }
	    if (typeof fn !== 'string') {
	      throw new TypeError('string expected for parameter "fn"');
	    }
	    if (!Array.isArray(args) || !args.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.implicit = implicit === true;
	    this.op = op;
	    this.fn = fn;
	    this.args = args || [];
	  }

	  OperatorNode.prototype = new Node$$1();

	  OperatorNode.prototype.type = 'OperatorNode';

	  OperatorNode.prototype.isOperatorNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  OperatorNode.prototype._compile = function (math, argNames) {
	    // validate fn
	    if (typeof this.fn !== 'string' || !isSafeMethod$1(math, this.fn)) {
	      if (!math[this.fn]) {
	        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
	      } else {
	        throw new Error('No access to function "' + this.fn + '"');
	      }
	    }

	    var fn = getSafeProperty$5(math, this.fn);
	    var evalArgs = map$3(this.args, function (arg) {
	      return arg._compile(math, argNames);
	    });

	    if (evalArgs.length === 1) {
	      var evalArg0 = evalArgs[0];
	      return function evalOperatorNode(scope, args, context) {
	        return fn(evalArg0(scope, args, context));
	      };
	    } else if (evalArgs.length === 2) {
	      var _evalArg = evalArgs[0];
	      var evalArg1 = evalArgs[1];
	      return function evalOperatorNode(scope, args, context) {
	        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
	      };
	    } else {
	      return function evalOperatorNode(scope, args, context) {
	        return fn.apply(null, map$3(evalArgs, function (evalArg) {
	          return evalArg(scope, args, context);
	        }));
	      };
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  OperatorNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new OperatorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  OperatorNode.prototype.map = function (callback) {
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new OperatorNode(this.op, this.fn, args, this.implicit);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {OperatorNode}
	   */
	  OperatorNode.prototype.clone = function () {
	    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
	  };

	  /**
	   * Check whether this is an unary OperatorNode:
	   * has exactly one argument, like `-a`.
	   * @return {boolean} Returns true when an unary operator node, false otherwise.
	   */
	  OperatorNode.prototype.isUnary = function () {
	    return this.args.length === 1;
	  };

	  /**
	   * Check whether this is a binary OperatorNode:
	   * has exactly two arguments, like `a + b`.
	   * @return {boolean} Returns true when a binary operator node, false otherwise.
	   */
	  OperatorNode.prototype.isBinary = function () {
	    return this.args.length === 2;
	  };

	  /**
	   * Calculate which parentheses are necessary. Gets an OperatorNode
	   * (which is the root of the tree) and an Array of Nodes
	   * (this.args) and returns an array where 'true' means that an argument
	   * has to be enclosed in parentheses whereas 'false' means the opposite.
	   *
	   * @param {OperatorNode} root
	   * @param {string} parenthesis
	   * @param {Node[]} args
	   * @param {boolean} latex
	   * @return {boolean[]}
	   * @private
	   */
	  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex$$1) {
	    // precedence of the root OperatorNode
	    var precedence = operators.getPrecedence(root, parenthesis);
	    var associativity = operators.getAssociativity(root, parenthesis);

	    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
	      var parens = args.map(function (arg) {
	        switch (arg.getContent().type) {// Nodes that don't need extra parentheses
	          case 'ArrayNode':
	          case 'ConstantNode':
	          case 'SymbolNode':
	          case 'ParenthesisNode':
	            return false;
	          default:
	            return true;
	        }
	      });
	      return parens;
	    }

	    var result = void 0;
	    switch (args.length) {
	      case 0:
	        result = [];
	        break;

	      case 1:
	        // unary operators
	        // precedence of the operand
	        var operandPrecedence = operators.getPrecedence(args[0], parenthesis);

	        // handle special cases for LaTeX, where some of the parentheses aren't needed
	        if (latex$$1 && operandPrecedence !== null) {
	          var operandIdentifier = void 0;
	          var rootIdentifier = void 0;
	          if (parenthesis === 'keep') {
	            operandIdentifier = args[0].getIdentifier();
	            rootIdentifier = root.getIdentifier();
	          } else {
	            // Ignore Parenthesis Nodes when not in 'keep' mode
	            operandIdentifier = args[0].getContent().getIdentifier();
	            rootIdentifier = root.getContent().getIdentifier();
	          }
	          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	            result = [false];
	            break;
	          }

	          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
	            result = [false];
	            break;
	          }
	        }

	        if (operandPrecedence === null) {
	          // if the operand has no defined precedence, no parens are needed
	          result = [false];
	          break;
	        }

	        if (operandPrecedence <= precedence) {
	          // if the operands precedence is lower, parens are needed
	          result = [true];
	          break;
	        }

	        // otherwise, no parens needed
	        result = [false];
	        break;

	      case 2:
	        // binary operators
	        var lhsParens = void 0; // left hand side needs parenthesis?
	        // precedence of the left hand side
	        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
	        // is the root node associative with the left hand side
	        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);

	        if (lhsPrecedence === null) {
	          // if the left hand side has no defined precedence, no parens are needed
	          // FunctionNode for example
	          lhsParens = false;
	        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
	          // In case of equal precedence, if the root node is left associative
	          // parens are **never** necessary for the left hand side.
	          // If it is right associative however, parens are necessary
	          // if the root node isn't associative with the left hand side
	          lhsParens = true;
	        } else if (lhsPrecedence < precedence) {
	          lhsParens = true;
	        } else {
	          lhsParens = false;
	        }

	        var rhsParens = void 0; // right hand side needs parenthesis?
	        // precedence of the right hand side
	        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
	        // is the root node associative with the right hand side?
	        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);

	        if (rhsPrecedence === null) {
	          // if the right hand side has no defined precedence, no parens are needed
	          // FunctionNode for example
	          rhsParens = false;
	        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
	          // In case of equal precedence, if the root node is right associative
	          // parens are **never** necessary for the right hand side.
	          // If it is left associative however, parens are necessary
	          // if the root node isn't associative with the right hand side
	          rhsParens = true;
	        } else if (rhsPrecedence < precedence) {
	          rhsParens = true;
	        } else {
	          rhsParens = false;
	        }

	        // handle special cases for LaTeX, where some of the parentheses aren't needed
	        if (latex$$1) {
	          var _rootIdentifier = void 0;
	          var lhsIdentifier = void 0;
	          var rhsIdentifier = void 0;
	          if (parenthesis === 'keep') {
	            _rootIdentifier = root.getIdentifier();
	            lhsIdentifier = root.args[0].getIdentifier();
	            rhsIdentifier = root.args[1].getIdentifier();
	          } else {
	            // Ignore ParenthesisNodes when not in 'keep' mode
	            _rootIdentifier = root.getContent().getIdentifier();
	            lhsIdentifier = root.args[0].getContent().getIdentifier();
	            rhsIdentifier = root.args[1].getContent().getIdentifier();
	          }

	          if (lhsPrecedence !== null) {
	            if (operators.properties[precedence][_rootIdentifier].latexLeftParens === false) {
	              lhsParens = false;
	            }

	            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
	              lhsParens = false;
	            }
	          }

	          if (rhsPrecedence !== null) {
	            if (operators.properties[precedence][_rootIdentifier].latexRightParens === false) {
	              rhsParens = false;
	            }

	            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
	              rhsParens = false;
	            }
	          }
	        }

	        result = [lhsParens, rhsParens];
	        break;

	      default:
	        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
	          result = args.map(function (arg) {
	            var argPrecedence = operators.getPrecedence(arg, parenthesis);
	            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);
	            var argAssociativity = operators.getAssociativity(arg, parenthesis);
	            if (argPrecedence === null) {
	              // if the argument has no defined precedence, no parens are needed
	              return false;
	            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
	              return true;
	            } else if (argPrecedence < precedence) {
	              return true;
	            }

	            return false;
	          });
	        }
	        break;
	    }

	    // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
	    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
	    // printed.
	    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
	      result = args.map(function (arg, index) {
	        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';
	        if (result[index] || isParenthesisNode) {
	          // put in parenthesis?
	          return true;
	        }

	        return false;
	      });
	    }

	    return result;
	  }

	  /**
	   * Get string representation.
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

	    if (args.length === 1) {
	      // unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);

	      var operand = args[0].toString(options);
	      if (parens[0]) {
	        operand = '(' + operand + ')';
	      }

	      if (assoc === 'right') {
	        // prefix operator
	        return this.op + operand;
	      } else if (assoc === 'left') {
	        // postfix
	        return operand + this.op;
	      }

	      // fall back to postfix
	      return operand + this.op;
	    } else if (args.length === 2) {
	      var lhs = args[0].toString(options); // left hand side
	      var rhs = args[1].toString(options); // right hand side
	      if (parens[0]) {
	        // left hand side in parenthesis?
	        lhs = '(' + lhs + ')';
	      }
	      if (parens[1]) {
	        // right hand side in parenthesis?
	        rhs = '(' + rhs + ')';
	      }

	      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	        return lhs + ' ' + rhs;
	      }

	      return lhs + ' ' + this.op + ' ' + rhs;
	    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
	      var stringifiedArgs = args.map(function (arg, index) {
	        arg = arg.toString(options);
	        if (parens[index]) {
	          // put in parenthesis?
	          arg = '(' + arg + ')';
	        }

	        return arg;
	      });

	      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	        return stringifiedArgs.join(' ');
	      }

	      return stringifiedArgs.join(' ' + this.op + ' ');
	    } else {
	      // fallback to formatting as a function call
	      return this.fn + '(' + this.args.join(', ') + ')';
	    }
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  OperatorNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'OperatorNode',
	      op: this.op,
	      fn: this.fn,
	      args: this.args,
	      implicit: this.implicit
	    };
	  };

	  /**
	   * Instantiate an OperatorNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
	   *                       where mathjs is optional
	   * @returns {OperatorNode}
	   */
	  OperatorNode.fromJSON = function (json) {
	    return new OperatorNode(json.op, json.fn, json.args, json.implicit);
	  };

	  /**
	   * Get HTML representation.
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

	    if (args.length === 1) {
	      // unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);

	      var operand = args[0].toHTML(options);
	      if (parens[0]) {
	        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }

	      if (assoc === 'right') {
	        // prefix operator
	        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape$4(this.op) + '</span>' + operand;
	      } else if (assoc === 'left') {
	        // postfix
	        return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$4(this.op) + '</span>' + operand;
	      }

	      // fall back to postfix
	      return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$4(this.op) + '</span>' + operand;
	    } else if (args.length === 2) {
	      // binary operatoes
	      var lhs = args[0].toHTML(options); // left hand side
	      var rhs = args[1].toHTML(options); // right hand side
	      if (parens[0]) {
	        // left hand side in parenthesis?
	        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }
	      if (parens[1]) {
	        // right hand side in parenthesis?
	        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }

	      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
	      }

	      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$4(this.op) + '</span>' + rhs;
	    } else {
	      var stringifiedArgs = args.map(function (arg, index) {
	        arg = arg.toHTML(options);
	        if (parens[index]) {
	          // put in parenthesis?
	          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	        }

	        return arg;
	      });

	      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
	        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
	        }

	        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$4(this.op) + '</span>');
	      } else {
	        // fallback to formatting as a function call
	        return '<span class="math-function">' + escape$4(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
	      }
	    }
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
	    var op = latex.operators[this.fn];
	    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

	    if (args.length === 1) {
	      // unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);

	      var operand = args[0].toTex(options);
	      if (parens[0]) {
	        operand = '\\left(' + operand + '\\right)';
	      }

	      if (assoc === 'right') {
	        // prefix operator
	        return op + operand;
	      } else if (assoc === 'left') {
	        // postfix operator
	        return operand + op;
	      }

	      // fall back to postfix
	      return operand + op;
	    } else if (args.length === 2) {
	      // binary operators
	      var lhs = args[0]; // left hand side
	      var lhsTex = lhs.toTex(options);
	      if (parens[0]) {
	        lhsTex = '\\left(' + lhsTex + '\\right)';
	      }

	      var rhs = args[1]; // right hand side
	      var rhsTex = rhs.toTex(options);
	      if (parens[1]) {
	        rhsTex = '\\left(' + rhsTex + '\\right)';
	      }

	      // handle some exceptions (due to the way LaTeX works)
	      var lhsIdentifier = void 0;
	      if (parenthesis === 'keep') {
	        lhsIdentifier = lhs.getIdentifier();
	      } else {
	        // Ignore ParenthesisNodes if in 'keep' mode
	        lhsIdentifier = lhs.getContent().getIdentifier();
	      }
	      switch (this.getIdentifier()) {
	        case 'OperatorNode:divide':
	          // op contains '\\frac' at this point
	          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
	        case 'OperatorNode:pow':
	          lhsTex = '{' + lhsTex + '}';
	          rhsTex = '{' + rhsTex + '}';
	          switch (lhsIdentifier) {
	            case 'ConditionalNode': //
	            case 'OperatorNode:divide':
	              lhsTex = '\\left(' + lhsTex + '\\right)';
	          }
	          break;
	        case 'OperatorNode:multiply':
	          if (this.implicit && implicit === 'hide') {
	            return lhsTex + '~' + rhsTex;
	          }
	      }
	      return lhsTex + op + rhsTex;
	    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
	      var texifiedArgs = args.map(function (arg, index) {
	        arg = arg.toTex(options);
	        if (parens[index]) {
	          arg = '\\left(' + arg + '\\right)';
	        }
	        return arg;
	      });

	      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
	        return texifiedArgs.join('~');
	      }

	      return texifiedArgs.join(op);
	    } else {
	      // fall back to formatting as a function call
	      // as this is a fallback, it doesn't use
	      // fancy function names
	      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
	        return arg.toTex(options);
	      }).join(',') + '\\right)';
	    }
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  OperatorNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.fn;
	  };

	  return OperatorNode;
	}

	var name$12 = 'OperatorNode';
	var path$n = 'expression.node';
	var factory_1$1b = factory$1b;

	var OperatorNode = {
		name: name$12,
		path: path$n,
		factory: factory_1$1b
	};

	function factory$1c(type, config, load, typed) {
	  var Node$$1 = load(Node);

	  /**
	   * @constructor ParenthesisNode
	   * @extends {Node}
	   * A parenthesis node describes manual parenthesis from the user input
	   * @param {Node} content
	   * @extends {Node}
	   */
	  function ParenthesisNode(content) {
	    if (!(this instanceof ParenthesisNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (!type.isNode(content)) {
	      throw new TypeError('Node expected for parameter "content"');
	    }

	    this.content = content;
	  }

	  ParenthesisNode.prototype = new Node$$1();

	  ParenthesisNode.prototype.type = 'ParenthesisNode';

	  ParenthesisNode.prototype.isParenthesisNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  ParenthesisNode.prototype._compile = function (math, argNames) {
	    return this.content._compile(math, argNames);
	  };

	  /**
	   * Get the content of the current Node.
	   * @return {Node} content
	   * @override
	   **/
	  ParenthesisNode.prototype.getContent = function () {
	    return this.content.getContent();
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ParenthesisNode.prototype.forEach = function (callback) {
	    callback(this.content, 'content', this);
	  };

	  /**
	   * Create a new ParenthesisNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ParenthesisNode} Returns a clone of the node
	   */
	  ParenthesisNode.prototype.map = function (callback) {
	    var content = callback(this.content, 'content', this);
	    return new ParenthesisNode(content);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ParenthesisNode}
	   */
	  ParenthesisNode.prototype.clone = function () {
	    return new ParenthesisNode(this.content);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toString = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '(' + this.content.toString(options) + ')';
	    }
	    return this.content.toString(options);
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  ParenthesisNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ParenthesisNode',
	      content: this.content
	    };
	  };

	  /**
	   * Instantiate an ParenthesisNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
	   *                       where mathjs is optional
	   * @returns {ParenthesisNode}
	   */
	  ParenthesisNode.fromJSON = function (json) {
	    return new ParenthesisNode(json.content);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype.toHTML = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }
	    return this.content.toHTML(options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toTex = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '\\left(' + this.content.toTex(options) + '\\right)';
	    }
	    return this.content.toTex(options);
	  };

	  return ParenthesisNode;
	}

	var name$13 = 'ParenthesisNode';
	var path$o = 'expression.node';
	var factory_1$1c = factory$1c;

	var ParenthesisNode = {
		name: name$13,
		path: path$o,
		factory: factory_1$1c
	};

	var escape$5 = string.escape;
	var hasOwnProperty$3 = object.hasOwnProperty;
	var getSafeProperty$6 = customs.getSafeProperty;

	function factory$1d(type, config, load, typed, math) {
	  var Node$$1 = load(Node);

	  /**
	   * Check whether some name is a valueless unit like "inch".
	   * @param {string} name
	   * @return {boolean}
	   */
	  function isValuelessUnit(name) {
	    return type.Unit ? type.Unit.isValuelessUnit(name) : false;
	  }

	  /**
	   * @constructor SymbolNode
	   * @extends {Node}
	   * A symbol node can hold and resolve a symbol
	   * @param {string} name
	   * @extends {Node}
	   */
	  function SymbolNode(name) {
	    if (!(this instanceof SymbolNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');

	    this.name = name;
	  }

	  SymbolNode.prototype = new Node$$1();

	  SymbolNode.prototype.type = 'SymbolNode';

	  SymbolNode.prototype.isSymbolNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  SymbolNode.prototype._compile = function (math, argNames) {
	    var name = this.name;

	    if (hasOwnProperty$3(argNames, name)) {
	      // this is a FunctionAssignment argument
	      // (like an x when inside the expression of a function assignment `f(x) = ...`)
	      return function (scope, args, context) {
	        return args[name];
	      };
	    } else if (name in math) {
	      return function (scope, args, context) {
	        return name in scope ? getSafeProperty$6(scope, name) : getSafeProperty$6(math, name);
	      };
	    } else {
	      var isUnit = isValuelessUnit(name);

	      return function (scope, args, context) {
	        return name in scope ? getSafeProperty$6(scope, name) : isUnit ? new type.Unit(null, name) : undef(name);
	      };
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  SymbolNode.prototype.forEach = function (callback) {}
	  // nothing to do, we don't have childs


	  /**
	   * Create a new SymbolNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {SymbolNode} Returns a clone of the node
	   */
	  ;SymbolNode.prototype.map = function (callback) {
	    return this.clone();
	  };

	  /**
	   * Throws an error 'Undefined symbol {name}'
	   * @param {string} name
	   */
	  function undef(name) {
	    throw new Error('Undefined symbol ' + name);
	  }

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {SymbolNode}
	   */
	  SymbolNode.prototype.clone = function () {
	    return new SymbolNode(this.name);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toString = function (options) {
	    return this.name;
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype.toHTML = function (options) {
	    var name = escape$5(this.name);

	    if (name === 'true' || name === 'false') {
	      return '<span class="math-symbol math-boolean">' + name + '</span>';
	    } else if (name === 'i') {
	      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
	    } else if (name === 'Infinity') {
	      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
	    } else if (name === 'NaN') {
	      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
	    } else if (name === 'null') {
	      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
	    } else if (name === 'undefined') {
	      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
	    }

	    return '<span class="math-symbol">' + name + '</span>';
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  SymbolNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'SymbolNode',
	      name: this.name
	    };
	  };

	  /**
	   * Instantiate a SymbolNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SymbolNode", name: "x"}`,
	   *                       where mathjs is optional
	   * @returns {SymbolNode}
	   */
	  SymbolNode.fromJSON = function (json) {
	    return new SymbolNode(json.name);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toTex = function (options) {
	    var isUnit = false;
	    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
	      isUnit = true;
	    }
	    var symbol = latex.toSymbol(this.name, isUnit);
	    if (symbol[0] === '\\') {
	      // no space needed if the symbol starts with '\'
	      return symbol;
	    }
	    // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
	    return ' ' + symbol;
	  };

	  return SymbolNode;
	}

	var name$14 = 'SymbolNode';
	var path$p = 'expression.node';
	var math$8 = true; // request access to the math namespace as 5th argument of the factory function
	var factory_1$1d = factory$1d;

	var SymbolNode = {
		name: name$14,
		path: path$p,
		math: math$8,
		factory: factory_1$1d
	};

	var _typeof$b = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var latex$1 = latex;
	var escape$6 = string.escape;
	var hasOwnProperty$4 = object.hasOwnProperty;
	var map$4 = array.map;
	var validateSafeMethod$1 = customs.validateSafeMethod;
	var getSafeProperty$7 = customs.getSafeProperty;

	function factory$1e(type, config, load, typed, math) {
	  var Node$$1 = load(Node);
	  var SymbolNode$$1 = load(SymbolNode);

	  /**
	   * @constructor FunctionNode
	   * @extends {./Node}
	   * invoke a list with arguments on a node
	   * @param {./Node | string} fn Node resolving with a function on which to invoke
	   *                             the arguments, typically a SymboNode or AccessorNode
	   * @param {./Node[]} args
	   */
	  function FunctionNode(fn, args) {
	    if (!(this instanceof FunctionNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (typeof fn === 'string') {
	      fn = new SymbolNode$$1(fn);
	    }

	    // validate input
	    if (!type.isNode(fn)) throw new TypeError('Node expected as parameter "fn"');
	    if (!Array.isArray(args) || !args.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.fn = fn;
	    this.args = args || [];

	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        return this.fn.name || '';
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });

	    // TODO: deprecated since v3, remove some day
	    var deprecated = function deprecated() {
	      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
	    };
	    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
	  }

	  FunctionNode.prototype = new Node$$1();

	  FunctionNode.prototype.type = 'FunctionNode';

	  FunctionNode.prototype.isFunctionNode = true;

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  FunctionNode.prototype._compile = function (math, argNames) {
	    if (!(this instanceof FunctionNode)) {
	      throw new TypeError('No valid FunctionNode');
	    }

	    // compile arguments
	    var evalArgs = map$4(this.args, function (arg) {
	      return arg._compile(math, argNames);
	    });

	    if (type.isSymbolNode(this.fn)) {
	      // we can statically determine whether the function has an rawArgs property
	      var name = this.fn.name;
	      var fn = name in math ? getSafeProperty$7(math, name) : undefined;
	      var isRaw = typeof fn === 'function' && fn.rawArgs === true;

	      if (isRaw) {
	        // pass unevaluated parameters (nodes) to the function
	        // "raw" evaluation
	        var rawArgs = this.args;
	        return function evalFunctionNode(scope, args, context) {
	          return (name in scope ? getSafeProperty$7(scope, name) : fn)(rawArgs, math, _extends$1({}, scope, args));
	        };
	      } else {
	        // "regular" evaluation
	        if (evalArgs.length === 1) {
	          var evalArg0 = evalArgs[0];
	          return function evalFunctionNode(scope, args, context) {
	            return (name in scope ? getSafeProperty$7(scope, name) : fn)(evalArg0(scope, args, context));
	          };
	        } else if (evalArgs.length === 2) {
	          var _evalArg = evalArgs[0];
	          var evalArg1 = evalArgs[1];
	          return function evalFunctionNode(scope, args, context) {
	            return (name in scope ? getSafeProperty$7(scope, name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));
	          };
	        } else {
	          return function evalFunctionNode(scope, args, context) {
	            return (name in scope ? getSafeProperty$7(scope, name) : fn).apply(null, map$4(evalArgs, function (evalArg) {
	              return evalArg(scope, args, context);
	            }));
	          };
	        }
	      }
	    } else if (type.isAccessorNode(this.fn) && type.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
	      // execute the function with the right context: the object of the AccessorNode

	      var evalObject = this.fn.object._compile(math, argNames);
	      var prop = this.fn.index.getObjectProperty();
	      var _rawArgs = this.args;

	      return function evalFunctionNode(scope, args, context) {
	        var object$$1 = evalObject(scope, args, context);
	        validateSafeMethod$1(object$$1, prop);
	        var isRaw = object$$1[prop] && object$$1[prop].rawArgs;

	        return isRaw ? object$$1[prop](_rawArgs, math, _extends$1({}, scope, args)) // "raw" evaluation
	        : object$$1[prop].apply(object$$1, map$4(evalArgs, function (evalArg) {
	          // "regular" evaluation
	          return evalArg(scope, args, context);
	        }));
	      };
	    } else {
	      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
	      // we have to dynamically determine whether the function has a rawArgs property
	      var evalFn = this.fn._compile(math, argNames);
	      var _rawArgs2 = this.args;

	      return function evalFunctionNode(scope, args, context) {
	        var fn = evalFn(scope, args, context);
	        var isRaw = fn && fn.rawArgs;

	        return isRaw ? fn(_rawArgs2, math, _extends$1({}, scope, args)) // "raw" evaluation
	        : fn.apply(fn, map$4(evalArgs, function (evalArg) {
	          // "regular" evaluation
	          return evalArg(scope, args, context);
	        }));
	      };
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new FunctionNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionNode} Returns a transformed copy of the node
	   */
	  FunctionNode.prototype.map = function (callback) {
	    var fn = this.fn.map(callback);
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new FunctionNode(fn, args);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionNode}
	   */
	  FunctionNode.prototype.clone = function () {
	    return new FunctionNode(this.fn, this.args.slice(0));
	  };

	  // backup Node's toString function
	  // @private
	  var nodeToString = FunctionNode.prototype.toString;

	  /**
	   * Get string representation. (wrapper function)
	   * This overrides parts of Node's toString function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toString
	   * function.
	   *
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  FunctionNode.prototype.toString = function (options) {
	    var customString = void 0;
	    var name = this.fn.toString(options);
	    if (options && _typeof$b(options.handler) === 'object' && hasOwnProperty$4(options.handler, name)) {
	      // callback is a map of callback functions
	      customString = options.handler[name](this, options);
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    // fall back to Node's toString
	    return nodeToString.call(this, options);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toString = function (options) {
	    var args = this.args.map(function (arg) {
	      return arg.toString(options);
	    });

	    var fn = type.isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);

	    // format the arguments like "add(2, 4.2)"
	    return fn + '(' + args.join(', ') + ')';
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  FunctionNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'FunctionNode',
	      fn: this.fn,
	      args: this.args
	    };
	  };

	  /**
	   * Instantiate an AssignmentNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
	   *                       where mathjs is optional
	   * @returns {FunctionNode}
	   */
	  FunctionNode.fromJSON = function (json) {
	    return new FunctionNode(json.fn, json.args);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype.toHTML = function (options) {
	    var args = this.args.map(function (arg) {
	      return arg.toHTML(options);
	    });

	    // format the arguments like "add(2, 4.2)"
	    return '<span class="math-function">' + escape$6(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
	  };

	  /*
	   * Expand a LaTeX template
	   *
	   * @param {string} template
	   * @param {Node} node
	   * @param {Object} options
	   * @private
	   **/
	  function expandTemplate(template, node, options) {
	    var latex$$1 = '';

	    // Match everything of the form ${identifier} or ${identifier[2]} or $$
	    // while submatching identifier and 2 (in the second case)
	    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');

	    var inputPos = 0; // position in the input string
	    var match = void 0;
	    while ((match = regex.exec(template)) !== null) {
	      // go through all matches
	      // add everything in front of the match to the LaTeX string
	      latex$$1 += template.substring(inputPos, match.index);
	      inputPos = match.index;

	      if (match[0] === '$$') {
	        // escaped dollar sign
	        latex$$1 += '$';
	        inputPos++;
	      } else {
	        // template parameter
	        inputPos += match[0].length;
	        var property = node[match[1]];
	        if (!property) {
	          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
	        }
	        if (match[2] === undefined) {
	          // no square brackets
	          switch (typeof property === 'undefined' ? 'undefined' : _typeof$b(property)) {
	            case 'string':
	              latex$$1 += property;
	              break;
	            case 'object':
	              if (type.isNode(property)) {
	                latex$$1 += property.toTex(options);
	              } else if (Array.isArray(property)) {
	                // make array of Nodes into comma separated list
	                latex$$1 += property.map(function (arg, index) {
	                  if (type.isNode(arg)) {
	                    return arg.toTex(options);
	                  }
	                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
	                }).join(',');
	              } else {
	                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	              }
	              break;
	            default:
	              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	          }
	        } else {
	          // with square brackets
	          if (type.isNode(property[match[2]] && property[match[2]])) {
	            latex$$1 += property[match[2]].toTex(options);
	          } else {
	            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
	          }
	        }
	      }
	    }
	    latex$$1 += template.slice(inputPos); // append rest of the template

	    return latex$$1;
	  }

	  // backup Node's toTex function
	  // @private
	  var nodeToTex = FunctionNode.prototype.toTex;

	  /**
	   * Get LaTeX representation. (wrapper function)
	   * This overrides parts of Node's toTex function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toTex
	   * function.
	   *
	   * @param {Object} options
	   * @return {string}
	   */
	  FunctionNode.prototype.toTex = function (options) {
	    var customTex = void 0;
	    if (options && _typeof$b(options.handler) === 'object' && hasOwnProperty$4(options.handler, this.name)) {
	      // callback is a map of callback functions
	      customTex = options.handler[this.name](this, options);
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    // fall back to Node's toTex
	    return nodeToTex.call(this, options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toTex = function (options) {
	    var args = this.args.map(function (arg) {
	      // get LaTeX of the arguments
	      return arg.toTex(options);
	    });

	    var latexConverter = void 0;

	    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof$b(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
	      // .toTex is a callback function
	      latexConverter = math[this.name].toTex;
	    }

	    var customToTex = void 0;
	    switch (typeof latexConverter === 'undefined' ? 'undefined' : _typeof$b(latexConverter)) {
	      case 'function':
	        // a callback function
	        customToTex = latexConverter(this, options);
	        break;
	      case 'string':
	        // a template string
	        customToTex = expandTemplate(latexConverter, this, options);
	        break;
	      case 'object':
	        // an object with different "converters" for different numbers of arguments
	        switch (_typeof$b(latexConverter[args.length])) {
	          case 'function':
	            customToTex = latexConverter[args.length](this, options);
	            break;
	          case 'string':
	            customToTex = expandTemplate(latexConverter[args.length], this, options);
	            break;
	        }
	    }

	    if (typeof customToTex !== 'undefined') {
	      return customToTex;
	    }

	    return expandTemplate(latex$1.defaultTemplate, this, options);
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  FunctionNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.name;
	  };

	  return FunctionNode;
	}

	var name$15 = 'FunctionNode';
	var path$q = 'expression.node';
	var math$9 = true; // request access to the math namespace as 5th argument of the factory function
	var factory_1$1e = factory$1e;

	var FunctionNode = {
		name: name$15,
		path: path$q,
		math: math$9,
		factory: factory_1$1e
	};

	function factory$1f(type, config, load, typed) {
	  var Node$$1 = load(Node);

	  /**
	   * @constructor RangeNode
	   * @extends {Node}
	   * create a range
	   * @param {Node} start  included lower-bound
	   * @param {Node} end    included upper-bound
	   * @param {Node} [step] optional step
	   */
	  function RangeNode(start, end, step) {
	    if (!(this instanceof RangeNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate inputs
	    if (!type.isNode(start)) throw new TypeError('Node expected');
	    if (!type.isNode(end)) throw new TypeError('Node expected');
	    if (step && !type.isNode(step)) throw new TypeError('Node expected');
	    if (arguments.length > 3) throw new Error('Too many arguments');

	    this.start = start; // included lower-bound
	    this.end = end; // included upper-bound
	    this.step = step || null; // optional step
	  }

	  RangeNode.prototype = new Node$$1();

	  RangeNode.prototype.type = 'RangeNode';

	  RangeNode.prototype.isRangeNode = true;

	  /**
	   * Check whether the RangeNode needs the `end` symbol to be defined.
	   * This end is the size of the Matrix in current dimension.
	   * @return {boolean}
	   */
	  RangeNode.prototype.needsEnd = function () {
	    // find all `end` symbols in this RangeNode
	    var endSymbols = this.filter(function (node) {
	      return type.isSymbolNode(node) && node.name === 'end';
	    });

	    return endSymbols.length > 0;
	  };

	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */
	  RangeNode.prototype._compile = function (math, argNames) {
	    var range = math.range;
	    var evalStart = this.start._compile(math, argNames);
	    var evalEnd = this.end._compile(math, argNames);

	    if (this.step) {
	      var evalStep = this.step._compile(math, argNames);

	      return function evalRangeNode(scope, args, context) {
	        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
	      };
	    } else {
	      return function evalRangeNode(scope, args, context) {
	        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
	      };
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  RangeNode.prototype.forEach = function (callback) {
	    callback(this.start, 'start', this);
	    callback(this.end, 'end', this);
	    if (this.step) {
	      callback(this.step, 'step', this);
	    }
	  };

	  /**
	   * Create a new RangeNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {RangeNode} Returns a transformed copy of the node
	   */
	  RangeNode.prototype.map = function (callback) {
	    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {RangeNode}
	   */
	  RangeNode.prototype.clone = function () {
	    return new RangeNode(this.start, this.end, this.step && this.step);
	  };

	  /**
	   * Calculate the necessary parentheses
	   * @param {Node} node
	   * @param {string} parenthesis
	   * @return {Object} parentheses
	   * @private
	   */
	  function calculateNecessaryParentheses(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var parens = {};

	    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
	    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

	    if (node.step) {
	      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
	      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
	    }

	    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
	    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';

	    return parens;
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    // format string as start:step:stop
	    var str = void 0;

	    var start = this.start.toString(options);
	    if (parens.start) {
	      start = '(' + start + ')';
	    }
	    str = start;

	    if (this.step) {
	      var step = this.step.toString(options);
	      if (parens.step) {
	        step = '(' + step + ')';
	      }
	      str += ':' + step;
	    }

	    var end = this.end.toString(options);
	    if (parens.end) {
	      end = '(' + end + ')';
	    }
	    str += ':' + end;

	    return str;
	  };

	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */
	  RangeNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'RangeNode',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };

	  /**
	   * Instantiate an RangeNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
	   *                       where mathjs is optional
	   * @returns {RangeNode}
	   */
	  RangeNode.fromJSON = function (json) {
	    return new RangeNode(json.start, json.end, json.step);
	  };

	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    // format string as start:step:stop
	    var str = void 0;

	    var start = this.start.toHTML(options);
	    if (parens.start) {
	      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }
	    str = start;

	    if (this.step) {
	      var step = this.step.toHTML(options);
	      if (parens.step) {
	        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }
	      str += '<span class="math-operator math-range-operator">:</span>' + step;
	    }

	    var end = this.end.toHTML(options);
	    if (parens.end) {
	      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }
	    str += '<span class="math-operator math-range-operator">:</span>' + end;

	    return str;
	  };

	  /**
	   * Get LaTeX representation
	   * @params {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    var str = this.start.toTex(options);
	    if (parens.start) {
	      str = '\\left(' + str + '\\right)';
	    }

	    if (this.step) {
	      var step = this.step.toTex(options);
	      if (parens.step) {
	        step = '\\left(' + step + '\\right)';
	      }
	      str += ':' + step;
	    }

	    var end = this.end.toTex(options);
	    if (parens.end) {
	      end = '\\left(' + end + '\\right)';
	    }
	    str += ':' + end;

	    return str;
	  };

	  return RangeNode;
	}

	var name$16 = 'RangeNode';
	var path$r = 'expression.node';
	var factory_1$1f = factory$1f;

	var RangeNode = {
		name: name$16,
		path: path$r,
		factory: factory_1$1f
	};

	var _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };




	function factory$1g(type, config, load, typed) {
	  var numeric$$1 = load(numeric);

	  var AccessorNode$$1 = load(AccessorNode);
	  var ArrayNode$$1 = load(ArrayNode);
	  var AssignmentNode$$1 = load(AssignmentNode);
	  var BlockNode$$1 = load(BlockNode);
	  var ConditionalNode$$1 = load(ConditionalNode);
	  var ConstantNode$$1 = load(ConstantNode);
	  var FunctionAssignmentNode$$1 = load(FunctionAssignmentNode);
	  var IndexNode$$1 = load(IndexNode);
	  var ObjectNode$$1 = load(ObjectNode);
	  var OperatorNode$$1 = load(OperatorNode);
	  var ParenthesisNode$$1 = load(ParenthesisNode);
	  var FunctionNode$$1 = load(FunctionNode);
	  var RangeNode$$1 = load(RangeNode);
	  var SymbolNode$$1 = load(SymbolNode);

	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval().
	   *
	   * Syntax:
	   *
	   *     parse(expr)
	   *     parse(expr, options)
	   *     parse([expr1, expr2, expr3, ...])
	   *     parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     const node = parse('sqrt(3^2 + 4^2)')
	   *     node.compile(math).eval() // 5
	   *
	   *     let scope = {a:3, b:4}
	   *     const node = parse('a * b') // 12
	   *     const code = node.compile(math)
	   *     code.eval(scope) // 12
	   *     scope.a = 5
	   *     code.eval(scope) // 20
	   *
	   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
	   *     nodes[2].compile(math).eval() // 12
	   *
	   * @param {string | string[] | Matrix} expr
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  function parse(expr, options) {
	    if (arguments.length !== 1 && arguments.length !== 2) {
	      throw new ArgumentsError_1('parse', arguments.length, 1, 2);
	    }

	    // pass extra nodes
	    var extraNodes = options && options.nodes ? options.nodes : {};

	    if (typeof expr === 'string') {
	      // parse a single expression

	      return parseStart(expr, extraNodes);
	    } else if (Array.isArray(expr) || expr instanceof type.Matrix) {
	      // parse an array or matrix with expressions
	      return deepMap(expr, function (elem) {
	        if (typeof elem !== 'string') throw new TypeError('String expected');

	        return parseStart(elem, extraNodes);
	      });
	    } else {
	      // oops
	      throw new TypeError('String or matrix expected');
	    }
	  }

	  // token types enumeration
	  var TOKENTYPE = {
	    NULL: 0,
	    DELIMITER: 1,
	    NUMBER: 2,
	    SYMBOL: 3,
	    UNKNOWN: 4

	    // map with all delimiters
	  };var DELIMITERS = {
	    ',': true,
	    '(': true,
	    ')': true,
	    '[': true,
	    ']': true,
	    '{': true,
	    '}': true,
	    '"': true,
	    ';': true,

	    '+': true,
	    '-': true,
	    '*': true,
	    '.*': true,
	    '/': true,
	    './': true,
	    '%': true,
	    '^': true,
	    '.^': true,
	    '~': true,
	    '!': true,
	    '&': true,
	    '|': true,
	    '^|': true,
	    '\'': true,
	    '=': true,
	    ':': true,
	    '?': true,

	    '==': true,
	    '!=': true,
	    '<': true,
	    '>': true,
	    '<=': true,
	    '>=': true,

	    '<<': true,
	    '>>': true,
	    '>>>': true

	    // map with all named delimiters
	  };var NAMED_DELIMITERS = {
	    'mod': true,
	    'to': true,
	    'in': true,
	    'and': true,
	    'xor': true,
	    'or': true,
	    'not': true
	  };

	  var CONSTANTS = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };

	  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

	  function initialState() {
	    return {
	      extraNodes: {}, // current extra nodes, must be careful not to mutate
	      expression: '', // current expression
	      comment: '', // last parsed comment
	      index: 0, // current index in expr
	      token: '', // current token
	      tokenType: TOKENTYPE.NULL, // type of the token
	      nestingLevel: 0, // level of nesting inside parameters, used to ignore newline characters
	      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here
	    };
	  }

	  /**
	   * View upto `length` characters of the expression starting at the current character.
	   *
	   * @param {State} state
	   * @param {number} [length=1] Number of characters to view
	   * @returns {string}
	   * @private
	   */
	  function currentString(state, length) {
	    return state.expression.substr(state.index, length);
	  }

	  /**
	   * View the current character. Returns '' if end of expression is reached.
	   *
	   * @param {State} state
	   * @returns {string}
	   * @private
	   */
	  function currentCharacter(state) {
	    return currentString(state, 1);
	  }

	  /**
	   * Get the next character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function next(state) {
	    state.index++;
	  }

	  /**
	   * Preview the previous character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function prevCharacter(state) {
	    return state.expression.charAt(state.index - 1);
	  }

	  /**
	   * Preview the next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextCharacter(state) {
	    return state.expression.charAt(state.index + 1);
	  }

	  /**
	   * Get next token in the current string expr.
	   * The token and token type are available as token and tokenType
	   * @private
	   */
	  function getToken(state) {
	    state.tokenType = TOKENTYPE.NULL;
	    state.token = '';
	    state.comment = '';

	    // skip over whitespaces
	    // space, tab, and newline when inside parameters
	    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
	      next(state);
	    }

	    // skip comment
	    if (currentCharacter(state) === '#') {
	      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
	        state.comment += currentCharacter(state);
	        next(state);
	      }
	    }

	    // check for end of expression
	    if (currentCharacter(state) === '') {
	      // token is still empty
	      state.tokenType = TOKENTYPE.DELIMITER;
	      return;
	    }

	    // check for new line character
	    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = currentCharacter(state);
	      next(state);
	      return;
	    }

	    var c1 = currentCharacter(state);
	    var c2 = currentString(state, 2);
	    var c3 = currentString(state, 3);
	    if (c3.length === 3 && DELIMITERS[c3]) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = c3;
	      next(state);
	      next(state);
	      next(state);
	      return;
	    }

	    // check for delimiters consisting of 2 characters
	    if (c2.length === 2 && DELIMITERS[c2]) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = c2;
	      next(state);
	      next(state);
	      return;
	    }

	    // check for delimiters consisting of 1 character
	    if (DELIMITERS[c1]) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = c1;
	      next(state);
	      return;
	    }

	    // check for a number
	    if (parse.isDigitDot(c1)) {
	      state.tokenType = TOKENTYPE.NUMBER;

	      // get number, can have a single dot
	      if (currentCharacter(state) === '.') {
	        state.token += currentCharacter(state);
	        next(state);

	        if (!parse.isDigit(currentCharacter(state))) {
	          // this is no number, it is just a dot (can be dot notation)
	          state.tokenType = TOKENTYPE.DELIMITER;
	        }
	      } else {
	        while (parse.isDigit(currentCharacter(state))) {
	          state.token += currentCharacter(state);
	          next(state);
	        }
	        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
	          state.token += currentCharacter(state);
	          next(state);
	        }
	      }

	      while (parse.isDigit(currentCharacter(state))) {
	        state.token += currentCharacter(state);
	        next(state);
	      }
	      // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
	      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
	        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
	          state.token += currentCharacter(state);
	          next(state);

	          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
	            state.token += currentCharacter(state);
	            next(state);
	          }
	          // Scientific notation MUST be followed by an exponent
	          if (!parse.isDigit(currentCharacter(state))) {
	            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
	          }

	          while (parse.isDigit(currentCharacter(state))) {
	            state.token += currentCharacter(state);
	            next(state);
	          }

	          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
	            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
	          }
	        } else if (nextCharacter(state) === '.') {
	          next(state);
	          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
	        }
	      }

	      return;
	    }

	    // check for variables, functions, named operators
	    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
	      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
	        state.token += currentCharacter(state);
	        next(state);
	      }

	      if (NAMED_DELIMITERS.hasOwnProperty(state.token)) {
	        state.tokenType = TOKENTYPE.DELIMITER;
	      } else {
	        state.tokenType = TOKENTYPE.SYMBOL;
	      }

	      return;
	    }

	    // something unknown is found, wrong characters -> a syntax error
	    state.tokenType = TOKENTYPE.UNKNOWN;
	    while (currentCharacter(state) !== '') {
	      state.token += currentCharacter(state);
	      next(state);
	    }
	    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
	  }

	  /**
	   * Get next token and skip newline tokens
	   */
	  function getTokenSkipNewline(state) {
	    do {
	      getToken(state);
	    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition
	  }

	  /**
	   * Open parameters.
	   * New line characters will be ignored until closeParams(state) is called
	   */
	  function openParams(state) {
	    state.nestingLevel++;
	  }

	  /**
	   * Close parameters.
	   * New line characters will no longer be ignored
	   */
	  function closeParams(state) {
	    state.nestingLevel--;
	  }

	  /**
	   * Checks whether the current character `c` is a valid alpha character:
	   *
	   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
	   * - An underscore                        Ascii: _
	   * - A dollar sign                        Ascii: $
	   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
	   * - A greek letter                       Unicode: \u0370 - \u03FF
	   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
	   *
	   * The previous and next characters are needed to determine whether
	   * this character is part of a unicode surrogate pair.
	   *
	   * @param {string} c      Current character in the expression
	   * @param {string} cPrev  Previous character
	   * @param {string} cNext  Next character
	   * @return {boolean}
	   */
	  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
	    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
	  };

	  /**
	   * Test whether a character is a valid latin, greek, or letter-like character
	   * @param {string} c
	   * @return {boolean}
	   */
	  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
	    return (/^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c)
	    );
	  };

	  /**
	   * Test whether two given 16 bit characters form a surrogate pair of a
	   * unicode math symbol.
	   *
	   * http://unicode-table.com/en/
	   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
	   *
	   * Note: In ES6 will be unicode aware:
	   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes
	   * https://mathiasbynens.be/notes/es6-unicode-regex
	   *
	   * @param {string} high
	   * @param {string} low
	   * @return {boolean}
	   */
	  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
	    return (/^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low)
	    );
	  };

	  /**
	   * Check whether given character c is a white space character: space, tab, or enter
	   * @param {string} c
	   * @param {number} nestingLevel
	   * @return {boolean}
	   */
	  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
	    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
	    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
	  };

	  /**
	   * Test whether the character c is a decimal mark (dot).
	   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
	   * @param {string} c
	   * @param {string} cNext
	   * @return {boolean}
	   */
	  parse.isDecimalMark = function isDecimalMark(c, cNext) {
	    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
	  };

	  /**
	   * checks if the given char c is a digit or dot
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   */
	  parse.isDigitDot = function isDigitDot(c) {
	    return c >= '0' && c <= '9' || c === '.';
	  };

	  /**
	   * checks if the given char c is a digit
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   */
	  parse.isDigit = function isDigit(c) {
	    return c >= '0' && c <= '9';
	  };

	  /**
	   * Start of the parse levels below, in order of precedence
	   * @return {Node} node
	   * @private
	   */
	  function parseStart(expression, extraNodes) {
	    var state = initialState();
	    _extends$2(state, { expression: expression, extraNodes: extraNodes });
	    getToken(state);

	    var node = parseBlock(state);

	    // check for garbage at the end of the expression
	    // an expression ends with a empty character '' and tokenType DELIMITER
	    if (state.token !== '') {
	      if (state.tokenType === TOKENTYPE.DELIMITER) {
	        // user entered a not existing operator like "//"

	        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
	        throw createError(state, 'Unexpected operator ' + state.token);
	      } else {
	        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
	      }
	    }

	    return node;
	  }

	  /**
	   * Parse a block with expressions. Expressions can be separated by a newline
	   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
	   * of the preceding line is returned.
	   * @return {Node} node
	   * @private
	   */
	  function parseBlock(state) {
	    var node = void 0;
	    var blocks = [];
	    var visible = void 0;

	    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
	      node = parseAssignment(state);
	      node.comment = state.comment;
	    }

	    // TODO: simplify this loop
	    while (state.token === '\n' || state.token === ';') {
	      // eslint-disable-line no-unmodified-loop-condition
	      if (blocks.length === 0 && node) {
	        visible = state.token !== ';';
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }

	      getToken(state);
	      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
	        node = parseAssignment(state);
	        node.comment = state.comment;

	        visible = state.token !== ';';
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }
	    }

	    if (blocks.length > 0) {
	      return new BlockNode$$1(blocks);
	    } else {
	      if (!node) {
	        node = new ConstantNode$$1(undefined);
	        node.comment = state.comment;
	      }

	      return node;
	    }
	  }

	  /**
	   * Assignment of a function or variable,
	   * - can be a variable like 'a=2.3'
	   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
	   * - defining a function like 'f(x) = x^2'
	   * @return {Node} node
	   * @private
	   */
	  function parseAssignment(state) {
	    var name = void 0,
	        args = void 0,
	        value = void 0,
	        valid = void 0;

	    var node = parseConditional(state);

	    if (state.token === '=') {
	      if (type.isSymbolNode(node)) {
	        // parse a variable assignment like 'a = 2/3'
	        name = node.name;
	        getTokenSkipNewline(state);
	        value = parseAssignment(state);
	        return new AssignmentNode$$1(new SymbolNode$$1(name), value);
	      } else if (type.isAccessorNode(node)) {
	        // parse a matrix subset assignment like 'A[1,2] = 4'
	        getTokenSkipNewline(state);
	        value = parseAssignment(state);
	        return new AssignmentNode$$1(node.object, node.index, value);
	      } else if (type.isFunctionNode(node) && type.isSymbolNode(node.fn)) {
	        // parse function assignment like 'f(x) = x^2'
	        valid = true;
	        args = [];

	        name = node.name;
	        node.args.forEach(function (arg, index) {
	          if (type.isSymbolNode(arg)) {
	            args[index] = arg.name;
	          } else {
	            valid = false;
	          }
	        });

	        if (valid) {
	          getTokenSkipNewline(state);
	          value = parseAssignment(state);
	          return new FunctionAssignmentNode$$1(name, args, value);
	        }
	      }

	      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
	    }

	    return node;
	  }

	  /**
	   * conditional operation
	   *
	   *     condition ? truePart : falsePart
	   *
	   * Note: conditional operator is right-associative
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseConditional(state) {
	    var node = parseLogicalOr(state);

	    while (state.token === '?') {
	      // eslint-disable-line no-unmodified-loop-condition
	      // set a conditional level, the range operator will be ignored as long
	      // as conditionalLevel === state.nestingLevel.
	      var prev = state.conditionalLevel;
	      state.conditionalLevel = state.nestingLevel;
	      getTokenSkipNewline(state);

	      var condition = node;
	      var trueExpr = parseAssignment(state);

	      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');

	      state.conditionalLevel = null;
	      getTokenSkipNewline(state);

	      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

	      node = new ConditionalNode$$1(condition, trueExpr, falseExpr);

	      // restore the previous conditional level
	      state.conditionalLevel = prev;
	    }

	    return node;
	  }

	  /**
	   * logical or, 'x or y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalOr(state) {
	    var node = parseLogicalXor(state);

	    while (state.token === 'or') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$$1('or', 'or', [node, parseLogicalXor(state)]);
	    }

	    return node;
	  }

	  /**
	   * logical exclusive or, 'x xor y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalXor(state) {
	    var node = parseLogicalAnd(state);

	    while (state.token === 'xor') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$$1('xor', 'xor', [node, parseLogicalAnd(state)]);
	    }

	    return node;
	  }

	  /**
	   * logical and, 'x and y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalAnd(state) {
	    var node = parseBitwiseOr(state);

	    while (state.token === 'and') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$$1('and', 'and', [node, parseBitwiseOr(state)]);
	    }

	    return node;
	  }

	  /**
	   * bitwise or, 'x | y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseOr(state) {
	    var node = parseBitwiseXor(state);

	    while (state.token === '|') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$$1('|', 'bitOr', [node, parseBitwiseXor(state)]);
	    }

	    return node;
	  }

	  /**
	   * bitwise exclusive or (xor), 'x ^| y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseXor(state) {
	    var node = parseBitwiseAnd(state);

	    while (state.token === '^|') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$$1('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
	    }

	    return node;
	  }

	  /**
	   * bitwise and, 'x & y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseAnd(state) {
	    var node = parseRelational(state);

	    while (state.token === '&') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$$1('&', 'bitAnd', [node, parseRelational(state)]);
	    }

	    return node;
	  }

	  /**
	   * relational operators
	   * @return {Node} node
	   * @private
	   */
	  function parseRelational(state) {
	    var node = void 0,
	        operators = void 0,
	        name = void 0,
	        fn = void 0,
	        params = void 0;

	    node = parseShift(state);

	    operators = {
	      '==': 'equal',
	      '!=': 'unequal',
	      '<': 'smaller',
	      '>': 'larger',
	      '<=': 'smallerEq',
	      '>=': 'largerEq'
	    };
	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];

	      getTokenSkipNewline(state);
	      params = [node, parseShift(state)];
	      node = new OperatorNode$$1(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
	   * @return {Node} node
	   * @private
	   */
	  function parseShift(state) {
	    var node = void 0,
	        operators = void 0,
	        name = void 0,
	        fn = void 0,
	        params = void 0;

	    node = parseConversion(state);

	    operators = {
	      '<<': 'leftShift',
	      '>>': 'rightArithShift',
	      '>>>': 'rightLogShift'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];

	      getTokenSkipNewline(state);
	      params = [node, parseConversion(state)];
	      node = new OperatorNode$$1(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * conversion operators 'to' and 'in'
	   * @return {Node} node
	   * @private
	   */
	  function parseConversion(state) {
	    var node = void 0,
	        operators = void 0,
	        name = void 0,
	        fn = void 0,
	        params = void 0;

	    node = parseRange(state);

	    operators = {
	      'to': 'to',
	      'in': 'to' // alias of 'to'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];

	      getTokenSkipNewline(state);

	      if (name === 'in' && state.token === '') {
	        // end of expression -> this is the unit 'in' ('inch')
	        node = new OperatorNode$$1('*', 'multiply', [node, new SymbolNode$$1('in')], true);
	      } else {
	        // operator 'a to b' or 'a in b'
	        params = [node, parseRange(state)];
	        node = new OperatorNode$$1(name, fn, params);
	      }
	    }

	    return node;
	  }

	  /**
	   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
	   * @return {Node} node
	   * @private
	   */
	  function parseRange(state) {
	    var node = void 0;
	    var params = [];

	    if (state.token === ':') {
	      // implicit start=1 (one-based)
	      node = new ConstantNode$$1(1);
	    } else {
	      // explicit start
	      node = parseAddSubtract(state);
	    }

	    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
	      // we ignore the range operator when a conditional operator is being processed on the same level
	      params.push(node);

	      // parse step and end
	      while (state.token === ':' && params.length < 3) {
	        // eslint-disable-line no-unmodified-loop-condition
	        getTokenSkipNewline(state);

	        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
	          // implicit end
	          params.push(new SymbolNode$$1('end'));
	        } else {
	          // explicit end
	          params.push(parseAddSubtract(state));
	        }
	      }

	      if (params.length === 3) {
	        // params = [start, step, end]
	        node = new RangeNode$$1(params[0], params[2], params[1]); // start, end, step
	      } else {
	        // length === 2
	        // params = [start, end]
	        node = new RangeNode$$1(params[0], params[1]); // start, end
	      }
	    }

	    return node;
	  }

	  /**
	   * add or subtract
	   * @return {Node} node
	   * @private
	   */
	  function parseAddSubtract(state) {
	    var node = void 0,
	        operators = void 0,
	        name = void 0,
	        fn = void 0,
	        params = void 0;

	    node = parseMultiplyDivide(state);

	    operators = {
	      '+': 'add',
	      '-': 'subtract'
	    };
	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];

	      getTokenSkipNewline(state);
	      params = [node, parseMultiplyDivide(state)];
	      node = new OperatorNode$$1(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * multiply, divide, modulus
	   * @return {Node} node
	   * @private
	   */
	  function parseMultiplyDivide(state) {
	    var node = void 0,
	        last = void 0,
	        operators = void 0,
	        name = void 0,
	        fn = void 0;

	    node = parseImplicitMultiplication(state);
	    last = node;

	    operators = {
	      '*': 'multiply',
	      '.*': 'dotMultiply',
	      '/': 'divide',
	      './': 'dotDivide',
	      '%': 'mod',
	      'mod': 'mod'
	    };

	    while (true) {
	      if (operators.hasOwnProperty(state.token)) {
	        // explicit operators
	        name = state.token;
	        fn = operators[name];

	        getTokenSkipNewline(state);

	        last = parseImplicitMultiplication(state);
	        node = new OperatorNode$$1(name, fn, [node, last]);
	      } else {
	        break;
	      }
	    }

	    return node;
	  }

	  /**
	   * implicit multiplication
	   * @return {Node} node
	   * @private
	   */
	  function parseImplicitMultiplication(state) {
	    var node = void 0,
	        last = void 0;

	    node = parseRule2(state);
	    last = node;

	    while (true) {
	      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && type.isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !type.isConstantNode(last) && (!type.isOperatorNode(last) || last.op === '!') || state.token === '(') {
	        // parse implicit multiplication
	        //
	        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
	        // number:      implicit multiplication like '(2+3)2'
	        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
	        last = parseRule2(state);
	        node = new OperatorNode$$1('*', 'multiply', [node, last], true /* implicit */);
	      } else {
	        break;
	      }
	    }

	    return node;
	  }

	  /**
	   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
	   * Explicit division gets higher precedence than implicit multiplication
	   * when the division matches this pattern: [number] / [number] [symbol]
	   * @return {Node} node
	   * @private
	   */
	  function parseRule2(state) {
	    var node = parseUnary(state);
	    var last = node;
	    var tokenStates = [];

	    while (true) {
	      // Match the "number /" part of the pattern "number / number symbol"
	      if (state.token === '/' && type.isConstantNode(last)) {
	        // Look ahead to see if the next token is a number
	        tokenStates.push(_extends$2({}, state));
	        getTokenSkipNewline(state);

	        // Match the "number / number" part of the pattern
	        if (state.tokenType === TOKENTYPE.NUMBER) {
	          // Look ahead again
	          tokenStates.push(_extends$2({}, state));
	          getTokenSkipNewline(state);

	          // Match the "symbol" part of the pattern, or a left parenthesis
	          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
	            // We've matched the pattern "number / number symbol".
	            // Rewind once and build the "number / number" node; the symbol will be consumed later
	            _extends$2(state, tokenStates.pop());
	            tokenStates.pop();
	            last = parseUnary(state);
	            node = new OperatorNode$$1('/', 'divide', [node, last]);
	          } else {
	            // Not a match, so rewind
	            tokenStates.pop();
	            _extends$2(state, tokenStates.pop());
	            break;
	          }
	        } else {
	          // Not a match, so rewind
	          _extends$2(state, tokenStates.pop());
	          break;
	        }
	      } else {
	        break;
	      }
	    }

	    return node;
	  }

	  /**
	   * Unary plus and minus, and logical and bitwise not
	   * @return {Node} node
	   * @private
	   */
	  function parseUnary(state) {
	    var name = void 0,
	        params = void 0,
	        fn = void 0;
	    var operators = {
	      '-': 'unaryMinus',
	      '+': 'unaryPlus',
	      '~': 'bitNot',
	      'not': 'not'
	    };

	    if (operators.hasOwnProperty(state.token)) {
	      fn = operators[state.token];
	      name = state.token;

	      getTokenSkipNewline(state);
	      params = [parseUnary(state)];

	      return new OperatorNode$$1(name, fn, params);
	    }

	    return parsePow(state);
	  }

	  /**
	   * power
	   * Note: power operator is right associative
	   * @return {Node} node
	   * @private
	   */
	  function parsePow(state) {
	    var node = void 0,
	        name = void 0,
	        fn = void 0,
	        params = void 0;

	    node = parseLeftHandOperators(state);

	    if (state.token === '^' || state.token === '.^') {
	      name = state.token;
	      fn = name === '^' ? 'pow' : 'dotPow';

	      getTokenSkipNewline(state);
	      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'
	      node = new OperatorNode$$1(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Left hand operators: factorial x!, ctranspose x'
	   * @return {Node} node
	   * @private
	   */
	  function parseLeftHandOperators(state) {
	    var node = void 0,
	        operators = void 0,
	        name = void 0,
	        fn = void 0,
	        params = void 0;

	    node = parseCustomNodes(state);

	    operators = {
	      '!': 'factorial',
	      '\'': 'ctranspose'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];

	      getToken(state);
	      params = [node];

	      node = new OperatorNode$$1(name, fn, params);
	      node = parseAccessors(state, node);
	    }

	    return node;
	  }

	  /**
	   * Parse a custom node handler. A node handler can be used to process
	   * nodes in a custom way, for example for handling a plot.
	   *
	   * A handler must be passed as second argument of the parse function.
	   * - must extend math.expression.node.Node
	   * - must contain a function _compile(defs: Object) : string
	   * - must contain a function find(filter: Object) : Node[]
	   * - must contain a function toString() : string
	   * - the constructor is called with a single argument containing all parameters
	   *
	   * For example:
	   *
	   *     nodes = {
	   *       'plot': PlotHandler
	   *     }
	   *
	   * The constructor of the handler is called as:
	   *
	   *     node = new PlotHandler(params)
	   *
	   * The handler will be invoked when evaluating an expression like:
	   *
	   *     node = math.parse('plot(sin(x), x)', nodes)
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseCustomNodes(state) {
	    var params = [];

	    if (state.tokenType === TOKENTYPE.SYMBOL && state.extraNodes.hasOwnProperty(state.token)) {
	      var CustomNode = state.extraNodes[state.token];

	      getToken(state);

	      // parse parameters
	      if (state.token === '(') {
	        params = [];

	        openParams(state);
	        getToken(state);

	        if (state.token !== ')') {
	          params.push(parseAssignment(state));

	          // parse a list with parameters
	          while (state.token === ',') {
	            // eslint-disable-line no-unmodified-loop-condition
	            getToken(state);
	            params.push(parseAssignment(state));
	          }
	        }

	        if (state.token !== ')') {
	          throw createSyntaxError(state, 'Parenthesis ) expected');
	        }
	        closeParams(state);
	        getToken(state);
	      }

	      // create a new custom node
	      // noinspection JSValidateTypes
	      return new CustomNode(params);
	    }

	    return parseSymbol(state);
	  }

	  /**
	   * parse symbols: functions, variables, constants, units
	   * @return {Node} node
	   * @private
	   */
	  function parseSymbol(state) {
	    var node = void 0,
	        name = void 0;

	    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
	      name = state.token;

	      getToken(state);

	      if (CONSTANTS.hasOwnProperty(name)) {
	        // true, false, null, ...
	        node = new ConstantNode$$1(CONSTANTS[name]);
	      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
	        // NaN, Infinity
	        node = new ConstantNode$$1(numeric$$1(name));
	      } else {
	        node = new SymbolNode$$1(name);
	      }

	      // parse function parameters and matrix index
	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseString(state);
	  }

	  /**
	   * parse accessors:
	   * - function invocation in round brackets (...), for example sqrt(2)
	   * - index enclosed in square brackets [...], for example A[2,3]
	   * - dot notation for properties, like foo.bar
	   * @param {Node} node    Node on which to apply the parameters. If there
	   *                       are no parameters in the expression, the node
	   *                       itself is returned
	   * @param {string[]} [types]  Filter the types of notations
	   *                            can be ['(', '[', '.']
	   * @return {Node} node
	   * @private
	   */
	  function parseAccessors(state, node, types) {
	    var params = void 0;

	    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
	      // eslint-disable-line no-unmodified-loop-condition
	      params = [];

	      if (state.token === '(') {
	        if (type.isSymbolNode(node) || type.isAccessorNode(node)) {
	          // function invocation like fn(2, 3) or obj.fn(2, 3)
	          openParams(state);
	          getToken(state);

	          if (state.token !== ')') {
	            params.push(parseAssignment(state));

	            // parse a list with parameters
	            while (state.token === ',') {
	              // eslint-disable-line no-unmodified-loop-condition
	              getToken(state);
	              params.push(parseAssignment(state));
	            }
	          }

	          if (state.token !== ')') {
	            throw createSyntaxError(state, 'Parenthesis ) expected');
	          }
	          closeParams(state);
	          getToken(state);

	          node = new FunctionNode$$1(node, params);
	        } else {
	          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
	          // don't parse it here but let it be handled by parseImplicitMultiplication
	          // with correct precedence
	          return node;
	        }
	      } else if (state.token === '[') {
	        // index notation like variable[2, 3]
	        openParams(state);
	        getToken(state);

	        if (state.token !== ']') {
	          params.push(parseAssignment(state));

	          // parse a list with parameters
	          while (state.token === ',') {
	            // eslint-disable-line no-unmodified-loop-condition
	            getToken(state);
	            params.push(parseAssignment(state));
	          }
	        }

	        if (state.token !== ']') {
	          throw createSyntaxError(state, 'Parenthesis ] expected');
	        }
	        closeParams(state);
	        getToken(state);

	        node = new AccessorNode$$1(node, new IndexNode$$1(params));
	      } else {
	        // dot notation like variable.prop
	        getToken(state);

	        if (state.tokenType !== TOKENTYPE.SYMBOL) {
	          throw createSyntaxError(state, 'Property name expected after dot');
	        }
	        params.push(new ConstantNode$$1(state.token));
	        getToken(state);

	        var dotNotation = true;
	        node = new AccessorNode$$1(node, new IndexNode$$1(params, dotNotation));
	      }
	    }

	    return node;
	  }

	  /**
	   * parse a string.
	   * A string is enclosed by double quotes
	   * @return {Node} node
	   * @private
	   */
	  function parseString(state) {
	    var node = void 0,
	        str = void 0;

	    if (state.token === '"') {
	      str = parseStringToken(state);

	      // create constant
	      node = new ConstantNode$$1(str);

	      // parse index parameters
	      node = parseAccessors(state, node);

	      return node;
	    }

	    return parseMatrix(state);
	  }

	  /**
	   * Parse a string surrounded by double quotes "..."
	   * @return {string}
	   */
	  function parseStringToken(state) {
	    var str = '';

	    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
	      if (currentCharacter(state) === '\\') {
	        // escape character, immediately process the next
	        // character to prevent stopping at a next '\"'
	        str += currentCharacter(state);
	        next(state);
	      }

	      str += currentCharacter(state);
	      next(state);
	    }

	    getToken(state);
	    if (state.token !== '"') {
	      throw createSyntaxError(state, 'End of string " expected');
	    }
	    getToken(state);

	    return JSON.parse('"' + str + '"'); // unescape escaped characters
	  }

	  /**
	   * parse the matrix
	   * @return {Node} node
	   * @private
	   */
	  function parseMatrix(state) {
	    var array = void 0,
	        params = void 0,
	        rows = void 0,
	        cols = void 0;

	    if (state.token === '[') {
	      // matrix [...]
	      openParams(state);
	      getToken(state);

	      if (state.token !== ']') {
	        // this is a non-empty matrix
	        var row = parseRow(state);

	        if (state.token === ';') {
	          // 2 dimensional array
	          rows = 1;
	          params = [row];

	          // the rows of the matrix are separated by dot-comma's
	          while (state.token === ';') {
	            // eslint-disable-line no-unmodified-loop-condition
	            getToken(state);

	            params[rows] = parseRow(state);
	            rows++;
	          }

	          if (state.token !== ']') {
	            throw createSyntaxError(state, 'End of matrix ] expected');
	          }
	          closeParams(state);
	          getToken(state);

	          // check if the number of columns matches in all rows
	          cols = params[0].items.length;
	          for (var r = 1; r < rows; r++) {
	            if (params[r].items.length !== cols) {
	              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
	            }
	          }

	          array = new ArrayNode$$1(params);
	        } else {
	          // 1 dimensional vector
	          if (state.token !== ']') {
	            throw createSyntaxError(state, 'End of matrix ] expected');
	          }
	          closeParams(state);
	          getToken(state);

	          array = row;
	        }
	      } else {
	        // this is an empty matrix "[ ]"
	        closeParams(state);
	        getToken(state);
	        array = new ArrayNode$$1([]);
	      }

	      return parseAccessors(state, array);
	    }

	    return parseObject(state);
	  }

	  /**
	   * Parse a single comma-separated row from a matrix, like 'a, b, c'
	   * @return {ArrayNode} node
	   */
	  function parseRow(state) {
	    var params = [parseAssignment(state)];
	    var len = 1;

	    while (state.token === ',') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getToken(state);

	      // parse expression
	      params[len] = parseAssignment(state);
	      len++;
	    }

	    return new ArrayNode$$1(params);
	  }

	  /**
	   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
	   * @return {Node} node
	   * @private
	   */
	  function parseObject(state) {
	    if (state.token === '{') {
	      var key = void 0;

	      var properties = {};
	      do {
	        getToken(state);

	        if (state.token !== '}') {
	          // parse key
	          if (state.token === '"') {
	            key = parseStringToken(state);
	          } else if (state.tokenType === TOKENTYPE.SYMBOL) {
	            key = state.token;
	            getToken(state);
	          } else {
	            throw createSyntaxError(state, 'Symbol or string expected as object key');
	          }

	          // parse key/value separator
	          if (state.token !== ':') {
	            throw createSyntaxError(state, 'Colon : expected after object key');
	          }
	          getToken(state);

	          // parse key
	          properties[key] = parseAssignment(state);
	        }
	      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition

	      if (state.token !== '}') {
	        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
	      }
	      getToken(state);

	      var node = new ObjectNode$$1(properties);

	      // parse index parameters
	      node = parseAccessors(state, node);

	      return node;
	    }

	    return parseNumber(state);
	  }

	  /**
	   * parse a number
	   * @return {Node} node
	   * @private
	   */
	  function parseNumber(state) {
	    var numberStr = void 0;

	    if (state.tokenType === TOKENTYPE.NUMBER) {
	      // this is a number
	      numberStr = state.token;
	      getToken(state);

	      return new ConstantNode$$1(numeric$$1(numberStr, config.number));
	    }

	    return parseParentheses(state);
	  }

	  /**
	   * parentheses
	   * @return {Node} node
	   * @private
	   */
	  function parseParentheses(state) {
	    var node = void 0;

	    // check if it is a parenthesized expression
	    if (state.token === '(') {
	      // parentheses (...)
	      openParams(state);
	      getToken(state);

	      node = parseAssignment(state); // start again

	      if (state.token !== ')') {
	        throw createSyntaxError(state, 'Parenthesis ) expected');
	      }
	      closeParams(state);
	      getToken(state);

	      node = new ParenthesisNode$$1(node);
	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseEnd(state);
	  }

	  /**
	   * Evaluated when the expression is not yet ended but expected to end
	   * @return {Node} res
	   * @private
	   */
	  function parseEnd(state) {
	    if (state.token === '') {
	      // syntax error or unexpected end of expression
	      throw createSyntaxError(state, 'Unexpected end of expression');
	    } else if (state.token === "'") {
	      throw createSyntaxError(state, 'Value expected. Note: strings must be enclosed by double quotes');
	    } else {
	      throw createSyntaxError(state, 'Value expected');
	    }
	  }

	  /**
	   * Shortcut for getting the current row value (one based)
	   * Returns the line of the currently handled expression
	   * @private
	   */
	  /* TODO: implement keeping track on the row number
	  function row () {
	    return null
	  }
	  */

	  /**
	   * Shortcut for getting the current col value (one based)
	   * Returns the column (position) where the last state.token starts
	   * @private
	   */
	  function col(state) {
	    return state.index - state.token.length + 1;
	  }

	  /**
	   * Create an error
	   * @param {string} message
	   * @return {SyntaxError} instantiated error
	   * @private
	   */
	  function createSyntaxError(state, message) {
	    var c = col(state);
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;

	    return error;
	  }

	  /**
	   * Create an error
	   * @param {string} message
	   * @return {Error} instantiated error
	   * @private
	   */
	  function createError(state, message) {
	    var c = col(state);
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;

	    return error;
	  }

	  return parse;
	}

	var name$17 = 'parse';
	var path$s = 'expression';
	var factory_1$1g = factory$1g;

	var parse = {
		name: name$17,
		path: path$s,
		factory: factory_1$1g
	};

	function factory$1h(type, config, load, typed, math) {
	  var FunctionNode = math.expression.node.FunctionNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var SymbolNode = math.expression.node.SymbolNode;

	  // TODO commutative/associative properties rely on the arguments
	  // e.g. multiply is not commutative for matrices
	  // The properties should be calculated from an argument to simplify, or possibly something in math.config
	  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
	  var commutative = {
	    'add': true,
	    'multiply': true
	  };
	  var associative = {
	    'add': true,
	    'multiply': true
	  };

	  function isCommutative(node, context) {
	    if (!type.isOperatorNode(node)) {
	      return true;
	    }
	    var name = node.fn.toString();
	    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {
	      return context[name].commutative;
	    }
	    return commutative[name] || false;
	  }

	  function isAssociative(node, context) {
	    if (!type.isOperatorNode(node)) {
	      return false;
	    }
	    var name = node.fn.toString();
	    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {
	      return context[name].associative;
	    }
	    return associative[name] || false;
	  }

	  /**
	   * Flatten all associative operators in an expression tree.
	   * Assumes parentheses have already been removed.
	   */
	  function flatten(node) {
	    if (!node.args || node.args.length === 0) {
	      return node;
	    }
	    node.args = allChildren(node);
	    for (var i = 0; i < node.args.length; i++) {
	      flatten(node.args[i]);
	    }
	  }

	  /**
	   * Get the children of a node as if it has been flattened.
	   * TODO implement for FunctionNodes
	   */
	  function allChildren(node) {
	    var op = void 0;
	    var children = [];
	    var findChildren = function findChildren(node) {
	      for (var i = 0; i < node.args.length; i++) {
	        var child = node.args[i];
	        if (type.isOperatorNode(child) && op === child.op) {
	          findChildren(child);
	        } else {
	          children.push(child);
	        }
	      }
	    };

	    if (isAssociative(node)) {
	      op = node.op;
	      findChildren(node);
	      return children;
	    } else {
	      return node.args;
	    }
	  }

	  /**
	   *  Unflatten all flattened operators to a right-heavy binary tree.
	   */
	  function unflattenr(node) {
	    if (!node.args || node.args.length === 0) {
	      return;
	    }
	    var makeNode = createMakeNodeFunction(node);
	    var l = node.args.length;
	    for (var i = 0; i < l; i++) {
	      unflattenr(node.args[i]);
	    }
	    if (l > 2 && isAssociative(node)) {
	      var curnode = node.args.pop();
	      while (node.args.length > 0) {
	        curnode = makeNode([node.args.pop(), curnode]);
	      }
	      node.args = curnode.args;
	    }
	  }

	  /**
	   *  Unflatten all flattened operators to a left-heavy binary tree.
	   */
	  function unflattenl(node) {
	    if (!node.args || node.args.length === 0) {
	      return;
	    }
	    var makeNode = createMakeNodeFunction(node);
	    var l = node.args.length;
	    for (var i = 0; i < l; i++) {
	      unflattenl(node.args[i]);
	    }
	    if (l > 2 && isAssociative(node)) {
	      var curnode = node.args.shift();
	      while (node.args.length > 0) {
	        curnode = makeNode([curnode, node.args.shift()]);
	      }
	      node.args = curnode.args;
	    }
	  }

	  function createMakeNodeFunction(node) {
	    if (type.isOperatorNode(node)) {
	      return function (args) {
	        try {
	          return new OperatorNode(node.op, node.fn, args, node.implicit);
	        } catch (err) {
	          console.error(err);
	          return [];
	        }
	      };
	    } else {
	      return function (args) {
	        return new FunctionNode(new SymbolNode(node.name), args);
	      };
	    }
	  }
	  return {
	    createMakeNodeFunction: createMakeNodeFunction,
	    isCommutative: isCommutative,
	    isAssociative: isAssociative,
	    flatten: flatten,
	    allChildren: allChildren,
	    unflattenr: unflattenr,
	    unflattenl: unflattenl
	  };
	}

	var factory_1$1h = factory$1h;
	var math$a = true;

	var util = {
		factory: factory_1$1h,
		math: math$a
	};

	// TODO this could be improved by simplifying seperated constants under associative and commutative operators

	function factory$1i(type, config, load, typed, math) {
	  var util$$1 = load(util);
	  var isCommutative = util$$1.isCommutative;
	  var isAssociative = util$$1.isAssociative;
	  var allChildren = util$$1.allChildren;
	  var createMakeNodeFunction = util$$1.createMakeNodeFunction;
	  var ConstantNode = math.expression.node.ConstantNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var FunctionNode = math.expression.node.FunctionNode;

	  function simplifyConstant(expr) {
	    var res = foldFraction(expr);
	    return type.isNode(res) ? res : _toNode(res);
	  }

	  function _eval(fnname, args) {
	    try {
	      return _toNumber(math[fnname].apply(null, args));
	    } catch (ignore) {
	      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
	      args = args.map(function (x) {
	        if (type.isFraction(x)) {
	          return x.valueOf();
	        }
	        return x;
	      });
	      return _toNumber(math[fnname].apply(null, args));
	    }
	  }

	  var _toNode = typed({
	    'Fraction': _fractionToNode,
	    'number': function number(n) {
	      if (n < 0) {
	        return unaryMinusNode(new ConstantNode(-n));
	      }
	      return new ConstantNode(n);
	    },
	    'BigNumber': function BigNumber(n) {
	      if (n < 0) {
	        return unaryMinusNode(new ConstantNode(n.negated().toString(), 'number'));
	      }
	      return new ConstantNode(n.toString(), 'number');
	    },
	    'Complex': function Complex(s) {
	      throw new Error('Cannot convert Complex number to Node');
	    }
	  });

	  // convert a number to a fraction only if it can be expressed exactly
	  function _exactFraction(n) {
	    if (isFinite(n)) {
	      var f = math.fraction(n);
	      if (f.valueOf() === n) {
	        return f;
	      }
	    }
	    return n;
	  }

	  // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
	  // BigNumbers are left alone
	  var _toNumber = typed({
	    'string': function string(s) {
	      if (config.number === 'BigNumber') {
	        return math.bignumber(s);
	      } else if (config.number === 'Fraction') {
	        return math.fraction(s);
	      } else {
	        return _exactFraction(parseFloat(s));
	      }
	    },

	    'Fraction': function Fraction(s) {
	      return s;
	    },

	    'BigNumber': function BigNumber(s) {
	      return s;
	    },

	    'number': function number(s) {
	      return _exactFraction(s);
	    },

	    'Complex': function Complex(s) {
	      if (s.im !== 0) {
	        return s;
	      }
	      return _exactFraction(s.re);
	    }
	  });

	  function unaryMinusNode(n) {
	    return new OperatorNode('-', 'unaryMinus', [n]);
	  }

	  function _fractionToNode(f) {
	    var n = void 0;
	    var vn = f.s * f.n;
	    if (vn < 0) {
	      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
	    } else {
	      n = new ConstantNode(vn);
	    }

	    if (f.d === 1) {
	      return n;
	    }
	    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
	  }

	  /*
	   * Create a binary tree from a list of Fractions and Nodes.
	   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
	   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
	   * @param args - list of Fractions and Nodes
	   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
	   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
	   * if args.length is 1, returns args[0]
	   * @return - Either a Node representing a binary expression or Fraction
	   */
	  function foldOp(fn, args, makeNode) {
	    return args.reduce(function (a, b) {
	      if (!type.isNode(a) && !type.isNode(b)) {
	        try {
	          return _eval(fn, [a, b]);
	        } catch (ignoreandcontinue) {}
	        a = _toNode(a);
	        b = _toNode(b);
	      } else if (!type.isNode(a)) {
	        a = _toNode(a);
	      } else if (!type.isNode(b)) {
	        b = _toNode(b);
	      }

	      return makeNode([a, b]);
	    });
	  }

	  // destroys the original node and returns a folded one
	  function foldFraction(node) {
	    switch (node.type) {
	      case 'SymbolNode':
	        return node;
	      case 'ConstantNode':
	        if (typeof node.value === 'number') {
	          return _toNumber(node.value);
	        }
	        return node;
	      case 'FunctionNode':
	        if (math[node.name] && math[node.name].rawArgs) {
	          return node;
	        }

	        // Process operators as OperatorNode
	        var operatorFunctions = ['add', 'multiply'];
	        if (operatorFunctions.indexOf(node.name) === -1) {
	          var _args = node.args.map(foldFraction);

	          // If all args are numbers
	          if (!_args.some(type.isNode)) {
	            try {
	              return _eval(node.name, _args);
	            } catch (ignoreandcontine) {}
	          }

	          // Convert all args to nodes and construct a symbolic function call
	          _args = _args.map(function (arg) {
	            return type.isNode(arg) ? arg : _toNode(arg);
	          });
	          return new FunctionNode(node.name, _args);
	        }
	        // treat as operator

	        /* falls through */
	      case 'OperatorNode':
	        var fn = node.fn.toString();
	        var args = void 0;
	        var res = void 0;
	        var makeNode = createMakeNodeFunction(node);
	        if (node.isUnary()) {
	          args = [foldFraction(node.args[0])];
	          if (!type.isNode(args[0])) {
	            res = _eval(fn, args);
	          } else {
	            res = makeNode(args);
	          }
	        } else if (isAssociative(node)) {
	          args = allChildren(node);
	          args = args.map(foldFraction);

	          if (isCommutative(fn)) {
	            // commutative binary operator
	            var consts = [];
	            var vars = [];

	            for (var i = 0; i < args.length; i++) {
	              if (!type.isNode(args[i])) {
	                consts.push(args[i]);
	              } else {
	                vars.push(args[i]);
	              }
	            }

	            if (consts.length > 1) {
	              res = foldOp(fn, consts, makeNode);
	              vars.unshift(res);
	              res = foldOp(fn, vars, makeNode);
	            } else {
	              // we won't change the children order since it's not neccessary
	              res = foldOp(fn, args, makeNode);
	            }
	          } else {
	            // non-commutative binary operator
	            res = foldOp(fn, args, makeNode);
	          }
	        } else {
	          // non-associative binary operator
	          args = node.args.map(foldFraction);
	          res = foldOp(fn, args, makeNode);
	        }
	        return res;
	      case 'ParenthesisNode':
	        // remove the uneccessary parenthesis
	        return foldFraction(node.content);
	      case 'AccessorNode':
	      /* falls through */
	      case 'ArrayNode':
	      /* falls through */
	      case 'AssignmentNode':
	      /* falls through */
	      case 'BlockNode':
	      /* falls through */
	      case 'FunctionAssignmentNode':
	      /* falls through */
	      case 'IndexNode':
	      /* falls through */
	      case 'ObjectNode':
	      /* falls through */
	      case 'RangeNode':
	      /* falls through */
	      case 'UpdateNode':
	      /* falls through */
	      case 'ConditionalNode':
	      /* falls through */
	      default:
	        throw new Error('Unimplemented node type in simplifyConstant: ' + node.type);
	    }
	  }

	  return simplifyConstant;
	}

	var math$b = true;
	var name$18 = 'simplifyConstant';
	var path$t = 'algebra.simplify';
	var factory_1$1i = factory$1i;

	var simplifyConstant = {
		math: math$b,
		name: name$18,
		path: path$t,
		factory: factory_1$1i
	};

	function factory$1j(type, config, load, typed) {
	  /**
	   * Test whether a value is zero.
	   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
	   * `Complex`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isZero(x)
	   *
	   * Examples:
	   *
	   *    math.isZero(0)                     // returns true
	   *    math.isZero(2)                     // returns false
	   *    math.isZero(0.5)                   // returns false
	   *    math.isZero(math.bignumber(0))     // returns true
	   *    math.isZero(math.fraction(0))      // returns true
	   *    math.isZero(math.fraction(1,3))    // returns false
	   *    math.isZero(math.complex('2 - 4i') // returns false
	   *    math.isZero(math.complex('0i')     // returns true
	   *    math.isZero('0')                   // returns true
	   *    math.isZero('2')                   // returns false
	   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isZero = typed('isZero', {
	    'number': function number(x) {
	      return x === 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isZero();
	    },

	    'Complex': function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },

	    'Fraction': function Fraction(x) {
	      return x.d === 1 && x.n === 0;
	    },

	    'Unit': function Unit(x) {
	      return isZero(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isZero);
	    }
	  });

	  return isZero;
	}

	var name$19 = 'isZero';
	var factory_1$1j = factory$1j;

	var isZero = {
		name: name$19,
		factory: factory_1$1j
	};

	var object$4 = utils.object;

	function factory$1k(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var abs$$1 = load(abs);
	  var addScalar$$1 = load(addScalar);
	  var divideScalar$$1 = load(divideScalar);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var subtract$$1 = load(subtract);
	  var larger$$1 = load(larger);
	  var equalScalar$$1 = load(equalScalar);
	  var unaryMinus$$1 = load(unaryMinus);

	  var SparseMatrix = type.SparseMatrix;
	  var DenseMatrix = type.DenseMatrix;
	  var Spa = type.Spa;

	  /**
	   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
	   * row permutation vector `p` where `A[p,:] = L * U`
	   *
	   * Syntax:
	   *
	   *    math.lup(A)
	   *
	   * Example:
	   *
	   *    const m = [[2, 1], [1, 4]]
	   *    const r = math.lup(m)
	   *    // r = {
	   *    //   L: [[1, 0], [0.5, 1]],
	   *    //   U: [[2, 1], [0, 3.5]],
	   *    //   P: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    slu, lsolve, lusolve, usolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
	   *
	   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
	   */
	  var lup = typed('lup', {

	    'DenseMatrix': function DenseMatrix(m) {
	      return _denseLUP(m);
	    },

	    'SparseMatrix': function SparseMatrix(m) {
	      return _sparseLUP(m);
	    },

	    'Array': function Array(a) {
	      // create dense matrix from array
	      var m = matrix$$1(a);
	      // lup, use matrix implementation
	      var r = _denseLUP(m);
	      // result
	      return {
	        L: r.L.valueOf(),
	        U: r.U.valueOf(),
	        p: r.p
	      };
	    }
	  });

	  function _denseLUP(m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix array, clone original data
	    var data = object$4.clone(m._data);
	    // l matrix arrays
	    var ldata = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var udata = [];
	    var usize = [n, columns];
	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0;
	    // permutation vector
	    var p = [];
	    for (i = 0; i < rows; i++) {
	      p[i] = i;
	    }
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows
	        for (i = 0; i < rows; i++) {
	          // min i,j
	          var min = Math.min(i, j);
	          // v[i, j]
	          var s = 0;
	          // loop up to min
	          for (k = 0; k < min; k++) {
	            // s = l[i, k] - data[k, j]
	            s = addScalar$$1(s, multiplyScalar$$1(data[i][k], data[k][j]));
	          }
	          data[i][j] = subtract$$1(data[i][j], s);
	        }
	      }
	      // row with larger value in cvector, row >= j
	      var pi = j;
	      var pabsv = 0;
	      var vjj = 0;
	      // loop rows
	      for (i = j; i < rows; i++) {
	        // data @ i, j
	        var v = data[i][j];
	        // absolute value
	        var absv = abs$$1(v);
	        // value is greater than pivote value
	        if (larger$$1(absv, pabsv)) {
	          // store row
	          pi = i;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      }
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in p
	        p[j] = [p[pi], p[pi] = p[j]][0];
	        // swap j <-> pi in data
	        DenseMatrix._swapRows(j, pi, data);
	      }
	      // check column is in lower triangular matrix
	      if (j < rows) {
	        // loop rows (lower triangular matrix)
	        for (i = j + 1; i < rows; i++) {
	          // value @ i, j
	          var vij = data[i][j];
	          if (!equalScalar$$1(vij, 0)) {
	            // update data
	            data[i][j] = divideScalar$$1(data[i][j], vjj);
	          }
	        }
	      }
	    }
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // initialize row in arrays
	        if (j === 0) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i] = [];
	          }
	          // L
	          ldata[i] = [];
	        }
	        // check we are in the upper triangular matrix
	        if (i < j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 0;
	          }
	          continue;
	        }
	        // diagonal value
	        if (i === j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 1;
	          }
	          continue;
	        }
	        // check row exists in upper triangular matrix
	        if (i < columns) {
	          // U
	          udata[i][j] = 0;
	        }
	        // check column exists in lower triangular matrix
	        if (j < rows) {
	          // L
	          ldata[i][j] = data[i][j];
	        }
	      }
	    }
	    // l matrix
	    var l = new DenseMatrix({
	      data: ldata,
	      size: lsize
	    });
	    // u matrix
	    var u = new DenseMatrix({
	      data: udata,
	      size: usize
	    });
	    // p vector
	    var pv = [];
	    for (i = 0, n = p.length; i < n; i++) {
	      pv[p[i]] = i;
	    }
	    // return matrices
	    return {
	      L: l,
	      U: u,
	      p: pv,
	      toString: function toString() {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  }

	  function _sparseLUP(m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix arrays (will not be modified, thanks to permutation vector)
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // l matrix arrays
	    var lvalues = [];
	    var lindex = [];
	    var lptr = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var uvalues = [];
	    var uindex = [];
	    var uptr = [];
	    var usize = [n, columns];
	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0;
	    // permutation vectors, (current index -> original index) and (original index -> current index)
	    var pvCo = [];
	    var pvOc = [];
	    for (i = 0; i < rows; i++) {
	      pvCo[i] = i;
	      pvOc[i] = i;
	    }
	    // swap indices in permutation vectors (condition x < y)!
	    var swapIndeces = function swapIndeces(x, y) {
	      // find pv indeces getting data from x and y
	      var kx = pvOc[x];
	      var ky = pvOc[y];
	      // update permutation vector current -> original
	      pvCo[kx] = y;
	      pvCo[ky] = x;
	      // update permutation vector original -> current
	      pvOc[x] = ky;
	      pvOc[y] = kx;
	    };
	    // loop columns

	    var _loop = function _loop() {
	      // sparse accumulator
	      var spa = new Spa();
	      // check lower triangular matrix has a value @ column j
	      if (j < rows) {
	        // update ptr
	        lptr.push(lvalues.length);
	        // first value in j column for lower triangular matrix
	        lvalues.push(1);
	        lindex.push(j);
	      }
	      // update ptr
	      uptr.push(uvalues.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // copy column j into sparse accumulator
	      for (k = k0; k < k1; k++) {
	        // row
	        i = index[k];
	        // copy column values into sparse accumulator (use permutation vector)
	        spa.set(pvCo[i], values[k]);
	      }
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows in column j (above diagonal)
	        spa.forEach(0, j - 1, function (k, vkj) {
	          // loop rows in column k (L)
	          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
	            // check row is below k
	            if (i > k) {
	              // update spa value
	              spa.accumulate(i, unaryMinus$$1(multiplyScalar$$1(vik, vkj)));
	            }
	          });
	        });
	      }
	      // row with larger value in spa, row >= j
	      var pi = j;
	      var vjj = spa.get(j);
	      var pabsv = abs$$1(vjj);
	      // loop values in spa (order by row, below diagonal)
	      spa.forEach(j + 1, rows - 1, function (x, v) {
	        // absolute value
	        var absv = abs$$1(v);
	        // value is greater than pivote value
	        if (larger$$1(absv, pabsv)) {
	          // store row
	          pi = x;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      });
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in L
	        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
	        // swap values j <-> pi in U
	        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
	        // swap values in spa
	        spa.swap(j, pi);
	        // update permutation vector (swap values @ j, pi)
	        swapIndeces(j, pi);
	      }
	      // loop values in spa (order by row)
	      spa.forEach(0, rows - 1, function (x, v) {
	        // check we are above diagonal
	        if (x <= j) {
	          // update upper triangular matrix
	          uvalues.push(v);
	          uindex.push(x);
	        } else {
	          // update value
	          v = divideScalar$$1(v, vjj);
	          // check value is non zero
	          if (!equalScalar$$1(v, 0)) {
	            // update lower triangular matrix
	            lvalues.push(v);
	            lindex.push(x);
	          }
	        }
	      });
	    };

	    for (j = 0; j < columns; j++) {
	      _loop();
	    }
	    // update ptrs
	    uptr.push(uvalues.length);
	    lptr.push(lvalues.length);

	    // return matrices
	    return {
	      L: new SparseMatrix({
	        values: lvalues,
	        index: lindex,
	        ptr: lptr,
	        size: lsize
	      }),
	      U: new SparseMatrix({
	        values: uvalues,
	        index: uindex,
	        ptr: uptr,
	        size: usize
	      }),
	      p: pvCo,
	      toString: function toString() {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  }

	  return lup;
	}

	var name$1a = 'lup';
	var factory_1$1k = factory$1k;

	var lup = {
		name: name$1a,
		factory: factory_1$1k
	};

	var object$5 = utils.object;
	var string$6 = utils.string;

	function factory$1l(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var subtract$$1 = load(subtract);
	  var multiply$$1 = load(multiply);
	  var unaryMinus$$1 = load(unaryMinus);
	  var lup$$1 = load(lup);

	  /**
	   * Calculate the determinant of a matrix.
	   *
	   * Syntax:
	   *
	   *    math.det(x)
	   *
	   * Examples:
	   *
	   *    math.det([[1, 2], [3, 4]]) // returns -2
	   *
	   *    const A = [
	   *      [-2, 2, 3],
	   *      [-1, 1, 3],
	   *      [2, 0, -1]
	   *    ]
	   *    math.det(A) // returns 6
	   *
	   * See also:
	   *
	   *    inv
	   *
	   * @param {Array | Matrix} x  A matrix
	   * @return {number} The determinant of `x`
	   */
	  var det = typed('det', {
	    'any': function any(x) {
	      return object$5.clone(x);
	    },

	    'Array | Matrix': function det(x) {
	      var size = void 0;
	      if (type.isMatrix(x)) {
	        size = x.size();
	      } else if (Array.isArray(x)) {
	        x = matrix$$1(x);
	        size = x.size();
	      } else {
	        // a scalar
	        size = [];
	      }

	      switch (size.length) {
	        case 0:
	          // scalar
	          return object$5.clone(x);

	        case 1:
	          // vector
	          if (size[0] === 1) {
	            return object$5.clone(x.valueOf()[0]);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string$6.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows === cols) {
	            return _det(x.clone().valueOf(), rows, cols);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string$6.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string$6.format(size) + ')');
	      }
	    }
	  });

	  det.toTex = { 1: '\\det\\left(${args[0]}\\right)' };

	  return det;

	  /**
	   * Calculate the determinant of a matrix
	   * @param {Array[]} matrix  A square, two dimensional matrix
	   * @param {number} rows     Number of rows of the matrix (zero-based)
	   * @param {number} cols     Number of columns of the matrix (zero-based)
	   * @returns {number} det
	   * @private
	   */
	  function _det(matrix$$1, rows, cols) {
	    if (rows === 1) {
	      // this is a 1 x 1 matrix
	      return object$5.clone(matrix$$1[0][0]);
	    } else if (rows === 2) {
	      // this is a 2 x 2 matrix
	      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
	      return subtract$$1(multiply$$1(matrix$$1[0][0], matrix$$1[1][1]), multiply$$1(matrix$$1[1][0], matrix$$1[0][1]));
	    } else {
	      // Compute the LU decomposition
	      var decomp = lup$$1(matrix$$1);

	      // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)
	      var _det2 = decomp.U[0][0];
	      for (var _i = 1; _i < rows; _i++) {
	        _det2 = multiply$$1(_det2, decomp.U[_i][_i]);
	      }

	      // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
	      // This can be determined by counting the cycles. This is roughly a linear time algorithm.
	      var evenCycles = 0;
	      var i = 0;
	      var visited = [];
	      while (true) {
	        while (visited[i]) {
	          i++;
	        }
	        if (i >= rows) break;
	        var j = i;
	        var cycleLen = 0;
	        while (!visited[decomp.p[j]]) {
	          visited[decomp.p[j]] = true;
	          j = decomp.p[j];
	          cycleLen++;
	        }
	        if (cycleLen % 2 === 0) {
	          evenCycles++;
	        }
	      }

	      return evenCycles % 2 === 0 ? _det2 : unaryMinus$$1(_det2);
	    }
	  }
	}

	var name$1b = 'det';
	var factory_1$1l = factory$1l;

	var det = {
		name: name$1b,
		factory: factory_1$1l
	};

	function factory$1m(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var divideScalar$$1 = load(divideScalar);
	  var addScalar$$1 = load(addScalar);
	  var multiply$$1 = load(multiply);
	  var unaryMinus$$1 = load(unaryMinus);
	  var det$$1 = load(det);
	  var identity$$1 = load(identity);
	  var abs$$1 = load(abs);

	  /**
	   * Calculate the inverse of a square matrix.
	   *
	   * Syntax:
	   *
	   *     math.inv(x)
	   *
	   * Examples:
	   *
	   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
	   *     math.inv(4)                 // returns 0.25
	   *     1 / 4                       // returns 0.25
	   *
	   * See also:
	   *
	   *     det, transpose
	   *
	   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
	   * @return {number | Complex | Array | Matrix} The inverse of `x`.
	   */
	  var inv = typed('inv', {
	    'Array | Matrix': function ArrayMatrix(x) {
	      var size = type.isMatrix(x) ? x.size() : utils.array.size(x);
	      switch (size.length) {
	        case 1:
	          // vector
	          if (size[0] === 1) {
	            if (type.isMatrix(x)) {
	              return matrix$$1([divideScalar$$1(1, x.valueOf()[0])]);
	            } else {
	              return [divideScalar$$1(1, x[0])];
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + utils.string.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows === cols) {
	            if (type.isMatrix(x)) {
	              return matrix$$1(_inv(x.valueOf(), rows, cols), x.storage());
	            } else {
	              // return an Array
	              return _inv(x, rows, cols);
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + utils.string.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + utils.string.format(size) + ')');
	      }
	    },

	    'any': function any(x) {
	      // scalar
	      return divideScalar$$1(1, x); // FIXME: create a BigNumber one when configured for bignumbers
	    }
	  });

	  /**
	   * Calculate the inverse of a square matrix
	   * @param {Array[]} mat     A square matrix
	   * @param {number} rows     Number of rows
	   * @param {number} cols     Number of columns, must equal rows
	   * @return {Array[]} inv    Inverse matrix
	   * @private
	   */
	  function _inv(mat, rows, cols) {
	    var r = void 0,
	        s = void 0,
	        f = void 0,
	        value = void 0,
	        temp = void 0;

	    if (rows === 1) {
	      // this is a 1 x 1 matrix
	      value = mat[0][0];
	      if (value === 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[divideScalar$$1(1, value)]];
	    } else if (rows === 2) {
	      // this is a 2 x 2 matrix
	      var d = det$$1(mat);
	      if (d === 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[divideScalar$$1(mat[1][1], d), divideScalar$$1(unaryMinus$$1(mat[0][1]), d)], [divideScalar$$1(unaryMinus$$1(mat[1][0]), d), divideScalar$$1(mat[0][0], d)]];
	    } else {
	      // this is a matrix of 3 x 3 or larger
	      // calculate inverse using gauss-jordan elimination
	      //      http://en.wikipedia.org/wiki/Gaussian_elimination
	      //      http://mathworld.wolfram.com/MatrixInverse.html
	      //      http://math.uww.edu/~mcfarlat/inverse.htm

	      // make a copy of the matrix (only the arrays, not of the elements)
	      var A = mat.concat();
	      for (r = 0; r < rows; r++) {
	        A[r] = A[r].concat();
	      }

	      // create an identity matrix which in the end will contain the
	      // matrix inverse
	      var B = identity$$1(rows).valueOf();

	      // loop over all columns, and perform row reductions
	      for (var c = 0; c < cols; c++) {
	        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
	        var ABig = abs$$1(A[c][c]);
	        var rBig = c;
	        r = c + 1;
	        while (r < rows) {
	          if (abs$$1(A[r][c]) > ABig) {
	            ABig = abs$$1(A[r][c]);
	            rBig = r;
	          }
	          r++;
	        }
	        if (ABig === 0) {
	          throw Error('Cannot calculate inverse, determinant is zero');
	        }
	        r = rBig;
	        if (r !== c) {
	          temp = A[c];A[c] = A[r];A[r] = temp;
	          temp = B[c];B[c] = B[r];B[r] = temp;
	        }

	        // eliminate non-zero values on the other rows at column c
	        var Ac = A[c];
	        var Bc = B[c];
	        for (r = 0; r < rows; r++) {
	          var Ar = A[r];
	          var Br = B[r];
	          if (r !== c) {
	            // eliminate value at column c and row r
	            if (Ar[c] !== 0) {
	              f = divideScalar$$1(unaryMinus$$1(Ar[c]), Ac[c]);

	              // add (f * row c) to row r to eliminate the value
	              // at column c
	              for (s = c; s < cols; s++) {
	                Ar[s] = addScalar$$1(Ar[s], multiply$$1(f, Ac[s]));
	              }
	              for (s = 0; s < cols; s++) {
	                Br[s] = addScalar$$1(Br[s], multiply$$1(f, Bc[s]));
	              }
	            }
	          } else {
	            // normalize value at Acc to 1,
	            // divide each value on row r with the value at Acc
	            f = Ac[c];
	            for (s = c; s < cols; s++) {
	              Ar[s] = divideScalar$$1(Ar[s], f);
	            }
	            for (s = 0; s < cols; s++) {
	              Br[s] = divideScalar$$1(Br[s], f);
	            }
	          }
	        }
	      }
	      return B;
	    }
	  }

	  inv.toTex = { 1: '\\left(${args[0]}\\right)^{-1}' };

	  return inv;
	}

	var name$1c = 'inv';
	var factory_1$1m = factory$1m;

	var inv = {
		name: name$1c,
		factory: factory_1$1m
	};

	var extend$2 = object.extend;

	function factory$1n(type, config, load, typed) {
	  var divideScalar$$1 = load(divideScalar);
	  var multiply$$1 = load(multiply);
	  var inv$$1 = load(inv);
	  var matrix$$1 = load(matrix);

	  var algorithm11$$1 = load(algorithm11);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Divide two values, `x / y`.
	   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
	   *
	   * Syntax:
	   *
	   *    math.divide(x, y)
	   *
	   * Examples:
	   *
	   *    math.divide(2, 3)            // returns number 0.6666666666666666
	   *
	   *    const a = math.complex(5, 14)
	   *    const b = math.complex(4, 1)
	   *    math.divide(a, b)            // returns Complex 2 + 3i
	   *
	   *    const c = [[7, -6], [13, -4]]
	   *    const d = [[1, 2], [4, 3]]
	   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
	   *
	   *    const e = math.unit('18 km')
	   *    math.divide(e, 4.5)          // returns Unit 4 km
	   *
	   * See also:
	   *
	   *    multiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
	   */
	  var divide = typed('divide', extend$2({
	    // we extend the signatures of divideScalar with signatures dealing with matrices

	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
	      // TODO: implement matrix right division using pseudo inverse
	      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
	      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
	      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
	      return multiply$$1(x, inv$$1(y));
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, divideScalar$$1, false);
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, divideScalar$$1, false);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, divideScalar$$1, false).valueOf();
	    },

	    'any, Array | Matrix': function anyArrayMatrix(x, y) {
	      return multiply$$1(x, inv$$1(y));
	    }
	  }, divideScalar$$1.signatures));

	  divide.toTex = { 2: '\\frac{${args[0]}}{${args[1]}}' };

	  return divide;
	}

	var name$1d = 'divide';
	var factory_1$1n = factory$1n;

	var divide = {
		name: name$1d,
		factory: factory_1$1n
	};

	function factory$1o(type, config, load, typed, math) {
	  var equal$$1 = load(equal);
	  var isZero$$1 = load(isZero);
	  var add$$1 = load(add);
	  var subtract$$1 = load(subtract);
	  var multiply$$1 = load(multiply);
	  var divide$$1 = load(divide);
	  var pow$$1 = load(pow);

	  var ConstantNode = math.expression.node.ConstantNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var FunctionNode = math.expression.node.FunctionNode;
	  var ParenthesisNode = math.expression.node.ParenthesisNode;

	  var node0 = new ConstantNode(0);
	  var node1 = new ConstantNode(1);

	  /**
	   * simplifyCore() performs single pass simplification suitable for
	   * applications requiring ultimate performance. In contrast, simplify()
	   * extends simplifyCore() with additional passes to provide deeper
	   * simplification.
	   *
	   * Syntax:
	   *
	   *     simplify.simplifyCore(expr)
	   *
	   * Examples:
	   *
	   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
	   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
	   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
	   *
	   * See also:
	   *
	   *     derivative
	   *
	   * @param {Node} node
	   *     The expression to be simplified
	   */
	  function simplifyCore(node) {
	    if (type.isOperatorNode(node) && node.isUnary()) {
	      var a0 = simplifyCore(node.args[0]);

	      if (node.op === '+') {
	        // unary plus
	        return a0;
	      }

	      if (node.op === '-') {
	        // unary minus
	        if (type.isOperatorNode(a0)) {
	          if (a0.isUnary() && a0.op === '-') {
	            return a0.args[0];
	          } else if (a0.isBinary() && a0.fn === 'subtract') {
	            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
	          }
	        }
	        return new OperatorNode(node.op, node.fn, [a0]);
	      }
	    } else if (type.isOperatorNode(node) && node.isBinary()) {
	      var _a = simplifyCore(node.args[0]);
	      var a1 = simplifyCore(node.args[1]);

	      if (node.op === '+') {
	        if (type.isConstantNode(_a)) {
	          if (isZero$$1(_a.value)) {
	            return a1;
	          } else if (type.isConstantNode(a1)) {
	            return new ConstantNode(add$$1(_a.value, a1.value));
	          }
	        }
	        if (type.isConstantNode(a1) && isZero$$1(a1.value)) {
	          return _a;
	        }
	        if (type.isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
	          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
	        }
	        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
	      } else if (node.op === '-') {
	        if (type.isConstantNode(_a) && a1) {
	          if (type.isConstantNode(a1)) {
	            return new ConstantNode(subtract$$1(_a.value, a1.value));
	          } else if (isZero$$1(_a.value)) {
	            return new OperatorNode('-', 'unaryMinus', [a1]);
	          }
	        }
	        // if (node.fn === "subtract" && node.args.length === 2) {
	        if (node.fn === 'subtract') {
	          if (type.isConstantNode(a1) && isZero$$1(a1.value)) {
	            return _a;
	          }
	          if (type.isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
	            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
	          }
	          return new OperatorNode(node.op, node.fn, [_a, a1]);
	        }
	      } else if (node.op === '*') {
	        if (type.isConstantNode(_a)) {
	          if (isZero$$1(_a.value)) {
	            return node0;
	          } else if (equal$$1(_a.value, 1)) {
	            return a1;
	          } else if (type.isConstantNode(a1)) {
	            return new ConstantNode(multiply$$1(_a.value, a1.value));
	          }
	        }
	        if (type.isConstantNode(a1)) {
	          if (isZero$$1(a1.value)) {
	            return node0;
	          } else if (equal$$1(a1.value, 1)) {
	            return _a;
	          } else if (type.isOperatorNode(_a) && _a.isBinary() && _a.op === node.op) {
	            var a00 = _a.args[0];
	            if (type.isConstantNode(a00)) {
	              var a00a1 = new ConstantNode(multiply$$1(a00.value, a1.value));
	              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
	            }
	          }
	          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
	        }
	        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
	      } else if (node.op === '/') {
	        if (type.isConstantNode(_a)) {
	          if (isZero$$1(_a.value)) {
	            return node0;
	          } else if (type.isConstantNode(a1) && (equal$$1(a1.value, 1) || equal$$1(a1.value, 2) || equal$$1(a1.value, 4))) {
	            return new ConstantNode(divide$$1(_a.value, a1.value));
	          }
	        }
	        return new OperatorNode(node.op, node.fn, [_a, a1]);
	      } else if (node.op === '^') {
	        if (type.isConstantNode(a1)) {
	          if (isZero$$1(a1.value)) {
	            return node1;
	          } else if (equal$$1(a1.value, 1)) {
	            return _a;
	          } else {
	            if (type.isConstantNode(_a)) {
	              // fold constant
	              return new ConstantNode(pow$$1(_a.value, a1.value));
	            } else if (type.isOperatorNode(_a) && _a.isBinary() && _a.op === '^') {
	              var a01 = _a.args[1];
	              if (type.isConstantNode(a01)) {
	                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply$$1(a01.value, a1.value))]);
	              }
	            }
	          }
	        }
	        return new OperatorNode(node.op, node.fn, [_a, a1]);
	      }
	    } else if (type.isParenthesisNode(node)) {
	      var c = simplifyCore(node.content);
	      if (type.isParenthesisNode(c) || type.isSymbolNode(c) || type.isConstantNode(c)) {
	        return c;
	      }
	      return new ParenthesisNode(c);
	    } else if (type.isFunctionNode(node)) {
	      var args = node.args.map(simplifyCore).map(function (arg) {
	        return type.isParenthesisNode(arg) ? arg.content : arg;
	      });
	      return new FunctionNode(simplifyCore(node.fn), args);
	    }
	    return node;
	  }

	  return simplifyCore;
	}

	var math$c = true;
	var name$1e = 'simplifyCore';
	var path$u = 'algebra.simplify';
	var factory_1$1o = factory$1o;

	var simplifyCore = {
		math: math$c,
		name: name$1e,
		path: path$u,
		factory: factory_1$1o
	};

	function factory$1p(type, config, load, typed, math) {
	  var Node = math.expression.node.Node;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var FunctionNode = math.expression.node.FunctionNode;
	  var ParenthesisNode = math.expression.node.ParenthesisNode;

	  /**
	   * resolve(expr, scope) replaces variable nodes with their scoped values
	   *
	   * Syntax:
	   *
	   *     simplify.resolve(expr, scope)
	   *
	   * Examples:
	   *
	   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
	   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
	   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
	   *
	   * @param {Node} node
	   *     The expression tree to be simplified
	   * @param {Object} scope with variables to be resolved
	   */
	  function resolve(node, scope) {
	    if (!scope) {
	      return node;
	    }
	    if (type.isSymbolNode(node)) {
	      var value = scope[node.name];
	      if (value instanceof Node) {
	        return resolve(value, scope);
	      } else if (typeof value === 'number') {
	        return math.parse(String(value));
	      }
	    } else if (type.isOperatorNode(node)) {
	      var args = node.args.map(function (arg) {
	        return resolve(arg, scope);
	      });
	      return new OperatorNode(node.op, node.fn, args, node.implicit);
	    } else if (type.isParenthesisNode(node)) {
	      return new ParenthesisNode(resolve(node.content, scope));
	    } else if (type.isFunctionNode(node)) {
	      var _args = node.args.map(function (arg) {
	        return resolve(arg, scope);
	      });
	      return new FunctionNode(node.name, _args);
	    }
	    return node;
	  }

	  return resolve;
	}

	var math$d = true;
	var name$1f = 'resolve';
	var path$v = 'algebra.simplify';
	var factory_1$1p = factory$1p;

	var resolve = {
		math: math$d,
		name: name$1f,
		path: path$v,
		factory: factory_1$1p
	};

	var _typeof$c = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function factory$1q(type, config, load, typed, math) {
	  var parse$$1 = load(parse);
	  var equal$$1 = load(equal);
	  var ConstantNode$$1 = load(ConstantNode);
	  var FunctionNode$$1 = load(FunctionNode);
	  var OperatorNode$$1 = load(OperatorNode);
	  var ParenthesisNode$$1 = load(ParenthesisNode);
	  var SymbolNode$$1 = load(SymbolNode);
	  var simplifyConstant$$1 = load(simplifyConstant);
	  var simplifyCore$$1 = load(simplifyCore);
	  var resolve$$1 = load(resolve);

	  var util$$1 = load(util);
	  var isCommutative = util$$1.isCommutative;
	  var isAssociative = util$$1.isAssociative;
	  var flatten = util$$1.flatten;
	  var unflattenr = util$$1.unflattenr;
	  var unflattenl = util$$1.unflattenl;
	  var createMakeNodeFunction = util$$1.createMakeNodeFunction;

	  /**
	   * Simplify an expression tree.
	   *
	   * A list of rules are applied to an expression, repeating over the list until
	   * no further changes are made.
	   * It's possible to pass a custom set of rules to the function as second
	   * argument. A rule can be specified as an object, string, or function:
	   *
	   *     const rules = [
	   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
	   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
	   *       function (node) {
	   *         // ... return a new node or return the node unchanged
	   *         return node
	   *       }
	   *     ]
	   *
	   * String and object rules consist of a left and right pattern. The left is
	   * used to match against the expression and the right determines what matches
	   * are replaced with. The main difference between a pattern and a normal
	   * expression is that variables starting with the following characters are
	   * interpreted as wildcards:
	   *
	   * - 'n' - matches any Node
	   * - 'c' - matches any ConstantNode
	   * - 'v' - matches any Node that is not a ConstantNode
	   *
	   * The default list of rules is exposed on the function as `simplify.rules`
	   * and can be used as a basis to built a set of custom rules.
	   *
	   * For more details on the theory, see:
	   *
	   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
	   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
	   *
	   * Syntax:
	   *
	   *     simplify(expr)
	   *     simplify(expr, rules)
	   *     simplify(expr, rules, scope)
	   *     simplify(expr, scope)
	   *
	   * Examples:
	   *
	   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node {2 * x}
	   *     math.simplify('2 * 3 * x', {x: 4})        // Node {24}
	   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
	   *     math.simplify(f)                          // Node {2 * x}
	   *
	   * See also:
	   *
	   *     derivative, parse, eval
	   *
	   * @param {Node | string} expr
	   *            The expression to be simplified
	   * @param {Array<{l:string, r: string} | string | function>} [rules]
	   *            Optional list with custom rules
	   * @return {Node} Returns the simplified form of `expr`
	   */
	  var simplify = typed('simplify', {
	    'string': function string(expr) {
	      return simplify(parse$$1(expr), simplify.rules, {});
	    },

	    'string, Object': function stringObject(expr, scope) {
	      return simplify(parse$$1(expr), simplify.rules, scope);
	    },

	    'string, Array': function stringArray(expr, rules) {
	      return simplify(parse$$1(expr), rules, {});
	    },

	    'string, Array, Object': function stringArrayObject(expr, rules, scope) {
	      return simplify(parse$$1(expr), rules, scope);
	    },

	    'Node, Object': function NodeObject(expr, scope) {
	      return simplify(expr, simplify.rules, scope);
	    },

	    'Node': function Node(expr) {
	      return simplify(expr, simplify.rules, {});
	    },

	    'Node, Array': function NodeArray(expr, rules) {
	      return simplify(expr, rules, {});
	    },

	    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {
	      rules = _buildRules(rules);

	      var res = resolve$$1(expr, scope);
	      res = removeParens(res);
	      var visited = {};

	      var str = res.toString({ parenthesis: 'all' });
	      while (!visited[str]) {
	        visited[str] = true;
	        _lastsym = 0; // counter for placeholder symbols
	        for (var i = 0; i < rules.length; i++) {
	          if (typeof rules[i] === 'function') {
	            res = rules[i](res);
	          } else {
	            flatten(res);
	            res = applyRule(res, rules[i]);
	          }
	          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
	        }
	        str = res.toString({ parenthesis: 'all' });
	      }

	      return res;
	    }
	  });
	  simplify.simplifyCore = simplifyCore$$1;
	  simplify.resolve = resolve$$1;

	  function removeParens(node) {
	    return node.transform(function (node, path, parent) {
	      return type.isParenthesisNode(node) ? node.content : node;
	    });
	  }

	  // All constants that are allowed in rules
	  var SUPPORTED_CONSTANTS = {
	    true: true,
	    false: true,
	    e: true,
	    i: true,
	    Infinity: true,
	    LN2: true,
	    LN10: true,
	    LOG2E: true,
	    LOG10E: true,
	    NaN: true,
	    phi: true,
	    pi: true,
	    SQRT1_2: true,
	    SQRT2: true,
	    tau: true
	    // null: false,
	    // undefined: false,
	    // version: false,


	    // Array of strings, used to build the ruleSet.
	    // Each l (left side) and r (right side) are parsed by
	    // the expression parser into a node tree.
	    // Left hand sides are matched to subtrees within the
	    // expression to be parsed and replaced with the right
	    // hand side.
	    // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
	    // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
	    // It is possible to get into an infinite loop with conflicting rules
	  };simplify.rules = [simplifyCore$$1,
	  // { l: 'n+0', r: 'n' },     // simplifyCore
	  // { l: 'n^0', r: '1' },     // simplifyCore
	  // { l: '0*n', r: '0' },     // simplifyCore
	  // { l: 'n/n', r: '1'},      // simplifyCore
	  // { l: 'n^1', r: 'n' },     // simplifyCore
	  // { l: '+n1', r:'n1' },     // simplifyCore
	  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
	  { l: 'log(e)', r: '1' },

	  // temporary rules
	  { l: 'n-n1', r: 'n+-n1' }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
	  { l: '-(c*v)', r: '(-c) * v' }, // make non-constant terms positive
	  { l: '-v', r: '(-1) * v' }, { l: 'n/n1^n2', r: 'n*n1^-n2' }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
	  { l: 'n/n1', r: 'n*n1^-1' },

	  // expand nested exponentiation
	  { l: '(n ^ n1) ^ n2', r: 'n ^ (n1 * n2)' },

	  // collect like factors
	  { l: 'n*n', r: 'n^2' }, { l: 'n * n^n1', r: 'n^(n1+1)' }, { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },

	  // collect like terms
	  { l: 'n+n', r: '2*n' }, { l: 'n+-n', r: '0' }, { l: 'n1*n2 + n2', r: '(n1+1)*n2' }, { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },

	  // remove parenthesis in the case of negating a quantitiy
	  { l: 'n1 + -1 * (n2 + n3)', r: 'n1 + -1 * n2 + -1 * n3' }, simplifyConstant$$1, { l: '(-n)*n1', r: '-(n*n1)' }, // make factors positive (and undo 'make non-constant terms positive')

	  // ordering of constants
	  { l: 'c+v', r: 'v+c', context: { 'add': { commutative: false } } }, { l: 'v*c', r: 'c*v', context: { 'multiply': { commutative: false } } },

	  // undo temporary rules
	  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
	  { l: 'n+-n1', r: 'n-n1' }, // undo replace 'subtract'
	  { l: 'n*(n1^-1)', r: 'n/n1' }, // undo replace 'divide'
	  { l: 'n*n1^-n2', r: 'n/n1^n2' }, { l: 'n1^-1', r: '1/n1' }, { l: 'n*(n1/n2)', r: '(n*n1)/n2' }, // '*' before '/'
	  { l: 'n-(n1+n2)', r: 'n-n1-n2' }, // '-' before '+'
	  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
	  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },

	  { l: '1*n', r: 'n' // this pattern can be produced by simplifyConstant

	  }];

	  /**
	   * Parse the string array of rules into nodes
	   *
	   * Example syntax for rules:
	   *
	   * Position constants to the left in a product:
	   * { l: 'n1 * c1', r: 'c1 * n1' }
	   * n1 is any Node, and c1 is a ConstantNode.
	   *
	   * Apply difference of squares formula:
	   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
	   * n1, n2 mean any Node.
	   *
	   * Short hand notation:
	   * 'n1 * c1 -> c1 * n1'
	   */
	  function _buildRules(rules) {
	    // Array of rules to be used to simplify expressions
	    var ruleSet = [];
	    for (var i = 0; i < rules.length; i++) {
	      var rule = rules[i];
	      var newRule = void 0;
	      var ruleType = typeof rule === 'undefined' ? 'undefined' : _typeof$c(rule);
	      switch (ruleType) {
	        case 'string':
	          var lr = rule.split('->');
	          if (lr.length !== 2) {
	            throw SyntaxError('Could not parse rule: ' + rule);
	          }
	          rule = { l: lr[0], r: lr[1]
	            /* falls through */
	          };case 'object':
	          newRule = {
	            l: removeParens(parse$$1(rule.l)),
	            r: removeParens(parse$$1(rule.r))
	          };
	          if (rule.context) {
	            newRule.evaluate = rule.context;
	          }
	          if (rule.evaluate) {
	            newRule.evaluate = parse$$1(rule.evaluate);
	          }

	          if (isAssociative(newRule.l)) {
	            var makeNode = createMakeNodeFunction(newRule.l);
	            var expandsym = _getExpandPlaceholderSymbol();
	            newRule.expanded = {};
	            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);
	            // Push the expandsym into the deepest possible branch.
	            // This helps to match the newRule against nodes returned from getSplits() later on.
	            flatten(newRule.expanded.l);
	            unflattenr(newRule.expanded.l);
	            newRule.expanded.r = makeNode([newRule.r, expandsym]);
	          }
	          break;
	        case 'function':
	          newRule = rule;
	          break;
	        default:
	          throw TypeError('Unsupported type of rule: ' + ruleType);
	      }
	      // console.log('Adding rule: ' + rules[i])
	      // console.log(newRule)
	      ruleSet.push(newRule);
	    }
	    return ruleSet;
	  }

	  var _lastsym = 0;
	  function _getExpandPlaceholderSymbol() {
	    return new SymbolNode$$1('_p' + _lastsym++);
	  }

	  /**
	   * Returns a simplfied form of node, or the original node if no simplification was possible.
	   *
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
	   */
	  var applyRule = typed('applyRule', {
	    'Node, Object': function NodeObject(node, rule) {
	      // console.log('Entering applyRule(' + node.toString() + ')')

	      // Do not clone node unless we find a match
	      var res = node;

	      // First replace our child nodes with their simplified versions
	      // If a child could not be simplified, the assignments will have
	      // no effect since the node is returned unchanged
	      if (res instanceof OperatorNode$$1 || res instanceof FunctionNode$$1) {
	        if (res.args) {
	          for (var i = 0; i < res.args.length; i++) {
	            res.args[i] = applyRule(res.args[i], rule);
	          }
	        }
	      } else if (res instanceof ParenthesisNode$$1) {
	        if (res.content) {
	          res.content = applyRule(res.content, rule);
	        }
	      }

	      // Try to match a rule against this node
	      var repl = rule.r;
	      var matches = _ruleMatch(rule.l, res)[0];

	      // If the rule is associative operator, we can try matching it while allowing additional terms.
	      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.
	      if (!matches && rule.expanded) {
	        repl = rule.expanded.r;
	        matches = _ruleMatch(rule.expanded.l, res)[0];
	      }

	      if (matches) {
	        // const before = res.toString({parenthesis: 'all'})

	        // Create a new node by cloning the rhs of the matched rule
	        // we keep any implicit multiplication state if relevant
	        var implicit = res.implicit;
	        res = repl.clone();
	        if (implicit && 'implicit' in repl) {
	          res.implicit = true;
	        }

	        // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes
	        var _transform = function _transform(node) {
	          if (node.isSymbolNode && matches.placeholders.hasOwnProperty(node.name)) {
	            return matches.placeholders[node.name].clone();
	          } else {
	            return node.map(_transform);
	          }
	        };

	        res = _transform(res);

	        // const after = res.toString({parenthesis: 'all'})
	        // console.log('Simplified ' + before + ' to ' + after)
	      }

	      return res;
	    }
	  });

	  /**
	   * Get (binary) combinations of a flattened binary node
	   * e.g. +(node1, node2, node3) -> [
	   *        +(node1,  +(node2, node3)),
	   *        +(node2,  +(node1, node3)),
	   *        +(node3,  +(node1, node2))]
	   *
	   */
	  function getSplits(node, context) {
	    var res = [];
	    var right = void 0,
	        rightArgs = void 0;
	    var makeNode = createMakeNodeFunction(node);
	    if (isCommutative(node, context)) {
	      for (var i = 0; i < node.args.length; i++) {
	        rightArgs = node.args.slice(0);
	        rightArgs.splice(i, 1);
	        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
	        res.push(makeNode([node.args[i], right]));
	      }
	    } else {
	      rightArgs = node.args.slice(1);
	      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
	      res.push(makeNode([node.args[0], right]));
	    }
	    return res;
	  }

	  /**
	   * Returns the set union of two match-placeholders or null if there is a conflict.
	   */
	  function mergeMatch(match1, match2) {
	    var res = { placeholders: {}

	      // Some matches may not have placeholders; this is OK
	    };if (!match1.placeholders && !match2.placeholders) {
	      return res;
	    } else if (!match1.placeholders) {
	      return match2;
	    } else if (!match2.placeholders) {
	      return match1;
	    }

	    // Placeholders with the same key must match exactly
	    for (var key in match1.placeholders) {
	      res.placeholders[key] = match1.placeholders[key];
	      if (match2.placeholders.hasOwnProperty(key)) {
	        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
	          return null;
	        }
	      }
	    }

	    for (var _key in match2.placeholders) {
	      res.placeholders[_key] = match2.placeholders[_key];
	    }

	    return res;
	  }

	  /**
	   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
	   * Each list represents matches found in one child of a node.
	   */
	  function combineChildMatches(list1, list2) {
	    var res = [];

	    if (list1.length === 0 || list2.length === 0) {
	      return res;
	    }

	    var merged = void 0;
	    for (var i1 = 0; i1 < list1.length; i1++) {
	      for (var i2 = 0; i2 < list2.length; i2++) {
	        merged = mergeMatch(list1[i1], list2[i2]);
	        if (merged) {
	          res.push(merged);
	        }
	      }
	    }
	    return res;
	  }

	  /**
	   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
	   * Each list represents matches found in one child of a node.
	   * Returns a list of unique matches.
	   */
	  function mergeChildMatches(childMatches) {
	    if (childMatches.length === 0) {
	      return childMatches;
	    }

	    var sets = childMatches.reduce(combineChildMatches);
	    var uniqueSets = [];
	    var unique = {};
	    for (var i = 0; i < sets.length; i++) {
	      var s = JSON.stringify(sets[i]);
	      if (!unique[s]) {
	        unique[s] = true;
	        uniqueSets.push(sets[i]);
	      }
	    }
	    return uniqueSets;
	  }

	  /**
	   * Determines whether node matches rule.
	   *
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @return {Object} Information about the match, if it exists.
	   */
	  function _ruleMatch(rule, node, isSplit) {
	    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
	    //    console.log('rule = ' + rule)
	    //    console.log('node = ' + node)

	    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
	    var res = [{ placeholders: {} }];

	    if (rule instanceof OperatorNode$$1 && node instanceof OperatorNode$$1 || rule instanceof FunctionNode$$1 && node instanceof FunctionNode$$1) {
	      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
	      if (rule instanceof OperatorNode$$1) {
	        if (rule.op !== node.op || rule.fn !== node.fn) {
	          return [];
	        }
	      } else if (rule instanceof FunctionNode$$1) {
	        if (rule.name !== node.name) {
	          return [];
	        }
	      }

	      // rule and node match. Search the children of rule and node.
	      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
	        // Expect non-associative operators to match exactly
	        var childMatches = [];
	        for (var i = 0; i < rule.args.length; i++) {
	          var childMatch = _ruleMatch(rule.args[i], node.args[i]);
	          if (childMatch.length === 0) {
	            // Child did not match, so stop searching immediately
	            return [];
	          }
	          // The child matched, so add the information returned from the child to our result
	          childMatches.push(childMatch);
	        }
	        res = mergeChildMatches(childMatches);
	      } else if (node.args.length >= 2 && rule.args.length === 2) {
	        // node is flattened, rule is not
	        // Associative operators/functions can be split in different ways so we check if the rule matches each
	        // them and return their union.
	        var splits = getSplits(node, rule.context);
	        var splitMatches = [];
	        for (var _i = 0; _i < splits.length; _i++) {
	          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here
	          splitMatches = splitMatches.concat(matchSet);
	        }
	        return splitMatches;
	      } else if (rule.args.length > 2) {
	        throw Error('Unexpected non-binary associative function: ' + rule.toString());
	      } else {
	        // Incorrect number of arguments in rule and node, so no match
	        return [];
	      }
	    } else if (rule instanceof SymbolNode$$1) {
	      // If the rule is a SymbolNode, then it carries a special meaning
	      // according to the first character of the symbol node name.
	      // c.* matches a ConstantNode
	      // n.* matches any node
	      if (rule.name.length === 0) {
	        throw new Error('Symbol in rule has 0 length...!?');
	      }
	      if (math.hasOwnProperty(rule.name)) {
	        if (!SUPPORTED_CONSTANTS[rule.name]) {
	          throw new Error('Built in constant: ' + rule.name + ' is not supported by simplify.');
	        }

	        // built-in constant must match exactly
	        if (rule.name !== node.name) {
	          return [];
	        }
	      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
	        // rule matches _anything_, so assign this node to the rule.name placeholder
	        // Assign node to the rule.name placeholder.
	        // Our parent will check for matches among placeholders.
	        res[0].placeholders[rule.name] = node;
	      } else if (rule.name[0] === 'v') {
	        // rule matches any variable thing (not a ConstantNode)
	        if (!type.isConstantNode(node)) {
	          res[0].placeholders[rule.name] = node;
	        } else {
	          // Mis-match: rule was expecting something other than a ConstantNode
	          return [];
	        }
	      } else if (rule.name[0] === 'c') {
	        // rule matches any ConstantNode
	        if (node instanceof ConstantNode$$1) {
	          res[0].placeholders[rule.name] = node;
	        } else {
	          // Mis-match: rule was expecting a ConstantNode
	          return [];
	        }
	      } else {
	        throw new Error('Invalid symbol in rule: ' + rule.name);
	      }
	    } else if (rule instanceof ConstantNode$$1) {
	      // Literal constant must match exactly
	      if (!equal$$1(rule.value, node.value)) {
	        return [];
	      }
	    } else {
	      // Some other node was encountered which we aren't prepared for, so no match
	      return [];
	    }

	    // It's a match!

	    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')
	    return res;
	  }

	  /**
	   * Determines whether p and q (and all their children nodes) are identical.
	   *
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
	   * @return {Object} Information about the match, if it exists.
	   */
	  function _exactMatch(p, q) {
	    if (p instanceof ConstantNode$$1 && q instanceof ConstantNode$$1) {
	      if (!equal$$1(p.value, q.value)) {
	        return false;
	      }
	    } else if (p instanceof SymbolNode$$1 && q instanceof SymbolNode$$1) {
	      if (p.name !== q.name) {
	        return false;
	      }
	    } else if (p instanceof OperatorNode$$1 && q instanceof OperatorNode$$1 || p instanceof FunctionNode$$1 && q instanceof FunctionNode$$1) {
	      if (p instanceof OperatorNode$$1) {
	        if (p.op !== q.op || p.fn !== q.fn) {
	          return false;
	        }
	      } else if (p instanceof FunctionNode$$1) {
	        if (p.name !== q.name) {
	          return false;
	        }
	      }

	      if (p.args.length !== q.args.length) {
	        return false;
	      }

	      for (var i = 0; i < p.args.length; i++) {
	        if (!_exactMatch(p.args[i], q.args[i])) {
	          return false;
	        }
	      }
	    } else {
	      return false;
	    }

	    return true;
	  }

	  return simplify;
	}

	var math$e = true;
	var name$1g = 'simplify';
	var factory_1$1q = factory$1q;

	var simplify = {
		math: math$e,
		name: name$1g,
		factory: factory_1$1q
	};

	function factory$1r(type, config, load, typed) {
	  var parse$$1 = load(parse);
	  var simplify$$1 = load(simplify);
	  var equal$$1 = load(equal);
	  var isZero$$1 = load(isZero);
	  var getType = load(_typeof$4);
	  var numeric$$1 = load(numeric);
	  var ConstantNode$$1 = load(ConstantNode);
	  var FunctionNode$$1 = load(FunctionNode);
	  var OperatorNode$$1 = load(OperatorNode);
	  var ParenthesisNode$$1 = load(ParenthesisNode);
	  var SymbolNode$$1 = load(SymbolNode);

	  /**
	   * Takes the derivative of an expression expressed in parser Nodes.
	   * The derivative will be taken over the supplied variable in the
	   * second parameter. If there are multiple variables in the expression,
	   * it will return a partial derivative.
	   *
	   * This uses rules of differentiation which can be found here:
	   *
	   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)
	   *
	   * Syntax:
	   *
	   *     derivative(expr, variable)
	   *     derivative(expr, variable, options)
	   *
	   * Examples:
	   *
	   *     math.derivative('x^2', 'x')                     // Node {2 * x}
	   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
	   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
	   *     math.derivative('2*x', 'x').eval()              // number 2
	   *     math.derivative('x^2', 'x').eval({x: 4})        // number 8
	   *     const f = math.parse('x^2')
	   *     const x = math.parse('x')
	   *     math.derivative(f, x)                           // Node {2 * x}
	   *
	   * See also:
	   *
	   *     simplify, parse, eval
	   *
	   * @param  {Node | string} expr           The expression to differentiate
	   * @param  {SymbolNode | string} variable The variable over which to differentiate
	   * @param  {{simplify: boolean}} [options]
	   *                         There is one option available, `simplify`, which
	   *                         is true by default. When false, output will not
	   *                         be simplified.
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
	   */
	  var derivative = typed('derivative', {
	    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
	      var constNodes = {};
	      constTag(constNodes, expr, variable.name);
	      var res = _derivative(expr, constNodes);
	      return options.simplify ? simplify$$1(res) : res;
	    },
	    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
	      return derivative(expr, variable, { simplify: true });
	    },

	    'string, SymbolNode': function stringSymbolNode(expr, variable) {
	      return derivative(parse$$1(expr), variable);
	    },
	    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
	      return derivative(parse$$1(expr), variable, options);
	    },

	    'string, string': function stringString(expr, variable) {
	      return derivative(parse$$1(expr), parse$$1(variable));
	    },
	    'string, string, Object': function stringStringObject(expr, variable, options) {
	      return derivative(parse$$1(expr), parse$$1(variable), options);
	    },

	    'Node, string': function NodeString(expr, variable) {
	      return derivative(expr, parse$$1(variable));
	    },
	    'Node, string, Object': function NodeStringObject(expr, variable, options) {
	      return derivative(expr, parse$$1(variable), options);
	    }

	    // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

	    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
	    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
	      let res = expr
	      for (let i = 0; i < order; i++) {
	        let constNodes = {}
	        constTag(constNodes, expr, variable.name)
	        res = _derivative(res, constNodes)
	      }
	      return res
	    }
	    */
	  });

	  derivative._simplify = true;

	  derivative.toTex = function (deriv) {
	    return _derivTex.apply(null, deriv.args);
	  };

	  // NOTE: the optional "order" parameter here is currently unused
	  var _derivTex = typed('_derivTex', {
	    'Node, SymbolNode': function NodeSymbolNode(expr, x) {
	      if (type.isConstantNode(expr) && getType(expr.value) === 'string') {
	        return _derivTex(parse$$1(expr.value).toString(), x.toString(), 1);
	      } else {
	        return _derivTex(expr.toString(), x.toString(), 1);
	      }
	    },
	    'Node, ConstantNode': function NodeConstantNode(expr, x) {
	      if (getType(x.value) === 'string') {
	        return _derivTex(expr, parse$$1(x.value));
	      } else {
	        throw new Error("The second parameter to 'derivative' is a non-string constant");
	      }
	    },
	    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
	      return _derivTex(expr.toString(), x.name, order.value);
	    },
	    'string, string, number': function stringStringNumber(expr, x, order) {
	      var d = void 0;
	      if (order === 1) {
	        d = '{d\\over d' + x + '}';
	      } else {
	        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
	      }
	      return d + ('\\left[' + expr + '\\right]');
	    }
	  });

	  /**
	   * Does a depth-first search on the expression tree to identify what Nodes
	   * are constants (e.g. 2 + 2), and stores the ones that are constants in
	   * constNodes. Classification is done as follows:
	   *
	   *   1. ConstantNodes are constants.
	   *   2. If there exists a SymbolNode, of which we are differentiating over,
	   *      in the subtree it is not constant.
	   *
	   * @param  {Object} constNodes  Holds the nodes that are constant
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @param  {string} varName     Variable that we are differentiating
	   * @return {boolean}  if node is constant
	   */
	  // TODO: can we rewrite constTag into a pure function?
	  var constTag = typed('constTag', {
	    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
	      constNodes[node] = true;
	      return true;
	    },

	    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
	      // Treat other variables like constants. For reasoning, see:
	      //   https://en.wikipedia.org/wiki/Partial_derivative
	      if (node.name !== varName) {
	        constNodes[node] = true;
	        return true;
	      }
	      return false;
	    },

	    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
	      return constTag(constNodes, node.content, varName);
	    },

	    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
	      if (node.params.indexOf(varName) === -1) {
	        constNodes[node] = true;
	        return true;
	      }
	      return constTag(constNodes, node.expr, varName);
	    },

	    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
	      if (node.args.length > 0) {
	        var isConst = constTag(constNodes, node.args[0], varName);
	        for (var i = 1; i < node.args.length; ++i) {
	          isConst = constTag(constNodes, node.args[i], varName) && isConst;
	        }

	        if (isConst) {
	          constNodes[node] = true;
	          return true;
	        }
	      }
	      return false;
	    }
	  });

	  /**
	   * Applies differentiation rules.
	   *
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @param  {Object} constNodes  Holds the nodes that are constant
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
	   */
	  var _derivative = typed('_derivative', {
	    'ConstantNode, Object': function ConstantNodeObject(node) {
	      return createConstantNode(0);
	    },

	    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }
	      return createConstantNode(1);
	    },

	    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
	      return new ParenthesisNode$$1(_derivative(node.content, constNodes));
	    },

	    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }
	      return _derivative(node.expr, constNodes);
	    },

	    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
	      if (node.args.length !== 1) {
	        funcArgsCheck(node);
	      }

	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }

	      var arg0 = node.args[0];
	      var arg1 = void 0;

	      var div = false; // is output a fraction?
	      var negative = false; // is output negative?

	      var funcDerivative = void 0;
	      switch (node.name) {
	        case 'cbrt':
	          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
	          div = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [createConstantNode(3), new OperatorNode$$1('^', 'pow', [arg0, new OperatorNode$$1('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
	          break;
	        case 'sqrt':
	        case 'nthRoot':
	          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
	          if (node.args.length === 1) {
	            div = true;
	            funcDerivative = new OperatorNode$$1('*', 'multiply', [createConstantNode(2), new FunctionNode$$1('sqrt', [arg0])]);
	          } else if (node.args.length === 2) {
	            // Rearrange from nthRoot(x, a) -> x^(1/a)
	            arg1 = new OperatorNode$$1('/', 'divide', [createConstantNode(1), node.args[1]]);

	            // Is a variable?
	            constNodes[arg1] = constNodes[node.args[1]];

	            return _derivative(new OperatorNode$$1('^', 'pow', [arg0, arg1]), constNodes);
	          }
	          break;
	        case 'log10':
	          arg1 = createConstantNode(10);
	        /* fall through! */
	        case 'log':
	          if (!arg1 && node.args.length === 1) {
	            // d/dx(log(x)) = 1 / x
	            funcDerivative = arg0.clone();
	            div = true;
	          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
	            // d/dx(log(x, c)) = 1 / (x*ln(c))
	            funcDerivative = new OperatorNode$$1('*', 'multiply', [arg0.clone(), new FunctionNode$$1('log', [arg1 || node.args[1]])]);
	            div = true;
	          } else if (node.args.length === 2) {
	            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
	            return _derivative(new OperatorNode$$1('/', 'divide', [new FunctionNode$$1('log', [arg0]), new FunctionNode$$1('log', [node.args[1]])]), constNodes);
	          }
	          break;
	        case 'exp':
	          // d/dx(e^x) = e^x
	          funcDerivative = new FunctionNode$$1('exp', [arg0.clone()]);
	          break;
	        case 'sin':
	          // d/dx(sin(x)) = cos(x)
	          funcDerivative = new FunctionNode$$1('cos', [arg0.clone()]);
	          break;
	        case 'cos':
	          // d/dx(cos(x)) = -sin(x)
	          funcDerivative = new OperatorNode$$1('-', 'unaryMinus', [new FunctionNode$$1('sin', [arg0.clone()])]);
	          break;
	        case 'tan':
	          // d/dx(tan(x)) = sec(x)^2
	          funcDerivative = new OperatorNode$$1('^', 'pow', [new FunctionNode$$1('sec', [arg0.clone()]), createConstantNode(2)]);
	          break;
	        case 'sec':
	          // d/dx(sec(x)) = sec(x)tan(x)
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [node, new FunctionNode$$1('tan', [arg0.clone()])]);
	          break;
	        case 'csc':
	          // d/dx(csc(x)) = -csc(x)cot(x)
	          negative = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [node, new FunctionNode$$1('cot', [arg0.clone()])]);
	          break;
	        case 'cot':
	          // d/dx(cot(x)) = -csc(x)^2
	          negative = true;
	          funcDerivative = new OperatorNode$$1('^', 'pow', [new FunctionNode$$1('csc', [arg0.clone()]), createConstantNode(2)]);
	          break;
	        case 'asin':
	          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
	          div = true;
	          funcDerivative = new FunctionNode$$1('sqrt', [new OperatorNode$$1('-', 'subtract', [createConstantNode(1), new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
	          break;
	        case 'acos':
	          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
	          div = true;
	          negative = true;
	          funcDerivative = new FunctionNode$$1('sqrt', [new OperatorNode$$1('-', 'subtract', [createConstantNode(1), new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
	          break;
	        case 'atan':
	          // d/dx(atan(x)) = 1 / (x^2 + 1)
	          div = true;
	          funcDerivative = new OperatorNode$$1('+', 'add', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
	          break;
	        case 'asec':
	          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
	          div = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [new FunctionNode$$1('abs', [arg0.clone()]), new FunctionNode$$1('sqrt', [new OperatorNode$$1('-', 'subtract', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
	          break;
	        case 'acsc':
	          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [new FunctionNode$$1('abs', [arg0.clone()]), new FunctionNode$$1('sqrt', [new OperatorNode$$1('-', 'subtract', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
	          break;
	        case 'acot':
	          // d/dx(acot(x)) = -1 / (x^2 + 1)
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$$1('+', 'add', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
	          break;
	        case 'sinh':
	          // d/dx(sinh(x)) = cosh(x)
	          funcDerivative = new FunctionNode$$1('cosh', [arg0.clone()]);
	          break;
	        case 'cosh':
	          // d/dx(cosh(x)) = sinh(x)
	          funcDerivative = new FunctionNode$$1('sinh', [arg0.clone()]);
	          break;
	        case 'tanh':
	          // d/dx(tanh(x)) = sech(x)^2
	          funcDerivative = new OperatorNode$$1('^', 'pow', [new FunctionNode$$1('sech', [arg0.clone()]), createConstantNode(2)]);
	          break;
	        case 'sech':
	          // d/dx(sech(x)) = -sech(x)tanh(x)
	          negative = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [node, new FunctionNode$$1('tanh', [arg0.clone()])]);
	          break;
	        case 'csch':
	          // d/dx(csch(x)) = -csch(x)coth(x)
	          negative = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [node, new FunctionNode$$1('coth', [arg0.clone()])]);
	          break;
	        case 'coth':
	          // d/dx(coth(x)) = -csch(x)^2
	          negative = true;
	          funcDerivative = new OperatorNode$$1('^', 'pow', [new FunctionNode$$1('csch', [arg0.clone()]), createConstantNode(2)]);
	          break;
	        case 'asinh':
	          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
	          div = true;
	          funcDerivative = new FunctionNode$$1('sqrt', [new OperatorNode$$1('+', 'add', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
	          break;
	        case 'acosh':
	          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
	          div = true;
	          funcDerivative = new FunctionNode$$1('sqrt', [new OperatorNode$$1('-', 'subtract', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
	          break;
	        case 'atanh':
	          // d/dx(atanh(x)) = 1 / (1 - x^2)
	          div = true;
	          funcDerivative = new OperatorNode$$1('-', 'subtract', [createConstantNode(1), new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
	          break;
	        case 'asech':
	          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [arg0.clone(), new FunctionNode$$1('sqrt', [new OperatorNode$$1('-', 'subtract', [createConstantNode(1), new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
	          break;
	        case 'acsch':
	          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$$1('*', 'multiply', [new FunctionNode$$1('abs', [arg0.clone()]), new FunctionNode$$1('sqrt', [new OperatorNode$$1('+', 'add', [new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
	          break;
	        case 'acoth':
	          // d/dx(acoth(x)) = -1 / (1 - x^2)
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$$1('-', 'subtract', [createConstantNode(1), new OperatorNode$$1('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
	          break;
	        case 'abs':
	          // d/dx(abs(x)) = abs(x)/x
	          funcDerivative = new OperatorNode$$1('/', 'divide', [new FunctionNode$$1(new SymbolNode$$1('abs'), [arg0.clone()]), arg0.clone()]);
	          break;
	        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)
	        default:
	          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
	      }

	      var op = void 0,
	          func = void 0;
	      if (div) {
	        op = '/';
	        func = 'divide';
	      } else {
	        op = '*';
	        func = 'multiply';
	      }

	      /* Apply chain rule to all functions:
	         F(x)  = f(g(x))
	         F'(x) = g'(x)*f'(g(x)) */
	      var chainDerivative = _derivative(arg0, constNodes);
	      if (negative) {
	        chainDerivative = new OperatorNode$$1('-', 'unaryMinus', [chainDerivative]);
	      }
	      return new OperatorNode$$1(op, func, [chainDerivative, funcDerivative]);
	    },

	    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }

	      if (node.op === '+') {
	        // d/dx(sum(f(x)) = sum(f'(x))
	        return new OperatorNode$$1(node.op, node.fn, node.args.map(function (arg) {
	          return _derivative(arg, constNodes);
	        }));
	      }

	      if (node.op === '-') {
	        // d/dx(+/-f(x)) = +/-f'(x)
	        if (node.isUnary()) {
	          return new OperatorNode$$1(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
	        }

	        // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)
	        if (node.isBinary()) {
	          return new OperatorNode$$1(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
	        }
	      }

	      if (node.op === '*') {
	        // d/dx(c*f(x)) = c*f'(x)
	        var constantTerms = node.args.filter(function (arg) {
	          return constNodes[arg] !== undefined;
	        });

	        if (constantTerms.length > 0) {
	          var nonConstantTerms = node.args.filter(function (arg) {
	            return constNodes[arg] === undefined;
	          });

	          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode$$1('*', 'multiply', nonConstantTerms);

	          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));

	          return new OperatorNode$$1('*', 'multiply', newArgs);
	        }

	        // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)
	        return new OperatorNode$$1('+', 'add', node.args.map(function (argOuter) {
	          return new OperatorNode$$1('*', 'multiply', node.args.map(function (argInner) {
	            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
	          }));
	        }));
	      }

	      if (node.op === '/' && node.isBinary()) {
	        var arg0 = node.args[0];
	        var arg1 = node.args[1];

	        // d/dx(f(x) / c) = f'(x) / c
	        if (constNodes[arg1] !== undefined) {
	          return new OperatorNode$$1('/', 'divide', [_derivative(arg0, constNodes), arg1]);
	        }

	        // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)
	        if (constNodes[arg0] !== undefined) {
	          return new OperatorNode$$1('*', 'multiply', [new OperatorNode$$1('-', 'unaryMinus', [arg0]), new OperatorNode$$1('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode$$1('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
	        }

	        // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2
	        return new OperatorNode$$1('/', 'divide', [new OperatorNode$$1('-', 'subtract', [new OperatorNode$$1('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode$$1('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode$$1('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
	      }

	      if (node.op === '^' && node.isBinary()) {
	        var _arg = node.args[0];
	        var _arg2 = node.args[1];

	        if (constNodes[_arg] !== undefined) {
	          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
	          if (type.isConstantNode(_arg) && (isZero$$1(_arg.value) || equal$$1(_arg.value, 1))) {
	            return createConstantNode(0);
	          }

	          // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)
	          return new OperatorNode$$1('*', 'multiply', [node, new OperatorNode$$1('*', 'multiply', [new FunctionNode$$1('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
	        }

	        if (constNodes[_arg2] !== undefined) {
	          if (type.isConstantNode(_arg2)) {
	            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
	            if (isZero$$1(_arg2.value)) {
	              return createConstantNode(0);
	            }
	            // Ignore exponent; f(x)^1 = f(x)
	            if (equal$$1(_arg2.value, 1)) {
	              return _derivative(_arg, constNodes);
	            }
	          }

	          // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)
	          var powMinusOne = new OperatorNode$$1('^', 'pow', [_arg.clone(), new OperatorNode$$1('-', 'subtract', [_arg2, createConstantNode(1)])]);

	          return new OperatorNode$$1('*', 'multiply', [_arg2.clone(), new OperatorNode$$1('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
	        }

	        // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]
	        return new OperatorNode$$1('*', 'multiply', [new OperatorNode$$1('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode$$1('+', 'add', [new OperatorNode$$1('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode$$1('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode$$1('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode$$1('log', [_arg.clone()])])])]);
	      }

	      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
	    }
	  });

	  /**
	   * Ensures the number of arguments for a function are correct,
	   * and will throw an error otherwise.
	   *
	   * @param {FunctionNode} node
	   */
	  function funcArgsCheck(node) {
	    // TODO add min, max etc
	    if ((node.name === 'log' || node.name === 'nthRoot') && node.args.length === 2) {
	      return;
	    }

	    // There should be an incorrect number of arguments if we reach here

	    // Change all args to constants to avoid unidentified
	    // symbol error when compiling function
	    for (var i = 0; i < node.args.length; ++i) {
	      node.args[i] = createConstantNode(0);
	    }

	    node.compile().eval();
	    throw new Error('Expected TypeError, but none found');
	  }

	  /**
	   * Helper function to create a constant node with a specific type
	   * (number, BigNumber, Fraction)
	   * @param {number} value
	   * @param {string} [valueType]
	   * @return {ConstantNode}
	   */
	  function createConstantNode(value, valueType) {
	    return new ConstantNode$$1(numeric$$1(value, valueType || config.number));
	  }

	  return derivative;
	}

	var name$1h = 'derivative';
	var factory_1$1r = factory$1r;

	var derivative = {
		name: name$1h,
		factory: factory_1$1r
	};

	function factory$1s(type, config, load, typed) {
	  var parse$$1 = load(parse);

	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval().
	   *
	   * Note the evaluating arbitrary expressions may involve security risks,
	   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
	   *
	   * Syntax:
	   *
	   *     math.parse(expr)
	   *     math.parse(expr, options)
	   *     math.parse([expr1, expr2, expr3, ...])
	   *     math.parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
	   *     node1.compile().eval() // 5
	   *
	   *     let scope = {a:3, b:4}
	   *     const node2 = math.parse('a * b') // 12
	   *     const code2 = node2.compile()
	   *     code2.eval(scope) // 12
	   *     scope.a = 5
	   *     code2.eval(scope) // 20
	   *
	   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
	   *     nodes[2].compile().eval() // 12
	   *
	   * See also:
	   *
	   *     eval, compile
	   *
	   * @param {string | string[] | Matrix} expr          Expression to be parsed
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  return typed('parse', {
	    'string | Array | Matrix': parse$$1,
	    'string | Array | Matrix, Object': parse$$1
	  });
	}

	var name$1i = 'parse';
	var factory_1$1s = factory$1s;

	var parse$1 = {
		name: name$1i,
		factory: factory_1$1s
	};

	function factory$1t(type, config, load, typed) {
	  var simplify$$1 = load(simplify);
	  var simplifyCore$$1 = load(simplifyCore);
	  var simplifyConstant$$1 = load(simplifyConstant);
	  var parse = load(parse$1);
	  var number$$1 = number;
	  var ConstantNode$$1 = load(ConstantNode);
	  var OperatorNode$$1 = load(OperatorNode);
	  var SymbolNode$$1 = load(SymbolNode);

	  /**
	   * Transform a rationalizable expression in a rational fraction.
	   * If rational fraction is one variable polynomial then converts
	   * the numerator and denominator in canonical form, with decreasing
	   * exponents, returning the coefficients of numerator.
	   *
	   * Syntax:
	   *
	   *     rationalize(expr)
	   *     rationalize(expr, detailed)
	   *     rationalize(expr, scope)
	   *     rationalize(expr, scope, detailed)
	   *
	   * Examples:
	   *
	   *     math.rationalize('sin(x)+y')
	   *                   //  Error: There is an unsolved function call
	   *     math.rationalize('2x/y - y/(x+1)')
	   *                   // (2*x^2-y^2+2*x)/(x*y+y)
	   *     math.rationalize('(2x+1)^6')
	   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
	   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
	   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
	   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
	   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
	   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
	   *
	   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
	   *     math.rationalize('x+x+x+y',{})    // 3*x+y
	   *
	   *     const ret = math.rationalize('x+x+x+y',{},true)
	   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
	   *     const ret = math.rationalize('-2+5x^2',{},true)
	   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
	   *
	   * See also:
	   *
	   *     simplify
	   *
	   * @param  {Node|string} expr    The expression to check if is a polynomial expression
	   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
	   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
	   *
	   * @return {Object | Expression Node}    The rational polynomial of `expr` or na object
	   *            {Object}
	   *              {Expression Node} expression: node simplified expression
	   *              {Expression Node} numerator: simplified numerator of expression
	   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
	   *              {Array}           variables:  variable names
	   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
	   *           {Expression Node}  node simplified expression
	   *
	   */
	  var rationalize = typed('rationalize', {
	    'string': function string(expr) {
	      return rationalize(parse(expr), {}, false);
	    },

	    'string, boolean': function stringBoolean(expr, detailed) {
	      return rationalize(parse(expr), {}, detailed);
	    },

	    'string, Object': function stringObject(expr, scope) {
	      return rationalize(parse(expr), scope, false);
	    },

	    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
	      return rationalize(parse(expr), scope, detailed);
	    },

	    'Node': function Node(expr) {
	      return rationalize(expr, {}, false);
	    },

	    'Node, boolean': function NodeBoolean(expr, detailed) {
	      return rationalize(expr, {}, detailed);
	    },

	    'Node, Object': function NodeObject(expr, scope) {
	      return rationalize(expr, scope, false);
	    },

	    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
	      var polyRet = polynomial(expr, scope, true); // Check if expression is a rationalizable polynomial
	      var nVars = polyRet.variables.length;
	      expr = polyRet.expression;

	      if (nVars >= 1) {
	        // If expression in not a constant
	        var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form
	        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)
	        var sBefore = void 0; // Previous expression

	        while (true) {
	          // Apply alternately  successive division rules and distr.div.rules
	          expr = simplify$$1(expr, setRules.firstRules); // Apply the initial rules, including succ div rules
	          expr = simplify$$1(expr, setRules.distrDivRules); // and distr.div.rules until no more changes

	          var s = expr.toString();
	          if (s === sBefore) break; // No changes : end of the loop

	          sBefore = s;
	        }

	        expr = simplify$$1(expr, setRules.firstRulesAgain);
	        expr = simplify$$1(expr, setRules.finalRules); // Apply final rules
	      } // NVars >= 1

	      var coefficients = [];
	      var retRationalize = {};

	      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
	        // Separate numerator from denominator
	        if (nVars === 1) {
	          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
	          expr.args[1] = polyToCanonical(expr.args[1]);
	        }
	        if (detailed) {
	          retRationalize.numerator = expr.args[0];
	          retRationalize.denominator = expr.args[1];
	        }
	      } else {
	        if (nVars === 1) {
	          expr = polyToCanonical(expr, coefficients);
	        }
	        if (detailed) {
	          retRationalize.numerator = expr;
	          retRationalize.denominator = null;
	        }
	      }
	      // nVars

	      if (!detailed) return expr;
	      retRationalize.coefficients = coefficients;
	      retRationalize.variables = polyRet.variables;
	      retRationalize.expression = expr;
	      return retRationalize;
	    } // ^^^^^^^ end of rationalize ^^^^^^^^
	  }); // end of typed rationalize

	  /**
	   *  Function to simplify an expression using an optional scope and
	   *  return it if the expression is a polynomial expression, i.e.
	   *  an expression with one or more variables and the operators
	   *  +, -, *, and ^, where the exponent can only be a positive integer.
	   *
	   * Syntax:
	   *
	   *     polynomial(expr,scope,extended)
	   *
	   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
	   * @param  {object} scope           Optional scope for expression simplification
	   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
	   *
	   *
	   * @return {Object}
	   *            {Object} node:   node simplified expression
	   *            {Array}  variables:  variable names
	   */
	  function polynomial(expr, scope, extended) {
	    var variables = [];
	    var node = simplify$$1(expr, scope); // Resolves any variables and functions with all defined parameters
	    extended = !!extended;

	    var oper = '+-*' + (extended ? '/' : '');
	    recPoly(node);
	    var retFunc = {};
	    retFunc.expression = node;
	    retFunc.variables = variables;
	    return retFunc;

	    // -------------------------------------------------------------------------------------------------------

	    /**
	     *  Function to simplify an expression using an optional scope and
	     *  return it if the expression is a polynomial expression, i.e.
	     *  an expression with one or more variables and the operators
	     *  +, -, *, and ^, where the exponent can only be a positive integer.
	     *
	     * Syntax:
	     *
	     *     recPoly(node)
	     *
	     *
	     * @param  {Node} node               The current sub tree expression in recursion
	     *
	     * @return                           nothing, throw an exception if error
	     */
	    function recPoly(node) {
	      var tp = node.type; // node type
	      if (tp === 'FunctionNode') {
	        // No function call in polynomial expression
	        throw new Error('There is an unsolved function call');
	      } else if (tp === 'OperatorNode') {
	        if (node.op === '^' && node.isBinary()) {
	          if (node.args[1].op === '-' && node.args[1].isUnary()) {
	            if (node.args[1].args[0].type !== 'ConstantNode' || !number$$1.isInteger(parseFloat(node.args[1].args[0].value))) {
	              throw new Error('There is a non-integer exponent');
	            } else {
	              recPoly(node.args[0]);
	            }
	          } else if (node.args[1].type !== 'ConstantNode' || !number$$1.isInteger(parseFloat(node.args[1].value))) {
	            throw new Error('There is a non-integer exponent');
	          } else {
	            recPoly(node.args[0]);
	          }
	        } else {
	          if (oper.indexOf(node.op) === -1) {
	            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
	          }
	          for (var i = 0; i < node.args.length; i++) {
	            recPoly(node.args[i]);
	          }
	        } // type of operator
	      } else if (tp === 'SymbolNode') {
	        var name = node.name; // variable name
	        var pos = variables.indexOf(name);
	        if (pos === -1) {
	          // new variable in expression
	          variables.push(name);
	        }
	      } else if (tp === 'ParenthesisNode') {
	        recPoly(node.content);
	      } else if (tp !== 'ConstantNode') {
	        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
	      }
	    } // end of recPoly
	  } // end of polynomial

	  // ---------------------------------------------------------------------------------------
	  /**
	   * Return a rule set to rationalize an polynomial expression in rationalize
	   *
	   * Syntax:
	   *
	   *     rulesRationalize()
	   *
	   * @return {array}        rule set to rationalize an polynomial expression
	   */
	  function rulesRationalize() {
	    var oldRules = [simplifyCore$$1, // sCore
	    { l: 'n+n', r: '2*n' }, { l: 'n+-n', r: '0' }, simplifyConstant$$1, // sConstant
	    { l: 'n*(n1^-1)', r: 'n/n1' }, { l: 'n*n1^-n2', r: 'n/n1^n2' }, { l: 'n1^-1', r: '1/n1' }, { l: 'n1^-n2', r: '1/n1^n2' }, { l: 'n*(n1/n2)', r: '(n*n1)/n2' }, { l: '1*n', r: 'n' }];

	    var rulesFirst = [{ l: '(-n1)/(-n2)', r: 'n1/n2' }, // Unary division
	    { l: '(-n1)*(-n2)', r: 'n1*n2' }, // Unary multiplication
	    { l: 'n1--n2', r: 'n1+n2' }, // '--' elimination
	    { l: 'n1-n2', r: 'n1+(-n2)' }, // Subtraction turn into add with un�ry minus
	    { l: '(n1+n2)*n3', r: '(n1*n3 + n2*n3)' }, // Distributive 1
	    { l: 'n1*(n2+n3)', r: '(n1*n2+n1*n3)' }, // Distributive 2
	    { l: 'c1*n + c2*n', r: '(c1+c2)*n' }, // Joining constants
	    { l: '-v*-c', r: 'c*v' }, // Inversion constant and variable 1
	    { l: '-v*c', r: '-c*v' }, // Inversion constant and variable 2
	    { l: 'v*-c', r: '-c*v' }, // Inversion constant and variable 3
	    { l: 'v*c', r: 'c*v' }, // Inversion constant and variable 4
	    { l: '-(-n1*n2)', r: '(n1*n2)' }, // Unary propagation
	    { l: '-(n1*n2)', r: '(-n1*n2)' }, // Unary propagation
	    { l: '-(-n1+n2)', r: '(n1-n2)' }, // Unary propagation
	    { l: '-(n1+n2)', r: '(-n1-n2)' }, // Unary propagation
	    { l: '(n1^n2)^n3', r: '(n1^(n2*n3))' }, // Power to Power
	    { l: '-(-n1/n2)', r: '(n1/n2)' }, // Division and Unary
	    { l: '-(n1/n2)', r: '(-n1/n2)' }]; // Divisao and Unary

	    var rulesDistrDiv = [{ l: '(n1/n2 + n3/n4)', r: '((n1*n4 + n3*n2)/(n2*n4))' }, // Sum of fractions
	    { l: '(n1/n2 + n3)', r: '((n1 + n3*n2)/n2)' }, // Sum fraction with number 1
	    { l: '(n1 + n2/n3)', r: '((n1*n3 + n2)/n3)' }]; // Sum fraction with number 1

	    var rulesSucDiv = [{ l: '(n1/(n2/n3))', r: '((n1*n3)/n2)' }, // Division simplification
	    { l: '(n1/n2/n3)', r: '(n1/(n2*n3))' }];

	    var setRules = {}; // rules set in 4 steps.

	    // All rules => infinite loop
	    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

	    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set
	    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules
	    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules
	    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.

	    // Division simplification

	    // Second rule set.
	    // There is no aggregate expression with parentesis, but the only variable can be scattered.
	    setRules.finalRules = [simplifyCore$$1, // simplify.rules[0]
	    { l: 'n*-n', r: '-n^2' }, // Joining multiply with power 1
	    { l: 'n*n', r: 'n^2' }, // Joining multiply with power 2
	    simplifyConstant$$1, // simplify.rules[14] old 3rd index in oldRules
	    { l: 'n*-n^n1', r: '-n^(n1+1)' }, // Joining multiply with power 3
	    { l: 'n*n^n1', r: 'n^(n1+1)' }, // Joining multiply with power 4
	    { l: 'n^n1*-n^n2', r: '-n^(n1+n2)' }, // Joining multiply with power 5
	    { l: 'n^n1*n^n2', r: 'n^(n1+n2)' }, // Joining multiply with power 6
	    { l: 'n^n1*-n', r: '-n^(n1+1)' }, // Joining multiply with power 7
	    { l: 'n^n1*n', r: 'n^(n1+1)' }, // Joining multiply with power 8
	    { l: 'n^n1/-n', r: '-n^(n1-1)' }, // Joining multiply with power 8
	    { l: 'n^n1/n', r: 'n^(n1-1)' }, // Joining division with power 1
	    { l: 'n/-n^n1', r: '-n^(1-n1)' }, // Joining division with power 2
	    { l: 'n/n^n1', r: 'n^(1-n1)' }, // Joining division with power 3
	    { l: 'n^n1/-n^n2', r: 'n^(n1-n2)' }, // Joining division with power 4
	    { l: 'n^n1/n^n2', r: 'n^(n1-n2)' }, // Joining division with power 5
	    { l: 'n1+(-n2*n3)', r: 'n1-n2*n3' }, // Solving useless parenthesis 1
	    { l: 'v*(-c)', r: '-c*v' }, // Solving useless unary 2
	    { l: 'n1+-n2', r: 'n1-n2' }, // Solving +- together (new!)
	    { l: 'v*c', r: 'c*v' }, // inversion constant with variable
	    { l: '(n1^n2)^n3', r: '(n1^(n2*n3))' // Power to Power

	    }];
	    return setRules;
	  } // End rulesRationalize

	  // ---------------------------------------------------------------------------------------
	  /**
	   *  Expand recursively a tree node for handling with expressions with exponents
	   *  (it's not for constants, symbols or functions with exponents)
	   *  PS: The other parameters are internal for recursion
	   *
	   * Syntax:
	   *
	   *     expandPower(node)
	   *
	   * @param  {Node} node         Current expression node
	   * @param  {node} parent       Parent current node inside the recursion
	   * @param  (int}               Parent number of chid inside the rercursion
	   *
	   * @return {node}        node expression with all powers expanded.
	   */
	  function expandPower(node, parent, indParent) {
	    var tp = node.type;
	    var internal = arguments.length > 1; // TRUE in internal calls

	    if (tp === 'OperatorNode' && node.isBinary()) {
	      var does = false;
	      var val = void 0;
	      if (node.op === '^') {
	        // First operator: Parenthesis or UnaryMinus
	        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
	          // Second operator: Constant
	          val = parseFloat(node.args[1].value);
	          does = val >= 2 && number$$1.isInteger(val);
	        }
	      }

	      if (does) {
	        // Exponent >= 2
	        // Before:
	        //            operator A --> Subtree
	        // parent pow
	        //            constant
	        //
	        if (val > 2) {
	          // Exponent > 2,
	          // AFTER:  (exponent > 2)
	          //             operator A --> Subtree
	          // parent  *
	          //                 deep clone (operator A --> Subtree
	          //             pow
	          //                 constant - 1
	          //
	          var nEsqTopo = node.args[0];
	          var nDirTopo = new OperatorNode$$1('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode$$1(val - 1)]);
	          node = new OperatorNode$$1('*', 'multiply', [nEsqTopo, nDirTopo]);
	        } else {
	          // Expo = 2 - no power
	          // AFTER:  (exponent =  2)
	          //             operator A --> Subtree
	          // parent   oper
	          //            deep clone (operator A --> Subtree)
	          //
	          node = new OperatorNode$$1('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
	        }

	        if (internal) {
	          // Change parent references in internal recursive calls
	          if (indParent === 'content') {
	            parent.content = node;
	          } else {
	            parent.args[indParent] = node;
	          }
	        }
	      } // does
	    } // binary OperatorNode

	    if (tp === 'ParenthesisNode') {
	      // Recursion
	      expandPower(node.content, node, 'content');
	    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
	      for (var i = 0; i < node.args.length; i++) {
	        expandPower(node.args[i], node, i);
	      }
	    }

	    if (!internal) {
	      // return the root node
	      return node;
	    }
	  } // End expandPower

	  // ---------------------------------------------------------------------------------------
	  /**
	   * Auxilary function for rationalize
	   * Convert near canonical polynomial in one variable in a canonical polynomial
	   * with one term for each exponent in decreasing order
	   *
	   * Syntax:
	   *
	   *     polyToCanonical(node [, coefficients])
	   *
	   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
	   *
	   *        The string or tree expression needs to be at below syntax, with free spaces:
	   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
	   *       Where 'var' is one variable with any valid name
	   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
	   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
	   *
	   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
	   *
	   *
	   * @return {node}        new node tree with one variable polynomial or string error.
	   */
	  function polyToCanonical(node, coefficients) {
	    if (coefficients === undefined) {
	      coefficients = [];
	    } // coefficients.

	    coefficients[0] = 0; // index is the exponent
	    var o = {};
	    o.cte = 1;
	    o.oper = '+';

	    // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
	    //       It is used to deduce the exponent: 1 for *, 0 for "".
	    o.fire = '';

	    var maxExpo = 0; // maximum exponent
	    var varname = ''; // variable name

	    recurPol(node, null, o);
	    maxExpo = coefficients.length - 1;
	    var first = true;
	    var no = void 0;

	    for (var i = maxExpo; i >= 0; i--) {
	      if (coefficients[i] === 0) continue;
	      var n1 = new ConstantNode$$1(first ? coefficients[i] : Math.abs(coefficients[i]));
	      var op = coefficients[i] < 0 ? '-' : '+';

	      if (i > 0) {
	        // Is not a constant without variable
	        var n2 = new SymbolNode$$1(varname);
	        if (i > 1) {
	          var n3 = new ConstantNode$$1(i);
	          n2 = new OperatorNode$$1('^', 'pow', [n2, n3]);
	        }
	        if (coefficients[i] === -1 && first) {
	          n1 = new OperatorNode$$1('-', 'unaryMinus', [n2]);
	        } else if (Math.abs(coefficients[i]) === 1) {
	          n1 = n2;
	        } else {
	          n1 = new OperatorNode$$1('*', 'multiply', [n1, n2]);
	        }
	      }

	      if (first) {
	        no = n1;
	      } else if (op === '+') {
	        no = new OperatorNode$$1('+', 'add', [no, n1]);
	      } else {
	        no = new OperatorNode$$1('-', 'subtract', [no, n1]);
	      }

	      first = false;
	    } // for

	    if (first) {
	      return new ConstantNode$$1(0);
	    } else {
	      return no;
	    }

	    /**
	     * Recursive auxilary function inside polyToCanonical for
	     * converting expression in canonical form
	     *
	     * Syntax:
	     *
	     *     recurPol(node, noPai, obj)
	     *
	     * @param  {Node} node        The current subpolynomial expression
	     * @param  {Node | Null}  noPai   The current parent node
	     * @param  {object}    obj        Object with many internal flags
	     *
	     * @return {}                    No return. If error, throws an exception
	     */
	    function recurPol(node, noPai, o) {
	      var tp = node.type;
	      if (tp === 'FunctionNode') {
	        // ***** FunctionName *****
	        // No function call in polynomial expression
	        throw new Error('There is an unsolved function call');
	      } else if (tp === 'OperatorNode') {
	        // ***** OperatorName *****
	        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

	        if (noPai !== null) {
	          // -(unary),^  : children of *,+,-
	          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
	            throw new Error('Invalid ' + node.op + ' placing');
	          }

	          // -,+,* : children of +,-
	          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
	            throw new Error('Invalid ' + node.op + ' placing');
	          }

	          // -,+ : first child
	          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
	            throw new Error('Invalid ' + node.op + ' placing');
	          }
	        } // Has parent

	        // Firers: ^,*       Old:   ^,&,-(unary): firers
	        if (node.op === '^' || node.op === '*') {
	          o.fire = node.op;
	        }

	        for (var _i = 0; _i < node.args.length; _i++) {
	          // +,-: reset fire
	          if (node.fn === 'unaryMinus') o.oper = '-';
	          if (node.op === '+' || node.fn === 'subtract') {
	            o.fire = '';
	            o.cte = 1; // default if there is no constant
	            o.oper = _i === 0 ? '+' : node.op;
	          }
	          o.noFil = _i; // number of son
	          recurPol(node.args[_i], node, o);
	        } // for in children
	      } else if (tp === 'SymbolNode') {
	        // ***** SymbolName *****
	        if (node.name !== varname && varname !== '') {
	          throw new Error('There is more than one variable');
	        }
	        varname = node.name;
	        if (noPai === null) {
	          coefficients[1] = 1;
	          return;
	        }

	        // ^: Symbol is First child
	        if (noPai.op === '^' && o.noFil !== 0) {
	          throw new Error('In power the variable should be the first parameter');
	        }

	        // *: Symbol is Second child
	        if (noPai.op === '*' && o.noFil !== 1) {
	          throw new Error('In multiply the variable should be the second parameter');
	        }

	        // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)
	        if (o.fire === '' || o.fire === '*') {
	          if (maxExpo < 1) coefficients[1] = 0;
	          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
	          maxExpo = Math.max(1, maxExpo);
	        }
	      } else if (tp === 'ConstantNode') {
	        var valor = parseFloat(node.value);
	        if (noPai === null) {
	          coefficients[0] = valor;
	          return;
	        }
	        if (noPai.op === '^') {
	          // cte: second  child of power
	          if (o.noFil !== 1) throw new Error('Constant cannot be powered');

	          if (!number$$1.isInteger(valor) || valor <= 0) {
	            throw new Error('Non-integer exponent is not allowed');
	          }

	          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
	            coefficients[_i2] = 0;
	          }if (valor > maxExpo) coefficients[valor] = 0;
	          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
	          maxExpo = Math.max(valor, maxExpo);
	          return;
	        }
	        o.cte = valor;

	        // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.
	        if (o.fire === '') {
	          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
	        }
	      } else {
	        throw new Error('Type ' + tp + ' is not allowed');
	      }
	    } // End of recurPol
	  } // End of polyToCanonical

	  return rationalize;
	} // end of factory

	var name$1j = 'rationalize';
	var factory_1$1t = factory$1t;

	var rationalize = {
		name: name$1j,
		factory: factory_1$1t
	};

	var nearlyEqual$4 = number.nearlyEqual;


	function factory$1u(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  var latex$$1 = latex;

	  /**
	   * Test whether two values are unequal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * larger than the configured epsilon. The function cannot be used to compare
	   * values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
	   * Strings are compared by their numerical value.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
	   * with everything except `null`, and `undefined` is unequal with everything
	   * except `undefined`.
	   *
	   * Syntax:
	   *
	   *    math.unequal(x, y)
	   *
	   * Examples:
	   *
	   *    math.unequal(2 + 2, 3)       // returns true
	   *    math.unequal(2 + 2, 4)       // returns false
	   *
	   *    const a = math.unit('50 cm')
	   *    const b = math.unit('5 m')
	   *    math.unequal(a, b)           // returns false
	   *
	   *    const c = [2, 5, 1]
	   *    const d = [2, 7, 1]
	   *
	   *    math.unequal(c, d)           // returns [false, true, false]
	   *    math.deepEqual(c, d)         // returns false
	   *
	   *    math.unequal(0, null)        // returns true
	   * See also:
	   *
	   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
	   */
	  var unequal = typed('unequal', {

	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y !== null;
	      }
	      if (y === null) {
	        return x !== null;
	      }
	      if (x === undefined) {
	        return y !== undefined;
	      }
	      if (y === undefined) {
	        return x !== undefined;
	      }

	      return _unequal(x, y);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, _unequal);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, _unequal, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, _unequal, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, _unequal);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return unequal(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return unequal(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return unequal(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, _unequal, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, _unequal, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, _unequal, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, _unequal, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, _unequal, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, _unequal, true).valueOf();
	    }
	  });

	  var _unequal = typed('_unequal', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x !== y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return !nearlyEqual$4(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !nearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return !x.equals(y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return !x.equals(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return unequal(x.value, y.value);
	    }
	  });

	  unequal.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['unequal'] + '${args[1]}\\right)'
	  };

	  return unequal;
	}

	var name$1k = 'unequal';
	var factory_1$1u = factory$1u;

	var unequal = {
		name: name$1k,
		factory: factory_1$1u
	};

	function factory$1v(type, config, load, typed) {
	  /**
	   * Compute the sign of a value. The sign of a value x is:
	   *
	   * -  1 when x > 1
	   * - -1 when x < 0
	   * -  0 when x == 0
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sign(x)
	   *
	   * Examples:
	   *
	   *    math.sign(3.5)               // returns 1
	   *    math.sign(-4.2)              // returns -1
	   *    math.sign(0)                 // returns 0
	   *
	   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            The number for which to determine the sign
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
	   *            The sign of `x`
	   */
	  var sign = typed('sign', {
	    'number': number.sign,

	    'Complex': function Complex(x) {
	      return x.sign();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(x.cmp(0));
	    },

	    'Fraction': function Fraction(x) {
	      return new type.Fraction(x.s, 1);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sign(0) = 0
	      return deepMap(x, sign, true);
	    },

	    'Unit': function Unit(x) {
	      return sign(x.value);
	    }
	  });

	  sign.toTex = { 1: '\\mathrm{${name}}\\left(${args[0]}\\right)' };

	  return sign;
	}

	var name$1l = 'sign';
	var factory_1$1v = factory$1v;

	var sign = {
		name: name$1l,
		factory: factory_1$1v
	};

	function factory$1w(type, config, load, typed) {
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25)                // returns 5
	   *    math.square(5)               // returns 25
	   *    math.sqrt(-4)                // returns Complex 2i
	   *
	   * See also:
	   *
	   *    square, multiply, cube, cbrt, sqrtm
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
	   *            Returns the square root of `x`
	   */
	  var sqrt = typed('sqrt', {
	    'number': _sqrtNumber,

	    'Complex': function Complex(x) {
	      return x.sqrt();
	    },

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      } else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sqrt(0) = 0
	      return deepMap(x, sqrt, true);
	    },

	    'Unit': function Unit(x) {
	      // Someday will work for complex units when they are implemented
	      return x.pow(0.5);
	    }

	  });

	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */
	  function _sqrtNumber(x) {
	    if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    } else {
	      return new type.Complex(x, 0).sqrt();
	    }
	  }

	  sqrt.toTex = { 1: '\\sqrt{${args[0]}}' };

	  return sqrt;
	}

	var name$1m = 'sqrt';
	var factory_1$1w = factory$1w;

	var sqrt = {
		name: name$1m,
		factory: factory_1$1w
	};

	function factory$1x(type, config, load, typed) {
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */
	  var conj = typed('conj', {
	    'number': function number(x) {
	      return x;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x;
	    },

	    'Complex': function Complex(x) {
	      return x.conjugate();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, conj);
	    }
	  });

	  conj.toTex = { 1: '\\left(${args[0]}\\right)^*' };

	  return conj;
	}

	var name$1n = 'conj';
	var factory_1$1x = factory$1x;

	var conj = {
		name: name$1n,
		factory: factory_1$1x
	};

	function factory$1y(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var zeros$$1 = load(zeros);
	  var identity$$1 = load(identity);

	  var isZero$$1 = load(isZero);
	  var unequal$$1 = load(unequal);

	  var sign$$1 = load(sign);
	  var sqrt$$1 = load(sqrt);
	  var conj$$1 = load(conj);

	  var unaryMinus$$1 = load(unaryMinus);
	  var addScalar$$1 = load(addScalar);
	  var divideScalar$$1 = load(divideScalar);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var subtract$$1 = load(subtract);

	  /**
	   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
	   * two matrices (`Q`, `R`) where `Q` is an
	   * orthogonal matrix and `R` is an upper triangular matrix.
	   *
	   * Syntax:
	   *
	   *    math.qr(A)
	   *
	   * Example:
	   *
	   *    const m = [
	   *      [1, -1,  4],
	   *      [1,  4, -2],
	   *      [1,  4,  2],
	   *      [1,  -1, 0]
	   *    ]
	   *    const result = math.qr(m)
	   *    // r = {
	   *    //   Q: [
	   *    //     [0.5, -0.5,   0.5],
	   *    //     [0.5,  0.5,  -0.5],
	   *    //     [0.5,  0.5,   0.5],
	   *    //     [0.5, -0.5,  -0.5],
	   *    //   ],
	   *    //   R: [
	   *    //     [2, 3,  2],
	   *    //     [0, 5, -2],
	   *    //     [0, 0,  4],
	   *    //     [0, 0,  0]
	   *    //   ]
	   *    // }
	   *
	   * See also:
	   *
	   *    lup, lusolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array
	   * for which to get the QR decomposition.
	   *
	   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
	   * matrix and R: the upper triangular matrix
	   */
	  var qr = typed('qr', {

	    'DenseMatrix': function DenseMatrix(m) {
	      return _denseQR(m);
	    },

	    'SparseMatrix': function SparseMatrix(m) {
	      return _sparseQR(m);
	    },

	    'Array': function Array(a) {
	      // create dense matrix from array
	      var m = matrix$$1(a);
	      // lup, use matrix implementation
	      var r = _denseQR(m);
	      // result
	      return {
	        Q: r.Q.valueOf(),
	        R: r.R.valueOf()
	      };
	    }
	  });

	  function _denseQR(m) {
	    // rows & columns (m x n)
	    var rows = m._size[0]; // m
	    var cols = m._size[1]; // n

	    var Q = identity$$1([rows], 'dense');
	    var Qdata = Q._data;

	    var R = m.clone();
	    var Rdata = R._data;

	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0;

	    var w = zeros$$1([rows], '');

	    for (k = 0; k < Math.min(cols, rows); ++k) {
	      /*
	       * **k-th Household matrix**
	       *
	       * The matrix I - 2*v*transpose(v)
	       * x     = first column of A
	       * x1    = first element of x
	       * alpha = x1 / |x1| * |x|
	       * e1    = tranpose([1, 0, 0, ...])
	       * u     = x - alpha * e1
	       * v     = u / |u|
	       *
	       * Household matrix = I - 2 * v * tranpose(v)
	       *
	       *  * Initially Q = I and R = A.
	       *  * Household matrix is a reflection in a plane normal to v which
	       *    will zero out all but the top right element in R.
	       *  * Appplying reflection to both Q and R will not change product.
	       *  * Repeat this process on the (1,1) minor to get R as an upper
	       *    triangular matrix.
	       *  * Reflections leave the magnitude of the columns of Q unchanged
	       *    so Q remains othoganal.
	       *
	       */

	      var pivot = Rdata[k][k];
	      var sgn = unaryMinus$$1(sign$$1(pivot));
	      var conjSgn = conj$$1(sgn);

	      var alphaSquared = 0;

	      for (i = k; i < rows; i++) {
	        alphaSquared = addScalar$$1(alphaSquared, multiplyScalar$$1(Rdata[i][k], conj$$1(Rdata[i][k])));
	      }

	      var alpha = multiplyScalar$$1(sgn, sqrt$$1(alphaSquared));

	      if (!isZero$$1(alpha)) {
	        // first element in vector u
	        var u1 = subtract$$1(pivot, alpha);

	        // w = v * u1 / |u|    (only elements k to (rows-1) are used)
	        w[k] = 1;

	        for (i = k + 1; i < rows; i++) {
	          w[i] = divideScalar$$1(Rdata[i][k], u1);
	        }

	        // tau = - conj(u1 / alpha)
	        var tau = unaryMinus$$1(conj$$1(divideScalar$$1(u1, alpha)));

	        var s = void 0;

	        /*
	         * tau and w have been choosen so that
	         *
	         * 2 * v * tranpose(v) = tau * w * tranpose(w)
	         */

	        /*
	         * -- calculate R = R - tau * w * tranpose(w) * R --
	         * Only do calculation with rows k to (rows-1)
	         * Additionally columns 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */
	        for (j = k; j < cols; j++) {
	          s = 0.0;

	          // calculate jth element of [tranpose(w) * R]
	          for (i = k; i < rows; i++) {
	            s = addScalar$$1(s, multiplyScalar$$1(conj$$1(w[i]), Rdata[i][j]));
	          }

	          // calculate the jth element of [tau * transpose(w) * R]
	          s = multiplyScalar$$1(s, tau);

	          for (i = k; i < rows; i++) {
	            Rdata[i][j] = multiplyScalar$$1(subtract$$1(Rdata[i][j], multiplyScalar$$1(w[i], s)), conjSgn);
	          }
	        }
	        /*
	         * -- calculate Q = Q - tau * Q * w * transpose(w) --
	         * Q is a square matrix (rows x rows)
	         * Only do calculation with columns k to (rows-1)
	         * Additionally rows 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */
	        for (i = 0; i < rows; i++) {
	          s = 0.0;

	          // calculate ith element of [Q * w]
	          for (j = k; j < rows; j++) {
	            s = addScalar$$1(s, multiplyScalar$$1(Qdata[i][j], w[j]));
	          }

	          // calculate the ith element of [tau * Q * w]
	          s = multiplyScalar$$1(s, tau);

	          for (j = k; j < rows; ++j) {
	            Qdata[i][j] = divideScalar$$1(subtract$$1(Qdata[i][j], multiplyScalar$$1(s, conj$$1(w[j]))), conjSgn);
	          }
	        }
	      }
	    }

	    // coerse almost zero elements to zero
	    // TODO I feel uneasy just zeroing these values
	    for (i = 0; i < rows; ++i) {
	      for (j = 0; j < i && j < cols; ++j) {
	        if (unequal$$1(0, divideScalar$$1(Rdata[i][j], 1e5))) {
	          throw new Error('math.qr(): unknown error - ' + 'R is not lower triangular (element (' + i + ', ' + j + ')  = ' + Rdata[i][j] + ')');
	        }
	        Rdata[i][j] = multiplyScalar$$1(Rdata[i][j], 0);
	      }
	    }

	    // return matrices
	    return {
	      Q: Q,
	      R: R,
	      toString: function toString() {
	        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
	      }
	    };
	  }

	  function _sparseQR(m) {
	    throw new Error('qr not implemented for sparse matrices yet');
	  }

	  return qr;
	}

	var name$1o = 'qr';
	var factory_1$1y = factory$1y;

	var qr = {
		name: name$1o,
		factory: factory_1$1y
	};

	function factory$1z() {
	  /**
	   * This function "flips" its input about the integer -1.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csFlip = function csFlip(i) {
	    // flip the value
	    return -i - 2;
	  };

	  return csFlip;
	}

	var name$1p = 'csFlip';
	var path$w = 'algebra.sparse';
	var factory_1$1z = factory$1z;

	var csFlip = {
		name: name$1p,
		path: path$w,
		factory: factory_1$1z
	};

	function factory$1A() {
	  /**
	   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
	   *
	   * @param {Matrix}   a              The sparse matrix
	   * @param {function} callback       The callback function, function will be invoked with the following args:
	   *                                    - The entry row
	   *                                    - The entry column
	   *                                    - The entry value
	   *                                    - The state parameter
	   * @param {any}      other          The state
	   *
	   * @return                          The number of nonzero elements in the matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csFkeep = function csFkeep(a, callback, other) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // nonzero items
	    var nz = 0;
	    // loop columns
	    for (var j = 0; j < n; j++) {
	      // get current location of col j
	      var p = aptr[j];
	      // record new location of col j
	      aptr[j] = nz;
	      for (; p < aptr[j + 1]; p++) {
	        // check we need to keep this item
	        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
	          // keep A(i,j)
	          aindex[nz] = aindex[p];
	          // check we need to process values (pattern only)
	          if (avalues) {
	            avalues[nz] = avalues[p];
	          }
	          // increment nonzero items
	          nz++;
	        }
	      }
	    }
	    // finalize A
	    aptr[n] = nz;
	    // trim arrays
	    aindex.splice(nz, aindex.length - nz);
	    // check we need to process values (pattern only)
	    if (avalues) {
	      avalues.splice(nz, avalues.length - nz);
	    }
	    // return number of nonzero items
	    return nz;
	  };

	  return csFkeep;
	}

	var name$1q = 'csFkeep';
	var path$x = 'algebra.sparse';
	var factory_1$1A = factory$1A;

	var csFkeep = {
		name: name$1q,
		path: path$x,
		factory: factory_1$1A
	};

	function factory$1B() {
	  /**
	   * Depth-first search and postorder of a tree rooted at node j
	   *
	   * @param {Number}  j               The tree node
	   * @param {Number}  k
	   * @param {Array}   w               The workspace array
	   * @param {Number}  head            The index offset within the workspace for the head array
	   * @param {Number}  next            The index offset within the workspace for the next array
	   * @param {Array}   post            The post ordering array
	   * @param {Number}  stack           The index offset within the workspace for the stack array
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csTdfs = function csTdfs(j, k, w, head, next, post, stack) {
	    // variables
	    var top = 0;
	    // place j on the stack
	    w[stack] = j;
	    // while (stack is not empty)
	    while (top >= 0) {
	      // p = top of stack
	      var p = w[stack + top];
	      // i = youngest child of p
	      var i = w[head + p];
	      if (i === -1) {
	        // p has no unordered children left
	        top--;
	        // node p is the kth postordered node
	        post[k++] = p;
	      } else {
	        // remove i from children of p
	        w[head + p] = w[next + i];
	        // increment top
	        ++top;
	        // start dfs on child node i
	        w[stack + top] = i;
	      }
	    }
	    return k;
	  };

	  return csTdfs;
	}

	var name$1r = 'csTdfs';
	var path$y = 'algebra.sparse';
	var factory_1$1B = factory$1B;

	var csTdfs = {
		name: name$1r,
		path: path$y,
		factory: factory_1$1B
	};

	var clone$4 = object.clone;
	var format$4 = string.format;

	function factory$1C(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Transpose a matrix. All values of the matrix are reflected over its
	   * main diagonal. Only applicable to two dimensional matrices containing
	   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
	   * vectors and scalars return the input unchanged.
	   *
	   * Syntax:
	   *
	   *     math.transpose(x)
	   *
	   * Examples:
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
	   *
	   * See also:
	   *
	   *     diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be transposed
	   * @return {Array | Matrix}   The transposed matrix
	   */
	  var transpose = typed('transpose', {

	    'Array': function Array(x) {
	      // use dense matrix implementation
	      return transpose(matrix$$1(x)).valueOf();
	    },

	    'Matrix': function Matrix(x) {
	      // matrix size
	      var size = x.size();

	      // result
	      var c = void 0;

	      // process dimensions
	      switch (size.length) {
	        case 1:
	          // vector
	          c = x.clone();
	          break;

	        case 2:
	          // rows and columns
	          var rows = size[0];
	          var columns = size[1];

	          // check columns
	          if (columns === 0) {
	            // throw exception
	            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format$4(size) + ')');
	          }

	          // process storage format
	          switch (x.storage()) {
	            case 'dense':
	              c = _denseTranspose(x, rows, columns);
	              break;
	            case 'sparse':
	              c = _sparseTranspose(x, rows, columns);
	              break;
	          }
	          break;

	        default:
	          // multi dimensional
	          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format$4(this._size) + ')');
	      }
	      return c;
	    },

	    // scalars
	    'any': function any(x) {
	      return clone$4(x);
	    }
	  });

	  function _denseTranspose(m, rows, columns) {
	    // matrix array
	    var data = m._data;
	    // transposed matrix data
	    var transposed = [];
	    var transposedRow = void 0;
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize row
	      transposedRow = transposed[j] = [];
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // set data
	        transposedRow[i] = clone$4(data[i][j]);
	      }
	    }
	    // return matrix
	    return new DenseMatrix({
	      data: transposed,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  }

	  function _sparseTranspose(m, rows, columns) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // result matrices
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // row counts
	    var w = [];
	    for (var x = 0; x < rows; x++) {
	      w[x] = 0;
	    }
	    // vars
	    var p = void 0,
	        l = void 0,
	        j = void 0;
	    // loop values in matrix
	    for (p = 0, l = index.length; p < l; p++) {
	      // number of values in row
	      w[index[p]]++;
	    }
	    // cumulative sum
	    var sum = 0;
	    // initialize cptr with the cummulative sum of row counts
	    for (var i = 0; i < rows; i++) {
	      // update cptr
	      cptr.push(sum);
	      // update sum
	      sum += w[i];
	      // update w
	      w[i] = cptr[i];
	    }
	    // update cptr
	    cptr.push(sum);
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // values & index in column
	      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
	        // C values & index
	        var q = w[index[k]]++;
	        // C[j, i] = A[i, j]
	        cindex[q] = j;
	        // check we need to process values (pattern matrix)
	        if (values) {
	          cvalues[q] = clone$4(values[k]);
	        }
	      }
	    }
	    // return matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  }

	  transpose.toTex = { 1: '\\left(${args[0]}\\right)' + latex$$1.operators['transpose'] };

	  return transpose;
	}

	var name$1s = 'transpose';
	var factory_1$1C = factory$1C;

	var transpose = {
		name: name$1s,
		factory: factory_1$1C
	};

	function factory$1D(type, config, load) {
	  var csFlip$$1 = load(csFlip);
	  var csFkeep$$1 = load(csFkeep);
	  var csTdfs$$1 = load(csTdfs);

	  var add$$1 = load(add);
	  var multiply$$1 = load(multiply);
	  var transpose$$1 = load(transpose);

	  /**
	   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
	   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
	   * than A. It is a gready method that selects the sparsest pivot row and column during the course
	   * of a right looking sparse Cholesky factorization.
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   *
	   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
	   * @param {Matrix} m        Sparse Matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csAmd = function csAmd(order, a) {
	    // check input parameters
	    if (!a || order <= 0 || order > 3) {
	      return null;
	    }
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];
	    // initialize vars
	    var lemax = 0;
	    // dense threshold
	    var dense = Math.max(16, 10 * Math.sqrt(n));
	    dense = Math.min(n - 2, dense);
	    // create target matrix C
	    var cm = _createTargetMatrix(order, a, m, n, dense);
	    // drop diagonal entries
	    csFkeep$$1(cm, _diag, null);
	    // C matrix arrays
	    var cindex = cm._index;
	    var cptr = cm._ptr;

	    // number of nonzero elements in C
	    var cnz = cptr[n];

	    // allocate result (n+1)
	    var P = [];

	    // create workspace (8 * (n + 1))
	    var W = [];
	    var len = 0; // first n + 1 entries
	    var nv = n + 1; // next n + 1 entries
	    var next = 2 * (n + 1); // next n + 1 entries
	    var head = 3 * (n + 1); // next n + 1 entries
	    var elen = 4 * (n + 1); // next n + 1 entries
	    var degree = 5 * (n + 1); // next n + 1 entries
	    var w = 6 * (n + 1); // next n + 1 entries
	    var hhead = 7 * (n + 1); // last n + 1 entries

	    // use P as workspace for last
	    var last = P;

	    // initialize quotient graph
	    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);

	    // initialize degree lists
	    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);

	    // minimum degree node
	    var mindeg = 0;

	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0,
	        k1 = void 0,
	        k2 = void 0,
	        e = void 0,
	        pj = void 0,
	        ln = void 0,
	        nvi = void 0,
	        pk = void 0,
	        eln = void 0,
	        p1 = void 0,
	        p2 = void 0,
	        pn = void 0,
	        h = void 0,
	        d = void 0;

	    // while (selecting pivots) do
	    while (nel < n) {
	      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
	      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
	      // many nodes have been eliminated.
	      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {}
	      if (W[next + k] !== -1) {
	        last[W[next + k]] = -1;
	      }
	      // remove k from degree list
	      W[head + mindeg] = W[next + k];
	      // elenk = |Ek|
	      var elenk = W[elen + k];
	      // # of nodes k represents
	      var nvk = W[nv + k];
	      // W[nv + k] nodes of A eliminated
	      nel += nvk;

	      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
	      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
	      // degree lists. All elements e in Ek are absorved into element k.
	      var dk = 0;
	      // flag k as in Lk
	      W[nv + k] = -nvk;
	      var p = cptr[k];
	      // do in place if W[elen + k] === 0
	      var pk1 = elenk === 0 ? p : cnz;
	      var pk2 = pk1;
	      for (k1 = 1; k1 <= elenk + 1; k1++) {
	        if (k1 > elenk) {
	          // search the nodes in k
	          e = k;
	          // list of nodes starts at cindex[pj]
	          pj = p;
	          // length of list of nodes in k
	          ln = W[len + k] - elenk;
	        } else {
	          // search the nodes in e
	          e = cindex[p++];
	          pj = cptr[e];
	          // length of list of nodes in e
	          ln = W[len + e];
	        }
	        for (k2 = 1; k2 <= ln; k2++) {
	          i = cindex[pj++];
	          // check  node i dead, or seen
	          if ((nvi = W[nv + i]) <= 0) {
	            continue;
	          }
	          // W[degree + Lk] += size of node i
	          dk += nvi;
	          // negate W[nv + i] to denote i in Lk
	          W[nv + i] = -nvi;
	          // place i in Lk
	          cindex[pk2++] = i;
	          if (W[next + i] !== -1) {
	            last[W[next + i]] = last[i];
	          }
	          // check we need to remove i from degree list
	          if (last[i] !== -1) {
	            W[next + last[i]] = W[next + i];
	          } else {
	            W[head + W[degree + i]] = W[next + i];
	          }
	        }
	        if (e !== k) {
	          // absorb e into k
	          cptr[e] = csFlip$$1(k);
	          // e is now a dead element
	          W[w + e] = 0;
	        }
	      }
	      // cindex[cnz...nzmax] is free
	      if (elenk !== 0) {
	        cnz = pk2;
	      }
	      // external degree of k - |Lk\i|
	      W[degree + k] = dk;
	      // element k is in cindex[pk1..pk2-1]
	      cptr[k] = pk1;
	      W[len + k] = pk2 - pk1;
	      // k is now an element
	      W[elen + k] = -2;

	      // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
	      // scan, no entry in the w array is greater than or equal to mark.

	      // clear w if necessary
	      mark = _wclear(mark, lemax, W, w, n);
	      // scan 1: find |Le\Lk|
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check if W[elen + i] empty, skip it
	        if ((eln = W[elen + i]) <= 0) {
	          continue;
	        }
	        // W[nv + i] was negated
	        nvi = -W[nv + i];
	        var wnvi = mark - nvi;
	        // scan Ei
	        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
	          e = cindex[p];
	          if (W[w + e] >= mark) {
	            // decrement |Le\Lk|
	            W[w + e] -= nvi;
	          } else if (W[w + e] !== 0) {
	            // ensure e is a live element, 1st time e seen in scan 1
	            W[w + e] = W[degree + e] + wnvi;
	          }
	        }
	      }

	      // degree update
	      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
	      // function h(i) for all nodes in Lk.

	      // scan2: degree update
	      for (pk = pk1; pk < pk2; pk++) {
	        // consider node i in Lk
	        i = cindex[pk];
	        p1 = cptr[i];
	        p2 = p1 + W[elen + i] - 1;
	        pn = p1;
	        // scan Ei
	        for (h = 0, d = 0, p = p1; p <= p2; p++) {
	          e = cindex[p];
	          // check e is an unabsorbed element
	          if (W[w + e] !== 0) {
	            // dext = |Le\Lk|
	            var dext = W[w + e] - mark;
	            if (dext > 0) {
	              // sum up the set differences
	              d += dext;
	              // keep e in Ei
	              cindex[pn++] = e;
	              // compute the hash of node i
	              h += e;
	            } else {
	              // aggressive absorb. e->k
	              cptr[e] = csFlip$$1(k);
	              // e is a dead element
	              W[w + e] = 0;
	            }
	          }
	        }
	        // W[elen + i] = |Ei|
	        W[elen + i] = pn - p1 + 1;
	        var p3 = pn;
	        var p4 = p1 + W[len + i];
	        // prune edges in Ai
	        for (p = p2 + 1; p < p4; p++) {
	          j = cindex[p];
	          // check node j dead or in Lk
	          var nvj = W[nv + j];
	          if (nvj <= 0) {
	            continue;
	          }
	          // degree(i) += |j|
	          d += nvj;
	          // place j in node list of i
	          cindex[pn++] = j;
	          // compute hash for node i
	          h += j;
	        }
	        // check for mass elimination
	        if (d === 0) {
	          // absorb i into k
	          cptr[i] = csFlip$$1(k);
	          nvi = -W[nv + i];
	          // |Lk| -= |i|
	          dk -= nvi;
	          // |k| += W[nv + i]
	          nvk += nvi;
	          nel += nvi;
	          W[nv + i] = 0;
	          // node i is dead
	          W[elen + i] = -1;
	        } else {
	          // update degree(i)
	          W[degree + i] = Math.min(W[degree + i], d);
	          // move first node to end
	          cindex[pn] = cindex[p3];
	          // move 1st el. to end of Ei
	          cindex[p3] = cindex[p1];
	          // add k as 1st element in of Ei
	          cindex[p1] = k;
	          // new len of adj. list of node i
	          W[len + i] = pn - p1 + 1;
	          // finalize hash of i
	          h = (h < 0 ? -h : h) % n;
	          // place i in hash bucket
	          W[next + i] = W[hhead + h];
	          W[hhead + h] = i;
	          // save hash of i in last[i]
	          last[i] = h;
	        }
	      }
	      // finalize |Lk|
	      W[degree + k] = dk;
	      lemax = Math.max(lemax, dk);
	      // clear w
	      mark = _wclear(mark + lemax, lemax, W, w, n);

	      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
	      // If two nodes have identical adjacency lists, their hash functions wil be identical.
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check i is dead, skip it
	        if (W[nv + i] >= 0) {
	          continue;
	        }
	        // scan hash bucket of node i
	        h = last[i];
	        i = W[hhead + h];
	        // hash bucket will be empty
	        W[hhead + h] = -1;
	        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
	          ln = W[len + i];
	          eln = W[elen + i];
	          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
	            W[w + cindex[p]] = mark;
	          }
	          var jlast = i;
	          // compare i with all j
	          for (j = W[next + i]; j !== -1;) {
	            var ok = W[len + j] === ln && W[elen + j] === eln;
	            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
	              // compare i and j
	              if (W[w + cindex[p]] !== mark) {
	                ok = 0;
	              }
	            }
	            // check i and j are identical
	            if (ok) {
	              // absorb j into i
	              cptr[j] = csFlip$$1(i);
	              W[nv + i] += W[nv + j];
	              W[nv + j] = 0;
	              // node j is dead
	              W[elen + j] = -1;
	              // delete j from hash bucket
	              j = W[next + j];
	              W[next + jlast] = j;
	            } else {
	              // j and i are different
	              jlast = j;
	              j = W[next + j];
	            }
	          }
	        }
	      }

	      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
	      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
	      for (p = pk1, pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check  i is dead, skip it
	        if ((nvi = -W[nv + i]) <= 0) {
	          continue;
	        }
	        // restore W[nv + i]
	        W[nv + i] = nvi;
	        // compute external degree(i)
	        d = W[degree + i] + dk - nvi;
	        d = Math.min(d, n - nel - nvi);
	        if (W[head + d] !== -1) {
	          last[W[head + d]] = i;
	        }
	        // put i back in degree list
	        W[next + i] = W[head + d];
	        last[i] = -1;
	        W[head + d] = i;
	        // find new minimum degree
	        mindeg = Math.min(mindeg, d);
	        W[degree + i] = d;
	        // place i in Lk
	        cindex[p++] = i;
	      }
	      // # nodes absorbed into k
	      W[nv + k] = nvk;
	      // length of adj list of element k
	      if ((W[len + k] = p - pk1) === 0) {
	        // k is a root of the tree
	        cptr[k] = -1;
	        // k is now a dead element
	        W[w + k] = 0;
	      }
	      if (elenk !== 0) {
	        // free unused space in Lk
	        cnz = p;
	      }
	    }

	    // Postordering. The elimination is complete, but no permutation has been computed. All that is left
	    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
	    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
	    // is computed. The tree is restored by unflipping all of ptr.

	    // fix assembly tree
	    for (i = 0; i < n; i++) {
	      cptr[i] = csFlip$$1(cptr[i]);
	    }
	    for (j = 0; j <= n; j++) {
	      W[head + j] = -1;
	    }
	    // place unordered nodes in lists
	    for (j = n; j >= 0; j--) {
	      // skip if j is an element
	      if (W[nv + j] > 0) {
	        continue;
	      }
	      // place j in list of its parent
	      W[next + j] = W[head + cptr[j]];
	      W[head + cptr[j]] = j;
	    }
	    // place elements in lists
	    for (e = n; e >= 0; e--) {
	      // skip unless e is an element
	      if (W[nv + e] <= 0) {
	        continue;
	      }
	      if (cptr[e] !== -1) {
	        // place e in list of its parent
	        W[next + e] = W[head + cptr[e]];
	        W[head + cptr[e]] = e;
	      }
	    }
	    // postorder the assembly tree
	    for (k = 0, i = 0; i <= n; i++) {
	      if (cptr[i] === -1) {
	        k = csTdfs$$1(i, k, W, head, next, P, w);
	      }
	    }
	    // remove last item in array
	    P.splice(P.length - 1, 1);
	    // return P
	    return P;
	  };

	  /**
	   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
	   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
	   *
	   * Order: 0
	   *   A natural ordering P=null matrix is returned.
	   *
	   * Order: 1
	   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
	   *   P = M + M'
	   *
	   * Order: 2
	   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
	   *   P = M' * M
	   *
	   * Order: 3
	   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
	   *   P = M' * M
	   */
	  function _createTargetMatrix(order, a, m, n, dense) {
	    // compute A'
	    var at = transpose$$1(a);

	    // check order = 1, matrix must be square
	    if (order === 1 && n === m) {
	      // C = A + A'
	      return add$$1(a, at);
	    }

	    // check order = 2, drop dense columns from M'
	    if (order === 2) {
	      // transpose arrays
	      var tindex = at._index;
	      var tptr = at._ptr;
	      // new column index
	      var p2 = 0;
	      // loop A' columns (rows)
	      for (var j = 0; j < m; j++) {
	        // column j of AT starts here
	        var p = tptr[j];
	        // new column j starts here
	        tptr[j] = p2;
	        // skip dense col j
	        if (tptr[j + 1] - p > dense) {
	          continue;
	        }
	        // map rows in column j of A
	        for (var p1 = tptr[j + 1]; p < p1; p++) {
	          tindex[p2++] = tindex[p];
	        }
	      }
	      // finalize AT
	      tptr[m] = p2;
	      // recreate A from new transpose matrix
	      a = transpose$$1(at);
	      // use A' * A
	      return multiply$$1(at, a);
	    }

	    // use A' * A, square or rectangular matrix
	    return multiply$$1(at, a);
	  }

	  /**
	   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
	   *
	   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
	   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
	   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
	   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
	   */
	  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
	    // Initialize quotient graph
	    for (var k = 0; k < n; k++) {
	      W[len + k] = cptr[k + 1] - cptr[k];
	    }
	    W[len + n] = 0;
	    // initialize workspace
	    for (var i = 0; i <= n; i++) {
	      // degree list i is empty
	      W[head + i] = -1;
	      last[i] = -1;
	      W[next + i] = -1;
	      // hash list i is empty
	      W[hhead + i] = -1;
	      // node i is just one node
	      W[nv + i] = 1;
	      // node i is alive
	      W[w + i] = 1;
	      // Ek of node i is empty
	      W[elen + i] = 0;
	      // degree of node i
	      W[degree + i] = W[len + i];
	    }
	    // clear w
	    var mark = _wclear(0, 0, W, w, n);
	    // n is a dead element
	    W[elen + n] = -2;
	    // n is a root of assembly tree
	    cptr[n] = -1;
	    // n is a dead element
	    W[w + n] = 0;
	    // return mark
	    return mark;
	  }

	  /**
	   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
	   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
	   * output permutation p.
	   */
	  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
	    // result
	    var nel = 0;
	    // loop columns
	    for (var i = 0; i < n; i++) {
	      // degree @ i
	      var d = W[degree + i];
	      // check node i is empty
	      if (d === 0) {
	        // element i is dead
	        W[elen + i] = -2;
	        nel++;
	        // i is a root of assembly tree
	        cptr[i] = -1;
	        W[w + i] = 0;
	      } else if (d > dense) {
	        // absorb i into element n
	        W[nv + i] = 0;
	        // node i is dead
	        W[elen + i] = -1;
	        nel++;
	        cptr[i] = csFlip$$1(n);
	        W[nv + n]++;
	      } else {
	        var h = W[head + d];
	        if (h !== -1) {
	          last[h] = i;
	        }
	        // put node i in degree list d
	        W[next + i] = W[head + d];
	        W[head + d] = i;
	      }
	    }
	    return nel;
	  }

	  function _wclear(mark, lemax, W, w, n) {
	    if (mark < 2 || mark + lemax < 0) {
	      for (var k = 0; k < n; k++) {
	        if (W[w + k] !== 0) {
	          W[w + k] = 1;
	        }
	      }
	      mark = 2;
	    }
	    // at this point, W [0..n-1] < mark holds
	    return mark;
	  }

	  function _diag(i, j) {
	    return i !== j;
	  }

	  return csAmd;
	}

	var name$1t = 'csAmd';
	var path$z = 'algebra.sparse';
	var factory_1$1D = factory$1D;

	var csAmd = {
		name: name$1t,
		path: path$z,
		factory: factory_1$1D
	};

	function factory$1E(type) {
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Permutes a sparse matrix C = P * A * Q
	   *
	   * @param {Matrix}  a               The Matrix A
	   * @param {Array}   pinv            The row permutation vector
	   * @param {Array}   q               The column permutation vector
	   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
	   *
	   * @return {Matrix}                 C = P * A * Q, null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csPermute = function csPermute(a, pinv, q, values) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // c arrays
	    var cvalues = values && a._values ? [] : null;
	    var cindex = []; // (aptr[n])
	    var cptr = []; // (n + 1)
	    // initialize vars
	    var nz = 0;
	    // loop columns
	    for (var k = 0; k < n; k++) {
	      // column k of C is column q[k] of A
	      cptr[k] = nz;
	      // apply column permutation
	      var j = q ? q[k] : k;
	      // loop values in column j of A
	      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
	        // row i of A is row pinv[i] of C
	        var r = pinv ? pinv[aindex[t]] : aindex[t];
	        // index
	        cindex[nz] = r;
	        // check we need to populate values
	        if (cvalues) {
	          cvalues[nz] = avalues[t];
	        }
	        // increment number of nonzero elements
	        nz++;
	      }
	    }
	    // finalize the last column of C
	    cptr[n] = nz;
	    // return C matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [m, n],
	      datatype: adt
	    });
	  };

	  return csPermute;
	}

	var name$1u = 'csPermute';
	var path$A = 'algebra.sparse';
	var factory_1$1E = factory$1E;

	var csPermute = {
		name: name$1u,
		path: path$A,
		factory: factory_1$1E
	};

	function factory$1F() {
	  /**
	   * Computes the elimination tree of Matrix A (using triu(A)) or the
	   * elimination tree of A'A without forming A'A.
	   *
	   * @param {Matrix}  a               The A Matrix
	   * @param {boolean} ata             A value of true the function computes the etree of A'A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csEtree = function csEtree(a, ata) {
	    // check inputs
	    if (!a) {
	      return null;
	    }
	    // a arrays
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];

	    // allocate result
	    var parent = []; // (n)

	    // allocate workspace
	    var w = []; // (n + (ata ? m : 0))
	    var ancestor = 0; // first n entries in w
	    var prev = n; // last m entries (ata = true)

	    var i = void 0,
	        inext = void 0;

	    // check we are calculating A'A
	    if (ata) {
	      // initialize workspace
	      for (i = 0; i < m; i++) {
	        w[prev + i] = -1;
	      }
	    }
	    // loop columns
	    for (var k = 0; k < n; k++) {
	      // node k has no parent yet
	      parent[k] = -1;
	      // nor does k have an ancestor
	      w[ancestor + k] = -1;
	      // values in column k
	      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // row
	        var r = aindex[p];
	        // node
	        i = ata ? w[prev + r] : r;
	        // traverse from i to k
	        for (; i !== -1 && i < k; i = inext) {
	          // inext = ancestor of i
	          inext = w[ancestor + i];
	          // path compression
	          w[ancestor + i] = k;
	          // check no anc., parent is k
	          if (inext === -1) {
	            parent[i] = k;
	          }
	        }
	        if (ata) {
	          w[prev + r] = k;
	        }
	      }
	    }
	    return parent;
	  };

	  return csEtree;
	}

	var name$1v = 'csEtree';
	var path$B = 'algebra.sparse';
	var factory_1$1F = factory$1F;

	var csEtree = {
		name: name$1v,
		path: path$B,
		factory: factory_1$1F
	};

	function factory$1G(type, config, load) {
	  var csTdfs$$1 = load(csTdfs);

	  /**
	   * Post order a tree of forest
	   *
	   * @param {Array}   parent          The tree or forest
	   * @param {Number}  n               Number of columns
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csPost = function csPost(parent, n) {
	    // check inputs
	    if (!parent) {
	      return null;
	    }
	    // vars
	    var k = 0;
	    var j = void 0;
	    // allocate result
	    var post = []; // (n)
	    // workspace, head: first n entries, next: next n entries, stack: last n entries
	    var w = []; // (3 * n)
	    var head = 0;
	    var next = n;
	    var stack = 2 * n;
	    // initialize workspace
	    for (j = 0; j < n; j++) {
	      // empty linked lists
	      w[head + j] = -1;
	    }
	    // traverse nodes in reverse order
	    for (j = n - 1; j >= 0; j--) {
	      // check j is a root
	      if (parent[j] === -1) {
	        continue;
	      }
	      // add j to list of its parent
	      w[next + j] = w[head + parent[j]];
	      w[head + parent[j]] = j;
	    }
	    // loop nodes
	    for (j = 0; j < n; j++) {
	      // skip j if it is not a root
	      if (parent[j] !== -1) {
	        continue;
	      }
	      // depth-first search
	      k = csTdfs$$1(j, k, w, head, next, post, stack);
	    }
	    return post;
	  };

	  return csPost;
	}

	var name$1w = 'csPost';
	var path$C = 'algebra.sparse';
	var factory_1$1G = factory$1G;

	var csPost = {
		name: name$1w,
		path: path$C,
		factory: factory_1$1G
	};

	function factory$1H() {
	  /**
	   * This function determines if j is a leaf of the ith row subtree.
	   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
	   *
	   * @param {Number}  i               The ith row subtree
	   * @param {Number}  j               The node to test
	   * @param {Array}   w               The workspace array
	   * @param {Number}  first           The index offset within the workspace for the first array
	   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
	   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
	   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
	   *
	   * @return {Object}
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csLeaf = function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
	    var s = void 0,
	        sparent = void 0,
	        jprev = void 0;

	    // our result
	    var jleaf = 0;
	    var q = void 0;

	    // check j is a leaf
	    if (i <= j || w[first + j] <= w[maxfirst + i]) {
	      return -1;
	    }
	    // update max first[j] seen so far
	    w[maxfirst + i] = w[first + j];
	    // jprev = previous leaf of ith subtree
	    jprev = w[prevleaf + i];
	    w[prevleaf + i] = j;

	    // check j is first or subsequent leaf
	    if (jprev === -1) {
	      // 1st leaf, q = root of ith subtree
	      jleaf = 1;
	      q = i;
	    } else {
	      // update jleaf
	      jleaf = 2;
	      // q = least common ancester (jprev,j)
	      for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {}
	      for (s = jprev; s !== q; s = sparent) {
	        // path compression
	        sparent = w[ancestor + s];
	        w[ancestor + s] = q;
	      }
	    }
	    return {
	      jleaf: jleaf,
	      q: q
	    };
	  };

	  return csLeaf;
	}

	var name$1x = 'csLeaf';
	var path$D = 'algebra.sparse';
	var factory_1$1H = factory$1H;

	var csLeaf = {
		name: name$1x,
		path: path$D,
		factory: factory_1$1H
	};

	function factory$1I(type, config, load) {
	  var transpose$$1 = load(transpose);

	  var csLeaf$$1 = load(csLeaf);

	  /**
	   * Computes the column counts using the upper triangular part of A.
	   * It transposes A internally, none of the input parameters are modified.
	   *
	   * @param {Matrix} a           The sparse matrix A
	   *
	   * @param {Matrix} ata         Count the columns of A'A instead
	   *
	   * @return                     An array of size n of the column counts or null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csCounts = function csCounts(a, parent, post, ata) {
	    // check inputs
	    if (!a || !parent || !post) {
	      return null;
	    }
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];
	    // variables
	    var i = void 0,
	        j = void 0,
	        k = void 0,
	        J = void 0,
	        p = void 0,
	        p0 = void 0,
	        p1 = void 0;

	    // workspace size
	    var s = 4 * n + (ata ? n + m + 1 : 0);
	    // allocate workspace
	    var w = []; // (s)
	    var ancestor = 0; // first n entries
	    var maxfirst = n; // next n entries
	    var prevleaf = 2 * n; // next n entries
	    var first = 3 * n; // next n entries
	    var head = 4 * n; // next n + 1 entries (used when ata is true)
	    var next = 5 * n + 1; // last entries in workspace
	    // clear workspace w[0..s-1]
	    for (k = 0; k < s; k++) {
	      w[k] = -1;
	    }

	    // allocate result
	    var colcount = []; // (n)

	    // AT = A'
	    var at = transpose$$1(a);
	    // at arrays
	    var tindex = at._index;
	    var tptr = at._ptr;

	    // find w[first + j]
	    for (k = 0; k < n; k++) {
	      j = post[k];
	      // colcount[j]=1 if j is a leaf
	      colcount[j] = w[first + j] === -1 ? 1 : 0;
	      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
	        w[first + j] = k;
	      }
	    }

	    // initialize ata if needed
	    if (ata) {
	      // invert post
	      for (k = 0; k < n; k++) {
	        w[post[k]] = k;
	      }
	      // loop rows (columns in AT)
	      for (i = 0; i < m; i++) {
	        // values in column i of AT
	        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
	          k = Math.min(k, w[tindex[p]]);
	        }
	        // place row i in linked list k
	        w[next + i] = w[head + k];
	        w[head + k] = i;
	      }
	    }

	    // each node in its own set
	    for (i = 0; i < n; i++) {
	      w[ancestor + i] = i;
	    }

	    for (k = 0; k < n; k++) {
	      // j is the kth node in postordered etree
	      j = post[k];
	      // check j is not a root
	      if (parent[j] !== -1) {
	        colcount[parent[j]]--;
	      }

	      // J=j for LL'=A case
	      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
	        for (p = tptr[J]; p < tptr[J + 1]; p++) {
	          i = tindex[p];
	          var r = csLeaf$$1(i, j, w, first, maxfirst, prevleaf, ancestor);
	          // check A(i,j) is in skeleton
	          if (r.jleaf >= 1) {
	            colcount[j]++;
	          }
	          // check account for overlap in q
	          if (r.jleaf === 2) {
	            colcount[r.q]--;
	          }
	        }
	      }
	      if (parent[j] !== -1) {
	        w[ancestor + j] = parent[j];
	      }
	    }
	    // sum up colcount's of each child
	    for (j = 0; j < n; j++) {
	      if (parent[j] !== -1) {
	        colcount[parent[j]] += colcount[j];
	      }
	    }
	    return colcount;
	  };

	  return csCounts;
	}

	var name$1y = 'csCounts';
	var path$E = 'algebra.sparse';
	var factory_1$1I = factory$1I;

	var csCounts = {
		name: name$1y,
		path: path$E,
		factory: factory_1$1I
	};

	function factory$1J(type, config, load) {
	  var csAmd$$1 = load(csAmd);
	  var csPermute$$1 = load(csPermute);
	  var csEtree$$1 = load(csEtree);
	  var csPost$$1 = load(csPost);
	  var csCounts$$1 = load(csCounts);

	  /**
	   * Symbolic ordering and analysis for QR and LU decompositions.
	   *
	   * @param {Number}  order           The ordering strategy (see csAmd for more details)
	   * @param {Matrix}  a               The A matrix
	   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
	   *                                  symbolic ordering and analysis for LU decomposition (false)
	   *
	   * @return {Object}                 The Symbolic ordering and analysis for matrix A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csSqr = function csSqr(order, a, qr) {
	    // a arrays
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // vars
	    var k = void 0;
	    // symbolic analysis result
	    var s = {};
	    // fill-reducing ordering
	    s.q = csAmd$$1(order, a);
	    // validate results
	    if (order && !s.q) {
	      return null;
	    }
	    // QR symbolic analysis
	    if (qr) {
	      // apply permutations if needed
	      var c = order ? csPermute$$1(a, null, s.q, 0) : a;
	      // etree of C'*C, where C=A(:,q)
	      s.parent = csEtree$$1(c, 1);
	      // post order elimination tree
	      var post = csPost$$1(s.parent, n);
	      // col counts chol(C'*C)
	      s.cp = csCounts$$1(c, s.parent, post, 1);
	      // check we have everything needed to calculate number of nonzero elements
	      if (c && s.parent && s.cp && _vcount(c, s)) {
	        // calculate number of nonzero elements
	        for (s.unz = 0, k = 0; k < n; k++) {
	          s.unz += s.cp[k];
	        }
	      }
	    } else {
	      // for LU factorization only, guess nnz(L) and nnz(U)
	      s.unz = 4 * aptr[n] + n;
	      s.lnz = s.unz;
	    }
	    // return result S
	    return s;
	  };

	  /**
	   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
	   */
	  function _vcount(a, s) {
	    // a arrays
	    var aptr = a._ptr;
	    var aindex = a._index;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // initialize s arrays
	    s.pinv = []; // (m + n)
	    s.leftmost = []; // (m)
	    // vars
	    var parent = s.parent;
	    var pinv = s.pinv;
	    var leftmost = s.leftmost;
	    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
	    var w = []; // (m + 3 * n)
	    var next = 0;
	    var head = m;
	    var tail = m + n;
	    var nque = m + 2 * n;
	    // vars
	    var i = void 0,
	        k = void 0,
	        p = void 0,
	        p0 = void 0,
	        p1 = void 0;
	    // initialize w
	    for (k = 0; k < n; k++) {
	      // queue k is empty
	      w[head + k] = -1;
	      w[tail + k] = -1;
	      w[nque + k] = 0;
	    }
	    // initialize row arrays
	    for (i = 0; i < m; i++) {
	      leftmost[i] = -1;
	    }
	    // loop columns backwards
	    for (k = n - 1; k >= 0; k--) {
	      // values & index for column k
	      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // leftmost[i] = min(find(A(i,:)))
	        leftmost[aindex[p]] = k;
	      }
	    }
	    // scan rows in reverse order
	    for (i = m - 1; i >= 0; i--) {
	      // row i is not yet ordered
	      pinv[i] = -1;
	      k = leftmost[i];
	      // check row i is empty
	      if (k === -1) {
	        continue;
	      }
	      // first row in queue k
	      if (w[nque + k]++ === 0) {
	        w[tail + k] = i;
	      }
	      // put i at head of queue k
	      w[next + i] = w[head + k];
	      w[head + k] = i;
	    }
	    s.lnz = 0;
	    s.m2 = m;
	    // find row permutation and nnz(V)
	    for (k = 0; k < n; k++) {
	      // remove row i from queue k
	      i = w[head + k];
	      // count V(k,k) as nonzero
	      s.lnz++;
	      // add a fictitious row
	      if (i < 0) {
	        i = s.m2++;
	      }
	      // associate row i with V(:,k)
	      pinv[i] = k;
	      // skip if V(k+1:m,k) is empty
	      if (--nque[k] <= 0) {
	        continue;
	      }
	      // nque[k] is nnz (V(k+1:m,k))
	      s.lnz += w[nque + k];
	      // move all rows to parent of k
	      var pa = parent[k];
	      if (pa !== -1) {
	        if (w[nque + pa] === 0) {
	          w[tail + pa] = w[tail + k];
	        }
	        w[next + w[tail + k]] = w[head + pa];
	        w[head + pa] = w[next + i];
	        w[nque + pa] += w[nque + k];
	      }
	    }
	    for (i = 0; i < m; i++) {
	      if (pinv[i] < 0) {
	        pinv[i] = k++;
	      }
	    }
	    return true;
	  }

	  return csSqr;
	}

	var name$1z = 'csSqr';
	var path$F = 'algebra.sparse';
	var factory_1$1J = factory$1J;

	var csSqr = {
		name: name$1z,
		path: path$F,
		factory: factory_1$1J
	};

	var nearlyEqual$5 = number.nearlyEqual;


	function factory$1K(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  var latex$$1 = latex;

	  /**
	   * Test whether value x is larger or equal to y.
	   *
	   * The function returns true when x is larger than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.largerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 1 + 1)         // returns false
	   *    math.largerEq(2, 1 + 1)       // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
	   */
	  var largerEq = typed('largerEq', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x >= y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x >= y || nearlyEqual$5(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gte(y) || nearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) !== -1;
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return largerEq(x.value, y.value);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, largerEq);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, largerEq, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, largerEq, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, largerEq);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return largerEq(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return largerEq(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return largerEq(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, largerEq, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, largerEq, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, largerEq, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, largerEq, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, largerEq, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, largerEq, true).valueOf();
	    }
	  });

	  largerEq.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['largerEq'] + '${args[1]}\\right)'
	  };

	  return largerEq;
	}

	var name$1A = 'largerEq';
	var factory_1$1K = factory$1K;

	var largerEq = {
		name: name$1A,
		factory: factory_1$1K
	};

	function factory$1L() {
	  /**
	   * Checks if the node at w[j] is marked
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csMarked = function csMarked(w, j) {
	    // check node is marked
	    return w[j] < 0;
	  };

	  return csMarked;
	}

	var name$1B = 'csMarked';
	var path$G = 'algebra.sparse';
	var factory_1$1L = factory$1L;

	var csMarked = {
		name: name$1B,
		path: path$G,
		factory: factory_1$1L
	};

	function factory$1M(type, config, load) {
	  var csFlip$$1 = load(csFlip);

	  /**
	   * Marks the node at w[j]
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csMark = function csMark(w, j) {
	    // mark w[j]
	    w[j] = csFlip$$1(w[j]);
	  };

	  return csMark;
	}

	var name$1C = 'csMark';
	var path$H = 'algebra.sparse';
	var factory_1$1M = factory$1M;

	var csMark = {
		name: name$1C,
		path: path$H,
		factory: factory_1$1M
	};

	function factory$1N(type, config, load) {
	  var csFlip$$1 = load(csFlip);

	  /**
	   * Flips the value if it is negative of returns the same value otherwise.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csUnflip = function csUnflip(i) {
	    // flip the value if it is negative
	    return i < 0 ? csFlip$$1(i) : i;
	  };

	  return csUnflip;
	}

	var name$1D = 'csUnflip';
	var path$I = 'algebra.sparse';
	var factory_1$1N = factory$1N;

	var csUnflip = {
		name: name$1D,
		path: path$I,
		factory: factory_1$1N
	};

	function factory$1O(type, config, load) {
	  var csMarked$$1 = load(csMarked);
	  var csMark$$1 = load(csMark);
	  var csUnflip$$1 = load(csUnflip);

	  /**
	   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
	   * at nodes in B (see csReach()).
	   *
	   * @param {Number}  j               The starting node for the DFS algorithm
	   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
	   * @param {Number}  top             Start index in stack xi[top..n-1]
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   *
	   * @return {Number}                 New value of top
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csDfs = function csDfs(j, g, top, xi, pinv) {
	    // g arrays
	    var index = g._index;
	    var ptr = g._ptr;
	    var size = g._size;
	    // columns
	    var n = size[1];
	    // vars
	    var i = void 0,
	        p = void 0,
	        p2 = void 0;
	    // initialize head
	    var head = 0;
	    // initialize the recursion stack
	    xi[0] = j;
	    // loop
	    while (head >= 0) {
	      // get j from the top of the recursion stack
	      j = xi[head];
	      // apply permutation vector
	      var jnew = pinv ? pinv[j] : j;
	      // check node j is marked
	      if (!csMarked$$1(ptr, j)) {
	        // mark node j as visited
	        csMark$$1(ptr, j);
	        // update stack (last n entries in xi)
	        xi[n + head] = jnew < 0 ? 0 : csUnflip$$1(ptr[jnew]);
	      }
	      // node j done if no unvisited neighbors
	      var done = 1;
	      // examine all neighbors of j, stack (last n entries in xi)
	      for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip$$1(ptr[jnew + 1]); p < p2; p++) {
	        // consider neighbor node i
	        i = index[p];
	        // check we have visited node i, skip it
	        if (csMarked$$1(ptr, i)) {
	          continue;
	        }
	        // pause depth-first search of node j, update stack (last n entries in xi)
	        xi[n + head] = p;
	        // start dfs at node i
	        xi[++head] = i;
	        // node j is not done
	        done = 0;
	        // break, to start dfs(i)
	        break;
	      }
	      // check depth-first search at node j is done
	      if (done) {
	        // remove j from the recursion stack
	        head--;
	        // and place in the output stack
	        xi[--top] = j;
	      }
	    }
	    return top;
	  };

	  return csDfs;
	}

	var name$1E = 'csDfs';
	var path$J = 'algebra.sparse';
	var factory_1$1O = factory$1O;

	var csDfs = {
		name: name$1E,
		path: path$J,
		factory: factory_1$1O
	};

	function factory$1P(type, config, load) {
	  var csDfs$$1 = load(csDfs);
	  var csMarked$$1 = load(csMarked);
	  var csMark$$1 = load(csMark);

	  /**
	   * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
	   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
	   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csReach = function csReach(g, b, k, xi, pinv) {
	    // g arrays
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // b arrays
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // columns
	    var n = gsize[1];
	    // vars
	    var p = void 0,
	        p0 = void 0,
	        p1 = void 0;
	    // initialize top
	    var top = n;
	    // loop column indeces in B
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      // node i
	      var i = bindex[p];
	      // check node i is marked
	      if (!csMarked$$1(gptr, i)) {
	        // start a dfs at unmarked node i
	        top = csDfs$$1(i, g, top, xi, pinv);
	      }
	    }
	    // loop columns from top -> n - 1
	    for (p = top; p < n; p++) {
	      // restore G
	      csMark$$1(gptr, xi[p]);
	    }
	    return top;
	  };

	  return csReach;
	}

	var name$1F = 'csReach';
	var path$K = 'algebra.sparse';
	var factory_1$1P = factory$1P;

	var csReach = {
		name: name$1F,
		path: path$K,
		factory: factory_1$1P
	};

	function factory$1Q(type, config, load) {
	  var divideScalar$$1 = load(divideScalar);
	  var multiply$$1 = load(multiply);
	  var subtract$$1 = load(subtract);

	  var csReach$$1 = load(csReach);

	  /**
	   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
	   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
	   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
	   * is upper triangular with the diagonal entry as the last entry in each column.
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   x               The soluton to the linear system G * x = b
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   * @param {boolean} lo              The lower (true) upper triangular (false) flag
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csSpsolve = function csSpsolve(g, b, k, xi, x, pinv, lo) {
	    // g arrays
	    var gvalues = g._values;
	    var gindex = g._index;
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // columns
	    var n = gsize[1];
	    // b arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // vars
	    var p = void 0,
	        p0 = void 0,
	        p1 = void 0,
	        q = void 0;
	    // xi[top..n-1] = csReach(B(:,k))
	    var top = csReach$$1(g, b, k, xi, pinv);
	    // clear x
	    for (p = top; p < n; p++) {
	      x[xi[p]] = 0;
	    }
	    // scatter b
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      x[bindex[p]] = bvalues[p];
	    }
	    // loop columns
	    for (var px = top; px < n; px++) {
	      // x array index for px
	      var j = xi[px];
	      // apply permutation vector (U x = b), j maps to column J of G
	      var J = pinv ? pinv[j] : j;
	      // check column J is empty
	      if (J < 0) {
	        continue;
	      }
	      // column value indeces in G, p0 <= p < p1
	      p0 = gptr[J];
	      p1 = gptr[J + 1];
	      // x(j) /= G(j,j)
	      x[j] = divideScalar$$1(x[j], gvalues[lo ? p0 : p1 - 1]);
	      // first entry L(j,j)
	      p = lo ? p0 + 1 : p0;
	      q = lo ? p1 : p1 - 1;
	      // loop
	      for (; p < q; p++) {
	        // row
	        var i = gindex[p];
	        // x(i) -= G(i,j) * x(j)
	        x[i] = subtract$$1(x[i], multiply$$1(gvalues[p], x[j]));
	      }
	    }
	    // return top of stack
	    return top;
	  };

	  return csSpsolve;
	}

	var name$1G = 'csSpsolve';
	var path$L = 'algebra.sparse';
	var factory_1$1Q = factory$1Q;

	var csSpsolve = {
		name: name$1G,
		path: path$L,
		factory: factory_1$1Q
	};

	function factory$1R(type, config, load) {
	  var abs$$1 = load(abs);
	  var divideScalar$$1 = load(divideScalar);
	  var multiply$$1 = load(multiply);

	  var larger$$1 = load(larger);
	  var largerEq$$1 = load(largerEq);

	  var csSpsolve$$1 = load(csSpsolve);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
	   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
	   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
	   * L * U = A(p, q), where p is the inverse of pinv.
	   *
	   * @param {Matrix}  m               The A Matrix to factorize
	   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
	   *                                  column ordering q
	   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Number}                 The numeric LU factorization of A or null
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csLu = function csLu(m, s, tol) {
	    // validate input
	    if (!m) {
	      return null;
	    }
	    // m arrays
	    var size = m._size;
	    // columns
	    var n = size[1];
	    // symbolic analysis result
	    var q = void 0;
	    var lnz = 100;
	    var unz = 100;
	    // update symbolic analysis parameters
	    if (s) {
	      q = s.q;
	      lnz = s.lnz || lnz;
	      unz = s.unz || unz;
	    }
	    // L arrays
	    var lvalues = []; // (lnz)
	    var lindex = []; // (lnz)
	    var lptr = []; // (n + 1)
	    // L
	    var L = new SparseMatrix({
	      values: lvalues,
	      index: lindex,
	      ptr: lptr,
	      size: [n, n]
	    });
	    // U arrays
	    var uvalues = []; // (unz)
	    var uindex = []; // (unz)
	    var uptr = []; // (n + 1)
	    // U
	    var U = new SparseMatrix({
	      values: uvalues,
	      index: uindex,
	      ptr: uptr,
	      size: [n, n]
	    });
	    // inverse of permutation vector
	    var pinv = []; // (n)
	    // vars
	    var i = void 0,
	        p = void 0;
	    // allocate arrays
	    var x = []; // (n)
	    var xi = []; // (2 * n)
	    // initialize variables
	    for (i = 0; i < n; i++) {
	      // clear workspace
	      x[i] = 0;
	      // no rows pivotal yet
	      pinv[i] = -1;
	      // no cols of L yet
	      lptr[i + 1] = 0;
	    }
	    // reset number of nonzero elements in L and U
	    lnz = 0;
	    unz = 0;
	    // compute L(:,k) and U(:,k)
	    for (var k = 0; k < n; k++) {
	      // update ptr
	      lptr[k] = lnz;
	      uptr[k] = unz;
	      // apply column permutations if needed
	      var col = q ? q[k] : k;
	      // solve triangular system, x = L\A(:,col)
	      var top = csSpsolve$$1(L, m, col, xi, x, pinv, 1);
	      // find pivot
	      var ipiv = -1;
	      var a = -1;
	      // loop xi[] from top -> n
	      for (p = top; p < n; p++) {
	        // x[i] is nonzero
	        i = xi[p];
	        // check row i is not yet pivotal
	        if (pinv[i] < 0) {
	          // absolute value of x[i]
	          var xabs = abs$$1(x[i]);
	          // check absoulte value is greater than pivot value
	          if (larger$$1(xabs, a)) {
	            // largest pivot candidate so far
	            a = xabs;
	            ipiv = i;
	          }
	        } else {
	          // x(i) is the entry U(pinv[i],k)
	          uindex[unz] = pinv[i];
	          uvalues[unz++] = x[i];
	        }
	      }
	      // validate we found a valid pivot
	      if (ipiv === -1 || a <= 0) {
	        return null;
	      }
	      // update actual pivot column, give preference to diagonal value
	      if (pinv[col] < 0 && largerEq$$1(abs$$1(x[col]), multiply$$1(a, tol))) {
	        ipiv = col;
	      }
	      // the chosen pivot
	      var pivot = x[ipiv];
	      // last entry in U(:,k) is U(k,k)
	      uindex[unz] = k;
	      uvalues[unz++] = pivot;
	      // ipiv is the kth pivot row
	      pinv[ipiv] = k;
	      // first entry in L(:,k) is L(k,k) = 1
	      lindex[lnz] = ipiv;
	      lvalues[lnz++] = 1;
	      // L(k+1:n,k) = x / pivot
	      for (p = top; p < n; p++) {
	        // row
	        i = xi[p];
	        // check x(i) is an entry in L(:,k)
	        if (pinv[i] < 0) {
	          // save unpermuted row in L
	          lindex[lnz] = i;
	          // scale pivot column
	          lvalues[lnz++] = divideScalar$$1(x[i], pivot);
	        }
	        // x[0..n-1] = 0 for next k
	        x[i] = 0;
	      }
	    }
	    // update ptr
	    lptr[n] = lnz;
	    uptr[n] = unz;
	    // fix row indices of L for final pinv
	    for (p = 0; p < lnz; p++) {
	      lindex[p] = pinv[lindex[p]];
	    }
	    // trim arrays
	    lvalues.splice(lnz, lvalues.length - lnz);
	    lindex.splice(lnz, lindex.length - lnz);
	    uvalues.splice(unz, uvalues.length - unz);
	    uindex.splice(unz, uindex.length - unz);
	    // return LU factor
	    return {
	      L: L,
	      U: U,
	      pinv: pinv
	    };
	  };

	  return csLu;
	}

	var name$1H = 'csLu';
	var path$M = 'algebra.sparse';
	var factory_1$1R = factory$1R;

	var csLu = {
		name: name$1H,
		path: path$M,
		factory: factory_1$1R
	};

	var number$4 = utils.number;
	var isInteger$7 = number$4.isInteger;

	function factory$1S(type, config, load, typed) {
	  var csSqr$$1 = load(csSqr);
	  var csLu$$1 = load(csLu);

	  /**
	   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
	   *
	   * `P * A * Q = L * U`
	   *
	   * Syntax:
	   *
	   *    math.slu(A, order, threshold)
	   *
	   * Examples:
	   *
	   *    const A = math.sparse([[4,3], [6, 3]])
	   *    math.slu(A, 1, 0.001)
	   *    // returns:
	   *    // {
	   *    //   L: [[1, 0], [1.5, 1]]
	   *    //   U: [[4, 3], [0, -1.5]]
	   *    //   p: [0, 1]
	   *    //   q: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    lup, lsolve, usolve, lusolve
	   *
	   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
	   * @param {Number}       order          The Symbolic Ordering and Analysis order:
	   *                                       0 - Natural ordering, no permutation vector q is returned
	   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
	   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
	   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
	   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
	   *                                           A dense row is a row with more than 10*sqr(columns) entries.
	   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
	   */
	  var slu = typed('slu', {

	    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
	      // verify order
	      if (!isInteger$7(order) || order < 0 || order > 3) {
	        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
	      }
	      // verify threshold
	      if (threshold < 0 || threshold > 1) {
	        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
	      }

	      // perform symbolic ordering and analysis
	      var s = csSqr$$1(order, a, false);

	      // perform lu decomposition
	      var f = csLu$$1(a, s, threshold);

	      // return decomposition
	      return {
	        L: f.L,
	        U: f.U,
	        p: f.pinv,
	        q: s.q,
	        toString: function toString() {
	          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
	        }
	      };
	    }
	  });

	  return slu;
	}

	var name$1I = 'slu';
	var factory_1$1S = factory$1S;

	var slu = {
		name: name$1I,
		factory: factory_1$1S
	};

	var string$7 = utils.string;
	var array$4 = utils.array;

	var isArray$3 = Array.isArray;

	function factory$1T(type) {
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Validates matrix and column vector b for backward/forward substitution algorithms.
	   *
	   * @param {Matrix} m            An N x N matrix
	   * @param {Array | Matrix} b    A column vector
	   * @param {Boolean} copy        Return a copy of vector b
	   *
	   * @return {DenseMatrix}        Dense column vector b
	   */
	  var solveValidation = function solveValidation(m, b, copy) {
	    // matrix size
	    var size = m.size();
	    // validate matrix dimensions
	    if (size.length !== 2) {
	      throw new RangeError('Matrix must be two dimensional (size: ' + string$7.format(size) + ')');
	    }
	    // rows & columns
	    var rows = size[0];
	    var columns = size[1];
	    // validate rows & columns
	    if (rows !== columns) {
	      throw new RangeError('Matrix must be square (size: ' + string$7.format(size) + ')');
	    }
	    // vars
	    var data = void 0,
	        i = void 0,
	        bdata = void 0;
	    // check b is matrix
	    if (type.isMatrix(b)) {
	      // matrix size
	      var msize = b.size();
	      // vector
	      if (msize.length === 1) {
	        // check vector length
	        if (msize[0] !== rows) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        // create data array
	        data = [];
	        // matrix data (DenseMatrix)
	        bdata = b._data;
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [bdata[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // two dimensions
	      if (msize.length === 2) {
	        // array must be a column vector
	        if (msize[0] !== rows || msize[1] !== 1) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        // check matrix type
	        if (type.isDenseMatrix(b)) {
	          // check a copy is needed
	          if (copy) {
	            // create data array
	            data = [];
	            // matrix data (DenseMatrix)
	            bdata = b._data;
	            // loop b data
	            for (i = 0; i < rows; i++) {
	              // row array
	              data[i] = [bdata[i][0]];
	            }
	            // return Dense Matrix
	            return new DenseMatrix({
	              data: data,
	              size: [rows, 1],
	              datatype: b._datatype
	            });
	          }
	          // b is already a column vector
	          return b;
	        }
	        // create data array
	        data = [];
	        for (i = 0; i < rows; i++) {
	          data[i] = [0];
	        }
	        // sparse matrix arrays
	        var values = b._values;
	        var index = b._index;
	        var ptr = b._ptr;
	        // loop values in column 0
	        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
	          // row
	          i = index[k];
	          // add to data
	          data[i][0] = values[k];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	    // check b is array
	    if (isArray$3(b)) {
	      // size
	      var asize = array$4.size(b);
	      // check matrix dimensions, vector
	      if (asize.length === 1) {
	        // check vector length
	        if (asize[0] !== rows) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        // create data array
	        data = [];
	        // loop b
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      if (asize.length === 2) {
	        // array must be a column vector
	        if (asize[0] !== rows || asize[1] !== 1) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        }
	        // create data array
	        data = [];
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i][0]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	  };

	  return solveValidation;
	}

	var factory_1$1T = factory$1T;

	var solveValidation = {
		factory: factory_1$1T
	};

	function factory$1U(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var divideScalar$$1 = load(divideScalar);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var subtract$$1 = load(subtract);
	  var equalScalar$$1 = load(equalScalar);

	  var solveValidation$$1 = load(solveValidation);

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
	   *
	   * `L * x = b`
	   *
	   * Syntax:
	   *
	   *    math.lsolve(L, b)
	   *
	   * Examples:
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = lsolve(a, b)  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} L       A N x N matrix or array (L)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var lsolve = typed('lsolve', {

	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _sparseForwardSubstitution(m, b);
	    },

	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _denseForwardSubstitution(m, b);
	    },

	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // create dense matrix from array
	      var m = matrix$$1(a);
	      // use matrix implementation
	      var r = _denseForwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });

	  function _denseForwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$$1(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // data
	    var data = m._data;
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj = void 0;
	      // forward substitution (outer product) avoids inner looping when bj === 0
	      if (!equalScalar$$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar$$1(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar$$1(bj, vjj);
	        // loop rows
	        for (var i = j + 1; i < rows; i++) {
	          // update copy of b
	          bdata[i] = [subtract$$1(bdata[i][0] || 0, multiplyScalar$$1(xj, data[i][j]))];
	        }
	      } else {
	        // zero @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  function _sparseForwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$$1(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i = void 0,
	        k = void 0;
	    // result
	    var x = [];
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // forward substitution (outer product) avoids inner looping when bj === 0
	      if (!equalScalar$$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // lower triangular matrix values & index (column j)
	        var jvalues = [];
	        var jindex = [];
	        // last index in column
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j]
	        for (k = ptr[j]; k < l; k++) {
	          // row
	          i = index[k];
	          // check row (rows are not sorted!)
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          } else if (i > j) {
	            // store lower triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar$$1(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar$$1(bj, vjj);
	        // loop lower triangular
	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k];
	          // update copy of b
	          bdata[i] = [subtract$$1(bdata[i][0] || 0, multiplyScalar$$1(xj, jvalues[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      } else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  return lsolve;
	}

	var name$1J = 'lsolve';
	var factory_1$1U = factory$1U;

	var lsolve = {
		name: name$1J,
		factory: factory_1$1U
	};

	function factory$1V() {
	  /**
	   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
	   *
	   * @param {Array} p           The permutation vector of length n. null value denotes identity
	   * @param {Array} b           The input vector
	   *
	   * @return {Array}            The output vector x = P'b
	   */
	  function csIpvec(p, b) {
	    // vars
	    var k = void 0;
	    var n = b.length;
	    var x = [];
	    // check permutation vector was provided, p = null denotes identity
	    if (p) {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // apply permutation
	        x[p[k]] = b[k];
	      }
	    } else {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // x[i] = b[i]
	        x[k] = b[k];
	      }
	    }
	    return x;
	  }

	  return csIpvec;
	}

	var name$1K = 'csIpvec';
	var path$N = 'algebra.sparse';
	var factory_1$1V = factory$1V;

	var csIpvec = {
		name: name$1K,
		path: path$N,
		factory: factory_1$1V
	};

	function factory$1W(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var divideScalar$$1 = load(divideScalar);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var subtract$$1 = load(subtract);
	  var equalScalar$$1 = load(equalScalar);

	  var solveValidation$$1 = load(solveValidation);

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolve(U, b)
	   *
	   * Examples:
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = usolve(a, b)  // [[8], [9]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var usolve = typed('usolve', {

	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _sparseBackwardSubstitution(m, b);
	    },

	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _denseBackwardSubstitution(m, b);
	    },

	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // create dense matrix from array
	      var m = matrix$$1(a);
	      // use matrix implementation
	      var r = _denseBackwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });

	  function _denseBackwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$$1(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // arrays
	    var data = m._data;
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj = void 0;
	      // backward substitution (outer product) avoids inner looping when bj === 0
	      if (!equalScalar$$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar$$1(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar$$1(bj, vjj);
	        // loop rows
	        for (var i = j - 1; i >= 0; i--) {
	          // update copy of b
	          bdata[i] = [subtract$$1(bdata[i][0] || 0, multiplyScalar$$1(xj, data[i][j]))];
	        }
	      } else {
	        // zero value @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return column vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  function _sparseBackwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$$1(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i = void 0,
	        k = void 0;
	    // result
	    var x = [];
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // backward substitution (outer product) avoids inner looping when bj === 0
	      if (!equalScalar$$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // upper triangular matrix values & index (column j)
	        var jvalues = [];
	        var jindex = [];
	        // first & last indeces in column
	        var f = ptr[j];
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j], loop backwards
	        for (k = l - 1; k >= f; k--) {
	          // row
	          i = index[k];
	          // check row
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          } else if (i < j) {
	            // store upper triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar$$1(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar$$1(bj, vjj);
	        // loop upper triangular
	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k];
	          // update copy of b
	          bdata[i] = [subtract$$1(bdata[i][0], multiplyScalar$$1(xj, jvalues[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      } else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  return usolve;
	}

	var name$1L = 'usolve';
	var factory_1$1W = factory$1W;

	var usolve = {
		name: name$1L,
		factory: factory_1$1W
	};

	var isArray$4 = Array.isArray;

	function factory$1X(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var lup$$1 = load(lup);
	  var slu$$1 = load(slu);
	  var csIpvec$$1 = load(csIpvec);

	  var solveValidation$$1 = load(solveValidation);

	  var usolve$$1 = load(usolve);
	  var lsolve$$1 = load(lsolve);

	  /**
	   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
	   *
	   * Syntax:
	   *
	   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
	   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
	   *
	   * Examples:
	   *
	   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
	   *
	   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
	   *
	   *    const f = math.lup(m)
	   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
	   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = math.lusolve(a, b)  // [[2], [5]]
	   *
	   * See also:
	   *
	   *    lup, slu, lsolve, usolve
	   *
	   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
	   * @param {Matrix | Array} b               Column Vector
	   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
	   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
	   *
	   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
	   */
	  var lusolve = typed('lusolve', {

	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // convert a to matrix
	      a = matrix$$1(a);
	      // matrix lup decomposition
	      var d = lup$$1(a);
	      // solve
	      var x = _lusolve(d.L, d.U, d.p, null, b);
	      // convert result to array
	      return x.valueOf();
	    },

	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
	      // matrix lup decomposition
	      var d = lup$$1(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },

	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
	      // matrix lup decomposition
	      var d = lup$$1(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },

	    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
	      // matrix lu decomposition
	      var d = slu$$1(a, order, threshold);
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    },

	    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    }
	  });

	  var _toMatrix = function _toMatrix(a) {
	    // check it is a matrix
	    if (type.isMatrix(a)) {
	      return a;
	    }
	    // check array
	    if (isArray$4(a)) {
	      return matrix$$1(a);
	    }
	    // throw
	    throw new TypeError('Invalid Matrix LU decomposition');
	  };

	  function _lusolve(l, u, p, q, b) {
	    // verify L, U, P
	    l = _toMatrix(l);
	    u = _toMatrix(u);
	    // validate matrix and vector
	    b = solveValidation$$1(l, b, false);
	    // apply row permutations if needed (b is a DenseMatrix)
	    if (p) {
	      b._data = csIpvec$$1(p, b._data);
	    }
	    // use forward substitution to resolve L * y = b
	    var y = lsolve$$1(l, b);
	    // use backward substitution to resolve U * x = y
	    var x = usolve$$1(u, y);
	    // apply column permutations if needed (x is a DenseMatrix)
	    if (q) {
	      x._data = csIpvec$$1(q, x._data);
	    }
	    // return solution
	    return x;
	  }

	  return lusolve;
	}

	var name$1M = 'lusolve';
	var factory_1$1X = factory$1X;

	var lusolve = {
		name: name$1M,
		factory: factory_1$1X
	};

	var algebra = [derivative,

	// simplify
	simplify,

	// polynomial
	rationalize,

	// decomposition
	qr, lup, slu,

	// solver
	lsolve, lusolve, usolve];

	function factory$1Y(type, config, load, typed) {
	  /**
	   * Test whether a value is negative: smaller than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNegative(x)
	   *
	   * Examples:
	   *
	   *    math.isNegative(3)                     // returns false
	   *    math.isNegative(-2)                    // returns true
	   *    math.isNegative(0)                     // returns false
	   *    math.isNegative(-0)                    // returns false
	   *    math.isNegative(math.bignumber(2))     // returns false
	   *    math.isNegative(math.fraction(-2, 5))  // returns true
	   *    math.isNegative('-2')                  // returns true
	   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNegative = typed('isNegative', {
	    'number': function number(x) {
	      return x < 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isNeg() && !x.isZero() && !x.isNaN();
	    },

	    'Fraction': function Fraction(x) {
	      return x.s < 0; // It's enough to decide on the sign
	    },

	    'Unit': function Unit(x) {
	      return isNegative(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isNegative);
	    }
	  });

	  return isNegative;
	}

	var name$1N = 'isNegative';
	var factory_1$1Y = factory$1Y;

	var isNegative = {
		name: name$1N,
		factory: factory_1$1Y
	};

	function factory$1Z(type, config, load, typed) {
	  var unaryMinus$$1 = load(unaryMinus);
	  var isNegative$$1 = load(isNegative);
	  var matrix$$1 = load(matrix);

	  /**
	   * Calculate the cubic root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cbrt(x)
	   *    math.cbrt(x, allRoots)
	   *
	   * Examples:
	   *
	   *    math.cbrt(27)                  // returns 3
	   *    math.cube(3)                   // returns 27
	   *    math.cbrt(-64)                 // returns -4
	   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
	   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
	   *
	   *    const x = math.complex('8i')
	   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
	   *    math.cbrt(x, true)             // returns Matrix [
	   *                                    //    1.7320508075689 + i
	   *                                    //   -1.7320508075689 + i
	   *                                    //   -2i
	   *                                    // ]
	   *
	   * See also:
	   *
	   *    square, sqrt, cube
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
	   *            Value for which to calculate the cubic root.
	   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
	   *            when `x` is a number or complex number. If true, all complex
	   *            roots are returned, if false (default) the principal root is
	   *            returned.
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
	   *            Returns the cubic root of `x`
	   */
	  var cbrt = typed('cbrt', {
	    'number': _cbrtNumber,
	    // note: signature 'number, boolean' is also supported,
	    //       created by typed as it knows how to convert number to Complex

	    'Complex': _cbrtComplex,

	    'Complex, boolean': _cbrtComplex,

	    'BigNumber': function BigNumber(x) {
	      return x.cbrt();
	    },

	    'Unit': _cbrtUnit,

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since cbrt(0) = 0
	      return deepMap(x, cbrt, true);
	    }
	  });

	  /**
	   * Calculate the cubic root for a complex number
	   * @param {Complex} x
	   * @param {boolean} [allRoots]   If true, the function will return an array
	   *                               with all three roots. If false or undefined,
	   *                               the principal root is returned.
	   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
	   * @private
	   */
	  function _cbrtComplex(x, allRoots) {
	    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers

	    var arg3 = x.arg() / 3;
	    var abs = x.abs();

	    // principal root:
	    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3).exp());

	    if (allRoots) {
	      var all = [principal, new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3 + Math.PI * 2 / 3).exp()), new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3 - Math.PI * 2 / 3).exp())];

	      return config.matrix === 'Array' ? all : matrix$$1(all);
	    } else {
	      return principal;
	    }
	  }

	  /**
	   * Calculate the cubic root for a Unit
	   * @param {Unit} x
	   * @return {Unit} Returns the cubic root of x
	   * @private
	   */
	  function _cbrtUnit(x) {
	    if (x.value && type.isComplex(x.value)) {
	      var result = x.clone();
	      result.value = 1.0;
	      result = result.pow(1.0 / 3); // Compute the units
	      result.value = _cbrtComplex(x.value); // Compute the value
	      return result;
	    } else {
	      var negate = isNegative$$1(x.value);
	      if (negate) {
	        x.value = unaryMinus$$1(x.value);
	      }

	      // TODO: create a helper function for this
	      var third = void 0;
	      if (type.isBigNumber(x.value)) {
	        third = new type.BigNumber(1).div(3);
	      } else if (type.isFraction(x.value)) {
	        third = new type.Fraction(1, 3);
	      } else {
	        third = 1 / 3;
	      }

	      var _result = x.pow(third);

	      if (negate) {
	        _result.value = unaryMinus$$1(_result.value);
	      }

	      return _result;
	    }
	  }

	  cbrt.toTex = { 1: '\\sqrt[3]{${args[0]}}' };

	  return cbrt;
	}

	/**
	 * Calculate cbrt for a number
	 *
	 * Code from es6-shim.js:
	 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
	 *
	 * @param {number} x
	 * @returns {number | Complex} Returns the cubic root of x
	 * @private
	 */
	var _cbrtNumber = Math.cbrt || function (x) {
	  if (x === 0) {
	    return x;
	  }

	  var negate = x < 0;
	  var result = void 0;
	  if (negate) {
	    x = -x;
	  }

	  if (isFinite(x)) {
	    result = Math.exp(Math.log(x) / 3);
	    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods
	    result = (x / (result * result) + 2 * result) / 3;
	  } else {
	    result = x;
	  }

	  return negate ? -result : result;
	};

	var name$1O = 'cbrt';
	var factory_1$1Z = factory$1Z;

	var cbrt = {
		name: name$1O,
		factory: factory_1$1Z
	};

	function factory$1_(type, config, load, typed) {
	  /**
	   * Round a value towards plus infinity
	   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.ceil(x)
	   *
	   * Examples:
	   *
	   *    math.ceil(3.2)               // returns number 4
	   *    math.ceil(3.8)               // returns number 4
	   *    math.ceil(-4.2)              // returns number -4
	   *    math.ceil(-4.7)              // returns number -4
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.ceil(c)                 // returns Complex 4 - 2i
	   *
	   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
	   *
	   * See also:
	   *
	   *    floor, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var ceil = typed('ceil', {
	    'number': Math.ceil,

	    'Complex': function Complex(x) {
	      return x.ceil();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.ceil();
	    },

	    'Fraction': function Fraction(x) {
	      return x.ceil();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since ceil(0) = 0
	      return deepMap(x, ceil, true);
	    }
	  });

	  ceil.toTex = { 1: '\\left\\lceil${args[0]}\\right\\rceil' };

	  return ceil;
	}

	var name$1P = 'ceil';
	var factory_1$1_ = factory$1_;

	var ceil = {
		name: name$1P,
		factory: factory_1$1_
	};

	function factory$20(type, config, load, typed) {
	  /**
	   * Compute the cube of a value, `x * x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cube(x)
	   *
	   * Examples:
	   *
	   *    math.cube(2)            // returns number 8
	   *    math.pow(2, 3)          // returns number 8
	   *    math.cube(4)            // returns number 64
	   *    4 * 4 * 4               // returns number 64
	   *
	   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
	   *
	   * See also:
	   *
	   *    multiply, square, pow, cbrt
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
	   */
	  var cube = typed('cube', {
	    'number': function number(x) {
	      return x * x * x;
	    },

	    'Complex': function Complex(x) {
	      return x.mul(x).mul(x); // Is faster than pow(x, 3)
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.times(x).times(x);
	    },

	    'Fraction': function Fraction(x) {
	      return x.pow(3); // Is faster than mul()mul()mul()
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since cube(0) = 0
	      return deepMap(x, cube, true);
	    },

	    'Unit': function Unit(x) {
	      return x.pow(3);
	    }
	  });

	  cube.toTex = { 1: '\\left(${args[0]}\\right)^3' };

	  return cube;
	}

	var name$1Q = 'cube';
	var factory_1$20 = factory$20;

	var cube = {
		name: name$1Q,
		factory: factory_1$20
	};

	function factory$21(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (SparseMatrix)
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update C(i,j)
	        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // check for nonzero
	        if (!eq(cij, zero)) {
	          // push i & v
	          cindex.push(i);
	          cvalues.push(cij);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm02;
	}

	var name$1R = 'algorithm02';
	var factory_1$21 = factory$21;

	var algorithm02 = {
		name: name$1R,
		factory: factory_1$21
	};

	function factory$22(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var divideScalar$$1 = load(divideScalar);
	  var latex$$1 = latex;

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Divide two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotDivide(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotDivide(2, 4)   // returns 0.5
	   *
	   *    a = [[9, 5], [6, 1]]
	   *    b = [[3, 2], [5, 2]]
	   *
	   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
	   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
	   *
	   * See also:
	   *
	   *    divide, multiply, dotMultiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
	   */
	  var dotDivide = typed('dotDivide', {

	    'any, any': divideScalar$$1,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, divideScalar$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, divideScalar$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, divideScalar$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, divideScalar$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotDivide(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotDivide(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotDivide(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, divideScalar$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, divideScalar$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, divideScalar$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, divideScalar$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, divideScalar$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, divideScalar$$1, true).valueOf();
	    }
	  });

	  dotDivide.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['dotDivide'] + '${args[1]}\\right)'
	  };

	  return dotDivide;
	}

	var name$1S = 'dotDivide';
	var factory_1$22 = factory$22;

	var dotDivide = {
		name: name$1S,
		factory: factory_1$22
	};

	function factory$23(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
	   * Callback function invoked NZA times, number of nonzero elements in A.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm09 = function algorithm09(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // vars
	    var i = void 0,
	        j = void 0,
	        k = void 0,
	        k0 = void 0,
	        k1 = void 0;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // column mark
	      var mark = j + 1;
	      // check we need to process values
	      if (x) {
	        // loop B(:,j)
	        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	          // row
	          i = bindex[k];
	          // update workspace
	          w[i] = mark;
	          x[i] = bvalues[k];
	        }
	      }
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // check we need to process values
	        if (x) {
	          // b value @ i,j
	          var vb = w[i] === mark ? x[i] : zero;
	          // invoke f
	          var vc = cf(avalues[k], vb);
	          // check zero value
	          if (!eq(vc, zero)) {
	            // push index
	            cindex.push(i);
	            // push value
	            cvalues.push(vc);
	          }
	        } else {
	          // push index
	          cindex.push(i);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm09;
	}

	var name$1T = 'algorithm09';
	var factory_1$23 = factory$23;

	var algorithm09 = {
		name: name$1T,
		factory: factory_1$23
	};

	function factory$24(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var latex$$1 = latex;

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm09$$1 = load(algorithm09);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Multiply two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotMultiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotMultiply(2, 4) // returns 8
	   *
	   *    a = [[9, 5], [6, 1]]
	   *    b = [[3, 2], [5, 2]]
	   *
	   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
	   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
	   *
	   * See also:
	   *
	   *    multiply, divide, dotDivide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
	   */
	  var dotMultiply = typed('dotMultiply', {

	    'any, any': multiplyScalar$$1,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm09$$1(x, y, multiplyScalar$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, multiplyScalar$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$$1(x, y, multiplyScalar$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, multiplyScalar$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotMultiply(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, multiplyScalar$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, multiplyScalar$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11$$1(y, x, multiplyScalar$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, multiplyScalar$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, multiplyScalar$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, multiplyScalar$$1, true).valueOf();
	    }
	  });

	  dotMultiply.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['dotMultiply'] + '${args[1]}\\right)'
	  };

	  return dotMultiply;
	}

	var name$1U = 'dotMultiply';
	var factory_1$24 = factory$24;

	var dotMultiply = {
		name: name$1U,
		factory: factory_1$24
	};

	function factory$25(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var pow$$1 = load(pow);
	  var latex$$1 = latex;

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Calculates the power of x to y element wise.
	   *
	   * Syntax:
	   *
	   *    math.dotPow(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotPow(2, 3)            // returns number 8
	   *
	   *    const a = [[1, 2], [4, 3]]
	   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
	   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    pow, sqrt, multiply
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
	   */
	  var dotPow = typed('dotPow', {

	    'any, any': pow$$1,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, pow$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, pow$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, pow$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, pow$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotPow(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotPow(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotPow(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, dotPow, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, dotPow, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, dotPow, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, dotPow, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, dotPow, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, dotPow, true).valueOf();
	    }
	  });

	  dotPow.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['dotPow'] + '${args[1]}\\right)'
	  };

	  return dotPow;
	}

	var name$1V = 'dotPow';
	var factory_1$25 = factory$25;

	var dotPow = {
		name: name$1V,
		factory: factory_1$25
	};

	function factory$26(type, config, load, typed) {
	  /**
	   * Calculate the exponent of a value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.exp(x)
	   *
	   * Examples:
	   *
	   *    math.exp(2)                  // returns number 7.3890560989306495
	   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
	   *    math.log(math.exp(2))        // returns number 2
	   *
	   *    math.exp([1, 2, 3])
	   *    // returns Array [
	   *    //   2.718281828459045,
	   *    //   7.3890560989306495,
	   *    //   20.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    expm1, log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */
	  var exp = typed('exp', {
	    'number': Math.exp,

	    'Complex': function Complex(x) {
	      return x.exp();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.exp();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
	      return deepMap(x, exp);
	    }
	  });

	  exp.toTex = { 1: '\\exp\\left(${args[0]}\\right)' };

	  return exp;
	}

	var name$1W = 'exp';
	var factory_1$26 = factory$26;

	var exp = {
		name: name$1W,
		factory: factory_1$26
	};

	function factory$27(type, config, load, typed) {
	  var latex$$1 = latex;

	  /**
	   * Calculate the value of subtracting 1 from the exponential value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.expm1(x)
	   *
	   * Examples:
	   *
	   *    math.expm1(2)                      // returns number 6.38905609893065
	   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
	   *    math.log(math.expm1(2) + 1)        // returns number 2
	   *
	   *    math.expm1([1, 2, 3])
	   *    // returns Array [
	   *    //   1.718281828459045,
	   *    //   6.3890560989306495,
	   *    //   19.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    exp, log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */
	  var expm1 = typed('expm1', {
	    'number': Math.expm1 || _expm1,

	    'Complex': function Complex(x) {
	      var r = Math.exp(x.re);
	      return new type.Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.exp().minus(1);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, expm1);
	    }
	  });

	  /**
	   * Calculates exponentiation minus 1.
	   * @param {number} x
	   * @return {number} res
	   * @private
	   */
	  function _expm1(x) {
	    return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
	  }

	  expm1.toTex = '\\left(e' + latex$$1.operators['pow'] + '{${args[0]}}-1\\right)';

	  return expm1;
	}

	var name$1X = 'expm1';
	var factory_1$27 = factory$27;

	var expm1 = {
		name: name$1X,
		factory: factory_1$27
	};

	function factory$28(type, config, load, typed) {
	  /**
	   * Round a value towards minus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.floor(x)
	   *
	   * Examples:
	   *
	   *    math.floor(3.2)              // returns number 3
	   *    math.floor(3.8)              // returns number 3
	   *    math.floor(-4.2)             // returns number -5
	   *    math.floor(-4.7)             // returns number -5
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.floor(c)                // returns Complex 3 - 3i
	   *
	   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var floor = typed('floor', {
	    'number': Math.floor,

	    'Complex': function Complex(x) {
	      return x.floor();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.floor();
	    },

	    'Fraction': function Fraction(x) {
	      return x.floor();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since floor(0) = 0
	      return deepMap(x, floor, true);
	    }
	  });

	  floor.toTex = { 1: '\\left\\lfloor${args[0]}\\right\\rfloor' };

	  return floor;
	}

	var name$1Y = 'floor';
	var factory_1$28 = factory$28;

	var floor = {
		name: name$1Y,
		factory: factory_1$28
	};

	var isInteger$8 = number.isInteger;

	function factory$29(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm04$$1 = load(algorithm04);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Calculate the greatest common divisor for two or more values or arrays.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gcd(a, b)
	   *    math.gcd(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.gcd(8, 12)              // returns 4
	   *    math.gcd(-4, 6)              // returns 2
	   *    math.gcd(25, 15, -10)        // returns 5
	   *
	   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
	   *
	   * See also:
	   *
	   *    lcm, xgcd
	   *
	   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
	   */
	  var gcd = typed('gcd', {

	    'number, number': _gcd,

	    'BigNumber, BigNumber': _gcdBigNumber,

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.gcd(y);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm04$$1(x, y, gcd);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm01$$1(y, x, gcd, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$$1(x, y, gcd, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, gcd);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return gcd(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return gcd(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return gcd(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm10$$1(x, y, gcd, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$$1(x, y, gcd, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      return algorithm10$$1(y, x, gcd, true);
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, gcd, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, gcd, false).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, gcd, true).valueOf();
	    },

	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
	      var res = gcd(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = gcd(res, args[i]);
	      }
	      return res;
	    }
	  });

	  gcd.toTex = '\\gcd\\left(${args}\\right)';

	  return gcd;

	  /**
	   * Calculate gcd for BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns greatest common denominator of a and b
	   * @private
	   */
	  function _gcdBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function gcd must be integer numbers');
	    }

	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    var zero = new type.BigNumber(0);
	    while (!b.isZero()) {
	      var r = a.mod(b);
	      a = b;
	      b = r;
	    }
	    return a.lt(zero) ? a.neg() : a;
	  }
	}

	/**
	 * Calculate gcd for numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the greatest common denominator of a and b
	 * @private
	 */
	function _gcd(a, b) {
	  if (!isInteger$8(a) || !isInteger$8(b)) {
	    throw new Error('Parameters in function gcd must be integer numbers');
	  }

	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  var r = void 0;
	  while (b !== 0) {
	    r = a % b;
	    a = b;
	    b = r;
	  }
	  return a < 0 ? -a : a;
	}

	var name$1Z = 'gcd';
	var factory_1$29 = factory$29;

	var gcd = {
		name: name$1Z,
		factory: factory_1$29
	};

	function factory$2a(type, config, load, typed) {
	  /**
	   * Test whether a value is positive: larger than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPositive(x)
	   *
	   * Examples:
	   *
	   *    math.isPositive(3)                     // returns true
	   *    math.isPositive(-2)                    // returns false
	   *    math.isPositive(0)                     // returns false
	   *    math.isPositive(-0)                    // returns false
	   *    math.isPositive(0.5)                   // returns true
	   *    math.isPositive(math.bignumber(2))     // returns true
	   *    math.isPositive(math.fraction(-2, 5))  // returns false
	   *    math.isPositive(math.fraction(1,3))    // returns false
	   *    math.isPositive('2')                   // returns true
	   *    math.isPositive([2, 0, -3]')           // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPositive = typed('isPositive', {
	    'number': function number(x) {
	      return x > 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return !x.isNeg() && !x.isZero() && !x.isNaN();
	    },

	    'Fraction': function Fraction(x) {
	      return x.s > 0 && x.n > 0;
	    },

	    'Unit': function Unit(x) {
	      return isPositive(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isPositive);
	    }
	  });

	  return isPositive;
	}

	var name$1_ = 'isPositive';
	var factory_1$2a = factory$2a;

	var isPositive = {
		name: name$1_,
		factory: factory_1$2a
	};

	var flatten = array.flatten;

	function factory$2b(type, config, load, typed) {
	  var abs$$1 = load(abs);
	  var add = load(addScalar);
	  var divide = load(divideScalar);
	  var multiply = load(multiplyScalar);
	  var sqrt$$1 = load(sqrt);
	  var smaller$$1 = load(smaller);
	  var isPositive$$1 = load(isPositive);

	  /**
	   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
	   *
	   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
	   *
	   * For matrix input, the hypotenusa is calculated for all values in the matrix.
	   *
	   * Syntax:
	   *
	   *     math.hypot(a, b, ...)
	   *     math.hypot([a, b, c, ...])
	   *
	   * Examples:
	   *
	   *     math.hypot(3, 4)      // 5
	   *     math.hypot(3, 4, 5)   // 7.0710678118654755
	   *     math.hypot([3, 4, 5]) // 7.0710678118654755
	   *     math.hypot(-2)        // 2
	   *
	   * See also:
	   *
	   *     abs, norm
	   *
	   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
	   *                                                          Matrix and Array input is flattened and returns a
	   *                                                          single number for the whole matrix.
	   * @return {number | BigNumber} Returns the hypothenusa of the input values.
	   */
	  var hypot = typed('hypot', {
	    '... number | BigNumber': _hypot,

	    'Array': function Array(x) {
	      return hypot.apply(hypot, flatten(x));
	    },

	    'Matrix': function Matrix(x) {
	      return hypot.apply(hypot, flatten(x.toArray()));
	    }
	  });

	  /**
	   * Calculate the hypotenusa for an Array with values
	   * @param {Array.<number | BigNumber>} args
	   * @return {number | BigNumber} Returns the result
	   * @private
	   */
	  function _hypot(args) {
	    // code based on `hypot` from es6-shim:
	    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
	    var result = 0;
	    var largest = 0;

	    for (var i = 0; i < args.length; i++) {
	      var value = abs$$1(args[i]);
	      if (smaller$$1(largest, value)) {
	        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
	        result = add(result, 1);
	        largest = value;
	      } else {
	        result = add(result, isPositive$$1(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
	      }
	    }

	    return multiply(largest, sqrt$$1(result));
	  }

	  hypot.toTex = '\\hypot\\left(${args}\\right)';

	  return hypot;
	}

	var name$20 = 'hypot';
	var factory_1$2b = factory$2b;

	var hypot = {
		name: name$20,
		factory: factory_1$2b
	};

	var scatter = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
	  // a arrays
	  var avalues = a._values;
	  var aindex = a._index;
	  var aptr = a._ptr;
	  // c arrays
	  var cindex = c._index;

	  // vars
	  var k = void 0,
	      k0 = void 0,
	      k1 = void 0,
	      i = void 0;

	  // check we need to process values (pattern matrix)
	  if (x) {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	        // x(i) = A, check we need to call function this time
	        if (update) {
	          // copy value to workspace calling callback function
	          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
	          // function was called on current row
	          u[i] = mark;
	        } else {
	          // copy value to workspace
	          x[i] = avalues[k];
	        }
	      } else {
	        // i exists in C already
	        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
	        // function was called on current row
	        u[i] = mark;
	      }
	    }
	  } else {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	      } else {
	        // indicate function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	};

	function factory$2c(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm06 = function algorithm06(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];
	    // marks indicating value in a given row has been updated
	    var u = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      scatter(a, j, w, x, u, mark, c, cf);
	      // scatter the values of B(:,j) into workspace
	      scatter(b, j, w, x, u, mark, c, cf);
	      // check we need to process values (non pattern matrix)
	      if (x) {
	        // initialize first index in j
	        var k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          var i = cindex[k];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[i] === mark) {
	            // value @ i
	            var v = x[i];
	            // check for zero value
	            if (!eq(v, zero)) {
	              // push value
	              cvalues.push(v);
	              // increment pointer
	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          } else {
	            // remove value @ i, do not increment pointer
	            cindex.splice(k, 1);
	          }
	        }
	      } else {
	        // initialize first index in j
	        var p = cptr[j];
	        // loop index in j
	        while (p < cindex.length) {
	          // row
	          var r = cindex[p];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[r] !== mark) {
	            // remove value @ i, do not increment pointer
	            cindex.splice(p, 1);
	          } else {
	            // increment pointer
	            p++;
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm06;
	}

	var name$21 = 'algorithm06';
	var factory_1$2c = factory$2c;

	var algorithm06 = {
		name: name$21,
		factory: factory_1$2c
	};

	var isInteger$9 = number.isInteger;

	function factory$2d(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm06$$1 = load(algorithm06);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Calculate the least common multiple for two or more values or arrays.
	   *
	   * lcm is defined as:
	   *
	   *     lcm(a, b) = abs(a * b) / gcd(a, b)
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.lcm(a, b)
	   *    math.lcm(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.lcm(4, 6)               // returns 12
	   *    math.lcm(6, 21)              // returns 42
	   *    math.lcm(6, 21, 5)           // returns 210
	   *
	   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
	   *
	   * See also:
	   *
	   *    gcd, xgcd
	   *
	   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
	   */
	  var lcm = typed('lcm', {
	    'number, number': _lcm,

	    'BigNumber, BigNumber': _lcmBigNumber,

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.lcm(y);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm06$$1(x, y, lcm);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, lcm, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$$1(x, y, lcm, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, lcm);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return lcm(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return lcm(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return lcm(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$$1(x, y, lcm, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$$1(x, y, lcm, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      return algorithm11$$1(y, x, lcm, true);
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, lcm, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, lcm, false).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, lcm, true).valueOf();
	    },

	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
	      var res = lcm(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = lcm(res, args[i]);
	      }
	      return res;
	    }
	  });

	  lcm.toTex = undefined; // use default template

	  return lcm;

	  /**
	   * Calculate lcm for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns the least common multiple of a and b
	   * @private
	   */
	  function _lcmBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function lcm must be integer numbers');
	    }

	    if (a.isZero() || b.isZero()) {
	      return new type.BigNumber(0);
	    }

	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    // evaluate lcm here inline to reduce overhead
	    var prod = a.times(b);
	    while (!b.isZero()) {
	      var t = b;
	      b = a.mod(t);
	      a = t;
	    }
	    return prod.div(a).abs();
	  }
	}

	/**
	 * Calculate lcm for two numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the least common multiple of a and b
	 * @private
	 */
	function _lcm(a, b) {
	  if (!isInteger$9(a) || !isInteger$9(b)) {
	    throw new Error('Parameters in function lcm must be integer numbers');
	  }

	  if (a === 0 || b === 0) {
	    return 0;
	  }

	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  // evaluate lcm here inline to reduce overhead
	  var t = void 0;
	  var prod = a * b;
	  while (b !== 0) {
	    t = b;
	    b = a % t;
	    a = t;
	  }
	  return Math.abs(prod / a);
	}

	var name$22 = 'lcm';
	var factory_1$2d = factory$2d;

	var lcm = {
		name: name$22,
		factory: factory_1$2d
	};

	function factory$2e(type, config, load, typed) {
	  var divideScalar$$1 = load(divideScalar);

	  /**
	   * Calculate the logarithm of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log(x)
	   *    math.log(x, base)
	   *
	   * Examples:
	   *
	   *    math.log(3.5)                  // returns 1.252762968495368
	   *    math.exp(math.log(2.4))        // returns 2.4
	   *
	   *    math.pow(10, 4)                // returns 10000
	   *    math.log(10000, 10)            // returns 4
	   *    math.log(10000) / math.log(10) // returns 4
	   *
	   *    math.log(1024, 2)              // returns 10
	   *    math.pow(2, 10)                // returns 1024
	   *
	   * See also:
	   *
	   *    exp, log2, log10, log1p
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x`
	   */
	  var log = typed('log', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log(x);
	      } else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log();
	      }
	    },

	    'Complex': function Complex(x) {
	      return x.log();
	    },

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.ln();
	      } else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log();
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log);
	    },

	    'any, any': function anyAny(x, base) {
	      // calculate logarithm for a specified base, log(x, base)
	      return divideScalar$$1(log(x), log(base));
	    }
	  });

	  log.toTex = {
	    1: '\\ln\\left(${args[0]}\\right)',
	    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
	  };

	  return log;
	}

	var name$23 = 'log';
	var factory_1$2e = factory$2e;

	var log = {
		name: name$23,
		factory: factory_1$2e
	};

	function factory$2f(type, config, load, typed) {
	  /**
	   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log10(x)
	   *
	   * Examples:
	   *
	   *    math.log10(0.00001)            // returns -5
	   *    math.log10(10000)              // returns 4
	   *    math.log(10000) / math.log(10) // returns 4
	   *    math.pow(10, 4)                // returns 10000
	   *
	   * See also:
	   *
	   *    exp, log, log1p, log2
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 10-base logarithm of `x`
	   */
	  var log10 = typed('log10', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return _log10(x);
	      } else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log().div(Math.LN10);
	      }
	    },

	    'Complex': function Complex(x) {
	      return new type.Complex(x).log().div(Math.LN10);
	    },

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log();
	      } else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log10);
	    }
	  });

	  log10.toTex = { 1: '\\log_{10}\\left(${args[0]}\\right)' };

	  return log10;
	}

	/**
	 * Calculate the 10-base logarithm of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _log10 = Math.log10 || function (x) {
	  return Math.log(x) / Math.LN10;
	};

	var name$24 = 'log10';
	var factory_1$2f = factory$2f;

	var log10 = {
		name: name$24,
		factory: factory_1$2f
	};

	function factory$2g(type, config, load, typed) {
	  var divideScalar$$1 = load(divideScalar);
	  var log$$1 = load(log);

	  /**
	   * Calculate the logarithm of a `value+1`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log1p(x)
	   *    math.log1p(x, base)
	   *
	   * Examples:
	   *
	   *    math.log1p(2.5)                 // returns 1.252762968495368
	   *    math.exp(math.log1p(1.4))       // returns 2.4
	   *
	   *    math.pow(10, 4)                 // returns 10000
	   *    math.log1p(9999, 10)            // returns 4
	   *    math.log1p(9999) / math.log(10) // returns 4
	   *
	   * See also:
	   *
	   *    exp, log, log2, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm of `x+1`.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x+1` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x+1`
	   */
	  var log1p = typed('log1p', {
	    'number': _log1pNumber,

	    'Complex': _log1pComplex,

	    'BigNumber': function BigNumber(x) {
	      var y = x.plus(1);
	      if (!y.isNegative() || config.predictable) {
	        return y.ln();
	      } else {
	        // downgrade to number, return Complex valued result
	        return _log1pComplex(new type.Complex(x.toNumber(), 0));
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log1p);
	    },

	    'any, any': function anyAny(x, base) {
	      // calculate logarithm for a specified base, log1p(x, base)
	      return divideScalar$$1(log1p(x), log$$1(base));
	    }
	  });

	  /**
	   * Calculate the natural logarithm of a `number+1`
	   * @param {number} x
	   * @returns {number | Complex}
	   * @private
	   */
	  function _log1pNumber(x) {
	    if (x >= -1 || config.predictable) {
	      return Math.log1p ? Math.log1p(x) : Math.log(x + 1);
	    } else {
	      // negative value -> complex value computation
	      return _log1pComplex(new type.Complex(x, 0));
	    }
	  }

	  /**
	   * Calculate the natural logarithm of a complex number + 1
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _log1pComplex(x) {
	    var xRe1p = x.re + 1;
	    return new type.Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
	  }

	  log1p.toTex = {
	    1: '\\ln\\left(${args[0]}+1\\right)',
	    2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
	  };

	  return log1p;
	}

	var name$25 = 'log1p';
	var factory_1$2g = factory$2g;

	var log1p = {
		name: name$25,
		factory: factory_1$2g
	};

	function factory$2h(type, config, load, typed) {
	  /**
	   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log2(x)
	   *
	   * Examples:
	   *
	   *    math.log2(0.03125)           // returns -5
	   *    math.log2(16)                // returns 4
	   *    math.log2(16) / math.log2(2) // returns 4
	   *    math.pow(2, 4)               // returns 16
	   *
	   * See also:
	   *
	   *    exp, log, log1p, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 2-base logarithm of `x`
	   */
	  var log2 = typed('log2', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log2 ? Math.log2(x) : Math.log(x) / Math.LN2;
	      } else {
	        // negative value -> complex value computation
	        return _log2Complex(new type.Complex(x, 0));
	      }
	    },

	    'Complex': _log2Complex,

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log(2);
	      } else {
	        // downgrade to number, return Complex valued result
	        return _log2Complex(new type.Complex(x.toNumber(), 0));
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log2);
	    }
	  });

	  /**
	   * Calculate log2 for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _log2Complex(x) {
	    var newX = Math.sqrt(x.re * x.re + x.im * x.im);
	    return new type.Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
	  }

	  log2.toTex = '\\log_{2}\\left(${args[0]}\\right)';

	  return log2;
	}

	var name$26 = 'log2';
	var factory_1$2h = factory$2h;

	var log2 = {
		name: name$26,
		factory: factory_1$2h
	};

	function factory$2i(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var latex$$1 = latex;

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm03$$1 = load(algorithm03);
	  var algorithm05$$1 = load(algorithm05);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Calculates the modulus, the remainder of an integer division.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * The modulus is defined as:
	   *
	   *     x - y * floor(x / y)
	   *
	   * See http://en.wikipedia.org/wiki/Modulo_operation.
	   *
	   * Syntax:
	   *
	   *    math.mod(x, y)
	   *
	   * Examples:
	   *
	   *    math.mod(8, 3)                // returns 2
	   *    math.mod(11, 2)               // returns 1
	   *
	   *    function isOdd(x) {
	   *      return math.mod(x, 2) != 0
	   *    }
	   *
	   *    isOdd(2)                      // returns false
	   *    isOdd(3)                      // returns true
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
	   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
	   */
	  var mod = typed('mod', {

	    'number, number': _mod,

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return y.isZero() ? x : x.mod(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mod(y);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm05$$1(x, y, mod, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, mod, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, mod, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, mod);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return mod(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return mod(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return mod(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, mod, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, mod, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, mod, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, mod, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, mod, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, mod, true).valueOf();
	    }
	  });

	  mod.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['mod'] + '${args[1]}\\right)'
	  };

	  return mod;

	  /**
	   * Calculate the modulus of two numbers
	   * @param {number} x
	   * @param {number} y
	   * @returns {number} res
	   * @private
	   */
	  function _mod(x, y) {
	    if (y > 0) {
	      // We don't use JavaScript's % operator here as this doesn't work
	      // correctly for x < 0 and x === 0
	      // see http://en.wikipedia.org/wiki/Modulo_operation
	      return x - y * Math.floor(x / y);
	    } else if (y === 0) {
	      return x;
	    } else {
	      // y < 0
	      // TODO: implement mod for a negative divisor
	      throw new Error('Cannot calculate mod for a negative divisor');
	    }
	  }
	}

	var name$27 = 'mod';
	var factory_1$2i = factory$2i;

	var mod = {
		name: name$27,
		factory: factory_1$2i
	};

	function factory$2j(type, config, load, typed) {
	  var abs$$1 = load(abs);
	  var add$$1 = load(add);
	  var pow$$1 = load(pow);
	  var conj$$1 = load(conj);
	  var sqrt$$1 = load(sqrt);
	  var multiply$$1 = load(multiply);
	  var equalScalar$$1 = load(equalScalar);
	  var larger$$1 = load(larger);
	  var smaller$$1 = load(smaller);
	  var matrix$$1 = load(matrix);

	  /**
	   * Calculate the norm of a number, vector or matrix.
	   *
	   * The second parameter p is optional. If not provided, it defaults to 2.
	   *
	   * Syntax:
	   *
	   *    math.norm(x)
	   *    math.norm(x, p)
	   *
	   * Examples:
	   *
	   *    math.abs(-3.5)                         // returns 3.5
	   *    math.norm(-3.5)                        // returns 3.5
	   *
	   *    math.norm(math.complex(3, -4))         // returns 5
	   *
	   *    math.norm([1, 2, -3], Infinity)        // returns 3
	   *    math.norm([1, 2, -3], -Infinity)       // returns 1
	   *
	   *    math.norm([3, 4], 2)                   // returns 5
	   *
	   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
	   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
	   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
	   *
	   * See also:
	   *
	   *    abs, hypot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the norm
	   * @param  {number | BigNumber | string} [p=2]
	   *            Vector space.
	   *            Supported numbers include Infinity and -Infinity.
	   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
	   * @return {number | BigNumber} the p-norm
	   */
	  var norm = typed('norm', {
	    'number': Math.abs,

	    'Complex': function Complex(x) {
	      return x.abs();
	    },

	    'BigNumber': function BigNumber(x) {
	      // norm(x) = abs(x)
	      return x.abs();
	    },

	    'boolean': function boolean(x) {
	      // norm(x) = abs(x)
	      return Math.abs(x);
	    },

	    'Array': function Array(x) {
	      return _norm(matrix$$1(x), 2);
	    },

	    'Matrix': function Matrix(x) {
	      return _norm(x, 2);
	    },

	    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
	      // ignore second parameter, TODO: remove the option of second parameter for these types
	      return norm(x);
	    },

	    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
	      return _norm(matrix$$1(x), p);
	    },

	    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
	      return _norm(x, p);
	    }
	  });

	  /**
	   * Calculate the norm for an array
	   * @param {Array} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _norm(x, p) {
	    // size
	    var sizeX = x.size();

	    // check if it is a vector
	    if (sizeX.length === 1) {
	      // check p
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x, Infinity) = max(abs(x))
	        var pinf = 0;
	        // skip zeros since abs(0) === 0
	        x.forEach(function (value) {
	          var v = abs$$1(value);
	          if (larger$$1(v, pinf)) {
	            pinf = v;
	          }
	        }, true);
	        return pinf;
	      }
	      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
	        // norm(x, -Infinity) = min(abs(x))
	        var ninf = void 0;
	        // skip zeros since abs(0) === 0
	        x.forEach(function (value) {
	          var v = abs$$1(value);
	          if (!ninf || smaller$$1(v, ninf)) {
	            ninf = v;
	          }
	        }, true);
	        return ninf || 0;
	      }
	      if (p === 'fro') {
	        return _norm(x, 2);
	      }
	      if (typeof p === 'number' && !isNaN(p)) {
	        // check p != 0
	        if (!equalScalar$$1(p, 0)) {
	          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
	          var n = 0;
	          // skip zeros since abs(0) === 0
	          x.forEach(function (value) {
	            n = add$$1(pow$$1(abs$$1(value), p), n);
	          }, true);
	          return pow$$1(n, 1 / p);
	        }
	        return Number.POSITIVE_INFINITY;
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	    // MxN matrix
	    if (sizeX.length === 2) {
	      // check p
	      if (p === 1) {
	        // norm(x) = the largest column sum
	        var c = [];
	        // result
	        var maxc = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(function (value, index) {
	          var j = index[1];
	          var cj = add$$1(c[j] || 0, abs$$1(value));
	          if (larger$$1(cj, maxc)) {
	            maxc = cj;
	          }
	          c[j] = cj;
	        }, true);
	        return maxc;
	      }
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x) = the largest row sum
	        var r = [];
	        // result
	        var maxr = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(function (value, index) {
	          var i = index[0];
	          var ri = add$$1(r[i] || 0, abs$$1(value));
	          if (larger$$1(ri, maxr)) {
	            maxr = ri;
	          }
	          r[i] = ri;
	        }, true);
	        return maxr;
	      }
	      if (p === 'fro') {
	        // norm(x) = sqrt(sum(diag(x'x)))
	        var fro = 0;
	        x.forEach(function (value, index) {
	          fro = add$$1(fro, multiply$$1(value, conj$$1(value)));
	        });
	        return sqrt$$1(fro);
	      }
	      if (p === 2) {
	        // not implemented
	        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	  }

	  norm.toTex = {
	    1: '\\left\\|${args[0]}\\right\\|',
	    2: undefined // use default template
	  };

	  return norm;
	}

	var name$28 = 'norm';
	var factory_1$2j = factory$2j;

	var norm = {
		name: name$28,
		factory: factory_1$2j
	};

	function factory$2k(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm02$$1 = load(algorithm02);
	  var algorithm06$$1 = load(algorithm06);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Calculate the nth root of a value.
	   * The principal nth root of a positive real number A, is the positive real
	   * solution of the equation
	   *
	   *     x^root = A
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *     math.nthRoot(a)
	   *     math.nthRoot(a, root)
	   *
	   * Examples:
	   *
	   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
	   *     math.sqrt(9)          // returns 3, as 3^2 == 9
	   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param {number | BigNumber | Array | Matrix | Complex} a
	   *              Value for which to calculate the nth root
	   * @param {number | BigNumber} [root=2]    The root.
	   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
	   */
	  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
	  var nthRoot = typed('nthRoot', {

	    'number': function number(x) {
	      return _nthRoot(x, 2);
	    },
	    'number, number': _nthRoot,

	    'BigNumber': function BigNumber(x) {
	      return _bigNthRoot(x, new type.BigNumber(2));
	    },
	    'Complex': function Complex(x) {
	      throw new Error(complexErr);
	    },
	    'Complex, number': function ComplexNumber(x, y) {
	      throw new Error(complexErr);
	    },
	    'BigNumber, BigNumber': _bigNthRoot,

	    'Array | Matrix': function ArrayMatrix(x) {
	      return nthRoot(x, 2);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      // density must be one (no zeros in matrix)
	      if (y.density() === 1) {
	        // sparse + sparse
	        return algorithm06$$1(x, y, nthRoot);
	      } else {
	        // throw exception
	        throw new Error('Root must be non-zero');
	      }
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, nthRoot, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      // density must be one (no zeros in matrix)
	      if (y.density() === 1) {
	        // dense + sparse
	        return algorithm01$$1(x, y, nthRoot, false);
	      } else {
	        // throw exception
	        throw new Error('Root must be non-zero');
	      }
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, nthRoot);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$$1(x, y, nthRoot, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$$1(x, y, nthRoot, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // density must be one (no zeros in matrix)
	      if (y.density() === 1) {
	        // sparse - scalar
	        return algorithm11$$1(y, x, nthRoot, true);
	      } else {
	        // throw exception
	        throw new Error('Root must be non-zero');
	      }
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, nthRoot, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix$$1(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix$$1(y)).valueOf();
	    }
	  });

	  nthRoot.toTex = { 2: '\\sqrt[${args[1]}]{${args[0]}}' };

	  return nthRoot;

	  /**
	   * Calculate the nth root of a for BigNumbers, solve x^root == a
	   * http://rosettacode.org/wiki/Nth_root#JavaScript
	   * @param {BigNumber} a
	   * @param {BigNumber} root
	   * @private
	   */
	  function _bigNthRoot(a, root) {
	    var precision = type.BigNumber.precision;
	    var Big = type.BigNumber.clone({ precision: precision + 2 });
	    var zero = new type.BigNumber(0);

	    var one = new Big(1);
	    var inv = root.isNegative();
	    if (inv) {
	      root = root.neg();
	    }

	    if (root.isZero()) {
	      throw new Error('Root must be non-zero');
	    }
	    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
	      throw new Error('Root must be odd when a is negative.');
	    }

	    // edge cases zero and infinity
	    if (a.isZero()) {
	      return inv ? new Big(Infinity) : 0;
	    }
	    if (!a.isFinite()) {
	      return inv ? zero : a;
	    }

	    var x = a.abs().pow(one.div(root));
	    // If a < 0, we require that root is an odd integer,
	    // so (-1) ^ (1/root) = -1
	    x = a.isNeg() ? x.neg() : x;
	    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
	  }
	}

	/**
	 * Calculate the nth root of a, solve x^root == a
	 * http://rosettacode.org/wiki/Nth_root#JavaScript
	 * @param {number} a
	 * @param {number} root
	 * @private
	 */
	function _nthRoot(a, root) {
	  var inv = root < 0;
	  if (inv) {
	    root = -root;
	  }

	  if (root === 0) {
	    throw new Error('Root must be non-zero');
	  }
	  if (a < 0 && Math.abs(root) % 2 !== 1) {
	    throw new Error('Root must be odd when a is negative.');
	  }

	  // edge cases zero and infinity
	  if (a === 0) {
	    return inv ? Infinity : 0;
	  }
	  if (!isFinite(a)) {
	    return inv ? 0 : a;
	  }

	  var x = Math.pow(Math.abs(a), 1 / root);
	  // If a < 0, we require that root is an odd integer,
	  // so (-1) ^ (1/root) = -1
	  x = a < 0 ? -x : x;
	  return inv ? 1 / x : x;

	  // Very nice algorithm, but fails with nthRoot(-2, 3).
	  // Newton's method has some well-known problems at times:
	  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
	  /*
	  let x = 1 // Initial guess
	  let xPrev = 1
	  let i = 0
	  const iMax = 10000
	  do {
	    const delta = (a / Math.pow(x, root - 1) - x) / root
	    xPrev = x
	    x = x + delta
	    i++
	  }
	  while (xPrev !== x && i < iMax)
	   if (xPrev !== x) {
	    throw new Error('Function nthRoot failed to converge')
	  }
	   return inv ? 1 / x : x
	  */
	}

	var name$29 = 'nthRoot';
	var factory_1$2k = factory$2k;

	var nthRoot = {
		name: name$29,
		factory: factory_1$2k
	};

	var complex$4 = Complex_1.factory('Complex', {}, '', typed, { on: function on(x, y) {} });

	function factory$2l(type, config, load, typed$$1) {
	  /**
	   * Calculate the nth roots of a value.
	   * An nth root of a positive real number A,
	   * is a positive real solution of the equation "x^root = A".
	   * This function returns an array of complex values.
	   *
	   * Syntax:
	   *
	   *    math.nthRoots(x)
	   *    math.nthRoots(x, root)
	   *
	   * Examples:
	   *
	   *    math.nthRoots(1)
	   *    // returns [
	   *    //   {re: 1, im: 0},
	   *    //   {re: -1, im: 0}
	   *    // ]
	   *    nthRoots(1, 3)
	   *    // returns [
	   *    //   { re: 1, im: 0 },
	   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
	   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
	   *    ]
	   *
	   * See also:
	   *
	   *    nthRoot, pow, sqrt
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var nthRoots = typed$$1('nthRoots', {
	    'Complex': function Complex(x) {
	      return _nthComplexRoots(x, 2);
	    },
	    'Complex, number': _nthComplexRoots
	  });
	  nthRoots.toTex = { 2: '\\{y : $y^{args[1]} = {${args[0]}}\\}' };
	  return nthRoots;
	}

	/**
	 * Each function here returns a real multiple of i as a Complex value.
	 * @param  {number} val
	 * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
	 */
	// This is used to fix float artifacts for zero-valued components.
	var _calculateExactResult = [function realPos(val) {
	  return complex$4(val);
	}, function imagPos(val) {
	  return complex$4(0, val);
	}, function realNeg(val) {
	  return complex$4(-val);
	}, function imagNeg(val) {
	  return complex$4(0, -val);
	}];

	/**
	 * Calculate the nth root of a Complex Number a using De Movire's Theorem.
	 * @param  {Complex} a
	 * @param  {number} root
	 * @return {Array} array of n Complex Roots
	 */
	function _nthComplexRoots(a, root) {
	  if (root < 0) throw new Error('Root must be greater than zero');
	  if (root === 0) throw new Error('Root must be non-zero');
	  if (root % 1 !== 0) throw new Error('Root must be an integer');
	  if (a === 0 || a.abs() === 0) return [complex$4(0)];
	  var aIsNumeric = typeof a === 'number';
	  var offset = void 0;
	  // determine the offset (argument of a)/(pi/2)
	  if (aIsNumeric || a.re === 0 || a.im === 0) {
	    if (aIsNumeric) {
	      offset = 2 * +(a < 0); // numeric value on the real axis
	    } else if (a.im === 0) {
	      offset = 2 * +(a.re < 0); // complex value on the real axis
	    } else {
	      offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
	    }
	  }
	  var arg = a.arg();
	  var abs = a.abs();
	  var roots = [];
	  var r = Math.pow(abs, 1 / root);
	  for (var k = 0; k < root; k++) {
	    var halfPiFactor = (offset + 4 * k) / root;
	    /**
	     * If (offset + 4*k)/root is an integral multiple of pi/2
	     * then we can produce a more exact result.
	     */
	    if (halfPiFactor === Math.round(halfPiFactor)) {
	      roots.push(_calculateExactResult[halfPiFactor % 4](r));
	      continue;
	    }
	    roots.push(complex$4({ r: r, phi: (arg + 2 * Math.PI * k) / root }));
	  }
	  return roots;
	}

	var name$2a = 'nthRoots';
	var factory_1$2l = factory$2l;

	var nthRoots = {
		name: name$2a,
		factory: factory_1$2l
	};

	function factory$2m(type, config, load, typed) {
	  /**
	   * Compute the square of a value, `x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.square(x)
	   *
	   * Examples:
	   *
	   *    math.square(2)           // returns number 4
	   *    math.square(3)           // returns number 9
	   *    math.pow(3, 2)           // returns number 9
	   *    math.multiply(3, 3)      // returns number 9
	   *
	   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
	   *
	   * See also:
	   *
	   *    multiply, cube, sqrt, pow
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            Number for which to calculate the square
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Squared value
	   */
	  var square = typed('square', {
	    'number': function number(x) {
	      return x * x;
	    },

	    'Complex': function Complex(x) {
	      return x.mul(x);
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.times(x);
	    },

	    'Fraction': function Fraction(x) {
	      return x.mul(x);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since square(0) = 0
	      return deepMap(x, square, true);
	    },

	    'Unit': function Unit(x) {
	      return x.pow(2);
	    }
	  });

	  square.toTex = { 1: '\\left(${args[0]}\\right)^2' };

	  return square;
	}

	var name$2b = 'square';
	var factory_1$2m = factory$2m;

	var square = {
		name: name$2b,
		factory: factory_1$2m
	};

	function factory$2n(type, config, load, typed) {
	  var latex$$1 = latex;

	  /**
	   * Unary plus operation.
	   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.unaryPlus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryPlus(3.5)      // returns 3.5
	   *    math.unaryPlus(1)     // returns 1
	   *
	   * See also:
	   *
	   *    unaryMinus, add, subtract
	   *
	   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
	   *            Input value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns the input value when numeric, converts to a number when input is non-numeric.
	   */
	  var unaryPlus = typed('unaryPlus', {
	    'number': function number(x) {
	      return x;
	    },

	    'Complex': function Complex(x) {
	      return x; // complex numbers are immutable
	    },

	    'BigNumber': function BigNumber(x) {
	      return x; // bignumbers are immutable
	    },

	    'Fraction': function Fraction(x) {
	      return x; // fractions are immutable
	    },

	    'Unit': function Unit(x) {
	      return x.clone();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryPlus(0) = 0
	      return deepMap(x, unaryPlus, true);
	    },

	    'boolean | string': function booleanString(x) {
	      // convert to a number or bignumber
	      return config.number === 'BigNumber' ? new type.BigNumber(+x) : +x;
	    }
	  });

	  unaryPlus.toTex = {
	    1: latex$$1.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
	  };

	  return unaryPlus;
	}

	var name$2c = 'unaryPlus';
	var factory_1$2n = factory$2n;

	var unaryPlus = {
		name: name$2c,
		factory: factory_1$2n
	};

	var isInteger$a = number.isInteger;

	function factory$2o(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Calculate the extended greatest common divisor for two values.
	   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
	   *
	   * Syntax:
	   *
	   *    math.xgcd(a, b)
	   *
	   * Examples:
	   *
	   *    math.xgcd(8, 12)             // returns [4, -1, 1]
	   *    math.gcd(8, 12)              // returns 4
	   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
	   *
	   * See also:
	   *
	   *    gcd, lcm
	   *
	   * @param {number | BigNumber} a  An integer number
	   * @param {number | BigNumber} b  An integer number
	   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
	   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
	   */
	  var xgcd = typed('xgcd', {
	    'number, number': _xgcd,
	    'BigNumber, BigNumber': _xgcdBigNumber
	    // TODO: implement support for Fraction
	  });

	  xgcd.toTex = undefined; // use default template

	  return xgcd;

	  /**
	   * Calculate xgcd for two numbers
	   * @param {number} a
	   * @param {number} b
	   * @return {number} result
	   * @private
	   */
	  function _xgcd(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t = void 0; // used to swap two variables
	    var q = void 0; // quotient
	    var r = void 0; // remainder
	    var x = 0;
	    var lastx = 1;
	    var y = 1;
	    var lasty = 0;

	    if (!isInteger$a(a) || !isInteger$a(b)) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (b) {
	      q = Math.floor(a / b);
	      r = a - q * b;

	      t = x;
	      x = lastx - q * x;
	      lastx = t;

	      t = y;
	      y = lasty - q * y;
	      lasty = t;

	      a = b;
	      b = r;
	    }

	    var res = void 0;
	    if (a < 0) {
	      res = [-a, -lastx, -lasty];
	    } else {
	      res = [a, a ? lastx : 0, lasty];
	    }
	    return config.matrix === 'Array' ? res : matrix$$1(res);
	  }

	  /**
	   * Calculate xgcd for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @return {BigNumber[]} result
	   * @private
	   */
	  function _xgcdBigNumber(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var // used to swap two variables
	    t = void 0;

	    var // quotient
	    q = void 0;

	    var // remainder
	    r = void 0;

	    var zero = new type.BigNumber(0);
	    var one = new type.BigNumber(1);
	    var x = zero;
	    var lastx = one;
	    var y = one;
	    var lasty = zero;

	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (!b.isZero()) {
	      q = a.div(b).floor();
	      r = a.mod(b);

	      t = x;
	      x = lastx.minus(q.times(x));
	      lastx = t;

	      t = y;
	      y = lasty.minus(q.times(y));
	      lasty = t;

	      a = b;
	      b = r;
	    }

	    var res = void 0;
	    if (a.lt(zero)) {
	      res = [a.neg(), lastx.neg(), lasty.neg()];
	    } else {
	      res = [a, !a.isZero() ? lastx : 0, lasty];
	    }
	    return config.matrix === 'Array' ? res : matrix$$1(res);
	  }
	}

	var name$2d = 'xgcd';
	var factory_1$2o = factory$2o;

	var xgcd = {
		name: name$2d,
		factory: factory_1$2o
	};

	var arithmetic = [abs, add, addScalar, cbrt, ceil, cube, divide, dotDivide, dotMultiply, dotPow, exp, expm1, fix, floor, gcd, hypot, lcm, log, log10, log1p, log2, mod, multiply, norm, nthRoot, nthRoots, pow, round, sign, sqrt, square, subtract, unaryMinus, unaryPlus, xgcd];

	/**
	 * Bitwise not
	 * @param {BigNumber} x
	 * @return {BigNumber} Result of ~`x`, fully precise
	 *
	 */

	var bitNot = function bitNot(x) {
	  if (x.isFinite() && !x.isInteger()) {
	    throw new Error('Integer expected in function bitNot');
	  }

	  var BigNumber = x.constructor;
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({ precision: 1E9 });

	  var result = x.plus(new BigNumber(1));
	  result.s = -result.s || null;

	  BigNumber.config({ precision: prevPrec });
	  return result;
	};

	/**
	 * Applies bitwise function to numbers
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @param {function (a, b)} func
	 * @return {BigNumber}
	 */
	var bitwise = function bitwise(x, y, func) {
	  var BigNumber = x.constructor;

	  var xBits = void 0,
	      yBits = void 0;
	  var xSign = +(x.s < 0);
	  var ySign = +(y.s < 0);
	  if (xSign) {
	    xBits = decCoefficientToBinaryString(bitNot(x));
	    for (var i = 0; i < xBits.length; ++i) {
	      xBits[i] ^= 1;
	    }
	  } else {
	    xBits = decCoefficientToBinaryString(x);
	  }
	  if (ySign) {
	    yBits = decCoefficientToBinaryString(bitNot(y));
	    for (var _i = 0; _i < yBits.length; ++_i) {
	      yBits[_i] ^= 1;
	    }
	  } else {
	    yBits = decCoefficientToBinaryString(y);
	  }

	  var minBits = void 0,
	      maxBits = void 0,
	      minSign = void 0;
	  if (xBits.length <= yBits.length) {
	    minBits = xBits;
	    maxBits = yBits;
	    minSign = xSign;
	  } else {
	    minBits = yBits;
	    maxBits = xBits;
	    minSign = ySign;
	  }

	  var shortLen = minBits.length;
	  var longLen = maxBits.length;
	  var expFuncVal = func(xSign, ySign) ^ 1;
	  var outVal = new BigNumber(expFuncVal ^ 1);
	  var twoPower = new BigNumber(1);
	  var two = new BigNumber(2);

	  var prevPrec = BigNumber.precision;
	  BigNumber.config({ precision: 1E9 });

	  while (shortLen > 0) {
	    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }
	  while (longLen > 0) {
	    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }

	  BigNumber.config({ precision: prevPrec });

	  if (expFuncVal === 0) {
	    outVal.s = -outVal.s;
	  }
	  return outVal;
	};

	/* Extracted from decimal.js, and edited to specialize. */
	function decCoefficientToBinaryString(x) {
	  // Convert to string
	  var a = x.d; // array with digits
	  var r = a[0] + '';

	  for (var i = 1; i < a.length; ++i) {
	    var s = a[i] + '';
	    for (var z = 7 - s.length; z--;) {
	      s = '0' + s;
	    }

	    r += s;
	  }

	  var j = r.length;
	  while (r.charAt(j) === '0') {
	    j--;
	  }

	  var xe = x.e;
	  var str = r.slice(0, j + 1 || 1);
	  var strL = str.length;
	  if (xe > 0) {
	    if (++xe > strL) {
	      // Append zeros.
	      xe -= strL;
	      while (xe--) {
	        str += '0';
	      }
	    } else if (xe < strL) {
	      str = str.slice(0, xe) + '.' + str.slice(xe);
	    }
	  }

	  // Convert from base 10 (decimal) to base 2
	  var arr = [0];
	  for (var _i2 = 0; _i2 < str.length;) {
	    var arrL = arr.length;
	    while (arrL--) {
	      arr[arrL] *= 10;
	    }

	    arr[0] += parseInt(str.charAt(_i2++)); // convert to int
	    for (var _j = 0; _j < arr.length; ++_j) {
	      if (arr[_j] > 1) {
	        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
	          arr[_j + 1] = 0;
	        }

	        arr[_j + 1] += arr[_j] >> 1;
	        arr[_j] &= 1;
	      }
	    }
	  }

	  return arr.reverse();
	}

	/**
	 * Bitwise and for Bignumbers
	 *
	 * Special Cases:
	 *   N &  n =  N
	 *   n &  0 =  0
	 *   n & -1 =  n
	 *   n &  n =  n
	 *   I &  I =  I
	 *  -I & -I = -I
	 *   I & -I =  0
	 *   I &  n =  n
	 *   I & -n =  I
	 *  -I &  n =  0
	 *  -I & -n = -I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` & `y`, is fully precise
	 * @private
	 */
	var bitAnd = function bitAnd(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitAnd');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero() || y.eq(-1) || x.eq(y)) {
	    return x;
	  }
	  if (y.isZero() || x.eq(-1)) {
	    return y;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      if (x.isNegative() === y.isNegative()) {
	        return x;
	      }
	      return new BigNumber(0);
	    }
	    if (!x.isFinite()) {
	      if (y.isNegative()) {
	        return x;
	      }
	      if (x.isNegative()) {
	        return new BigNumber(0);
	      }
	      return y;
	    }
	    if (!y.isFinite()) {
	      if (x.isNegative()) {
	        return y;
	      }
	      if (y.isNegative()) {
	        return new BigNumber(0);
	      }
	      return x;
	    }
	  }
	  return bitwise(x, y, function (a, b) {
	    return a & b;
	  });
	};

	var isInteger$b = number.isInteger;


	function factory$2p(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm06$$1 = load(algorithm06);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Bitwise AND two values, `x & y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitAnd(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitAnd(53, 131)               // returns number 1
	   *
	   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
	   *
	   * See also:
	   *
	   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to and
	   * @param  {number | BigNumber | Array | Matrix} y Second value to and
	   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
	   */
	  var bitAnd$$1 = typed('bitAnd', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$b(x) || !isInteger$b(y)) {
	        throw new Error('Integers expected in function bitAnd');
	      }

	      return x & y;
	    },

	    'BigNumber, BigNumber': bitAnd,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm06$$1(x, y, bitAnd$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, bitAnd$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$$1(x, y, bitAnd$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, bitAnd$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitAnd$$1(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitAnd$$1(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitAnd$$1(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$$1(x, y, bitAnd$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, bitAnd$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11$$1(y, x, bitAnd$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, bitAnd$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, bitAnd$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, bitAnd$$1, true).valueOf();
	    }
	  });

	  bitAnd$$1.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['bitAnd'] + '${args[1]}\\right)'
	  };

	  return bitAnd$$1;
	}

	var name$2e = 'bitAnd';
	var factory_1$2p = factory$2p;

	var bitAnd$1 = {
		name: name$2e,
		factory: factory_1$2p
	};

	var isInteger$c = number.isInteger;

	function factory$2q(type, config, load, typed) {
	  var latex$$1 = latex;

	  /**
	   * Bitwise NOT value, `~x`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.bitNot(x)
	   *
	   * Examples:
	   *
	   *    math.bitNot(1)               // returns number -2
	   *
	   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
	   *
	   * See also:
	   *
	   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to not
	   * @return {number | BigNumber | Array | Matrix} NOT of `x`
	   */
	  var bitNot$$1 = typed('bitNot', {
	    'number': function number$$1(x) {
	      if (!isInteger$c(x)) {
	        throw new Error('Integer expected in function bitNot');
	      }

	      return ~x;
	    },

	    'BigNumber': bitNot,

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bitNot$$1);
	    }
	  });

	  bitNot$$1.toTex = {
	    1: latex$$1.operators['bitNot'] + '\\left(${args[0]}\\right)'
	  };

	  return bitNot$$1;
	}

	var name$2f = 'bitNot';
	var factory_1$2q = factory$2q;

	var bitNot$1 = {
		name: name$2f,
		factory: factory_1$2q
	};

	/**
	 * Bitwise OR for BigNumbers
	 *
	 * Special Cases:
	 *   N |  n =  N
	 *   n |  0 =  n
	 *   n | -1 = -1
	 *   n |  n =  n
	 *   I |  I =  I
	 *  -I | -I = -I
	 *   I | -n = -1
	 *   I | -I = -1
	 *   I |  n =  I
	 *  -I |  n = -I
	 *  -I | -n = -n
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` | `y`, fully precise
	 */
	var bitOr = function bitOr(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitOr');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var negOne = new BigNumber(-1);
	  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
	    return y;
	  }
	  if (y.isZero() || x.eq(negOne)) {
	    return x;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
	      return negOne;
	    }
	    if (x.isNegative() && y.isNegative()) {
	      return x.isFinite() ? x : y;
	    }
	    return x.isFinite() ? y : x;
	  }

	  return bitwise(x, y, function (a, b) {
	    return a | b;
	  });
	};

	var isInteger$d = number.isInteger;


	function factory$2r(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm04$$1 = load(algorithm04);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Bitwise OR two values, `x | y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the lowest print base.
	   *
	   * Syntax:
	   *
	   *    math.bitOr(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitOr(1, 2)               // returns number 3
	   *
	   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to or
	   * @param  {number | BigNumber | Array | Matrix} y Second value to or
	   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
	   */
	  var bitOr$$1 = typed('bitOr', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$d(x) || !isInteger$d(y)) {
	        throw new Error('Integers expected in function bitOr');
	      }

	      return x | y;
	    },

	    'BigNumber, BigNumber': bitOr,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm04$$1(x, y, bitOr$$1);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm01$$1(y, x, bitOr$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$$1(x, y, bitOr$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, bitOr$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitOr$$1(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitOr$$1(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitOr$$1(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10$$1(x, y, bitOr$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, bitOr$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10$$1(y, x, bitOr$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, bitOr$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, bitOr$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, bitOr$$1, true).valueOf();
	    }
	  });

	  bitOr$$1.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['bitOr'] + '${args[1]}\\right)'
	  };

	  return bitOr$$1;
	}

	var name$2g = 'bitOr';
	var factory_1$2r = factory$2r;

	var bitOr$1 = {
		name: name$2g,
		factory: factory_1$2r
	};

	/**
	 * Bitwise XOR for BigNumbers
	 *
	 * Special Cases:
	 *   N ^  n =  N
	 *   n ^  0 =  n
	 *   n ^  n =  0
	 *   n ^ -1 = ~n
	 *   I ^  n =  I
	 *   I ^ -n = -I
	 *   I ^ -I = -1
	 *  -I ^  n = -I
	 *  -I ^ -n =  I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` ^ `y`, fully precise
	 *
	 */
	var bitXor = function bitXor(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitXor');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero()) {
	    return y;
	  }
	  if (y.isZero()) {
	    return x;
	  }

	  if (x.eq(y)) {
	    return new BigNumber(0);
	  }

	  var negOne = new BigNumber(-1);
	  if (x.eq(negOne)) {
	    return bitNot(y);
	  }
	  if (y.eq(negOne)) {
	    return bitNot(x);
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      return negOne;
	    }
	    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
	  }
	  return bitwise(x, y, function (a, b) {
	    return a ^ b;
	  });
	};

	var isInteger$e = number.isInteger;


	function factory$2s(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Bitwise XOR two values, `x ^ y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitXor(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitXor(1, 2)               // returns number 3
	   *
	   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to xor
	   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
	   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
	   */
	  var bitXor$$1 = typed('bitXor', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$e(x) || !isInteger$e(y)) {
	        throw new Error('Integers expected in function bitXor');
	      }

	      return x ^ y;
	    },

	    'BigNumber, BigNumber': bitXor,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, bitXor$$1);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, bitXor$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, bitXor$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, bitXor$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitXor$$1(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitXor$$1(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitXor$$1(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, bitXor$$1, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, bitXor$$1, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, bitXor$$1, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, bitXor$$1, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, bitXor$$1, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, bitXor$$1, true).valueOf();
	    }
	  });

	  bitXor$$1.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['bitXor'] + '${args[1]}\\right)'
	  };

	  return bitXor$$1;
	}

	var name$2h = 'bitXor';
	var factory_1$2s = factory$2s;

	var bitXor$1 = {
		name: name$2h,
		factory: factory_1$2s
	};

	/**
	 * Bitwise left shift
	 *
	 * Special Cases:
	 *  n << -n = N
	 *  n <<  N = N
	 *  N <<  n = N
	 *  n <<  0 = n
	 *  0 <<  n = 0
	 *  I <<  I = N
	 *  I <<  n = I
	 *  n <<  I = I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` << `y`
	 *
	 */

	var leftShift = function leftShift(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function leftShift');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!x.isFinite() && !y.isFinite()) {
	    return new BigNumber(NaN);
	  }

	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.times(Math.pow(2, y.toNumber()) + '');
	  }
	  return x.times(new BigNumber(2).pow(y));
	};

	function factory$2t(type, config, load, typed) {
	  var equalScalar$$1 = load(equalScalar);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm08 = function algorithm08(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    }

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    }

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues || !bvalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
	    }

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt = void 0;
	    // equal signature to use
	    var eq = equalScalar$$1;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar$$1, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // vars
	    var k = void 0,
	        k0 = void 0,
	        k1 = void 0,
	        i = void 0;

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values in a
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // mark workspace
	        w[i] = mark;
	        // set value
	        x[i] = avalues[k];
	        // add index
	        cindex.push(i);
	      }
	      // loop values in b
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check value exists in workspace
	        if (w[i] === mark) {
	          // evaluate callback
	          x[i] = cf(x[i], bvalues[k]);
	        }
	      }
	      // initialize first index in j
	      k = cptr[j];
	      // loop index in j
	      while (k < cindex.length) {
	        // row
	        i = cindex[k];
	        // value @ i
	        var v = x[i];
	        // check for zero value
	        if (!eq(v, zero)) {
	          // push value
	          cvalues.push(v);
	          // increment pointer
	          k++;
	        } else {
	          // remove value @ i, do not increment pointer
	          cindex.splice(k, 1);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm08;
	}

	var name$2i = 'algorithm08';
	var factory_1$2t = factory$2t;

	var algorithm08 = {
		name: name$2i,
		factory: factory_1$2t
	};

	var isInteger$f = number.isInteger;


	function factory$2u(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);
	  var equalScalar$$1 = load(equalScalar);
	  var zeros$$1 = load(zeros);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm02$$1 = load(algorithm02);
	  var algorithm08$$1 = load(algorithm08);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.leftShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.leftShift(1, 2)               // returns number 4
	   *
	   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
	   *
	   * See also:
	   *
	   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
	   */
	  var leftShift$$1 = typed('leftShift', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$f(x) || !isInteger$f(y)) {
	        throw new Error('Integers expected in function leftShift');
	      }

	      return x << y;
	    },

	    'BigNumber, BigNumber': leftShift,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm08$$1(x, y, leftShift$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, leftShift$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$$1(x, y, leftShift$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, leftShift$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return leftShift$$1(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return leftShift$$1(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return leftShift$$1(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$$1(y, 0)) {
	        return x.clone();
	      }
	      return algorithm11$$1(x, y, leftShift$$1, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$$1(y, 0)) {
	        return x.clone();
	      }
	      return algorithm14$$1(x, y, leftShift$$1, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$$1(x, 0)) {
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm10$$1(y, x, leftShift$$1, true);
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$$1(x, 0)) {
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm14$$1(y, x, leftShift$$1, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return leftShift$$1(matrix$$1(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return leftShift$$1(x, matrix$$1(y)).valueOf();
	    }
	  });

	  leftShift$$1.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['leftShift'] + '${args[1]}\\right)'
	  };

	  return leftShift$$1;
	}

	var name$2j = 'leftShift';
	var factory_1$2u = factory$2u;

	var leftShift$1 = {
		name: name$2j,
		factory: factory_1$2u
	};

	/*
	 * Special Cases:
	 *   n >> -n =  N
	 *   n >>  N =  N
	 *   N >>  n =  N
	 *   I >>  I =  N
	 *   n >>  0 =  n
	 *   I >>  n =  I
	 *  -I >>  n = -I
	 *  -I >>  I = -I
	 *   n >>  I =  I
	 *  -n >>  I = -1
	 *   0 >>  n =  0
	 *
	 * @param {BigNumber} value
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of `x` >> `y`
	 *
	 */

	var rightArithShift = function rightArithShift(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function rightArithShift');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!y.isFinite()) {
	    if (x.isNegative()) {
	      return new BigNumber(-1);
	    }
	    if (!x.isFinite()) {
	      return new BigNumber(NaN);
	    }
	    return new BigNumber(0);
	  }

	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.div(Math.pow(2, y.toNumber()) + '').floor();
	  }
	  return x.div(new BigNumber(2).pow(y)).floor();
	};

	var isInteger$g = number.isInteger;


	function factory$2v(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);
	  var equalScalar$$1 = load(equalScalar);
	  var zeros$$1 = load(zeros);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm02$$1 = load(algorithm02);
	  var algorithm08$$1 = load(algorithm08);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightArithShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightArithShift(4, 2)               // returns number 1
	   *
	   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
	   */
	  var rightArithShift$$1 = typed('rightArithShift', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$g(x) || !isInteger$g(y)) {
	        throw new Error('Integers expected in function rightArithShift');
	      }

	      return x >> y;
	    },

	    'BigNumber, BigNumber': rightArithShift,

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm08$$1(x, y, rightArithShift$$1, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, rightArithShift$$1, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$$1(x, y, rightArithShift$$1, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, rightArithShift$$1);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return rightArithShift$$1(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return rightArithShift$$1(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return rightArithShift$$1(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$$1(y, 0)) {
	        return x.clone();
	      }
	      return algorithm11$$1(x, y, rightArithShift$$1, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$$1(y, 0)) {
	        return x.clone();
	      }
	      return algorithm14$$1(x, y, rightArithShift$$1, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$$1(x, 0)) {
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm10$$1(y, x, rightArithShift$$1, true);
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$$1(x, 0)) {
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm14$$1(y, x, rightArithShift$$1, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return rightArithShift$$1(matrix$$1(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return rightArithShift$$1(x, matrix$$1(y)).valueOf();
	    }
	  });

	  rightArithShift$$1.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['rightArithShift'] + '${args[1]}\\right)'
	  };

	  return rightArithShift$$1;
	}

	var name$2k = 'rightArithShift';
	var factory_1$2v = factory$2v;

	var rightArithShift$1 = {
		name: name$2k,
		factory: factory_1$2v
	};

	var isInteger$h = number.isInteger;

	function factory$2w(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);
	  var equalScalar$$1 = load(equalScalar);
	  var zeros$$1 = load(zeros);

	  var algorithm01$$1 = load(algorithm01);
	  var algorithm02$$1 = load(algorithm02);
	  var algorithm08$$1 = load(algorithm08);
	  var algorithm10$$1 = load(algorithm10);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightLogShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightLogShift(4, 2)               // returns number 1
	   *
	   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
	   *
	   * @param  {number | Array | Matrix} x Value to be shifted
	   * @param  {number} y Amount of shifts
	   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
	   */

	  var rightLogShift = typed('rightLogShift', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$h(x) || !isInteger$h(y)) {
	        throw new Error('Integers expected in function rightLogShift');
	      }

	      return x >>> y;
	    },

	    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm08$$1(x, y, rightLogShift, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, rightLogShift, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$$1(x, y, rightLogShift, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, rightLogShift);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$$1(y, 0)) {
	        return x.clone();
	      }
	      return algorithm11$$1(x, y, rightLogShift, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$$1(y, 0)) {
	        return x.clone();
	      }
	      return algorithm14$$1(x, y, rightLogShift, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$$1(x, 0)) {
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm10$$1(y, x, rightLogShift, true);
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$$1(x, 0)) {
	        return zeros$$1(y.size(), y.storage());
	      }
	      return algorithm14$$1(y, x, rightLogShift, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix$$1(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix$$1(y)).valueOf();
	    }
	  });

	  rightLogShift.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['rightLogShift'] + '${args[1]}\\right)'
	  };

	  return rightLogShift;
	}

	var name$2l = 'rightLogShift';
	var factory_1$2w = factory$2w;

	var rightLogShift = {
		name: name$2l,
		factory: factory_1$2w
	};

	var bitwise$1 = [bitAnd$1, bitNot$1, bitOr$1, bitXor$1, leftShift$1, rightArithShift$1, rightLogShift];

	/** @param {integer} i
	 *  @param {integer} n
	 *  @returns : product of i to n
	 */
	function product(i, n) {
	  var half = void 0;
	  if (n < i) {
	    return 1;
	  }
	  if (n === i) {
	    return n;
	  }
	  half = n + i >> 1; // divide (n + i) by 2 and truncate to integer
	  return product(i, half) * product(half + 1, n);
	}

	var product_1 = product;

	var isInteger$i = number.isInteger;

	function factory$2x(type, config, load, typed) {
	  var multiply$$1 = load(multiply);
	  var pow$$1 = load(pow);
	  var product = product_1;
	  /**
	   * Compute the gamma function of a value using Lanczos approximation for
	   * small values, and an extended Stirling approximation for large values.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gamma(n)
	   *
	   * Examples:
	   *
	   *    math.gamma(5)       // returns 24
	   *    math.gamma(-0.5)    // returns -3.5449077018110335
	   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
	   *
	   * See also:
	   *
	   *    combinations, factorial, permutations
	   *
	   * @param {number | Array | Matrix} n   A real or complex number
	   * @return {number | Array | Matrix}    The gamma of `n`
	   */

	  var gamma = typed('gamma', {

	    'number': function number$$1(n) {
	      var t = void 0,
	          x = void 0;

	      if (isInteger$i(n)) {
	        if (n <= 0) {
	          return isFinite(n) ? Infinity : NaN;
	        }

	        if (n > 171) {
	          return Infinity; // Will overflow
	        }

	        return product(1, n - 1);
	      }

	      if (n < 0.5) {
	        return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
	      }

	      if (n >= 171.35) {
	        return Infinity; // will overflow
	      }

	      if (n > 85.0) {
	        // Extended Stirling Approx
	        var twoN = n * n;
	        var threeN = twoN * n;
	        var fourN = threeN * n;
	        var fiveN = fourN * n;
	        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
	      }

	      --n;
	      x = p[0];
	      for (var i = 1; i < p.length; ++i) {
	        x += p[i] / (n + i);
	      }

	      t = n + g + 0.5;
	      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
	    },

	    'Complex': function Complex(n) {
	      var t = void 0,
	          x = void 0;

	      if (n.im === 0) {
	        return gamma(n.re);
	      }

	      n = new type.Complex(n.re - 1, n.im);
	      x = new type.Complex(p[0], 0);
	      for (var i = 1; i < p.length; ++i) {
	        var real = n.re + i; // x += p[i]/(n+i)
	        var den = real * real + n.im * n.im;
	        if (den !== 0) {
	          x.re += p[i] * real / den;
	          x.im += -(p[i] * n.im) / den;
	        } else {
	          x.re = p[i] < 0 ? -Infinity : Infinity;
	        }
	      }

	      t = new type.Complex(n.re + g + 0.5, n.im);
	      var twoPiSqrt = Math.sqrt(2 * Math.PI);

	      n.re += 0.5;
	      var result = pow$$1(t, n);
	      if (result.im === 0) {
	        // sqrt(2*PI)*result
	        result.re *= twoPiSqrt;
	      } else if (result.re === 0) {
	        result.im *= twoPiSqrt;
	      } else {
	        result.re *= twoPiSqrt;
	        result.im *= twoPiSqrt;
	      }

	      var r = Math.exp(-t.re); // exp(-t)
	      t.re = r * Math.cos(-t.im);
	      t.im = r * Math.sin(-t.im);

	      return multiply$$1(multiply$$1(result, t), x);
	    },

	    'BigNumber': function BigNumber(n) {
	      if (n.isInteger()) {
	        return n.isNegative() || n.isZero() ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));
	      }

	      if (!n.isFinite()) {
	        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
	      }

	      throw new Error('Integer BigNumber expected');
	    },

	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, gamma);
	    }
	  });

	  /**
	   * Calculate factorial for a BigNumber
	   * @param {BigNumber} n
	   * @returns {BigNumber} Returns the factorial of n
	   */

	  function bigFactorial(n) {
	    if (n.isZero()) {
	      return new type.BigNumber(1); // 0! is per definition 1
	    }

	    var precision = config.precision + (Math.log(n.toNumber()) | 0);
	    var Big = type.BigNumber.clone({ precision: precision });

	    var res = new Big(n);
	    var value = n.toNumber() - 1; // number
	    while (value > 1) {
	      res = res.times(value);
	      value--;
	    }

	    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
	  }

	  gamma.toTex = { 1: '\\Gamma\\left(${args[0]}\\right)' };

	  return gamma;
	}

	// TODO: comment on the variables g and p

	var g = 4.7421875;

	var p = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

	var name$2m = 'gamma';
	var factory_1$2x = factory$2x;

	var gamma = {
		name: name$2m,
		factory: factory_1$2x
	};

	function factory$2y(type, config, load, typed) {
	  var gamma$$1 = load(gamma);
	  var latex$$1 = latex;

	  /**
	   * Compute the factorial of a value
	   *
	   * Factorial only supports an integer value as argument.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.factorial(n)
	   *
	   * Examples:
	   *
	   *    math.factorial(5)    // returns 120
	   *    math.factorial(3)    // returns 6
	   *
	   * See also:
	   *
	   *    combinations, gamma, permutations
	   *
	   * @param {number | BigNumber | Array | Matrix} n   An integer number
	   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
	   */
	  var factorial = typed('factorial', {
	    'number': function number(n) {
	      if (n < 0) {
	        throw new Error('Value must be non-negative');
	      }

	      return gamma$$1(n + 1);
	    },

	    'BigNumber': function BigNumber(n) {
	      if (n.isNegative()) {
	        throw new Error('Value must be non-negative');
	      }

	      return gamma$$1(n.plus(1));
	    },

	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, factorial);
	    }
	  });

	  factorial.toTex = {
	    1: '\\left(${args[0]}\\right)' + latex$$1.operators['factorial']
	  };

	  return factorial;
	}

	var name$2n = 'factorial';
	var factory_1$2y = factory$2y;

	var factorial = {
		name: name$2n,
		factory: factory_1$2y
	};

	var isInteger$j = number.isInteger;

	function factory$2z(type, config, load, typed) {
	  /**
	   * Compute the number of ways of picking `k` unordered outcomes from `n`
	   * possibilities.
	   *
	   * Combinations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.combinations(n, k)
	   *
	   * Examples:
	   *
	   *    math.combinations(7, 5) // returns 21
	   *
	   * See also:
	   *
	   *    permutations, factorial
	   *
	   * @param {number | BigNumber} n    Total number of objects in the set
	   * @param {number | BigNumber} k    Number of objects in the subset
	   * @return {number | BigNumber}     Number of possible combinations.
	   */

	  var combinations = typed('combinations', {
	    'number, number': function numberNumber(n, k) {
	      var prodrange = void 0,
	          nMinusk = void 0;

	      if (!isInteger$j(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (!isInteger$j(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k > n) {
	        throw new TypeError('k must be less than or equal to n');
	      }

	      nMinusk = n - k;

	      if (k < nMinusk) {
	        prodrange = product_1(nMinusk + 1, n);
	        return prodrange / product_1(1, k);
	      }
	      prodrange = product_1(k + 1, n);
	      return prodrange / product_1(1, nMinusk);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
	      var max = void 0,
	          result = void 0,
	          i = void 0,
	          ii = void 0;
	      var one = new type.BigNumber(1);

	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('k must be less than n in function combinations');
	      }

	      max = n.minus(k);
	      if (k.lt(max)) max = k;
	      result = one;
	      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
	        result = result.times(max.plus(i)).dividedBy(i);
	      }

	      return result;
	    }

	    // TODO: implement support for collection in combinations
	  });

	  combinations.toTex = { 2: '\\binom{${args[0]}}{${args[1]}}' };

	  return combinations;
	}

	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}

	var name$2o = 'combinations';
	var factory_1$2z = factory$2z;

	var combinations = {
		name: name$2o,
		factory: factory_1$2z
	};

	function factory$2A(type, config, load, typed) {
	  /**
	   * Test whether a value is an integer number.
	   * The function supports `number`, `BigNumber`, and `Fraction`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isInteger(x)
	   *
	   * Examples:
	   *
	   *    math.isInteger(2)                     // returns true
	   *    math.isInteger(0)                     // returns true
	   *    math.isInteger(0.5)                   // returns false
	   *    math.isInteger(math.bignumber(500))   // returns true
	   *    math.isInteger(math.fraction(4))      // returns true
	   *    math.isInteger('3')                   // returns true
	   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
	   *    math.isInteger(math.complex('2-4i')   // throws an error
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isZero
	   *
	   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
	   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isInteger = typed('isInteger', {
	    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?

	    'BigNumber': function BigNumber(x) {
	      return x.isInt();
	    },

	    'Fraction': function Fraction(x) {
	      return x.d === 1 && isFinite(x.n);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isInteger);
	    }
	  });

	  return isInteger;
	}

	var name$2p = 'isInteger';
	var factory_1$2A = factory$2A;

	var isInteger$k = {
		name: name$2p,
		factory: factory_1$2A
	};

	function factory$2B(type, config, load, typed) {
	  var add$$1 = load(add);
	  var subtract$$1 = load(subtract);
	  var multiply$$1 = load(multiply);
	  var divide$$1 = load(divide);
	  var pow$$1 = load(pow);
	  var factorial$$1 = load(factorial);
	  var combinations$$1 = load(combinations);
	  var isNegative$$1 = load(isNegative);
	  var isInteger = load(isInteger$k);
	  var larger$$1 = load(larger);

	  /**
	   * The Stirling numbers of the second kind, counts the number of ways to partition
	   * a set of n labelled objects into k nonempty unlabelled subsets.
	   * stirlingS2 only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   *  If n = k or k = 1, then s(n,k) = 1
	   *
	   * Syntax:
	   *
	   *   math.stirlingS2(n, k)
	   *
	   * Examples:
	   *
	   *    math.stirlingS2(5, 3) //returns 25
	   *
	   * See also:
	   *
	   *    bellNumbers
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     S(n,k)
	   */
	  var stirlingS2 = typed('stirlingS2', {
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
	      if (!isInteger(n) || isNegative$$1(n) || !isInteger(k) || isNegative$$1(k)) {
	        throw new TypeError('Non-negative integer value expected in function stirlingS2');
	      } else if (larger$$1(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function stirlingS2');
	      }

	      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
	      var kFactorial = factorial$$1(k);
	      var result = 0;
	      for (var i = 0; i <= k; i++) {
	        var negativeOne = pow$$1(-1, subtract$$1(k, i));
	        var kChooseI = combinations$$1(k, i);
	        var iPower = pow$$1(i, n);

	        result = add$$1(result, multiply$$1(multiply$$1(kChooseI, iPower), negativeOne));
	      }

	      return divide$$1(result, kFactorial);
	    }
	  });

	  stirlingS2.toTex = { 2: '\\mathrm{S}\\left(${args}\\right)' };

	  return stirlingS2;
	}

	var name$2q = 'stirlingS2';
	var factory_1$2B = factory$2B;

	var stirlingS2 = {
		name: name$2q,
		factory: factory_1$2B
	};

	function factory$2C(type, config, load, typed) {
	  var add$$1 = load(add);
	  var stirlingS2$$1 = load(stirlingS2);
	  var isNegative$$1 = load(isNegative);
	  var isInteger = load(isInteger$k);

	  /**
	   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
	   * bellNumbers only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.bellNumbers(n)
	   *
	   * Examples:
	   *
	   *    math.bellNumbers(3) // returns 5
	   *    math.bellNumbers(8) // returns 4140
	   *
	   * See also:
	   *
	   *    stirlingS2
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @return {Number | BigNumber}     B(n)
	   */
	  var bellNumbers = typed('bellNumbers', {
	    'number | BigNumber': function numberBigNumber(n) {
	      if (!isInteger(n) || isNegative$$1(n)) {
	        throw new TypeError('Non-negative integer value expected in function bellNumbers');
	      }

	      // Sum (k=0, n) S(n,k).
	      var result = 0;
	      for (var i = 0; i <= n; i++) {
	        result = add$$1(result, stirlingS2$$1(n, i));
	      }

	      return result;
	    }
	  });

	  bellNumbers.toTex = { 1: '\\mathrm{B}_{${args[0]}}' };

	  return bellNumbers;
	}

	var name$2r = 'bellNumbers';
	var factory_1$2C = factory$2C;

	var bellNumbers = {
		name: name$2r,
		factory: factory_1$2C
	};

	function factory$2D(type, config, load, typed) {
	  var combinations$$1 = load(combinations);
	  var add = load(addScalar);
	  var isPositive$$1 = load(isPositive);
	  var isInteger = load(isInteger$k);
	  var larger$$1 = load(larger);

	  /**
	   * The composition counts of n into k parts.
	   *
	   * composition only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *   math.composition(n, k)
	   *
	   * Examples:
	   *
	   *    math.composition(5, 3) // returns 6
	   *
	   * See also:
	   *
	   *    combinations
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
	   */
	  var composition = typed('composition', {
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
	      if (!isInteger(n) || !isPositive$$1(n) || !isInteger(k) || !isPositive$$1(k)) {
	        throw new TypeError('Positive integer value expected in function composition');
	      } else if (larger$$1(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function composition');
	      }

	      return combinations$$1(add(n, -1), add(k, -1));
	    }
	  });

	  composition.toTex = undefined; // use default template

	  return composition;
	}

	var name$2s = 'composition';
	var factory_1$2D = factory$2D;

	var composition = {
		name: name$2s,
		factory: factory_1$2D
	};

	function factory$2E(type, config, load, typed) {
	  var add$$1 = load(add);
	  var divide$$1 = load(divide);
	  var multiply$$1 = load(multiply);
	  var combinations$$1 = load(combinations);
	  var isNegative$$1 = load(isNegative);
	  var isInteger = load(isInteger$k);

	  /**
	   * The Catalan Numbers enumerate combinatorial structures of many different types.
	   * catalan only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.catalan(n)
	   *
	   * Examples:
	   *
	   *    math.catalan(3) // returns 5
	   *    math.catalan(8) // returns 1430
	   *
	   * See also:
	   *
	   *    bellNumbers
	   *
	   * @param {Number | BigNumber} n    nth Catalan number
	   * @return {Number | BigNumber}     Cn(n)
	   */
	  var catalan = typed('catalan', {
	    'number | BigNumber': function numberBigNumber(n) {
	      if (!isInteger(n) || isNegative$$1(n)) {
	        throw new TypeError('Non-negative integer value expected in function catalan');
	      }

	      return divide$$1(combinations$$1(multiply$$1(n, 2), n), add$$1(n, 1));
	    }
	  });

	  catalan.toTex = { 1: '\\mathrm{C}_{${args[0]}}' };

	  return catalan;
	}

	var name$2t = 'catalan';
	var factory_1$2E = factory$2E;

	var catalan = {
		name: name$2t,
		factory: factory_1$2E
	};

	var combinatorics = [bellNumbers, composition, stirlingS2, catalan];

	function factory$2F(type, config, load, typed) {
	  /**
	   * Compute the argument of a complex value.
	   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.arg(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 2)
	   *    math.arg(a) / math.pi          // returns number 0.25
	   *
	   *    const b = math.complex('2 + 3i')
	   *    math.arg(b)                    // returns number 0.982793723247329
	   *    math.atan2(3, 2)               // returns number 0.982793723247329
	   *
	   * See also:
	   *
	   *    re, im, conj, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The argument of x
	   */
	  var arg = typed('arg', {
	    'number': function number(x) {
	      return Math.atan2(0, x);
	    },

	    'BigNumber': function BigNumber(x) {
	      return type.BigNumber.atan2(0, x);
	    },

	    'Complex': function Complex(x) {
	      return x.arg();
	    },

	    // TODO: implement BigNumber support for function arg

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, arg);
	    }
	  });

	  arg.toTex = { 1: '\\arg\\left(${args[0]}\\right)' };

	  return arg;
	}

	var name$2u = 'arg';
	var factory_1$2F = factory$2F;

	var arg = {
		name: name$2u,
		factory: factory_1$2F
	};

	function factory$2G(type, config, load, typed) {
	  /**
	   * Get the imaginary part of a complex number.
	   * For a complex number `a + bi`, the function returns `b`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.im(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 3)
	   *    math.re(a)                     // returns number 2
	   *    math.im(a)                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')) // returns number -5.2
	   *    math.re(math.complex(2.4))     // returns number 0
	   *
	   * See also:
	   *
	   *    re, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
	   */
	  var im = typed('im', {
	    'number': function number(x) {
	      return 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(0);
	    },

	    'Complex': function Complex(x) {
	      return x.im;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, im);
	    }
	  });

	  im.toTex = { 1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace' };

	  return im;
	}

	var name$2v = 'im';
	var factory_1$2G = factory$2G;

	var im = {
		name: name$2v,
		factory: factory_1$2G
	};

	function factory$2H(type, config, load, typed) {
	  /**
	   * Get the real part of a complex number.
	   * For a complex number `a + bi`, the function returns `a`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.re(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 3)
	   *    math.re(a)                     // returns number 2
	   *    math.im(a)                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')) // returns number 0
	   *    math.re(math.complex(2.4))     // returns number 2.4
	   *
	   * See also:
	   *
	   *    im, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The real part of x
	   */
	  var re = typed('re', {
	    'number': function number(x) {
	      return x;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x;
	    },

	    'Complex': function Complex(x) {
	      return x.re;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, re);
	    }
	  });

	  re.toTex = { 1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace' };

	  return re;
	}

	var name$2w = 're';
	var factory_1$2H = factory$2H;

	var re = {
		name: name$2w,
		factory: factory_1$2H
	};

	var complex$5 = [arg, conj, im, re];

	function factory$2I(type, config, load, typed) {
	  var abs$$1 = load(abs);
	  var add$$1 = load(add);
	  var addScalar$$1 = load(addScalar);
	  var matrix$$1 = load(matrix);
	  var multiply$$1 = load(multiply);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  var divideScalar$$1 = load(divideScalar);
	  var subtract$$1 = load(subtract);
	  var smaller$$1 = load(smaller);
	  var equalScalar$$1 = load(equalScalar);

	  /**
	   * Calculates the point of intersection of two lines in two or three dimensions
	   * and of a line and a plane in three dimensions. The inputs are in the form of
	   * arrays or 1 dimensional matrices. The line intersection functions return null
	   * if the lines do not meet.
	   *
	   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
	   *
	   * Syntax:
	   *
	   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
	   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
	   *
	   * Examples:
	   *
	   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
	   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
	   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
	   *
	   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
	   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
	   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
	   *                              OR Co-efficients of the plane's equation
	   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
	   *                              OR null if the calculation is for line and plane
	   * @return {Array}              Returns the point of intersection of lines/lines-planes
	   */
	  var intersect = typed('intersect', {
	    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
	      if (!_3d(x)) {
	        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	      }
	      if (!_3d(y)) {
	        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	      }
	      if (!_4d(plane)) {
	        throw new TypeError('Array with 4 numbers expected as third argument');
	      }

	      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
	    },

	    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
	      if (w.length === 2) {
	        if (!_2d(w)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
	        }
	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
	        }

	        return _intersect2d(w, x, y, z);
	      } else if (w.length === 3) {
	        if (!_3d(w)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
	        }
	        if (!_3d(z)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
	        }

	        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
	      } else {
	        throw new TypeError('Arrays with two or thee dimensional points expected');
	      }
	    },

	    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
	      return matrix$$1(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
	    },

	    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
	      // TODO: output matrix type should match input matrix type
	      return matrix$$1(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
	    }
	  });

	  function _isNumber(a) {
	    // intersect supports numbers and bignumbers
	    return typeof a === 'number' || type.isBigNumber(a);
	  }

	  function _2d(x) {
	    return x.length === 2 && _isNumber(x[0]) && _isNumber(x[1]);
	  }

	  function _3d(x) {
	    return x.length === 3 && _isNumber(x[0]) && _isNumber(x[1]) && _isNumber(x[2]);
	  }

	  function _4d(x) {
	    return x.length === 4 && _isNumber(x[0]) && _isNumber(x[1]) && _isNumber(x[2]) && _isNumber(x[3]);
	  }

	  function _intersect2d(p1a, p1b, p2a, p2b) {
	    var o1 = p1a;
	    var o2 = p2a;
	    var d1 = subtract$$1(o1, p1b);
	    var d2 = subtract$$1(o2, p2b);
	    var det = subtract$$1(multiplyScalar$$1(d1[0], d2[1]), multiplyScalar$$1(d2[0], d1[1]));
	    if (smaller$$1(abs$$1(det), config.epsilon)) {
	      return null;
	    }
	    var d20o11 = multiplyScalar$$1(d2[0], o1[1]);
	    var d21o10 = multiplyScalar$$1(d2[1], o1[0]);
	    var d20o21 = multiplyScalar$$1(d2[0], o2[1]);
	    var d21o20 = multiplyScalar$$1(d2[1], o2[0]);
	    var t = divideScalar$$1(addScalar$$1(subtract$$1(subtract$$1(d20o11, d21o10), d20o21), d21o20), det);
	    return add$$1(multiply$$1(d1, t), o1);
	  }

	  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
	    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
	    var add1 = multiplyScalar$$1(subtract$$1(a, b), subtract$$1(c, d));
	    var add2 = multiplyScalar$$1(subtract$$1(e, f), subtract$$1(g, h));
	    var add3 = multiplyScalar$$1(subtract$$1(i, j), subtract$$1(k, l));
	    return addScalar$$1(addScalar$$1(add1, add2), add3);
	  }

	  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
	    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);
	    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);
	    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);
	    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);
	    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);
	    var ta = divideScalar$$1(subtract$$1(multiplyScalar$$1(d1343, d4321), multiplyScalar$$1(d1321, d4343)), subtract$$1(multiplyScalar$$1(d2121, d4343), multiplyScalar$$1(d4321, d4321)));
	    var tb = divideScalar$$1(addScalar$$1(d1343, multiplyScalar$$1(ta, d4321)), d4343);

	    var pax = addScalar$$1(x1, multiplyScalar$$1(ta, subtract$$1(x2, x1)));
	    var pay = addScalar$$1(y1, multiplyScalar$$1(ta, subtract$$1(y2, y1)));
	    var paz = addScalar$$1(z1, multiplyScalar$$1(ta, subtract$$1(z2, z1)));
	    var pbx = addScalar$$1(x3, multiplyScalar$$1(tb, subtract$$1(x4, x3)));
	    var pby = addScalar$$1(y3, multiplyScalar$$1(tb, subtract$$1(y4, y3)));
	    var pbz = addScalar$$1(z3, multiplyScalar$$1(tb, subtract$$1(z4, z3)));
	    if (equalScalar$$1(pax, pbx) && equalScalar$$1(pay, pby) && equalScalar$$1(paz, pbz)) {
	      return [pax, pay, paz];
	    } else {
	      return null;
	    }
	  }

	  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
	    var x1x = multiplyScalar$$1(x1, x);
	    var x2x = multiplyScalar$$1(x2, x);
	    var y1y = multiplyScalar$$1(y1, y);
	    var y2y = multiplyScalar$$1(y2, y);
	    var z1z = multiplyScalar$$1(z1, z);
	    var z2z = multiplyScalar$$1(z2, z);
	    var t = divideScalar$$1(subtract$$1(subtract$$1(subtract$$1(c, x1x), y1y), z1z), subtract$$1(subtract$$1(subtract$$1(addScalar$$1(addScalar$$1(x2x, y2y), z2z), x1x), y1y), z1z));
	    var px = addScalar$$1(x1, multiplyScalar$$1(t, subtract$$1(x2, x1)));
	    var py = addScalar$$1(y1, multiplyScalar$$1(t, subtract$$1(y2, y1)));
	    var pz = addScalar$$1(z1, multiplyScalar$$1(t, subtract$$1(z2, z1)));
	    return [px, py, pz];
	    // TODO: Add cases when line is parallel to the plane:
	    //       (a) no intersection,
	    //       (b) line contained in plane
	  }

	  return intersect;
	}

	var name$2x = 'intersect';
	var factory_1$2I = factory$2I;

	var intersect = {
		name: name$2x,
		factory: factory_1$2I
	};

	function factory$2J(type, config, load, typed) {
	  var add = load(addScalar);
	  var subtract$$1 = load(subtract);
	  var multiply = load(multiplyScalar);
	  var divide = load(divideScalar);
	  var negate = load(unaryMinus);
	  var sqrt$$1 = load(sqrt);
	  var abs$$1 = load(abs);

	  /**
	    * Calculates:
	    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
	    *    Distance between point and a line in 2 and 3 dimensional spaces.
	    *    Pairwise distance between a set of 2D or 3D points
	    * NOTE:
	    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
	    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
	    *
	    * Syntax:
	    *    math.distance([x1, y1], [x2, y2])
	    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
	    *    math.distance([x1, y1, z1], [x2, y2, z2])
	    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
	    *    math.distance([[A], [B], [C]...])
	    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
	    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
	    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
	    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
	    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
	    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
	    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
	    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
	    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
	    *
	    * Examples:
	    *    math.distance([0,0], [4,4])                     // Returns 5.6569
	    *    math.distance(
	    *     {pointOneX: 0, pointOneY: 0},
	    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
	    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
	    *    math.distance(
	    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
	    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
	    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
	    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
	    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
	    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
	    *    math.distance(
	    *     {pointX: 1, pointY: 4},
	    *     {lineOnePtX: 6, lineOnePtY: 3},
	    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
	    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
	    *    math.distance(
	    *     {pointX: 2, pointY: 3, pointZ: 1},
	    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
	    *
	    * @param {Array | Matrix | Object} x    Co-ordinates of first point
	    * @param {Array | Matrix | Object} y    Co-ordinates of second point
	    * @return {Number | BigNumber} Returns the distance from two/three points
	  */

	  var distance = typed('distance', {
	    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
	      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
	      if (x.length === 2 && y.length === 2 && z.length === 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }
	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
	        }
	        var m = divide(subtract$$1(z[1], z[0]), subtract$$1(y[1], y[0]));
	        var xCoeff = multiply(multiply(m, m), y[0]);
	        var yCoeff = negate(multiply(m, y[0]));
	        var constant = x[1];

	        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
	      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
	        }
	        if (!_2d(z)) {
	          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
	        }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') && y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {
	          var m = divide(subtract$$1(z.lineTwoPtY, z.lineTwoPtX), subtract$$1(y.lineOnePtY, y.lineOnePtX));
	          var xCoeff = multiply(multiply(m, m), y.lineOnePtX);
	          var yCoeff = negate(multiply(m, y.lineOnePtX));
	          var constant = x.pointX;

	          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
	      if (x.length === 2 && y.length === 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }

	        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
	      } else if (x.length === 3 && y.length === 6) {
	        // Point to Line 3D
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }
	        if (!_parametricLine(y)) {
	          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
	        }

	        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
	      } else if (x.length === 2 && y.length === 2) {
	        // Point to Point 2D
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }

	        return _distance2d(x[0], x[1], y[0], y[1]);
	      } else if (x.length === 3 && y.length === 3) {
	        // Point to Point 3D
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }

	        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object': function ObjectObject(x, y) {
	      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
	        }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') && y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('constant')) {
	          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
	        // Point to Line 3D
	        if (!_3d(x)) {
	          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
	        }
	        if (!_parametricLine(y)) {
	          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
	        }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') && y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') && y.hasOwnProperty('b') && y.hasOwnProperty('c')) {
	          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
	        // Point to Point 2D
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
	        }
	        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {
	          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
	        // Point to Point 3D
	        if (!_3d(x)) {
	          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
	        }
	        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {
	          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array': function Array(arr) {
	      if (!_pairwise(arr)) {
	        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
	      }

	      return _distancePairwise(arr);
	    }
	  });

	  function _isNumber(a) {
	    // distance supports numbers and bignumbers
	    return typeof a === 'number' || type.isBigNumber(a);
	  }

	  function _2d(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }
	    return _isNumber(a[0]) && _isNumber(a[1]);
	  }

	  function _3d(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }
	    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
	  }

	  function _parametricLine(a) {
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }
	    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
	  }

	  function _objectToArray(o) {
	    var keys = Object.keys(o);
	    var a = [];
	    for (var i = 0; i < keys.length; i++) {
	      a.push(o[keys[i]]);
	    }
	    return a;
	  }

	  function _pairwise(a) {
	    // checks for valid arguments passed to _distancePairwise(Array)
	    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
	      for (var i in a) {
	        if (a[i].length !== 2 || !_isNumber(a[i][0]) || !_isNumber(a[i][1])) {
	          return false;
	        }
	      }
	    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
	      for (var _i in a) {
	        if (a[_i].length !== 3 || !_isNumber(a[_i][0]) || !_isNumber(a[_i][1]) || !_isNumber(a[_i][2])) {
	          return false;
	        }
	      }
	    } else {
	      return false;
	    }
	    return true;
	  }

	  function _distancePointLine2D(x, y, a, b, c) {
	    var num = abs$$1(add(add(multiply(a, x), multiply(b, y)), c));
	    var den = sqrt$$1(add(multiply(a, a), multiply(b, b)));
	    var result = divide(num, den);
	    return result;
	  }

	  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
	    var num = [subtract$$1(multiply(subtract$$1(y0, y), c), multiply(subtract$$1(z0, z), b)), subtract$$1(multiply(subtract$$1(z0, z), a), multiply(subtract$$1(x0, x), c)), subtract$$1(multiply(subtract$$1(x0, x), b), multiply(subtract$$1(y0, y), a))];
	    num = sqrt$$1(add(add(multiply(num[0], num[0]), multiply(num[1], num[1])), multiply(num[2], num[2])));
	    var den = sqrt$$1(add(add(multiply(a, a), multiply(b, b)), multiply(c, c)));
	    var result = divide(num, den);
	    return result;
	  }

	  function _distance2d(x1, y1, x2, y2) {
	    var yDiff = subtract$$1(y2, y1);
	    var xDiff = subtract$$1(x2, x1);
	    var radicant = add(multiply(yDiff, yDiff), multiply(xDiff, xDiff));
	    var result = sqrt$$1(radicant);
	    return result;
	  }

	  function _distance3d(x1, y1, z1, x2, y2, z2) {
	    var zDiff = subtract$$1(z2, z1);
	    var yDiff = subtract$$1(y2, y1);
	    var xDiff = subtract$$1(x2, x1);
	    var radicant = add(add(multiply(zDiff, zDiff), multiply(yDiff, yDiff)), multiply(xDiff, xDiff));
	    var result = sqrt$$1(radicant);
	    return result;
	  }

	  function _distancePairwise(a) {
	    var result = [];
	    for (var i = 0; i < a.length - 1; i++) {
	      for (var j = i + 1; j < a.length; j++) {
	        if (a[0].length === 2) {
	          result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
	        } else if (a[0].length === 3) {
	          result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
	        }
	      }
	    }
	    return result;
	  }

	  return distance;
	}

	var name$2y = 'distance';
	var factory_1$2J = factory$2J;

	var distance = {
		name: name$2y,
		factory: factory_1$2J
	};

	var geometry = [intersect, distance];

	function factory$2K(type, config, load, typed) {
	  var latex$$1 = latex;

	  /**
	   * Logical `not`. Flips boolean value of a given parameter.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.not(x)
	   *
	   * Examples:
	   *
	   *    math.not(2)      // returns false
	   *    math.not(0)      // returns true
	   *    math.not(true)   // returns false
	   *
	   *    a = [2, -7, 0]
	   *    math.not(a)      // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    and, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when input is a zero or empty value.
	   */
	  var not = typed('not', {
	    'number': function number(x) {
	      return !x;
	    },

	    'Complex': function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isZero() || x.isNaN();
	    },

	    'Unit': function Unit(x) {
	      return x.value !== null ? not(x.value) : true;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, not);
	    }
	  });

	  not.toTex = {
	    1: latex$$1.operators['not'] + '\\left(${args[0]}\\right)'
	  };

	  return not;
	}

	var name$2z = 'not';
	var factory_1$2K = factory$2K;

	var not = {
		name: name$2z,
		factory: factory_1$2K
	};

	function factory$2L(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);
	  var zeros$$1 = load(zeros);
	  var not$$1 = load(not);

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm06$$1 = load(algorithm06);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.and(x, y)
	   *
	   * Examples:
	   *
	   *    math.and(2, 4)   // returns true
	   *
	   *    a = [2, 0, 0]
	   *    b = [3, 7, 0]
	   *    c = 0
	   *
	   *    math.and(a, b)   // returns [true, false, false]
	   *    math.and(a, c)   // returns [false, false, false]
	   *
	   * See also:
	   *
	   *    not, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when both inputs are defined with a nonzero/nonempty value.
	   */
	  var and = typed('and', {

	    'number, number': function numberNumber(x, y) {
	      return !!(x && y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return and(x.value || 0, y.value || 0);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm06$$1(x, y, and, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$$1(y, x, and, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$$1(x, y, and, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, and);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return and(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return and(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return and(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      // check scalar
	      if (not$$1(y)) {
	        // return zero matrix
	        return zeros$$1(x.size(), x.storage());
	      }
	      return algorithm11$$1(x, y, and, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      // check scalar
	      if (not$$1(y)) {
	        // return zero matrix
	        return zeros$$1(x.size(), x.storage());
	      }
	      return algorithm14$$1(x, y, and, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      // check scalar
	      if (not$$1(x)) {
	        // return zero matrix
	        return zeros$$1(x.size(), x.storage());
	      }
	      return algorithm11$$1(y, x, and, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      // check scalar
	      if (not$$1(x)) {
	        // return zero matrix
	        return zeros$$1(x.size(), x.storage());
	      }
	      return algorithm14$$1(y, x, and, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return and(matrix$$1(x), y).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return and(x, matrix$$1(y)).valueOf();
	    }
	  });

	  and.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['and'] + '${args[1]}\\right)'
	  };

	  return and;
	}

	var name$2A = 'and';
	var factory_1$2L = factory$2L;

	var and = {
		name: name$2A,
		factory: factory_1$2L
	};

	function factory$2M(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm05$$1 = load(algorithm05);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.or(x, y)
	   *
	   * Examples:
	   *
	   *    math.or(2, 4)   // returns true
	   *
	   *    a = [2, 5, 0]
	   *    b = [0, 22, 0]
	   *    c = 0
	   *
	   *    math.or(a, b)   // returns [true, true, false]
	   *    math.or(b, c)   // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    and, not, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
	   */
	  var or = typed('or', {

	    'number, number': function numberNumber(x, y) {
	      return !!(x || y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return or(x.value || 0, y.value || 0);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm05$$1(x, y, or);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, or, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, or, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, or);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return or(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return or(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return or(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, or, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, or, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, or, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, or, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, or, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, or, true).valueOf();
	    }
	  });

	  or.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['or'] + '${args[1]}\\right)'
	  };

	  return or;
	}

	var name$2B = 'or';
	var factory_1$2M = factory$2M;

	var or = {
		name: name$2B,
		factory: factory_1$2M
	};

	function factory$2N(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.xor(x, y)
	   *
	   * Examples:
	   *
	   *    math.xor(2, 4)   // returns false
	   *
	   *    a = [2, 0, 0]
	   *    b = [2, 7, 0]
	   *    c = 0
	   *
	   *    math.xor(a, b)   // returns [false, true, false]
	   *    math.xor(a, c)   // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    and, not, or
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
	   */
	  var xor = typed('xor', {

	    'number, number': function numberNumber(x, y) {
	      return !!x !== !!y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return xor(x.value || 0, y.value || 0);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, xor);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, xor, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, xor, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, xor);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return xor(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return xor(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return xor(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, xor, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, xor, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, xor, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, xor, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, xor, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, xor, true).valueOf();
	    }
	  });

	  xor.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['xor'] + '${args[1]}\\right)'
	  };

	  return xor;
	}

	var name$2C = 'xor';
	var factory_1$2N = factory$2N;

	var xor = {
		name: name$2C,
		factory: factory_1$2N
	};

	var logical = [and, not, or, xor];

	var clone$5 = object.clone;




	function factory$2O(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var isInteger = load(isInteger$k);

	  /**
	   * Concatenate two or more matrices.
	   *
	   * Syntax:
	   *
	   *     math.concat(A, B, C, ...)
	   *     math.concat(A, B, C, ..., dim)
	   *
	   * Where:
	   *
	   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
	   *   By default the last dimension of the matrices.
	   *
	   * Examples:
	   *
	   *    const A = [[1, 2], [5, 6]]
	   *    const B = [[3, 4], [7, 8]]
	   *
	   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
	   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
	   *    math.concat('hello', ' ', 'world') // returns 'hello world'
	   *
	   * See also:
	   *
	   *    size, squeeze, subset, transpose
	   *
	   * @param {... Array | Matrix} args     Two or more matrices
	   * @return {Array | Matrix} Concatenated matrix
	   */
	  var concat = typed('concat', {
	    // TODO: change signature to '...Array | Matrix, dim?' when supported
	    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
	      var i = void 0;
	      var len = args.length;
	      var dim = -1; // zero-based dimension
	      var prevDim = void 0;
	      var asMatrix = false;
	      var matrices = []; // contains multi dimensional arrays

	      for (i = 0; i < len; i++) {
	        var arg = args[i];

	        // test whether we need to return a Matrix (if not we return an Array)
	        if (type.isMatrix(arg)) {
	          asMatrix = true;
	        }

	        if (type.isNumber(arg) || type.isBigNumber(arg)) {
	          if (i !== len - 1) {
	            throw new Error('Dimension must be specified as last argument');
	          }

	          // last argument contains the dimension on which to concatenate
	          prevDim = dim;
	          dim = arg.valueOf(); // change BigNumber to number

	          if (!isInteger(dim)) {
	            throw new TypeError('Integer number expected for dimension');
	          }

	          if (dim < 0 || i > 0 && dim > prevDim) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError_1(dim, prevDim + 1);
	          }
	        } else {
	          // this is a matrix or array
	          var m = clone$5(arg).valueOf();
	          var size = array.size(m);
	          matrices[i] = m;
	          prevDim = dim;
	          dim = size.length - 1;

	          // verify whether each of the matrices has the same number of dimensions
	          if (i > 0 && dim !== prevDim) {
	            throw new DimensionError_1(prevDim + 1, dim + 1);
	          }
	        }
	      }

	      if (matrices.length === 0) {
	        throw new SyntaxError('At least one matrix expected');
	      }

	      var res = matrices.shift();
	      while (matrices.length) {
	        res = _concat(res, matrices.shift(), dim, 0);
	      }

	      return asMatrix ? matrix$$1(res) : res;
	    },

	    '...string': function string(args) {
	      return args.join('');
	    }
	  });

	  concat.toTex = undefined; // use default template

	  return concat;
	}

	/**
	 * Recursively concatenate two matrices.
	 * The contents of the matrices is not cloned.
	 * @param {Array} a             Multi dimensional array
	 * @param {Array} b             Multi dimensional array
	 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
	 * @param {number} dim          The current dim (zero-based)
	 * @return {Array} c            The concatenated matrix
	 * @private
	 */
	function _concat(a, b, concatDim, dim) {
	  if (dim < concatDim) {
	    // recurse into next dimension
	    if (a.length !== b.length) {
	      throw new DimensionError_1(a.length, b.length);
	    }

	    var c = [];
	    for (var i = 0; i < a.length; i++) {
	      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
	    }
	    return c;
	  } else {
	    // concatenate this dimension
	    return a.concat(b);
	  }
	}

	var name$2D = 'concat';
	var factory_1$2O = factory$2O;

	var concat = {
		name: name$2D,
		factory: factory_1$2O
	};

	function factory$2P(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var subtract$$1 = load(subtract);
	  var multiply$$1 = load(multiply);

	  /**
	   * Calculate the cross product for two vectors in three dimensional space.
	   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
	   * as:
	   *
	   *    cross(A, B) = [
	   *      a2 * b3 - a3 * b2,
	   *      a3 * b1 - a1 * b3,
	   *      a1 * b2 - a2 * b1
	   *    ]
	   *
	   * If one of the input vectors has a dimension greater than 1, the output
	   * vector will be a 1x3 (2-dimensional) matrix.
	   *
	   * Syntax:
	   *
	   *    math.cross(x, y)
	   *
	   * Examples:
	   *
	   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
	   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
	   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
	   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
	   *
	   * See also:
	   *
	   *    dot, multiply
	   *
	   * @param  {Array | Matrix} x   First vector
	   * @param  {Array | Matrix} y   Second vector
	   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
	   */
	  var cross = typed('cross', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return matrix$$1(_cross(x.toArray(), y.toArray()));
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      return matrix$$1(_cross(x.toArray(), y));
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return matrix$$1(_cross(x, y.toArray()));
	    },

	    'Array, Array': _cross
	  });

	  cross.toTex = {
	    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
	  };

	  return cross;

	  /**
	   * Calculate the cross product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {Array} Returns the cross product of x and y
	   * @private
	   */
	  function _cross(x, y) {
	    var highestDimension = Math.max(array.size(x).length, array.size(y).length);

	    x = array.squeeze(x);
	    y = array.squeeze(y);

	    var xSize = array.size(x);
	    var ySize = array.size(y);

	    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
	      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
	    }

	    var product = [subtract$$1(multiply$$1(x[1], y[2]), multiply$$1(x[2], y[1])), subtract$$1(multiply$$1(x[2], y[0]), multiply$$1(x[0], y[2])), subtract$$1(multiply$$1(x[0], y[1]), multiply$$1(x[1], y[0]))];

	    if (highestDimension > 1) {
	      return [product];
	    } else {
	      return product;
	    }
	  }
	}

	var name$2E = 'cross';
	var factory_1$2P = factory$2P;

	var cross = {
		name: name$2E,
		factory: factory_1$2P
	};

	function factory$2Q(type, config, load, typed) {
	  var transpose$$1 = load(transpose);
	  var conj$$1 = load(conj);
	  var latex$$1 = latex;

	  /**
	   * Transpose and complex conjugate a matrix. All values of the matrix are
	   * reflected over its main diagonal and then the complex conjugate is
	   * taken. This is equivalent to complex conjugation for scalars and
	   * vectors.
	   *
	   * Syntax:
	   *
	   *     math.ctranspose(x)
	   *
	   * Examples:
	   *
	   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
	   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
	   *
	   * See also:
	   *
	   *     transpose, diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be ctransposed
	   * @return {Array | Matrix}   The ctransposed matrix
	   */
	  var ctranspose = typed('ctranspose', {

	    'any': function any(x) {
	      return conj$$1(transpose$$1(x));
	    }
	  });

	  ctranspose.toTex = { 1: '\\left(${args[0]}\\right)' + latex$$1.operators['ctranspose'] };

	  return ctranspose;
	}

	var name$2F = 'ctranspose';
	var factory_1$2Q = factory$2Q;

	var ctranspose = {
		name: name$2F,
		factory: factory_1$2Q
	};

	var isInteger$l = number.isInteger;

	function factory$2R(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Create a diagonal matrix or retrieve the diagonal of a matrix
	   *
	   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
	   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
	   * When k is positive, the values are placed on the super diagonal.
	   * When k is negative, the values are placed on the sub diagonal.
	   *
	   * Syntax:
	   *
	   *     math.diag(X)
	   *     math.diag(X, format)
	   *     math.diag(X, k)
	   *     math.diag(X, k, format)
	   *
	   * Examples:
	   *
	   *     // create a diagonal matrix
	   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
	   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *
	   *    // retrieve the diagonal from a matrix
	   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
	   *    math.diag(a)   // returns [1, 5, 9]
	   *
	   * See also:
	   *
	   *     ones, zeros, identity
	   *
	   * @param {Matrix | Array} x          A two dimensional matrix or a vector
	   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
	   *                                    in or retrieved.
	   * @param {string} [format='dense']   The matrix storage format.
	   *
	   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
	   */
	  var diag = typed('diag', {
	    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments

	    'Array': function Array(x) {
	      return _diag(x, 0, array.size(x), null);
	    },

	    'Array, number': function ArrayNumber(x, k) {
	      return _diag(x, k, array.size(x), null);
	    },

	    'Array, BigNumber': function ArrayBigNumber(x, k) {
	      return _diag(x, k.toNumber(), array.size(x), null);
	    },

	    'Array, string': function ArrayString(x, format) {
	      return _diag(x, 0, array.size(x), format);
	    },

	    'Array, number, string': function ArrayNumberString(x, k, format) {
	      return _diag(x, k, array.size(x), format);
	    },

	    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), array.size(x), format);
	    },

	    'Matrix': function Matrix(x) {
	      return _diag(x, 0, x.size(), x.storage());
	    },

	    'Matrix, number': function MatrixNumber(x, k) {
	      return _diag(x, k, x.size(), x.storage());
	    },

	    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
	      return _diag(x, k.toNumber(), x.size(), x.storage());
	    },

	    'Matrix, string': function MatrixString(x, format) {
	      return _diag(x, 0, x.size(), format);
	    },

	    'Matrix, number, string': function MatrixNumberString(x, k, format) {
	      return _diag(x, k, x.size(), format);
	    },

	    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), x.size(), format);
	    }
	  });

	  diag.toTex = undefined; // use default template

	  return diag;

	  /**
	   * Creeate diagonal matrix from a vector or vice versa
	   * @param {Array | Matrix} x
	   * @param {number} k
	   * @param {string} format Storage format for matrix. If null,
	   *                          an Array is returned
	   * @returns {Array | Matrix}
	   * @private
	   */
	  function _diag(x, k, size, format) {
	    if (!isInteger$l(k)) {
	      throw new TypeError('Second parameter in function diag must be an integer');
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // check dimensions
	    switch (size.length) {
	      case 1:
	        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
	      case 2:
	        return _getDiagonal(x, k, format, size, kSub, kSuper);
	    }
	    throw new RangeError('Matrix for function diag must be 2 dimensional');
	  }

	  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
	    // matrix size
	    var ms = [l + kSub, l + kSuper];
	    // get matrix constructor
	    var F = type.Matrix.storage(format || 'dense');
	    // create diagonal matrix
	    var m = F.diagonal(ms, x, k);
	    // check we need to return a matrix
	    return format !== null ? m : m.valueOf();
	  }

	  function _getDiagonal(x, k, format, s, kSub, kSuper) {
	    // check x is a Matrix
	    if (type.isMatrix(x)) {
	      // get diagonal matrix
	      var dm = x.diagonal(k);
	      // check we need to return a matrix
	      if (format !== null) {
	        // check we need to change matrix format
	        if (format !== dm.storage()) {
	          return matrix$$1(dm, format);
	        }
	        return dm;
	      }
	      return dm.valueOf();
	    }
	    // vector size
	    var n = Math.min(s[0] - kSub, s[1] - kSuper);
	    // diagonal values
	    var vector = [];
	    // loop diagonal
	    for (var i = 0; i < n; i++) {
	      vector[i] = x[i + kSub][i + kSuper];
	    }
	    // check we need to return a matrix
	    return format !== null ? matrix$$1(vector) : vector;
	  }
	}

	var name$2G = 'diag';
	var factory_1$2R = factory$2R;

	var diag = {
		name: name$2G,
		factory: factory_1$2R
	};

	var size$1 = array.size;

	function factory$2S(type, config, load, typed) {
	  var add$$1 = load(add);
	  var multiply$$1 = load(multiply);

	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */
	  var dot = typed('dot', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return _dot(x.toArray(), y.toArray());
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      return _dot(x.toArray(), y);
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return _dot(x, y.toArray());
	    },

	    'Array, Array': _dot
	  });

	  dot.toTex = { 2: '\\left(${args[0]}\\cdot${args[1]}\\right)' };

	  return dot;

	  /**
	   * Calculate the dot product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {number} Returns the dot product of x and y
	   * @private
	   */
	  // TODO: double code with math.multiply
	  function _dot(x, y) {
	    var xSize = size$1(x);
	    var ySize = size$1(y);
	    var len = xSize[0];

	    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message
	    if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
	    if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');

	    var prod = 0;
	    for (var i = 0; i < len; i++) {
	      prod = add$$1(prod, multiply$$1(x[i], y[i]));
	    }

	    return prod;
	  }
	}

	var name$2H = 'dot';
	var factory_1$2S = factory$2S;

	var dot = {
		name: name$2H,
		factory: factory_1$2S
	};

	// TODO: function eye is removed since v5.0.0 (June 2018). Remove it some day.

	function factory$2T(type, config, load, typed) {
	  return function eye() {
	    throw new Error('Function "eye" is renamed to "identity" since mathjs version 5.0.0. ' + 'To keep eye working, create an alias for it using "math.import({eye: math.identity}, {override: true})"');
	  };
	}

	var name$2I = 'eye';
	var factory_1$2T = factory$2T;

	var eye = {
		name: name$2I,
		factory: factory_1$2T
	};

	var format$5 = string.format;

	function factory$2U(type, config, load, typed) {
	  var abs$$1 = load(abs);
	  var add$$1 = load(add);
	  var identity$$1 = load(identity);
	  var inv$$1 = load(inv);
	  var multiply$$1 = load(multiply);

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
	   * Not to be confused with exp(a), which performs element-wise
	   * exponentiation.
	   *
	   * The exponential is calculated using the Padé approximant with scaling and
	   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
	   * Matrix," by Moler and Van Loan.
	   *
	   * Syntax:
	   *
	   *     math.expm(x)
	   *
	   * Examples:
	   *
	   *     const A = [[0,2],[0,0]]
	   *     math.expm(A)        // returns [[1,2],[0,1]]
	   *
	   * See also:
	   *
	   *     exp
	   *
	   * @param {Matrix} x  A square Matrix
	   * @return {Matrix}   The exponential of x
	   */
	  var expm = typed('expm', {

	    'Matrix': function Matrix(A) {
	      // Check matrix size
	      var size = A.size();

	      if (size.length !== 2 || size[0] !== size[1]) {
	        throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
	      }

	      var n = size[0];

	      // Desired accuracy of the approximant (The actual accuracy
	      // will be affected by round-off error)
	      var eps = 1e-15;

	      // The Padé approximant is not so accurate when the values of A
	      // are "large", so scale A by powers of two. Then compute the
	      // exponential, and square the result repeatedly according to
	      // the identity e^A = (e^(A/m))^m

	      // Compute infinity-norm of A, ||A||, to see how "big" it is
	      var infNorm = infinityNorm(A);

	      // Find the optimal scaling factor and number of terms in the
	      // Padé approximant to reach the desired accuracy
	      var params = findParams(infNorm, eps);
	      var q = params.q;
	      var j = params.j;

	      // The Pade approximation to e^A is:
	      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
	      // where
	      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
	      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i

	      // Scale A by 1 / 2^j
	      var Apos = multiply$$1(A, Math.pow(2, -j));

	      // The i=0 term is just the identity matrix
	      var N = identity$$1(n);
	      var D = identity$$1(n);

	      // Initialization (i=0)
	      var factor = 1;

	      // Initialization (i=1)
	      var AposToI = Apos; // Cloning not necessary
	      var alternate = -1;

	      for (var i = 1; i <= q; i++) {
	        if (i > 1) {
	          AposToI = multiply$$1(AposToI, Apos);
	          alternate = -alternate;
	        }
	        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);

	        N = add$$1(N, multiply$$1(factor, AposToI));
	        D = add$$1(D, multiply$$1(factor * alternate, AposToI));
	      }

	      var R = multiply$$1(inv$$1(D), N);

	      // Square j times
	      for (var _i = 0; _i < j; _i++) {
	        R = multiply$$1(R, R);
	      }

	      return type.isSparseMatrix(A) ? new SparseMatrix(R) : R;
	    }

	  });

	  function infinityNorm(A) {
	    var n = A.size()[0];
	    var infNorm = 0;
	    for (var i = 0; i < n; i++) {
	      var rowSum = 0;
	      for (var j = 0; j < n; j++) {
	        rowSum += abs$$1(A.get([i, j]));
	      }
	      infNorm = Math.max(rowSum, infNorm);
	    }
	    return infNorm;
	  }

	  /**
	   * Find the best parameters for the Pade approximant given
	   * the matrix norm and desired accuracy. Returns the first acceptable
	   * combination in order of increasing computational load.
	   */
	  function findParams(infNorm, eps) {
	    var maxSearchSize = 30;
	    for (var k = 0; k < maxSearchSize; k++) {
	      for (var q = 0; q <= k; q++) {
	        var j = k - q;
	        if (errorEstimate(infNorm, q, j) < eps) {
	          return { q: q, j: j };
	        }
	      }
	    }
	    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
	  }

	  /**
	   * Returns the estimated error of the Pade approximant for the given
	   * parameters.
	   */
	  function errorEstimate(infNorm, q, j) {
	    var qfac = 1;
	    for (var i = 2; i <= q; i++) {
	      qfac *= i;
	    }
	    var twoqfac = qfac;
	    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
	      twoqfac *= _i2;
	    }
	    var twoqp1fac = twoqfac * (2 * q + 1);

	    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
	  }

	  expm.toTex = { 1: '\\exp\\left(${args[0]}\\right)' };

	  return expm;
	}

	var name$2J = 'expm';
	var factory_1$2U = factory$2U;

	var expm = {
		name: name$2J,
		factory: factory_1$2U
	};

	var filter = array.filter;
	var filterRegExp = array.filterRegExp;
	var maxArgumentCount$1 = _function.maxArgumentCount;

	function factory$2V(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Filter the items in an array or one dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.filter(x, test)
	   *
	   * Examples:
	   *
	   *    function isPositive (x) {
	   *      return x > 0
	   *    }
	   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
	   *
	   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
	   *
	   * See also:
	   *
	   *    forEach, map, sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
	   * @param {Function | RegExp} test
	   *        A function or regular expression to test items.
	   *        All entries for which `test` returns true are returned.
	   *        When `test` is a function, it is invoked with three parameters:
	   *        the value of the element, the index of the element, and the
	   *        matrix/array being traversed. The function must return a boolean.
	   * @return {Matrix | Array} Returns the filtered matrix.
	   */
	  var filter = typed('filter', {
	    'Array, function': _filterCallback,

	    'Matrix, function': function MatrixFunction(x, test) {
	      return matrix$$1(_filterCallback(x.toArray(), test));
	    },

	    'Array, RegExp': filterRegExp,

	    'Matrix, RegExp': function MatrixRegExp(x, test) {
	      return matrix$$1(filterRegExp(x.toArray(), test));
	    }
	  });

	  filter.toTex = undefined; // use default template

	  return filter;
	}

	/**
	 * Filter values in a callback given a callback function
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterCallback(x, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$1(callback);

	  return filter(x, function (value, index, array$$1) {
	    // invoke the callback function with the right number of arguments
	    if (args === 1) {
	      return callback(value);
	    } else if (args === 2) {
	      return callback(value, [index]);
	    } else {
	      // 3 or -1
	      return callback(value, [index], array$$1);
	    }
	  });
	}

	var name$2K = 'filter';
	var factory_1$2V = factory$2V;

	var filter_1 = {
		name: name$2K,
		factory: factory_1$2V
	};

	var clone$6 = object.clone;
	var _flatten = array.flatten;

	function factory$2W(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Flatten a multi dimensional matrix into a single dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.flatten(x)
	   *
	   * Examples:
	   *
	   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
	   *
	   * See also:
	   *
	   *    concat, resize, size, squeeze
	   *
	   * @param {Matrix | Array} x   Matrix to be flattened
	   * @return {Matrix | Array} Returns the flattened matrix
	   */
	  var flatten = typed('flatten', {
	    'Array': function Array(x) {
	      return _flatten(clone$6(x));
	    },

	    'Matrix': function Matrix(x) {
	      var flat = _flatten(clone$6(x.toArray()));
	      // TODO: return the same matrix type as x
	      return matrix$$1(flat);
	    }
	  });

	  flatten.toTex = undefined; // use default template

	  return flatten;
	}

	var name$2L = 'flatten';
	var factory_1$2W = factory$2W;

	var flatten$1 = {
		name: name$2L,
		factory: factory_1$2W
	};

	var maxArgumentCount$2 = _function.maxArgumentCount;
	var forEach$2 = array.forEach;

	function factory$2X(type, config, load, typed) {
	  /**
	   * Iterate over all elements of a matrix/array, and executes the given callback function.
	   *
	   * Syntax:
	   *
	   *    math.forEach(x, callback)
	   *
	   * Examples:
	   *
	   *    math.forEach([1, 2, 3], function(value) {
	   *      console.log(value)
	   *    })
	   *    // outputs 1, 2, 3
	   *
	   * See also:
	   *
	   *    filter, map, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix/array being traversed.
	   */
	  var forEach = typed('forEach', {
	    'Array, function': _forEach,

	    'Matrix, function': function MatrixFunction(x, callback) {
	      return x.forEach(callback);
	    }
	  });

	  forEach.toTex = undefined; // use default template

	  return forEach;
	}

	/**
	 * forEach for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @private
	 */
	function _forEach(array$$1, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$2(callback);

	  var recurse = function recurse(value, index) {
	    if (Array.isArray(value)) {
	      forEach$2(value, function (child, i) {
	        // we create a copy of the index array and append the new index value
	        recurse(child, index.concat(i));
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        callback(value);
	      } else if (args === 2) {
	        callback(value, index);
	      } else {
	        // 3 or -1
	        callback(value, index, array$$1);
	      }
	    }
	  };
	  recurse(array$$1, []);
	}

	var name$2M = 'forEach';
	var factory_1$2X = factory$2X;

	var forEach_1 = {
		name: name$2M,
		factory: factory_1$2X
	};

	var size$2 = array.size;

	function factory$2Y(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var multiplyScalar$$1 = load(multiplyScalar);
	  /**
	     * Calculates the kronecker product of 2 matrices or vectors.
	     *
	     * NOTE: If a one dimensional vector / matrix is given, it will be
	     * wrapped so its two dimensions.
	     * See the examples.
	     *
	     * Syntax:
	     *
	     *    math.kron(x, y)
	     *
	     * Examples:
	     *
	     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
	     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
	     *
	     *    math.kron([1,1], [2,3,4])
	     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
	     *
	     * See also:
	     *
	     *    multiply, dot, cross
	     *
	     * @param  {Array | Matrix} x     First vector
	     * @param  {Array | Matrix} y     Second vector
	     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
	     */
	  var kron = typed('kron', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return matrix$$1(_kron(x.toArray(), y.toArray()));
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      return matrix$$1(_kron(x.toArray(), y));
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return matrix$$1(_kron(x, y.toArray()));
	    },

	    'Array, Array': _kron
	  });

	  return kron;

	  /**
	     * Calculate the kronecker product of two matrices / vectors
	     * @param {Array} a  First vector
	     * @param {Array} b  Second vector
	     * @returns {Array} Returns the kronecker product of x and y
	     * @private
	     */
	  function _kron(a, b) {
	    // Deal with the dimensions of the matricies.
	    if (size$2(a).length === 1) {
	      // Wrap it in a 2D Matrix
	      a = [a];
	    }
	    if (size$2(b).length === 1) {
	      // Wrap it in a 2D Matrix
	      b = [b];
	    }
	    if (size$2(a).length > 2 || size$2(b).length > 2) {
	      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
	    }
	    var t = [];
	    var r = [];

	    return a.map(function (a) {
	      return b.map(function (b) {
	        r = [];
	        t.push(r);
	        return a.map(function (y) {
	          return b.map(function (x) {
	            return r.push(multiplyScalar$$1(y, x));
	          });
	        });
	      });
	    }) && t;
	  }
	}

	var name$2N = 'kron';
	var factory_1$2Y = factory$2Y;

	var kron = {
		name: name$2N,
		factory: factory_1$2Y
	};

	var maxArgumentCount$3 = _function.maxArgumentCount;

	function factory$2Z(type, config, load, typed) {
	  /**
	   * Create a new matrix or array with the results of the callback function executed on
	   * each entry of the matrix/array.
	   *
	   * Syntax:
	   *
	   *    math.map(x, callback)
	   *
	   * Examples:
	   *
	   *    math.map([1, 2, 3], function(value) {
	   *      return value * value
	   *    })  // returns [1, 4, 9]
	   *
	   * See also:
	   *
	   *    filter, forEach, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the matrix being traversed.
	   * @return {Matrix | array}     Transformed map of x
	   */
	  var map = typed('map', {
	    'Array, function': _map,

	    'Matrix, function': function MatrixFunction(x, callback) {
	      return x.map(callback);
	    }
	  });

	  map.toTex = undefined; // use default template

	  return map;
	}

	/**
	 * Map for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @return {Array}
	 * @private
	 */
	function _map(array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$3(callback);

	  var recurse = function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i));
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        return callback(value);
	      } else if (args === 2) {
	        return callback(value, index);
	      } else {
	        // 3 or -1
	        return callback(value, index, array);
	      }
	    }
	  };

	  return recurse(array, []);
	}

	var name$2O = 'map';
	var factory_1$2Z = factory$2Z;

	var map$5 = {
		name: name$2O,
		factory: factory_1$2Z
	};

	var isInteger$m = number.isInteger;
	var resize$1 = array.resize;

	function factory$2_(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Create a matrix filled with ones. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.ones(m)
	   *    math.ones(m, format)
	   *    math.ones(m, n)
	   *    math.ones(m, n, format)
	   *    math.ones([m, n])
	   *    math.ones([m, n], format)
	   *    math.ones([m, n, p, ...])
	   *    math.ones([m, n, p, ...], format)
	   *
	   * Examples:
	   *
	   *    math.ones(3)                   // returns [1, 1, 1]
	   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
	   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
	   *
	   * See also:
	   *
	   *    zeros, identity, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix | number}  A matrix filled with ones
	   */
	  var ones = typed('ones', {
	    '': function _() {
	      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
	    },

	    // math.ones(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _ones(size, format);
	      } else if (config.matrix === 'Array') {
	        return _ones(size);
	      } else {
	        return _ones(size, 'default');
	      }
	    },

	    'Array': _ones,

	    'Matrix': function Matrix(size) {
	      var format = size.storage();
	      return _ones(size.valueOf(), format);
	    },

	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _ones(size.valueOf(), format);
	    }
	  });

	  ones.toTex = undefined; // use default template

	  return ones;

	  /**
	   * Create an Array or Matrix with ones
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _ones(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix$$1(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    } else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize$1(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (type.isBigNumber(value)) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger$m(value) || value < 0) {
	        throw new Error('Parameters in function ones must be positive integers');
	      }
	    });
	  }
	}

	var name$2P = 'ones';
	var factory_1$2_ = factory$2_;

	var ones = {
		name: name$2P,
		factory: factory_1$2_
	};

	var nearlyEqual$6 = number.nearlyEqual;


	function factory$30(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm05$$1 = load(algorithm05);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * x and y are considered equal when the relative difference between x and y
	   * is smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.compare(x, y)
	   *
	   * Examples:
	   *
	   *    math.compare(6, 1)           // returns 1
	   *    math.compare(2, 3)           // returns -1
	   *    math.compare(7, 7)           // returns 0
	   *    math.compare('10', '2')      // returns 1
	   *    math.compare('1000', '1e3')  // returns 0
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('40 mm')
	   *    math.compare(a, b)           // returns 1
	   *
	   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
	   *
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
	   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
	   */
	  var compare = typed('compare', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y ? 0 : x > y ? 1 : -1;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x === y || nearlyEqual$6(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || nearlyEqual(x, y, config.epsilon) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return new type.Fraction(x.compare(y));
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return compare(x.value, y.value);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm05$$1(x, y, compare);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, compare, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, compare, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, compare);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return compare(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return compare(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return compare(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, compare, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, compare, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, compare, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, compare, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, compare, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, compare, true).valueOf();
	    }
	  });

	  compare.toTex = undefined; // use default template

	  return compare;
	}

	var name$2Q = 'compare';
	var factory_1$30 = factory$30;

	var compare = {
		name: name$2Q,
		factory: factory_1$30
	};

	var isInteger$n = number.isInteger;

	function factory$31(type, config, load, typed) {
	  var asc = load(compare);
	  function desc(a, b) {
	    return -asc(a, b);
	  }

	  /**
	   * Partition-based selection of an array or 1D matrix.
	   * Will find the kth smallest value, and mutates the input array.
	   * Uses Quickselect.
	   *
	   * Syntax:
	   *
	   *    math.partitionSelect(x, k)
	   *    math.partitionSelect(x, k, compare)
	   *
	   * Examples:
	   *
	   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
	   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length
	   *    }
	   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
	   *
	   * See also:
	   *
	   *    sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Number} k            The kth smallest value to be retrieved zero-based index
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {*} Returns the kth lowest value.
	   */
	  return typed('partitionSelect', {
	    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
	      return _partitionSelect(x, k, asc);
	    },

	    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare$$1) {
	      if (compare$$1 === 'asc') {
	        return _partitionSelect(x, k, asc);
	      } else if (compare$$1 === 'desc') {
	        return _partitionSelect(x, k, desc);
	      } else {
	        throw new Error('Compare string must be "asc" or "desc"');
	      }
	    },

	    'Array | Matrix, number, function': _partitionSelect
	  });

	  function _partitionSelect(x, k, compare$$1) {
	    if (!isInteger$n(k) || k < 0) {
	      throw new Error('k must be a non-negative integer');
	    }

	    if (type.isMatrix(x)) {
	      var size = x.size();
	      if (size.length > 1) {
	        throw new Error('Only one dimensional matrices supported');
	      }
	      return quickSelect(x.valueOf(), k, compare$$1);
	    }

	    if (Array.isArray(x)) {
	      return quickSelect(x, k, compare$$1);
	    }
	  }

	  /**
	   * Quickselect algorithm.
	   * Code adapted from:
	   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
	   *
	   * @param {Array} arr
	   * @param {Number} k
	   * @param {Function} compare
	   * @private
	   */
	  function quickSelect(arr, k, compare$$1) {
	    if (k >= arr.length) {
	      throw new Error('k out of bounds');
	    }

	    var from = 0;
	    var to = arr.length - 1;

	    // if from == to we reached the kth element
	    while (from < to) {
	      var r = from;
	      var w = to;
	      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];

	      // stop if the reader and writer meets
	      while (r < w) {
	        // arr[r] >= pivot
	        if (compare$$1(arr[r], pivot) >= 0) {
	          // put the large values at the end
	          var tmp = arr[w];
	          arr[w] = arr[r];
	          arr[r] = tmp;
	          --w;
	        } else {
	          // the value is smaller than the pivot, skip
	          ++r;
	        }
	      }

	      // if we stepped up (r++) we need to step one down (arr[r] > pivot)
	      if (compare$$1(arr[r], pivot) > 0) {
	        --r;
	      }

	      // the r pointer is on the end of the first k elements
	      if (k <= r) {
	        to = r;
	      } else {
	        from = r + 1;
	      }
	    }

	    return arr[k];
	  }
	}

	var name$2R = 'partitionSelect';
	var factory_1$31 = factory$31;

	var partitionSelect = {
		name: name$2R,
		factory: factory_1$31
	};

	function factory$32(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var ZERO = new type.BigNumber(0);
	  var ONE = new type.BigNumber(1);

	  /**
	   * Create an array from a range.
	   * By default, the range end is excluded. This can be customized by providing
	   * an extra parameter `includeEnd`.
	   *
	   * Syntax:
	   *
	   *     math.range(str [, includeEnd])               // Create a range from a string,
	   *                                                  // where the string contains the
	   *                                                  // start, optional step, and end,
	   *                                                  // separated by a colon.
	   *     math.range(start, end [, includeEnd])        // Create a range with start and
	   *                                                  // end and a step size of 1.
	   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
	   *                                                  // and end.
	   *
	   * Where:
	   *
	   * - `str: string`
	   *   A string 'start:end' or 'start:step:end'
	   * - `start: {number | BigNumber}`
	   *   Start of the range
	   * - `end: number | BigNumber`
	   *   End of the range, excluded by default, included when parameter includeEnd=true
	   * - `step: number | BigNumber`
	   *   Step size. Default value is 1.
	   * - `includeEnd: boolean`
	   *   Option to specify whether to include the end or not. False by default.
	   *
	   * Examples:
	   *
	   *     math.range(2, 6)        // [2, 3, 4, 5]
	   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
	   *     math.range('2:1:6')     // [2, 3, 4, 5]
	   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *     ones, zeros, size, subset
	   *
	   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
	   * @return {Array | Matrix} range
	   */
	  var range = typed('range', {
	    // TODO: simplify signatures when typed-function supports default values and optional arguments

	    // TODO: a number or boolean should not be converted to string here
	    'string': _strRange,
	    'string, boolean': _strRange,

	    'number, number': function numberNumber(start, end) {
	      return _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number': function numberNumberNumber(start, end, step) {
	      return _out(_rangeEx(start, end, step));
	    },
	    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
	      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
	      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
	      return _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
	      return _out(_bigRangeEx(start, end, step));
	    },
	    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
	      return includeEnd ? _out(_bigRangeInc(start, end, ONE)) : _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
	      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
	    }

	  });

	  range.toTex = undefined; // use default template

	  return range;

	  function _out(arr) {
	    return config.matrix === 'Array' ? arr : matrix$$1(arr);
	  }

	  function _strRange(str, includeEnd) {
	    var r = _parse(str);
	    if (!r) {
	      throw new SyntaxError('String "' + str + '" is no valid range');
	    }

	    var fn = void 0;
	    if (config.number === 'BigNumber') {
	      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
	      return _out(fn(new type.BigNumber(r.start), new type.BigNumber(r.end), new type.BigNumber(r.step)));
	    } else {
	      fn = includeEnd ? _rangeInc : _rangeEx;
	      return _out(fn(r.start, r.end, r.step));
	    }
	  }

	  /**
	   * Create a range with numbers. End is excluded
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeEx(start, end, step) {
	    var array = [];
	    var x = start;
	    if (step > 0) {
	      while (x < end) {
	        array.push(x);
	        x += step;
	      }
	    } else if (step < 0) {
	      while (x > end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with numbers. End is included
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeInc(start, end, step) {
	    var array = [];
	    var x = start;
	    if (step > 0) {
	      while (x <= end) {
	        array.push(x);
	        x += step;
	      }
	    } else if (step < 0) {
	      while (x >= end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with big numbers. End is excluded
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeEx(start, end, step) {
	    var array = [];
	    var x = start;
	    if (step.gt(ZERO)) {
	      while (x.lt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    } else if (step.lt(ZERO)) {
	      while (x.gt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with big numbers. End is included
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeInc(start, end, step) {
	    var array = [];
	    var x = start;
	    if (step.gt(ZERO)) {
	      while (x.lte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    } else if (step.lt(ZERO)) {
	      while (x.gte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
	   * @private
	   */
	  function _parse(str) {
	    var args = str.split(':');

	    // number
	    var nums = args.map(function (arg) {
	      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
	      return Number(arg);
	    });

	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return {
	          start: nums[0],
	          end: nums[1],
	          step: 1
	        };

	      case 3:
	        return {
	          start: nums[0],
	          end: nums[2],
	          step: nums[1]
	        };

	      default:
	        return null;
	    }
	  }
	}

	var name$2S = 'range';
	var factory_1$32 = factory$32;

	var range = {
		name: name$2S,
		factory: factory_1$32
	};

	function factory$33(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var isInteger = load(isInteger$k);

	  /**
	   * Reshape a multi dimensional array to fit the specified dimensions
	   *
	   * Syntax:
	   *
	   *     math.reshape(x, sizes)
	   *
	   * Examples:
	   *
	   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
	   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
	   *
	   *     math.reshape([[1, 2], [3, 4]], [1, 4])
	   *     // returns Array  [[1, 2, 3, 4]]
	   *
	   *     math.reshape([[1, 2], [3, 4]], [4])
	   *     // returns Array [1, 2, 3, 4]
	   *
	   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
	   *     math.reshape(x, [2, 2, 2])
	   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
	   *
	   * See also:
	   *
	   *     size, squeeze, resize
	   *
	   * @param {Array | Matrix | *} x  Matrix to be reshaped
	   * @param {number[]} sizes        One dimensional array with integral sizes for
	   *                                each dimension
	   *
	   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
	   *
	   * @throws {TypeError}            If `sizes` does not contain solely integers
	   * @throws {DimensionError}       If the product of the new dimension sizes does
	   *                                not equal that of the old ones
	   */
	  var reshape = typed('reshape', {

	    'Matrix, Array': function MatrixArray(x, sizes) {
	      if (x.reshape) {
	        return x.reshape(sizes);
	      } else {
	        return matrix$$1(array.reshape(x.valueOf(), sizes));
	      }
	    },

	    'Array, Array': function ArrayArray(x, sizes) {
	      sizes.forEach(function (size) {
	        if (!isInteger(size)) {
	          throw new TypeError('Invalid size for dimension: ' + size);
	        }
	      });
	      return array.reshape(x, sizes);
	    }

	  });

	  reshape.toTex = undefined; // use default template

	  return reshape;
	}

	var name$2T = 'reshape';
	var factory_1$33 = factory$33;

	var reshape = {
		name: name$2T,
		factory: factory_1$33
	};

	var isInteger$o = number.isInteger;
	var format$6 = string.format;
	var clone$7 = object.clone;


	function factory$34(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Resize a matrix
	   *
	   * Syntax:
	   *
	   *     math.resize(x, size)
	   *     math.resize(x, size, defaultValue)
	   *
	   * Examples:
	   *
	   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
	   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
	   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
	   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
	   *
	   * See also:
	   *
	   *     size, squeeze, subset, reshape
	   *
	   * @param {Array | Matrix | *} x             Matrix to be resized
	   * @param {Array | Matrix} size              One dimensional array with numbers
	   * @param {number | string} [defaultValue=0] Zero by default, except in
	   *                                           case of a string, in that case
	   *                                           defaultValue = ' '
	   * @return {* | Array | Matrix} A resized clone of matrix `x`
	   */
	  // TODO: rework resize to a typed-function
	  var resize = function resize(x, size, defaultValue) {
	    if (arguments.length !== 2 && arguments.length !== 3) {
	      throw new ArgumentsError_1('resize', arguments.length, 2, 3);
	    }

	    if (type.isMatrix(size)) {
	      size = size.valueOf(); // get Array
	    }

	    if (type.isBigNumber(size[0])) {
	      // convert bignumbers to numbers
	      size = size.map(function (value) {
	        return type.isBigNumber(value) ? value.toNumber() : value;
	      });
	    }

	    // check x is a Matrix
	    if (type.isMatrix(x)) {
	      // use optimized matrix implementation, return copy
	      return x.resize(size, defaultValue, true);
	    }

	    if (typeof x === 'string') {
	      // resize string
	      return _resizeString(x, size, defaultValue);
	    }

	    // check result should be a matrix
	    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

	    if (size.length === 0) {
	      // output a scalar
	      while (Array.isArray(x)) {
	        x = x[0];
	      }

	      return clone$7(x);
	    } else {
	      // output an array/matrix
	      if (!Array.isArray(x)) {
	        x = [x];
	      }
	      x = clone$7(x);

	      var res = array.resize(x, size, defaultValue);
	      return asMatrix ? matrix$$1(res) : res;
	    }
	  };

	  resize.toTex = undefined; // use default template

	  return resize;

	  /**
	   * Resize a string
	   * @param {string} str
	   * @param {number[]} size
	   * @param {string} [defaultChar=' ']
	   * @private
	   */
	  function _resizeString(str, size, defaultChar) {
	    if (defaultChar !== undefined) {
	      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    } else {
	      defaultChar = ' ';
	    }

	    if (size.length !== 1) {
	      throw new DimensionError_1(size.length, 1);
	    }
	    var len = size[0];
	    if (typeof len !== 'number' || !isInteger$o(len)) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$6(size) + ')');
	    }

	    if (str.length > len) {
	      return str.substring(0, len);
	    } else if (str.length < len) {
	      var res = str;
	      for (var i = 0, ii = len - str.length; i < ii; i++) {
	        res += defaultChar;
	      }
	      return res;
	    } else {
	      return str;
	    }
	  }
	}

	var name$2U = 'resize';
	var factory_1$34 = factory$34;

	var resize$2 = {
		name: name$2U,
		factory: factory_1$34
	};

	function factory$35(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3)                  // returns []
	   *     math.size('hello world')        // returns [11]
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.size(A)                    // returns [2, 3]
	   *     math.size(math.range(1,6))      // returns [5]
	   *
	   * See also:
	   *
	   *     resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */
	  var size = typed('size', {
	    'Matrix': function Matrix(x) {
	      // TODO: return the same matrix type as the input
	      return matrix$$1(x.size());
	    },

	    'Array': array.size,

	    'string': function string(x) {
	      return config.matrix === 'Array' ? [x.length] : matrix$$1([x.length]);
	    },

	    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
	      // scalar
	      return config.matrix === 'Array' ? [] : matrix$$1([]);
	    }
	  });

	  size.toTex = undefined; // use default template

	  return size;
	}

	var name$2V = 'size';
	var factory_1$35 = factory$35;

	var size$3 = {
		name: name$2V,
		factory: factory_1$35
	};

	/*
	 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
	 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
	 */
	/*jshint unused:false */
	var naturalSort = function naturalSort (a, b) {
		var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
			sre = /(^[ ]*|[ ]*$)/g,
			dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
			hre = /^0x[0-9a-f]+$/i,
			ore = /^0/,
			i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
			// convert all to strings strip whitespace
			x = i(a).replace(sre, '') || '',
			y = i(b).replace(sre, '') || '',
			// chunk/tokenize
			xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
			yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
			// numeric, hex or date detection
			xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
			yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
			oFxNcL, oFyNcL;
		// first try and sort Hex codes or Dates
		if (yD) {
			if ( xD < yD ) { return -1; }
			else if ( xD > yD ) { return 1; }
		}
		// natural sorting through split numeric strings and default strings
		for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
			// find floats not starting with '0', string or 0 if not defined (Clint Priest)
			oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
			oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
			// handle numeric vs string comparison - number < string - (Kyle Adams)
			if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
			// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
			else if (typeof oFxNcL !== typeof oFyNcL) {
				oFxNcL += '';
				oFyNcL += '';
			}
			if (oFxNcL < oFyNcL) { return -1; }
			if (oFxNcL > oFyNcL) { return 1; }
		}
		return 0;
	};

	function factory$36(type, config, load, typed) {
	  var getTypeOf = load(_typeof$4);
	  var compare$$1 = load(compare);

	  var compareBooleans = compare$$1.signatures['boolean,boolean'];

	  /**
	   * Compare two values of any type in a deterministic, natural way.
	   *
	   * For numeric values, the function works the same as `math.compare`.
	   * For types of values that can't be compared mathematically,
	   * the function compares in a natural way.
	   *
	   * For numeric values, x and y are considered equal when the relative
	   * difference between x and y is smaller than the configured epsilon.
	   * The function cannot be used to compare values smaller than
	   * approximately 2.22e-16.
	   *
	   * For Complex numbers, first the real parts are compared. If equal,
	   * the imaginary parts are compared.
	   *
	   * Strings are compared with a natural sorting algorithm, which
	   * orders strings in a "logic" way following some heuristics.
	   * This differs from the function `compare`, which converts the string
	   * into a numeric value and compares that. The function `compareText`
	   * on the other hand compares text lexically.
	   *
	   * Arrays and Matrices are compared value by value until there is an
	   * unequal pair of values encountered. Objects are compared by sorted
	   * keys until the keys or their values are unequal.
	   *
	   * Syntax:
	   *
	   *    math.compareNatural(x, y)
	   *
	   * Examples:
	   *
	   *    math.compareNatural(6, 1)              // returns 1
	   *    math.compareNatural(2, 3)              // returns -1
	   *    math.compareNatural(7, 7)              // returns 0
	   *
	   *    math.compareNatural('10', '2')         // returns 1
	   *    math.compareText('10', '2')            // returns -1
	   *    math.compare('10', '2')                // returns 1
	   *
	   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
	   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
	   *    math.compare('Answer: 10', 'Answer: 2')
	   *        // Error: Cannot convert "Answer: 10" to a number
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('40 mm')
	   *    math.compareNatural(a, b)              // returns 1
	   *
	   *    const c = math.complex('2 + 3i')
	   *    const d = math.complex('2 + 4i')
	   *    math.compareNatural(c, d)              // returns -1
	   *
	   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
	   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
	   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
	   *    math.compareNatural([1, 2], [1, 2])       // returns 0
	   *
	   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
	   *
	   * See also:
	   *
	   *    compare, compareText
	   *
	   * @param  {*} x First value to compare
	   * @param  {*} y Second value to compare
	   * @return {number} Returns the result of the comparison:
	   *                  1 when x > y, -1 when x < y, and 0 when x == y.
	   */
	  var compareNatural = typed('compareNatural', {
	    'any, any': function anyAny(x, y) {
	      var typeX = getTypeOf(x);
	      var typeY = getTypeOf(y);
	      var c = void 0;

	      // numeric types
	      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
	        c = compare$$1(x, y);
	        if (c.toString() !== '0') {
	          // c can be number, BigNumber, or Fraction
	          return c > 0 ? 1 : -1; // return a number
	        } else {
	          return naturalSort(typeX, typeY);
	        }
	      }

	      // matrix types
	      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
	        c = compareMatricesAndArrays(x, y);
	        if (c !== 0) {
	          return c;
	        } else {
	          return naturalSort(typeX, typeY);
	        }
	      }

	      // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'
	      if (typeX !== typeY) {
	        return naturalSort(typeX, typeY);
	      }

	      if (typeX === 'Complex') {
	        return compareComplexNumbers(x, y);
	      }

	      if (typeX === 'Unit') {
	        if (x.equalBase(y)) {
	          return compareNatural(x.value, y.value);
	        }

	        // compare by units
	        return compareArrays(x.formatUnits(), y.formatUnits());
	      }

	      if (typeX === 'boolean') {
	        return compareBooleans(x, y);
	      }

	      if (typeX === 'string') {
	        return naturalSort(x, y);
	      }

	      if (typeX === 'Object') {
	        return compareObjects(x, y);
	      }

	      if (typeX === 'null') {
	        return 0;
	      }

	      if (typeX === 'undefined') {
	        return 0;
	      }

	      // this should not occur...
	      throw new TypeError('Unsupported type of value "' + typeX + '"');
	    }
	  });

	  compareNatural.toTex = undefined; // use default template

	  /**
	   * Compare mixed matrix/array types, by converting to same-shaped array.
	   * This comparator is non-deterministic regarding input types.
	   * @param {Array | SparseMatrix | DenseMatrix | *} x
	   * @param {Array | SparseMatrix | DenseMatrix | *} y
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */
	  function compareMatricesAndArrays(x, y) {
	    if (type.isSparseMatrix(x) && type.isSparseMatrix(y)) {
	      return compareArrays(x.toJSON().values, y.toJSON().values);
	    }
	    if (type.isSparseMatrix(x)) {
	      // note: convert to array is expensive
	      return compareMatricesAndArrays(x.toArray(), y);
	    }
	    if (type.isSparseMatrix(y)) {
	      // note: convert to array is expensive
	      return compareMatricesAndArrays(x, y.toArray());
	    }

	    // convert DenseArray into Array
	    if (type.isDenseMatrix(x)) {
	      return compareMatricesAndArrays(x.toJSON().data, y);
	    }
	    if (type.isDenseMatrix(y)) {
	      return compareMatricesAndArrays(x, y.toJSON().data);
	    }

	    // convert scalars to array
	    if (!Array.isArray(x)) {
	      return compareMatricesAndArrays([x], y);
	    }
	    if (!Array.isArray(y)) {
	      return compareMatricesAndArrays(x, [y]);
	    }

	    return compareArrays(x, y);
	  }

	  /**
	   * Compare two Arrays
	   *
	   * - First, compares value by value
	   * - Next, if all corresponding values are equal,
	   *   look at the length: longest array will be considered largest
	   *
	   * @param {Array} x
	   * @param {Array} y
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */
	  function compareArrays(x, y) {
	    // compare each value
	    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
	      var v = compareNatural(x[i], y[i]);
	      if (v !== 0) {
	        return v;
	      }
	    }

	    // compare the size of the arrays
	    if (x.length > y.length) {
	      return 1;
	    }
	    if (x.length < y.length) {
	      return -1;
	    }

	    // both Arrays have equal size and content
	    return 0;
	  }

	  /**
	   * Compare two objects
	   *
	   * - First, compare sorted property names
	   * - Next, compare the property values
	   *
	   * @param {Object} x
	   * @param {Object} y
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */
	  function compareObjects(x, y) {
	    var keysX = Object.keys(x);
	    var keysY = Object.keys(y);

	    // compare keys
	    keysX.sort(naturalSort);
	    keysY.sort(naturalSort);
	    var c = compareArrays(keysX, keysY);
	    if (c !== 0) {
	      return c;
	    }

	    // compare values
	    for (var i = 0; i < keysX.length; i++) {
	      var v = compareNatural(x[keysX[i]], y[keysY[i]]);
	      if (v !== 0) {
	        return v;
	      }
	    }

	    return 0;
	  }

	  return compareNatural;
	}

	/**
	 * Compare two complex numbers, `x` and `y`:
	 *
	 * - First, compare the real values of `x` and `y`
	 * - If equal, compare the imaginary values of `x` and `y`
	 *
	 * @params {Complex} x
	 * @params {Complex} y
	 * @returns {number} Returns the comparison result: -1, 0, or 1
	 */
	function compareComplexNumbers(x, y) {
	  if (x.re > y.re) {
	    return 1;
	  }
	  if (x.re < y.re) {
	    return -1;
	  }

	  if (x.im > y.im) {
	    return 1;
	  }
	  if (x.im < y.im) {
	    return -1;
	  }

	  return 0;
	}

	var name$2W = 'compareNatural';
	var factory_1$36 = factory$36;

	var compareNatural = {
		name: name$2W,
		factory: factory_1$36
	};

	var size$4 = array.size;

	function factory$37(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var compareAsc = load(compare);
	  var compareDesc = function compareDesc(a, b) {
	    return -compareAsc(a, b);
	  };
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Sort the items in a matrix.
	   *
	   * Syntax:
	   *
	   *    math.sort(x)
	   *    math.sort(x, compare)
	   *
	   * Examples:
	   *
	   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
	   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
	   *    // returns ['A', 'B', 'C', 'D']
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length
	   *    }
	   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
	   *    // returns ['Tom', 'Sara', 'Langdon']
	   *
	   * See also:
	   *
	   *    filter, forEach, map, compare, compareNatural
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
	   *        An optional _comparator function or name. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {Matrix | Array} Returns the sorted matrix.
	   */
	  var sort = typed('sort', {
	    'Array': function Array(x) {
	      _arrayIsVector(x);
	      return x.sort(compareAsc);
	    },

	    'Matrix': function Matrix(x) {
	      _matrixIsVector(x);
	      return matrix$$1(x.toArray().sort(compareAsc), x.storage());
	    },

	    'Array, function': function ArrayFunction(x, _comparator) {
	      _arrayIsVector(x);
	      return x.sort(_comparator);
	    },

	    'Matrix, function': function MatrixFunction(x, _comparator) {
	      _matrixIsVector(x);
	      return matrix$$1(x.toArray().sort(_comparator), x.storage());
	    },

	    'Array, string': function ArrayString(x, order) {
	      _arrayIsVector(x);
	      return x.sort(_comparator(order));
	    },

	    'Matrix, string': function MatrixString(x, order) {
	      _matrixIsVector(x);
	      return matrix$$1(x.toArray().sort(_comparator(order)), x.storage());
	    }
	  });

	  sort.toTex = undefined; // use default template

	  /**
	   * Get the comparator for given order ('asc', 'desc', 'natural')
	   * @param {'asc' | 'desc' | 'natural'} order
	   * @return {Function} Returns a _comparator function
	   */
	  function _comparator(order) {
	    if (order === 'asc') {
	      return compareAsc;
	    } else if (order === 'desc') {
	      return compareDesc;
	    } else if (order === 'natural') {
	      return compareNatural$$1;
	    } else {
	      throw new Error('String "asc", "desc", or "natural" expected');
	    }
	  }

	  /**
	   * Validate whether an array is one dimensional
	   * Throws an error when this is not the case
	   * @param {Array} array
	   * @private
	   */
	  function _arrayIsVector(array$$1) {
	    if (size$4(array$$1).length !== 1) {
	      throw new Error('One dimensional array expected');
	    }
	  }

	  /**
	   * Validate whether a matrix is one dimensional
	   * Throws an error when this is not the case
	   * @param {Matrix} matrix
	   * @private
	   */
	  function _matrixIsVector(matrix$$1) {
	    if (matrix$$1.size().length !== 1) {
	      throw new Error('One dimensional matrix expected');
	    }
	  }

	  return sort;
	}

	var name$2X = 'sort';
	var factory_1$37 = factory$37;

	var sort = {
		name: name$2X,
		factory: factory_1$37
	};

	/**
	 * Recursively loop over all elements in a given multi dimensional array
	 * and invoke the callback on each of the elements.
	 * @param {Array | Matrix} array
	 * @param {Function} callback     The callback method is invoked with one
	 *                                parameter: the current element in the array
	 */
	var deepForEach = function deepForEach(array, callback) {
	  if (isMatrix(array)) {
	    array = array.valueOf();
	  }

	  for (var i = 0, ii = array.length; i < ii; i++) {
	    var value = array[i];

	    if (Array.isArray(value)) {
	      deepForEach(value, callback);
	    } else {
	      callback(value);
	    }
	  }
	};

	var arraySize = array.size;



	/**
	 * Reduce a given matrix or array to a new matrix or
	 * array with one less dimension, applying the given
	 * callback in the selected dimension.
	 * @param {Array | Matrix} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @return {Array | Matrix} res
	 */
	var reduce = function (mat, dim, callback) {
	  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
	  if (dim < 0 || dim >= size.length) {
	    // TODO: would be more clear when throwing a DimensionError here
	    throw new IndexError_1(dim, size.length);
	  }

	  if (isMatrix(mat)) {
	    return mat.create(_reduce(mat.valueOf(), dim, callback));
	  } else {
	    return _reduce(mat, dim, callback);
	  }
	};

	/**
	 * Recursively reduce a matrix
	 * @param {Array} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @returns {Array} ret
	 * @private
	 */
	function _reduce(mat, dim, callback) {
	  var i = void 0,
	      ret = void 0,
	      val = void 0,
	      tran = void 0;

	  if (dim <= 0) {
	    if (!Array.isArray(mat[0])) {
	      val = mat[0];
	      for (i = 1; i < mat.length; i++) {
	        val = callback(val, mat[i]);
	      }
	      return val;
	    } else {
	      tran = _switch(mat);
	      ret = [];
	      for (i = 0; i < tran.length; i++) {
	        ret[i] = _reduce(tran[i], dim - 1, callback);
	      }
	      return ret;
	    }
	  } else {
	    ret = [];
	    for (i = 0; i < mat.length; i++) {
	      ret[i] = _reduce(mat[i], dim - 1, callback);
	    }
	    return ret;
	  }
	}

	/**
	 * Transpose a matrix
	 * @param {Array} mat
	 * @returns {Array} ret
	 * @private
	 */
	function _switch(mat) {
	  var I = mat.length;
	  var J = mat[0].length;
	  var i = void 0,
	      j = void 0;
	  var ret = [];
	  for (j = 0; j < J; j++) {
	    var tmp = [];
	    for (i = 0; i < I; i++) {
	      tmp.push(mat[i][j]);
	    }
	    ret.push(tmp);
	  }
	  return ret;
	}

	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */
	var isCollection = function isCollection(x) {
	  return Array.isArray(x) || isMatrix(x);
	};

	/**
	 * Test whether an array contains collections
	 * @param {Array} array
	 * @returns {boolean} Returns true when the array contains one or multiple
	 *                    collections (Arrays or Matrices). Returns false otherwise.
	 */
	var containsCollections = function containsCollections(array) {
	  for (var i = 0; i < array.length; i++) {
	    if (isCollection(array[i])) {
	      return true;
	    }
	  }
	  return false;
	};

	function factory$38(type, config, load, typed) {
	  var getType = load(_typeof$4);

	  /**
	   * Improve error messages for statistics functions. Errors are typically
	   * thrown in an internally used function like larger, causing the error
	   * not to mention the function (like max) which is actually used by the user.
	   *
	   * @param {Error} err
	   * @param {String} fnName
	   * @param {*} [value]
	   * @return {Error}
	   */
	  return function improveErrorMessage(err, fnName, value) {
	    // TODO: add information with the index (also needs transform in expression parser)
	    var details = void 0;

	    if (String(err).indexOf('Unexpected type') !== -1) {
	      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';

	      return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
	    }

	    if (String(err).indexOf('complex numbers') !== -1) {
	      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : '';

	      return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
	    }

	    return err;
	  };
	}

	var factory_1$38 = factory$38;

	var improveErrorMessage = {
		factory: factory_1$38
	};

	function factory$39(type, config, load, typed) {
	  var larger$$1 = load(larger);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the maximum value of a matrix or a  list with values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.max(a, b, c, ...)
	   *     math.max(A)
	   *     math.max(A, dim)
	   *
	   * Examples:
	   *
	   *     math.max(2, 1, 4, 3)                  // returns 4
	   *     math.max([2, 1, 4, 3])                // returns 4
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
	   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, min, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The maximum value
	   */
	  var max = typed('max', {
	    // max([a, b, c, d, ...])
	    'Array | Matrix': _max,

	    // max([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      return reduce(array, dim.valueOf(), _largest);
	    },

	    // max(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function max');
	      }

	      return _max(args);
	    }
	  });

	  max.toTex = '\\max\\left(${args}\\right)';

	  return max;

	  /**
	   * Return the largest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is largest, or y when y is largest
	   * @private
	   */
	  function _largest(x, y) {
	    try {
	      return larger$$1(x, y) ? x : y;
	    } catch (err) {
	      throw improveErrorMessage$$1(err, 'max', y);
	    }
	  }

	  /**
	   * Recursively calculate the maximum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} max
	   * @private
	   */
	  function _max(array) {
	    var max = void 0;

	    deepForEach(array, function (value) {
	      try {
	        if (max === undefined || larger$$1(value, max)) {
	          max = value;
	        }
	      } catch (err) {
	        throw improveErrorMessage$$1(err, 'max', value);
	      }
	    });

	    if (max === undefined) {
	      throw new Error('Cannot calculate max of an empty array');
	    }

	    return max;
	  }
	}

	var name$2Y = 'max';
	var factory_1$39 = factory$39;

	var max = {
		name: name$2Y,
		factory: factory_1$39
	};

	function factory$3a(type, config, load, typed) {
	  var abs$$1 = load(abs);
	  var add$$1 = load(add);
	  var multiply$$1 = load(multiply);
	  var sqrt$$1 = load(sqrt);
	  var subtract$$1 = load(subtract);
	  var inv$$1 = load(inv);
	  var size = load(size$3);
	  var max$$1 = load(max);
	  var identity$$1 = load(identity);

	  /**
	   * Calculate the principal square root of a square matrix.
	   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
	   *
	   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
	   *
	   * Syntax:
	   *
	   *     X = math.sqrtm(A)
	   *
	   * Examples:
	   *
	   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param  {Array | Matrix} A   The square matrix `A`
	   * @return {Array | Matrix}     The principal square root of matrix `A`
	   */
	  var sqrtm = typed('sqrtm', {
	    'Array | Matrix': function ArrayMatrix(A) {
	      var size = type.isMatrix(A) ? A.size() : array.size(A);
	      switch (size.length) {
	        case 1:
	          // Single element Array | Matrix
	          if (size[0] === 1) {
	            return sqrt$$1(A);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
	          }

	        case 2:
	          // Two-dimensional Array | Matrix
	          var rows = size[0];
	          var cols = size[1];
	          if (rows === cols) {
	            return _denmanBeavers(A);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
	          }
	      }
	    }
	  });

	  var _maxIterations = 1e3;
	  var _tolerance = 1e-6;

	  /**
	   * Calculate the principal square root matrix using the Denman–Beavers iterative method
	   *
	   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
	   *
	   * @param  {Array | Matrix} A   The square matrix `A`
	   * @return {Array | Matrix}     The principal square root of matrix `A`
	   * @private
	   */
	  function _denmanBeavers(A) {
	    var error = void 0;
	    var iterations = 0;

	    var Y = A;
	    var Z = identity$$1(size(A));

	    do {
	      var Yk = Y;
	      Y = multiply$$1(0.5, add$$1(Yk, inv$$1(Z)));
	      Z = multiply$$1(0.5, add$$1(Z, inv$$1(Yk)));

	      error = max$$1(abs$$1(subtract$$1(Y, Yk)));

	      if (error > _tolerance && ++iterations > _maxIterations) {
	        throw new Error('computing square root of matrix: iterative method could not converge');
	      }
	    } while (error > _tolerance);

	    return Y;
	  }

	  sqrtm.toTex = { 1: '{${args[0]}}' + latex.operators['pow'] + '{\\frac{1}{2}}' };

	  return sqrtm;
	}

	var name$2Z = 'sqrtm';
	var factory_1$3a = factory$3a;

	var sqrtm = {
		name: name$2Z,
		factory: factory_1$3a
	};

	function factory$3b(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  /**
	   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
	   *
	   * Syntax:
	   *
	   *     math.squeeze(x)
	   *
	   * Examples:
	   *
	   *     math.squeeze([3])           // returns 3
	   *     math.squeeze([[3]])         // returns 3
	   *
	   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
	   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
	   *
	   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
	   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
	   *
	   *     // only inner and outer dimensions are removed
	   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *
	   * See also:
	   *
	   *     subset
	   *
	   * @param {Matrix | Array} x      Matrix to be squeezed
	   * @return {Matrix | Array} Squeezed matrix
	   */
	  var squeeze = typed('squeeze', {
	    'Array': function Array(x) {
	      return array.squeeze(object.clone(x));
	    },

	    'Matrix': function Matrix(x) {
	      var res = array.squeeze(x.toArray());
	      // FIXME: return the same type of matrix as the input
	      return Array.isArray(res) ? matrix$$1(res) : res;
	    },

	    'any': function any(x) {
	      // scalar
	      return object.clone(x);
	    }
	  });

	  squeeze.toTex = undefined; // use default template

	  return squeeze;
	}

	var name$2_ = 'squeeze';
	var factory_1$3b = factory$3b;

	var squeeze = {
		name: name$2_,
		factory: factory_1$3b
	};

	var clone$8 = object.clone;
	var format$7 = string.format;

	function factory$3c(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var add$$1 = load(add);

	  /**
	   * Calculate the trace of a matrix: the sum of the elements on the main
	   * diagonal of a square matrix.
	   *
	   * Syntax:
	   *
	   *    math.trace(x)
	   *
	   * Examples:
	   *
	   *    math.trace([[1, 2], [3, 4]]) // returns 5
	   *
	   *    const A = [
	   *      [1, 2, 3],
	   *      [-1, 2, 3],
	   *      [2, 0, 3]
	   *    ]
	   *    math.trace(A) // returns 6
	   *
	   * See also:
	   *
	   *    diag
	   *
	   * @param {Array | Matrix} x  A matrix
	   *
	   * @return {number} The trace of `x`
	   */
	  var trace = typed('trace', {

	    'Array': function _arrayTrace(x) {
	      // use dense matrix implementation
	      return _denseTrace(matrix$$1(x));
	    },

	    'SparseMatrix': _sparseTrace,

	    'DenseMatrix': _denseTrace,

	    'any': clone$8
	  });

	  function _denseTrace(m) {
	    // matrix size & data
	    var size = m._size;
	    var data = m._data;

	    // process dimensions
	    switch (size.length) {
	      case 1:
	        // vector
	        if (size[0] === 1) {
	          // return data[0]
	          return clone$8(data[0]);
	        }
	        throw new RangeError('Matrix must be square (size: ' + format$7(size) + ')');
	      case 2:
	        // two dimensional
	        var rows = size[0];
	        var cols = size[1];
	        if (rows === cols) {
	          // calulate sum
	          var sum = 0;
	          // loop diagonal
	          for (var i = 0; i < rows; i++) {
	            sum = add$$1(sum, data[i][i]);
	          }
	          // return trace
	          return sum;
	        }
	        throw new RangeError('Matrix must be square (size: ' + format$7(size) + ')');
	      default:
	        // multi dimensional
	        throw new RangeError('Matrix must be two dimensional (size: ' + format$7(size) + ')');
	    }
	  }

	  function _sparseTrace(m) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    var size = m._size;
	    // check dimensions
	    var rows = size[0];
	    var columns = size[1];
	    // matrix must be square
	    if (rows === columns) {
	      // calulate sum
	      var sum = 0;
	      // check we have data (avoid looping columns)
	      if (values.length > 0) {
	        // loop columns
	        for (var j = 0; j < columns; j++) {
	          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	          var k0 = ptr[j];
	          var k1 = ptr[j + 1];
	          // loop k within [k0, k1[
	          for (var k = k0; k < k1; k++) {
	            // row index
	            var i = index[k];
	            // check row
	            if (i === j) {
	              // accumulate value
	              sum = add$$1(sum, values[k]);
	              // exit loop
	              break;
	            }
	            if (i > j) {
	              // exit loop, no value on the diagonal for column j
	              break;
	            }
	          }
	        }
	      }
	      // return trace
	      return sum;
	    }
	    throw new RangeError('Matrix must be square (size: ' + format$7(size) + ')');
	  }

	  trace.toTex = { 1: '\\mathrm{tr}\\left(${args[0]}\\right)' };

	  return trace;
	}

	var name$30 = 'trace';
	var factory_1$3c = factory$3c;

	var trace = {
		name: name$30,
		factory: factory_1$3c
	};

	var matrix$2 = [concat, cross, ctranspose, det, diag, dot, eye, expm, filter_1, flatten$1, forEach_1, identity, inv, kron, map$5, ones, partitionSelect, range, reshape, resize$2, size$3, sort, sqrtm, squeeze, subset, trace, transpose, zeros];

	function factory$3d(type, config, load, typed) {
	  var add = load(addScalar);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the sum of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.sum(a, b, c, ...)
	   *     math.sum(A)
	   *
	   * Examples:
	   *
	   *     math.sum(2, 1, 4, 3)               // returns 10
	   *     math.sum([2, 1, 4, 3])             // returns 10
	   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
	   *
	   * See also:
	   *
	   *    mean, median, min, max, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The sum of all values
	   */
	  var sum = typed('sum', {
	    'Array | Matrix': function ArrayMatrix(args) {
	      // sum([a, b, c, d, ...])
	      return _sum(args);
	    },

	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber() {
	      // sum([a, b, c, d, ...], dim)
	      // TODO: implement sum(A, dim)
	      throw new Error('sum(A, dim) is not yet supported');
	    },

	    '...': function _(args) {
	      // sum(a, b, c, d, ...)
	      return _sum(args);
	    }
	  });

	  sum.toTex = undefined; // use default template

	  return sum;

	  /**
	   * Recursively calculate the sum of an n-dimensional array
	   * @param {Array} array
	   * @return {number} sum
	   * @private
	   */
	  function _sum(array) {
	    var sum = void 0;

	    deepForEach(array, function (value) {
	      try {
	        sum = sum === undefined ? value : add(sum, value);
	      } catch (err) {
	        throw improveErrorMessage$$1(err, 'sum', value);
	      }
	    });

	    if (sum === undefined) {
	      switch (config.number) {
	        case 'number':
	          return 0;
	        case 'BigNumber':
	          return new type.BigNumber(0);
	        case 'Fraction':
	          return new type.Fraction(0);
	        default:
	          return 0;
	      }
	    }

	    return sum;
	  }
	}

	var name$31 = 'sum';
	var factory_1$3d = factory$3d;

	var sum = {
		name: name$31,
		factory: factory_1$3d
	};

	function factory$3e(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var divide$$1 = load(divide);
	  var sum$$1 = load(sum);
	  var multiply$$1 = load(multiply);
	  var dotDivide$$1 = load(dotDivide);
	  var log$$1 = load(log);
	  var isNumeric$$1 = load(isNumeric);

	  /**
	     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
	     *
	     * Syntax:
	     *
	     *     math.kldivergence(x, y)
	     *
	     * Examples:
	     *
	     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
	     *
	     *
	     * @param  {Array | Matrix} q    First vector
	     * @param  {Array | Matrix} p    Second vector
	     * @return {number}              Returns distance between q and p
	     */
	  var kldivergence = typed('kldivergence', {
	    'Array, Array': function ArrayArray(q, p) {
	      return _kldiv(matrix$$1(q), matrix$$1(p));
	    },

	    'Matrix, Array': function MatrixArray(q, p) {
	      return _kldiv(q, matrix$$1(p));
	    },

	    'Array, Matrix': function ArrayMatrix(q, p) {
	      return _kldiv(matrix$$1(q), p);
	    },

	    'Matrix, Matrix': function MatrixMatrix(q, p) {
	      return _kldiv(q, p);
	    }

	  });

	  function _kldiv(q, p) {
	    var plength = p.size().length;
	    var qlength = q.size().length;
	    if (plength > 1) {
	      throw new Error('first object must be one dimensional');
	    }

	    if (qlength > 1) {
	      throw new Error('second object must be one dimensional');
	    }

	    if (plength !== qlength) {
	      throw new Error('Length of two vectors must be equal');
	    }

	    // Before calculation, apply normalization
	    var sumq = sum$$1(q);
	    if (sumq === 0) {
	      throw new Error('Sum of elements in first object must be non zero');
	    }

	    var sump = sum$$1(p);
	    if (sump === 0) {
	      throw new Error('Sum of elements in second object must be non zero');
	    }
	    var qnorm = divide$$1(q, sum$$1(q));
	    var pnorm = divide$$1(p, sum$$1(p));

	    var result = sum$$1(multiply$$1(qnorm, log$$1(dotDivide$$1(qnorm, pnorm))));
	    if (isNumeric$$1(result)) {
	      return result;
	    } else {
	      return Number.NaN;
	    }
	  }

	  return kldivergence;
	}

	var name$32 = 'kldivergence';
	var factory_1$3e = factory$3e;

	var kldivergence = {
		name: name$32,
		factory: factory_1$3e
	};

	function factory$3f(type, config, load, typed) {
	  var add$$1 = load(add);
	  var multiply$$1 = load(multiply);
	  var divide$$1 = load(divide);
	  var factorial$$1 = load(factorial);
	  var isInteger = load(isInteger$k);
	  var isPositive$$1 = load(isPositive);

	  /**
	   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
	   *
	   * multinomial takes one array of integers as an argument.
	   * The following condition must be enforced: every ai <= 0
	   *
	   * Syntax:
	   *
	   *     math.multinomial(a) // a is an array type
	   *
	   * Examples:
	   *
	   *    math.multinomial([1,2,1]) // returns 12
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
	   * @return {Number | BigNumber}         Multinomial coefficient.
	   */
	  return typed('multinomial', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      var sum = 0;
	      var denom = 1;

	      deepForEach(a, function (ai) {
	        if (!isInteger(ai) || !isPositive$$1(ai)) {
	          throw new TypeError('Positive integer value expected in function multinomial');
	        }
	        sum = add$$1(sum, ai);
	        denom = multiply$$1(denom, factorial$$1(ai));
	      });

	      return divide$$1(factorial$$1(sum), denom);
	    }
	  });
	}

	var name$33 = 'multinomial';
	var factory_1$3f = factory$3f;

	var multinomial = {
		name: name$33,
		factory: factory_1$3f
	};

	var isInteger$p = number.isInteger;

	function factory$3g(type, config, load, typed) {
	  var factorial$$1 = load(factorial);
	  var product = product_1;
	  /**
	   * Compute the number of ways of obtaining an ordered subset of `k` elements
	   * from a set of `n` elements.
	   *
	   * Permutations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.permutations(n)
	   *     math.permutations(n, k)
	   *
	   * Examples:
	   *
	   *    math.permutations(5)     // 120
	   *    math.permutations(5, 3)  // 60
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number | BigNumber} n   The number of objects in total
	   * @param {number | BigNumber} [k] The number of objects in the subset
	   * @return {number | BigNumber}    The number of permutations
	   */
	  var permutations = typed('permutations', {
	    'number | BigNumber': factorial$$1,
	    'number, number': function numberNumber(n, k) {
	      if (!isInteger$p(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (!isInteger$p(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k > n) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }
	      // Permute n objects, k at a time
	      return product(n - k + 1, n);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
	      var result = void 0,
	          i = void 0;

	      if (!isPositiveInteger$1(n) || !isPositiveInteger$1(k)) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }

	      result = new type.BigNumber(1);
	      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
	        result = result.times(i);
	      }

	      return result;
	    }

	    // TODO: implement support for collection in permutations
	  });

	  permutations.toTex = undefined; // use default template

	  return permutations;
	}

	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger$1(n) {
	  return n.isInteger() && n.gte(0);
	}

	var name$34 = 'permutations';
	var factory_1$3g = factory$3g;

	var permutations = {
		name: name$34,
		factory: factory_1$3g
	};

	var seedRandom = createCommonjsModule(function (module) {

	var width = 256;// each RC4 output is 0 <= x < 256
	var chunks = 6;// at least six RC4 outputs for each double
	var digits = 52;// there are 52 significant digits in a double
	var pool = [];// pool: entropy pool starts empty
	var GLOBAL = typeof commonjsGlobal === 'undefined' ? window : commonjsGlobal;

	//
	// The following constants are related to IEEE 754 limits.
	//
	var startdenom = Math.pow(width, chunks),
	    significance = Math.pow(2, digits),
	    overflow = significance * 2,
	    mask = width - 1;


	var oldRandom = Math.random;

	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	module.exports = function(seed, options) {
	  if (options && options.global === true) {
	    options.global = false;
	    Math.random = module.exports(seed, options);
	    options.global = true;
	    return Math.random;
	  }
	  var use_entropy = (options && options.entropy) || false;
	  var key = [];

	  // Flatten the seed string or build one from local entropy if needed.
	  var shortseed = mixkey(flatten(
	    use_entropy ? [seed, tostring(pool)] :
	    0 in arguments ? seed : autoseed(), 3), key);

	  // Use the seed to initialize an ARC4 generator.
	  var arc4 = new ARC4(key);

	  // Mix the randomness into accumulated entropy.
	  mixkey(tostring(arc4.S), pool);

	  // Override Math.random

	  // This function returns a random double in [0, 1) that contains
	  // randomness in every bit of the mantissa of the IEEE 754 value.

	  return function() {         // Closure to return a random double:
	    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
	        d = startdenom,                 //   and denominator d = 2 ^ 48.
	        x = 0;                          //   and no 'extra last byte'.
	    while (n < significance) {          // Fill up all significant digits by
	      n = (n + x) * width;              //   shifting numerator and
	      d *= width;                       //   denominator and generating a
	      x = arc4.g(1);                    //   new least-significant-byte.
	    }
	    while (n >= overflow) {             // To avoid rounding up, before adding
	      n /= 2;                           //   last byte, shift everything
	      d /= 2;                           //   right using integer Math until
	      x >>>= 1;                         //   we have exactly the desired bits.
	    }
	    return (n + x) / d;                 // Form the number within [0, 1).
	  };
	};

	module.exports.resetGlobal = function () {
	  Math.random = oldRandom;
	};

	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	/** @constructor */
	function ARC4(key) {
	  var t, keylen = key.length,
	      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

	  // The empty key [] is treated as [0].
	  if (!keylen) { key = [keylen++]; }

	  // Set up S using the standard key scheduling algorithm.
	  while (i < width) {
	    s[i] = i++;
	  }
	  for (i = 0; i < width; i++) {
	    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
	    s[j] = t;
	  }

	  // The "g" method returns the next (count) outputs as one number.
	  (me.g = function(count) {
	    // Using instance members instead of closure state nearly doubles speed.
	    var t, r = 0,
	        i = me.i, j = me.j, s = me.S;
	    while (count--) {
	      t = s[i = mask & (i + 1)];
	      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
	    }
	    me.i = i; me.j = j;
	    return r;
	    // For robust unpredictability discard an initial batch of values.
	    // See http://www.rsa.com/rsalabs/node.asp?id=2009
	  })(width);
	}

	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	function flatten(obj, depth) {
	  var result = [], typ = (typeof obj)[0], prop;
	  if (depth && typ == 'o') {
	    for (prop in obj) {
	      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	    }
	  }
	  return (result.length ? result : typ == 's' ? obj : obj + '\0');
	}

	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	function mixkey(seed, key) {
	  var stringseed = seed + '', smear, j = 0;
	  while (j < stringseed.length) {
	    key[mask & j] =
	      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
	  }
	  return tostring(key);
	}

	//
	// autoseed()
	// Returns an object for autoseeding, using window.crypto if available.
	//
	/** @param {Uint8Array=} seed */
	function autoseed(seed) {
	  try {
	    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
	    return tostring(seed);
	  } catch (e) {
	    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
	            GLOBAL.screen, tostring(pool)];
	  }
	}

	//
	// tostring()
	// Converts an array of charcodes to a string
	//
	function tostring(a) {
	  return String.fromCharCode.apply(0, a);
	}

	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to intefere with determinstic PRNG state later,
	// seedrandom will not call Math.random on its own again after
	// initialization.
	//
	mixkey(Math.random(), pool);
	});
	var seedRandom_1 = seedRandom.resetGlobal;

	// create a random seed here to prevent an infinite loop from seed-random
	// inside the factory. Reason is that math.random is defined as a getter/setter
	// and seed-random generates a seed from the local entropy by reading every
	// defined object including `math` itself. That means that whilst getting
	// math.random, it tries to get math.random, etc... an infinite loop.
	// See https://github.com/ForbesLindesay/seed-random/issues/6
	var singletonRandom = seedRandom();

	function factory$3h(type, config, load, typed, math) {
	  var random = void 0;

	  // create a new random generator with given seed
	  function setSeed(seed) {
	    random = seed === null ? singletonRandom : seedRandom(String(seed));
	  }

	  // initialize a seeded pseudo random number generator with config's random seed
	  setSeed(config.randomSeed);

	  // wrapper function so the rng can be updated via generator
	  function rng() {
	    return random();
	  }

	  // updates generator with a new instance of a seeded pseudo random number generator
	  math.on('config', function (curr, prev, changes) {
	    // if the user specified a randomSeed
	    if (changes.randomSeed !== undefined) {
	      // update generator with a new instance of a seeded pseudo random number generator
	      setSeed(curr.randomSeed);
	    }
	  });

	  return rng;
	}

	var factory_1$3h = factory$3h;
	var math$f = true;

	var seededRNG = {
		factory: factory_1$3h,
		math: math$f
	};

	var isNumber$3 = number.isNumber;

	// TODO: rethink math.distribution
	// TODO: rework to a typed function
	function factory$3i(type, config, load, typed, math) {
	  var matrix$$1 = load(matrix);
	  var array$$1 = array;

	  // seeded pseudo random number generator
	  var rng = load(seededRNG);

	  /**
	   * Create a distribution object with a set of random functions for given
	   * random distribution.
	   *
	   * Syntax:
	   *
	   *     math.distribution(name)
	   *
	   * Examples:
	   *
	   *     const normalDist = math.distribution('normal') // create a normal distribution
	   *     normalDist.random(0, 10)                     // get a random value between 0 and 10
	   *
	   * See also:
	   *
	   *     random, randomInt, pickRandom
	   *
	   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
	   * @return {Object}       Returns a distribution object containing functions:
	   *                        `random([size] [, min] [, max])`,
	   *                        `randomInt([min] [, max])`,
	   *                        `pickRandom(array)`
	   */
	  function distribution(name) {
	    if (!distributions.hasOwnProperty(name)) {
	      throw new Error('Unknown distribution ' + name);
	    }

	    var args = Array.prototype.slice.call(arguments, 1);
	    var distribution = distributions[name].apply(this, args);

	    return function (distribution) {
	      // This is the public API for all distributions
	      var randFunctions = {

	        random: function random(arg1, arg2, arg3) {
	          var size = void 0,
	              min = void 0,
	              max = void 0;

	          if (arguments.length > 3) {
	            throw new ArgumentsError_1('random', arguments.length, 0, 3);
	          } else if (arguments.length === 1) {
	            // `random(max)` or `random(size)`
	            if (isCollection(arg1)) {
	              size = arg1;
	            } else {
	              max = arg1;
	            }
	          } else if (arguments.length === 2) {
	            // `random(min, max)` or `random(size, max)`
	            if (isCollection(arg1)) {
	              size = arg1;
	              max = arg2;
	            } else {
	              min = arg1;
	              max = arg2;
	            }
	          } else {
	            // `random(size, min, max)`
	            size = arg1;
	            min = arg2;
	            max = arg3;
	          }

	          // TODO: validate type of size
	          if (min !== undefined && !isNumber$3(min) || max !== undefined && !isNumber$3(max)) {
	            throw new TypeError('Invalid argument in function random');
	          }

	          if (max === undefined) max = 1;
	          if (min === undefined) min = 0;
	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
	            return type.isMatrix(size) ? matrix$$1(res) : res;
	          }
	          return _random(min, max);
	        },

	        randomInt: typed({
	          'number | Array': function numberArray(arg) {
	            var min = 0;

	            if (isCollection(arg)) {
	              var size = arg;
	              var max = 1;
	              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	              return type.isMatrix(size) ? matrix$$1(res) : res;
	            } else {
	              var _max = arg;
	              return _randomInt(min, _max);
	            }
	          },
	          'number | Array, number': function numberArrayNumber(arg1, arg2) {
	            if (isCollection(arg1)) {
	              var size = arg1;
	              var max = arg2;
	              var min = 0;
	              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	              return type.isMatrix(size) ? matrix$$1(res) : res;
	            } else {
	              var _min = arg1;
	              var _max2 = arg2;
	              return _randomInt(_min, _max2);
	            }
	          },
	          'Array, number, number': function ArrayNumberNumber(size, min, max) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	            return size && size.isMatrix === true ? matrix$$1(res) : res;
	          }
	        }),

	        pickRandom: typed({
	          'Array': function Array(possibles) {
	            return _pickRandom(possibles);
	          },
	          'Array, number | Array': function ArrayNumberArray(possibles, arg2) {
	            var number$$1 = void 0,
	                weights = void 0;

	            if (Array.isArray(arg2)) {
	              weights = arg2;
	            } else if (isNumber$3(arg2)) {
	              number$$1 = arg2;
	            } else {
	              throw new TypeError('Invalid argument in function pickRandom');
	            }

	            return _pickRandom(possibles, number$$1, weights);
	          },
	          'Array, number | Array, Array | number': function ArrayNumberArrayArrayNumber(possibles, arg2, arg3) {
	            var number$$1 = void 0,
	                weights = void 0;

	            if (Array.isArray(arg2)) {
	              weights = arg2;
	              number$$1 = arg3;
	            } else {
	              weights = arg3;
	              number$$1 = arg2;
	            }

	            if (!Array.isArray(weights) || !isNumber$3(number$$1)) {
	              throw new TypeError('Invalid argument in function pickRandom');
	            }

	            return _pickRandom(possibles, number$$1, weights);
	          }
	        })
	      };

	      function _pickRandom(possibles, number$$1, weights) {
	        var single = typeof number$$1 === 'undefined';

	        if (single) {
	          number$$1 = 1;
	        }

	        if (type.isMatrix(possibles)) {
	          possibles = possibles.valueOf(); // get Array
	        } else if (!Array.isArray(possibles)) {
	          throw new TypeError('Unsupported type of value in function pickRandom');
	        }

	        if (array$$1.size(possibles).length > 1) {
	          throw new Error('Only one dimensional vectors supported');
	        }

	        var totalWeights = 0;

	        if (typeof weights !== 'undefined') {
	          if (weights.length !== possibles.length) {
	            throw new Error('Weights must have the same length as possibles');
	          }

	          for (var i = 0, len = weights.length; i < len; i++) {
	            if (!isNumber$3(weights[i]) || weights[i] < 0) {
	              throw new Error('Weights must be an array of positive numbers');
	            }

	            totalWeights += weights[i];
	          }
	        }

	        var length = possibles.length;

	        if (length === 0) {
	          return [];
	        } else if (number$$1 >= length) {
	          return number$$1 > 1 ? possibles : possibles[0];
	        }

	        var result = [];
	        var pick = void 0;

	        while (result.length < number$$1) {
	          if (typeof weights === 'undefined') {
	            pick = possibles[Math.floor(rng() * length)];
	          } else {
	            var randKey = rng() * totalWeights;

	            for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
	              randKey -= weights[_i];

	              if (randKey < 0) {
	                pick = possibles[_i];
	                break;
	              }
	            }
	          }

	          if (result.indexOf(pick) === -1) {
	            result.push(pick);
	          }
	        }

	        return single ? result[0] : result;

	        // TODO: add support for multi dimensional matrices
	      }

	      function _random(min, max) {
	        return min + distribution() * (max - min);
	      }

	      function _randomInt(min, max) {
	        return Math.floor(min + distribution() * (max - min));
	      }

	      // This is a function for generating a random matrix recursively.
	      function _randomDataForMatrix(size, min, max, randFunc) {
	        var data = [];
	        size = size.slice(0);

	        if (size.length > 1) {
	          for (var i = 0, length = size.shift(); i < length; i++) {
	            data.push(_randomDataForMatrix(size, min, max, randFunc));
	          }
	        } else {
	          for (var _i2 = 0, _length = size.shift(); _i2 < _length; _i2++) {
	            data.push(randFunc(min, max));
	          }
	        }

	        return data;
	      }

	      return randFunctions;
	    }(distribution);
	  }

	  // Each distribution is a function that takes no argument and when called returns
	  // a number between 0 and 1.
	  var distributions = {

	    uniform: function uniform() {
	      return rng;
	    },

	    // Implementation of normal distribution using Box-Muller transform
	    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	    // We take : mean = 0.5, standard deviation = 1/6
	    // so that 99.7% values are in [0, 1].
	    normal: function normal() {
	      return function () {
	        var u1 = void 0;
	        var u2 = void 0;
	        var picked = -1;
	        // We reject values outside of the interval [0, 1]
	        // TODO: check if it is ok to do that?
	        while (picked < 0 || picked > 1) {
	          u1 = rng();
	          u2 = rng();
	          picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
	        }
	        return picked;
	      };
	    }
	  };

	  distribution.toTex = undefined; // use default template

	  return distribution;
	}

	var name$35 = 'distribution';
	var factory_1$3i = factory$3i;

	var distribution = {
		name: name$35,
		factory: factory_1$3i
	};

	function factory$3j(type, config, load, typed) {
	  var distribution$$1 = load(distribution);

	  /**
	   * Random pick one or more values from a one dimensional array.
	   * Array elements are picked using a random function with uniform or weighted distribution.
	   *
	   * Syntax:
	   *
	   *     math.pickRandom(array)
	   *     math.pickRandom(array, number)
	   *     math.pickRandom(array, weights)
	   *     math.pickRandom(array, number, weights)
	   *     math.pickRandom(array, weights, number)
	   *
	   * Examples:
	   *
	   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
	   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
	   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
	   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
	   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
	   *
	   * See also:
	   *
	   *     random, randomInt
	   *
	   * @param {Array} array     A one dimensional array
	   * @param {Int} number      An int or float
	   * @param {Array} weights   An array of ints or floats
	   * @return {number | Array} Returns a single random value from array when number is 1 or undefined.
	   *                          Returns an array with the configured number of elements when number is > 1.
	   */
	  // TODO: rework pickRandom to a typed-function
	  var pickRandom = distribution$$1('uniform').pickRandom;

	  pickRandom.toTex = undefined; // use default template

	  return pickRandom;
	}

	var name$36 = 'pickRandom';
	var factory_1$3j = factory$3j;

	var pickRandom = {
		name: name$36,
		factory: factory_1$3j
	};

	function factory$3k(type, config, load, typed) {
	  var distribution$$1 = load(distribution);

	  /**
	   * Return a random number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.random()                // generate a random number between 0 and 1
	   *     math.random(max)             // generate a random number between 0 and max
	   *     math.random(min, max)        // generate a random number between min and max
	   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
	   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
	   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
	   *
	   * Examples:
	   *
	   *     math.random()       // returns a random number between 0 and 1
	   *     math.random(100)    // returns a random number between 0 and 100
	   *     math.random(30, 40) // returns a random number between 30 and 40
	   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
	   *
	   * See also:
	   *
	   *     randomInt, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random number
	   */
	  // TODO: rework random to a typed-function
	  var random = distribution$$1('uniform').random;

	  random.toTex = undefined; // use default template

	  return random;
	}

	var name$37 = 'random';
	var factory_1$3k = factory$3k;

	var random = {
		name: name$37,
		factory: factory_1$3k
	};

	function factory$3l(type, config, load, typed) {
	  var distribution$$1 = load(distribution);

	  /**
	   * Return a random integer number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.randomInt(max)             // generate a random integer between 0 and max
	   *     math.randomInt(min, max)        // generate a random integer between min and max
	   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
	   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
	   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
	   *
	   * Examples:
	   *
	   *     math.randomInt(100)    // returns a random integer between 0 and 100
	   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
	   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
	   *
	   * See also:
	   *
	   *     random, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random integer value
	   */
	  // TODO: rework randomInt to a typed-function
	  var randomInt = distribution$$1('uniform').randomInt;

	  randomInt.toTex = undefined; // use default template

	  return randomInt;
	}

	var name$38 = 'randomInt';
	var factory_1$3l = factory$3l;

	var randomInt = {
		name: name$38,
		factory: factory_1$3l
	};

	var probability = [
	// require('./distribution'), // TODO: rethink math.distribution
	combinations, factorial, gamma, kldivergence, multinomial, permutations, pickRandom, random, randomInt];

	function factory$3m(type, config, load, typed) {
	  var matrix$$1 = load(matrix);
	  var _typeof = load(_typeof$4);

	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Compare two strings lexically. Comparison is case sensitive.
	   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.compareText(x, y)
	   *
	   * Examples:
	   *
	   *    math.compareText('B', 'A')     // returns 1
	   *    math.compareText('2', '10')    // returns 1
	   *    math.compare('2', '10')        // returns -1
	   *    math.compareNatural('2', '10') // returns -1
	   *
	   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, equalText, compare, compareNatural
	   *
	   * @param  {string | Array | DenseMatrix} x First string to compare
	   * @param  {string | Array | DenseMatrix} y Second string to compare
	   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
	   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
	   */
	  var compareText = typed('compareText', {

	    'any, any': _compareText,

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, _compareText);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return compareText(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return compareText(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return compareText(x, matrix$$1(y));
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, _compareText, false);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, _compareText, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, _compareText, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, _compareText, true).valueOf();
	    }
	  });

	  /**
	   * Compare two strings
	   * @param {string} x
	   * @param {string} y
	   * @returns {number}
	   * @private
	   */
	  function _compareText(x, y) {
	    // we don't want to convert numbers to string, only accept string input
	    if (!type.isString(x)) {
	      throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + _typeof(x) + ', index: 0)');
	    }
	    if (!type.isString(y)) {
	      throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + _typeof(y) + ', index: 1)');
	    }

	    return x === y ? 0 : x > y ? 1 : -1;
	  }

	  compareText.toTex = undefined; // use default template

	  return compareText;
	}

	var name$39 = 'compareText';
	var factory_1$3m = factory$3m;

	var compareText = {
		name: name$39,
		factory: factory_1$3m
	};

	function factory$3n(type, config, load, typed) {
	  var equal$$1 = load(equal);

	  /**
	   * Test element wise whether two matrices are equal.
	   * The function accepts both matrices and scalar values.
	   *
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.deepEqual(x, y)
	   *
	   * Examples:
	   *
	   *    math.deepEqual(2, 4)   // returns false
	   *
	   *    a = [2, 5, 1]
	   *    b = [2, 7, 1]
	   *
	   *    math.deepEqual(a, b)   // returns false
	   *    math.equal(a, b)       // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    equal, unequal
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns true when the input matrices have the same size and each of their elements is equal.
	   */
	  var deepEqual = typed('deepEqual', {
	    'any, any': function anyAny(x, y) {
	      return _deepEqual(x.valueOf(), y.valueOf());
	    }
	  });

	  deepEqual.toTex = undefined; // use default template

	  return deepEqual;

	  /**
	   * Test whether two arrays have the same size and all elements are equal
	   * @param {Array | *} x
	   * @param {Array | *} y
	   * @return {boolean} Returns true if both arrays are deep equal
	   */
	  function _deepEqual(x, y) {
	    if (Array.isArray(x)) {
	      if (Array.isArray(y)) {
	        var len = x.length;
	        if (len !== y.length) {
	          return false;
	        }

	        for (var i = 0; i < len; i++) {
	          if (!_deepEqual(x[i], y[i])) {
	            return false;
	          }
	        }

	        return true;
	      } else {
	        return false;
	      }
	    } else {
	      if (Array.isArray(y)) {
	        return false;
	      } else {
	        return equal$$1(x, y);
	      }
	    }
	  }
	}

	var name$3a = 'deepEqual';
	var factory_1$3n = factory$3n;

	var deepEqual$1 = {
		name: name$3a,
		factory: factory_1$3n
	};

	function factory$3o(type, config, load, typed) {
	  var compareText$$1 = load(compareText);
	  var isZero$$1 = load(isZero);

	  /**
	   * Check equality of two strings. Comparison is case sensitive.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.equalText(x, y)
	   *
	   * Examples:
	   *
	   *    math.equalText('Hello', 'Hello')     // returns true
	   *    math.equalText('a', 'A')             // returns false
	   *    math.equal('2e3', '2000')            // returns true
	   *    math.equalText('2e3', '2000')        // returns false
	   *
	   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    equal, compareText, compare, compareNatural
	   *
	   * @param  {string | Array | DenseMatrix} x First string to compare
	   * @param  {string | Array | DenseMatrix} y Second string to compare
	   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
	   */
	  var equalText = typed('equalText', {

	    'any, any': function anyAny(x, y) {
	      return isZero$$1(compareText$$1(x, y));
	    }

	  });

	  equalText.toTex = undefined; // use default template

	  return equalText;
	}

	var name$3b = 'equalText';
	var factory_1$3o = factory$3o;

	var equalText = {
		name: name$3b,
		factory: factory_1$3o
	};

	var nearlyEqual$7 = number.nearlyEqual;


	function factory$3p(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm03$$1 = load(algorithm03);
	  var algorithm07$$1 = load(algorithm07);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  var latex$$1 = latex;

	  /**
	   * Test whether value x is smaller or equal to y.
	   *
	   * The function returns true when x is smaller than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.smallerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(1 + 2, 3)        // returns false
	   *    math.smallerEq(1 + 2, 3)      // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smallerEq = typed('smallerEq', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x <= y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x <= y || nearlyEqual$7(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lte(y) || nearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) !== 1;
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return smallerEq(x.value, y.value);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$$1(x, y, smallerEq);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$$1(y, x, smallerEq, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, smallerEq, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, smallerEq);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return smallerEq(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return smallerEq(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return smallerEq(x, matrix$$1(y));
	    },

	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$$1(x, y, smallerEq, false);
	    },

	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$$1(x, y, smallerEq, false);
	    },

	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$$1(y, x, smallerEq, true);
	    },

	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$$1(y, x, smallerEq, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, smallerEq, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, smallerEq, true).valueOf();
	    }
	  });

	  smallerEq.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['smallerEq'] + '${args[1]}\\right)'
	  };

	  return smallerEq;
	}

	var name$3c = 'smallerEq';
	var factory_1$3p = factory$3p;

	var smallerEq = {
		name: name$3c,
		factory: factory_1$3p
	};

	var relational = [compare, compareNatural, compareText, deepEqual$1, equal, equalText, larger, largerEq, smaller, smallerEq, unequal];

	var flatten$2 = array.flatten;

	function factory$3q(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var DenseMatrix$$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Create the cartesian product of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setCartesian(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference, setPowerset
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The cartesian product of two (multi)sets
	   */
	  var setCartesian = typed('setCartesian', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      var result = [];

	      if (subset$$1(size(a1), new MatrixIndex$$1(0)) !== 0 && subset$$1(size(a2), new MatrixIndex$$1(0)) !== 0) {
	        // if any of them is empty, return empty
	        var b1 = flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$$1);
	        var b2 = flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$$1);
	        result = [];
	        for (var i = 0; i < b1.length; i++) {
	          for (var j = 0; j < b2.length; j++) {
	            result.push([b1[i], b2[j]]);
	          }
	        }
	      }
	      // return an array, if both inputs were arrays
	      if (Array.isArray(a1) && Array.isArray(a2)) {
	        return result;
	      }
	      // return a matrix otherwise
	      return new DenseMatrix$$1(result);
	    }
	  });

	  return setCartesian;
	}

	var name$3d = 'setCartesian';
	var factory_1$3q = factory$3q;

	var setCartesian = {
		name: name$3d,
		factory: factory_1$3q
	};

	var flatten$3 = array.flatten;
	var identify = array.identify;
	var generalize = array.generalize;

	function factory$3r(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var DenseMatrix$$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setDifference(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
	   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setSymDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The difference of two (multi)sets
	   */
	  var setDifference = typed('setDifference', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      var result = void 0;
	      if (subset$$1(size(a1), new MatrixIndex$$1(0)) === 0) {
	        // empty-anything=empty
	        result = [];
	      } else if (subset$$1(size(a2), new MatrixIndex$$1(0)) === 0) {
	        // anything-empty=anything
	        return flatten$3(a1.toArray());
	      } else {
	        var b1 = identify(flatten$3(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$$1));
	        var b2 = identify(flatten$3(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$$1));
	        result = [];
	        var inb2 = void 0;
	        for (var i = 0; i < b1.length; i++) {
	          inb2 = false;
	          for (var j = 0; j < b2.length; j++) {
	            if (compareNatural$$1(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
	              // the identifier is always a decimal int
	              inb2 = true;
	              break;
	            }
	          }
	          if (!inb2) {
	            result.push(b1[i]);
	          }
	        }
	      }
	      // return an array, if both inputs were arrays
	      if (Array.isArray(a1) && Array.isArray(a2)) {
	        return generalize(result);
	      }
	      // return a matrix otherwise
	      return new DenseMatrix$$1(generalize(result));
	    }
	  });

	  return setDifference;
	}

	var name$3e = 'setDifference';
	var factory_1$3r = factory$3r;

	var setDifference = {
		name: name$3e,
		factory: factory_1$3r
	};

	var flatten$4 = array.flatten;

	function factory$3s(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var DenseMatrix$$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Collect the distinct elements of a multiset.
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setDistinct(set)
	   *
	   * Examples:
	   *
	   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
	   *
	   * See also:
	   *
	   *    setMultiplicity
	   *
	   * @param {Array | Matrix}    a  A multiset
	   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
	   */
	  var setDistinct = typed('setDistinct', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      var result = void 0;
	      if (subset$$1(size(a), new MatrixIndex$$1(0)) === 0) {
	        // if empty, return empty
	        result = [];
	      } else {
	        var b = flatten$4(Array.isArray(a) ? a : a.toArray()).sort(compareNatural$$1);
	        result = [];
	        result.push(b[0]);
	        for (var i = 1; i < b.length; i++) {
	          if (compareNatural$$1(b[i], b[i - 1]) !== 0) {
	            result.push(b[i]);
	          }
	        }
	      }
	      // return an array, if the input was an array
	      if (Array.isArray(a)) {
	        return result;
	      }
	      // return a matrix otherwise
	      return new DenseMatrix$$1(result);
	    }
	  });

	  return setDistinct;
	}

	var name$3f = 'setDistinct';
	var factory_1$3s = factory$3s;

	var setDistinct = {
		name: name$3f,
		factory: factory_1$3s
	};

	var flatten$5 = array.flatten;
	var identify$1 = array.identify;
	var generalize$1 = array.generalize;

	function factory$3t(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var DenseMatrix$$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Create the intersection of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setIntersect(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
	   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
	   *
	   * See also:
	   *
	   *    setUnion, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The intersection of two (multi)sets
	   */
	  var setIntersect = typed('setIntersect', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      var result = void 0;
	      if (subset$$1(size(a1), new MatrixIndex$$1(0)) === 0 || subset$$1(size(a2), new MatrixIndex$$1(0)) === 0) {
	        // of any of them is empty, return empty
	        result = [];
	      } else {
	        var b1 = identify$1(flatten$5(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$$1));
	        var b2 = identify$1(flatten$5(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$$1));
	        result = [];
	        for (var i = 0; i < b1.length; i++) {
	          for (var j = 0; j < b2.length; j++) {
	            if (compareNatural$$1(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
	              // the identifier is always a decimal int
	              result.push(b1[i]);
	              break;
	            }
	          }
	        }
	      }
	      // return an array, if both inputs were arrays
	      if (Array.isArray(a1) && Array.isArray(a2)) {
	        return generalize$1(result);
	      }
	      // return a matrix otherwise
	      return new DenseMatrix$$1(generalize$1(result));
	    }
	  });

	  return setIntersect;
	}

	var name$3g = 'setIntersect';
	var factory_1$3t = factory$3t;

	var setIntersect = {
		name: name$3g,
		factory: factory_1$3t
	};

	var flatten$6 = array.flatten;
	var identify$2 = array.identify;

	function factory$3u(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setIsSubset(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
	   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {boolean}            true | false
	   */
	  var setIsSubset = typed('setIsSubset', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      if (subset$$1(size(a1), new MatrixIndex$$1(0)) === 0) {
	        // empty is a subset of anything
	        return true;
	      } else if (subset$$1(size(a2), new MatrixIndex$$1(0)) === 0) {
	        // anything is not a subset of empty
	        return false;
	      }
	      var b1 = identify$2(flatten$6(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$$1));
	      var b2 = identify$2(flatten$6(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$$1));
	      var inb2 = void 0;
	      for (var i = 0; i < b1.length; i++) {
	        inb2 = false;
	        for (var j = 0; j < b2.length; j++) {
	          if (compareNatural$$1(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
	            // the identifier is always a decimal int
	            inb2 = true;
	            break;
	          }
	        }
	        if (inb2 === false) {
	          return false;
	        }
	      }
	      return true;
	    }
	  });

	  return setIsSubset;
	}

	var name$3h = 'setIsSubset';
	var factory_1$3u = factory$3u;

	var setIsSubset = {
		name: name$3h,
		factory: factory_1$3u
	};

	var flatten$7 = array.flatten;

	function factory$3v(type, config, load, typed) {
	  var compareNatural$$1 = load(compareNatural);
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var size = load(size$3);
	  var subset$$1 = load(subset);

	  /**
	   * Count the multiplicity of an element in a multiset.
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setMultiplicity(element, set)
	   *
	   * Examples:
	   *
	   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
	   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
	   *
	   * See also:
	   *
	   *    setDistinct, setSize
	   *
	   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
	   * @param {Array | Matrix}     a  A multiset
	   * @return {number}            The number of how many times the multiset contains the element
	   */
	  var setMultiplicity = typed('setMultiplicity', {
	    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
	      if (subset$$1(size(a), new MatrixIndex$$1(0)) === 0) {
	        // if empty, return 0
	        return 0;
	      }
	      var b = flatten$7(Array.isArray(a) ? a : a.toArray());
	      var count = 0;
	      for (var i = 0; i < b.length; i++) {
	        if (compareNatural$$1(b[i], e) === 0) {
	          count++;
	        }
	      }
	      return count;
	    }
	  });

	  return setMultiplicity;
	}

	var name$3i = 'setMultiplicity';
	var factory_1$3v = factory$3v;

	var setMultiplicity = {
		name: name$3i,
		factory: factory_1$3v
	};

	var flatten$8 = array.flatten;

	function factory$3w(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setPowerset(set)
	   *
	   * Examples:
	   *
	   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
	   *
	   * See also:
	   *
	   *    setCartesian
	   *
	   * @param {Array | Matrix}    a  A (multi)set
	   * @return {Array}    The powerset of the (multi)set
	   */
	  var setPowerset = typed('setPowerset', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      if (subset$$1(size(a), new MatrixIndex$$1(0)) === 0) {
	        // if empty, return empty
	        return [];
	      }
	      var b = flatten$8(Array.isArray(a) ? a : a.toArray()).sort(compareNatural$$1);
	      var result = [];
	      var number = 0;
	      while (number.toString(2).length <= b.length) {
	        result.push(_subset(b, number.toString(2).split('').reverse()));
	        number++;
	      }
	      // can not return a matrix, because of the different size of the subarrays
	      return _sort(result);
	    }
	  });

	  return setPowerset;

	  // create subset
	  function _subset(array$$1, bitarray) {
	    var result = [];
	    for (var i = 0; i < bitarray.length; i++) {
	      if (bitarray[i] === '1') {
	        result.push(array$$1[i]);
	      }
	    }
	    return result;
	  }

	  // sort subsests by length
	  function _sort(array$$1) {
	    var temp = [];
	    for (var i = array$$1.length - 1; i > 0; i--) {
	      for (var j = 0; j < i; j++) {
	        if (array$$1[j].length > array$$1[j + 1].length) {
	          temp = array$$1[j];
	          array$$1[j] = array$$1[j + 1];
	          array$$1[j + 1] = temp;
	        }
	      }
	    }
	    return array$$1;
	  }
	}

	var name$3j = 'setPowerset';
	var factory_1$3w = factory$3w;

	var setPowerset = {
		name: name$3j,
		factory: factory_1$3w
	};

	var flatten$9 = array.flatten;

	function factory$3x(type, config, load, typed) {
	  var compareNatural$$1 = load(compareNatural);

	  /**
	   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setSize(set)
	   *    math.setSize(set, unique)
	   *
	   * Examples:
	   *
	   *    math.setSize([1, 2, 2, 4])          // returns 4
	   *    math.setSize([1, 2, 2, 4], true)    // returns 3
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a  A multiset
	   * @return {number}            The number of elements of the (multi)set
	   */
	  var setSize = typed('setSize', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      return Array.isArray(a) ? flatten$9(a).length : flatten$9(a.toArray()).length;
	    },
	    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
	      if (unique === false || a.length === 0) {
	        return Array.isArray(a) ? flatten$9(a).length : flatten$9(a.toArray()).length;
	      } else {
	        var b = flatten$9(Array.isArray(a) ? a : a.toArray()).sort(compareNatural$$1);
	        var count = 1;
	        for (var i = 1; i < b.length; i++) {
	          if (compareNatural$$1(b[i], b[i - 1]) !== 0) {
	            count++;
	          }
	        }
	        return count;
	      }
	    }
	  });

	  return setSize;
	}

	var name$3k = 'setSize';
	var factory_1$3x = factory$3x;

	var setSize = {
		name: name$3k,
		factory: factory_1$3x
	};

	var flatten$a = array.flatten;

	function factory$3y(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var concat$$1 = load(concat);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var setDifference$$1 = load(setDifference);

	  /**
	   * Create the symmetric difference of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setSymDifference(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
	   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
	   */
	  var setSymDifference = typed('setSymDifference', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      if (subset$$1(size(a1), new MatrixIndex$$1(0)) === 0) {
	        // if any of them is empty, return the other one
	        return flatten$a(a2);
	      } else if (subset$$1(size(a2), new MatrixIndex$$1(0)) === 0) {
	        return flatten$a(a1);
	      }
	      var b1 = flatten$a(a1);
	      var b2 = flatten$a(a2);
	      return concat$$1(setDifference$$1(b1, b2), setDifference$$1(b2, b1));
	    }
	  });

	  return setSymDifference;
	}

	var name$3l = 'setSymDifference';
	var factory_1$3y = factory$3y;

	var setSymDifference = {
		name: name$3l,
		factory: factory_1$3y
	};

	var flatten$b = array.flatten;

	function factory$3z(type, config, load, typed) {
	  var MatrixIndex$$1 = load(MatrixIndex);
	  var concat$$1 = load(concat);
	  var size = load(size$3);
	  var subset$$1 = load(subset);
	  var setIntersect$$1 = load(setIntersect);
	  var setSymDifference$$1 = load(setSymDifference);

	  /**
	   * Create the union of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setUnion(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
	   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *    setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The union of two (multi)sets
	   */
	  var setUnion = typed('setUnion', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      if (subset$$1(size(a1), new MatrixIndex$$1(0)) === 0) {
	        // if any of them is empty, return the other one
	        return flatten$b(a2);
	      } else if (subset$$1(size(a2), new MatrixIndex$$1(0)) === 0) {
	        return flatten$b(a1);
	      }
	      var b1 = flatten$b(a1);
	      var b2 = flatten$b(a2);
	      return concat$$1(setSymDifference$$1(b1, b2), setIntersect$$1(b1, b2));
	    }
	  });

	  return setUnion;
	}

	var name$3m = 'setUnion';
	var factory_1$3z = factory$3z;

	var setUnion = {
		name: name$3m,
		factory: factory_1$3z
	};

	var set = [setCartesian, setDifference, setDistinct, setIntersect, setIsSubset, setMultiplicity, setPowerset, setSize, setSymDifference, setUnion];

	var sign$1 = number.sign;

	function factory$3A(type, config, load, typed) {
	  /**
	   * Compute the erf function of a value using a rational Chebyshev
	   * approximations for different intervals of x.
	   *
	   * This is a translation of W. J. Cody's Fortran implementation from 1987
	   * ( http://www.netlib.org/specfun/erf ). See the AMS publication
	   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
	   * for an explanation of this process.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.erf(x)
	   *
	   * Examples:
	   *
	   *    math.erf(0.2)    // returns 0.22270258921047847
	   *    math.erf(-0.5)   // returns -0.5204998778130465
	   *    math.erf(4)      // returns 0.9999999845827421
	   *
	   * @param {number | Array | Matrix} x   A real number
	   * @return {number | Array | Matrix}    The erf of `x`
	   */
	  var erf = typed('erf', {
	    'number': function number$$1(x) {
	      var y = Math.abs(x);

	      if (y >= MAX_NUM) {
	        return sign$1(x);
	      }
	      if (y <= THRESH) {
	        return sign$1(x) * erf1(y);
	      }
	      if (y <= 4.0) {
	        return sign$1(x) * (1 - erfc2(y));
	      }
	      return sign$1(x) * (1 - erfc3(y));
	    },

	    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.
	    //  Perhaps it would be best to set the precision of the number to that which
	    //  is guaranteed by erf()
	    'BigNumber': function BigNumber(n) {
	      return new type.BigNumber(erf(n.toNumber()));
	    },

	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, erf);
	    }

	    // TODO: For complex numbers, use the approximation for the Faddeeva function
	    //  from "More Efficient Computation of the Complex Error Function" (AMS)

	  });

	  /**
	   * Approximates the error function erf() for x <= 0.46875 using this function:
	   *               n
	   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
	   *              j=0
	   */
	  function erf1(y) {
	    var ysq = y * y;
	    var xnum = P[0][4] * ysq;
	    var xden = ysq;
	    var i = void 0;

	    for (i = 0; i < 3; i += 1) {
	      xnum = (xnum + P[0][i]) * ysq;
	      xden = (xden + Q[0][i]) * ysq;
	    }
	    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
	  }

	  /**
	   * Approximates the complement of the error function erfc() for
	   * 0.46875 <= x <= 4.0 using this function:
	   *                       n
	   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
	   *                      j=0
	   */
	  function erfc2(y) {
	    var xnum = P[1][8] * y;
	    var xden = y;
	    var i = void 0;

	    for (i = 0; i < 7; i += 1) {
	      xnum = (xnum + P[1][i]) * y;
	      xden = (xden + Q[1][i]) * y;
	    }
	    var result = (xnum + P[1][7]) / (xden + Q[1][7]);
	    var ysq = parseInt(y * 16) / 16;
	    var del = (y - ysq) * (y + ysq);
	    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
	  }

	  /**
	   * Approximates the complement of the error function erfc() for x > 4.0 using
	   * this function:
	   *
	   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
	   *               n
	   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
	   *              j=0
	   */
	  function erfc3(y) {
	    var ysq = 1 / (y * y);
	    var xnum = P[2][5] * ysq;
	    var xden = ysq;
	    var i = void 0;

	    for (i = 0; i < 4; i += 1) {
	      xnum = (xnum + P[2][i]) * ysq;
	      xden = (xden + Q[2][i]) * ysq;
	    }
	    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
	    result = (SQRPI - result) / y;
	    ysq = parseInt(y * 16) / 16;
	    var del = (y - ysq) * (y + ysq);
	    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
	  }

	  erf.toTex = { 1: 'erf\\left(${args[0]}\\right)' };

	  return erf;
	}

	/**
	 * Upper bound for the first approximation interval, 0 <= x <= THRESH
	 * @constant
	 */
	var THRESH = 0.46875;

	/**
	 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
	 * @constant
	 */
	var SQRPI = 5.6418958354775628695e-1;

	/**
	 * Coefficients for each term of the numerator sum (p_j) for each approximation
	 * interval (see W. J. Cody's paper for more details)
	 * @constant
	 */
	var P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];

	/**
	 * Coefficients for each term of the denominator sum (q_j) for each approximation
	 * interval (see W. J. Cody's paper for more details)
	 * @constant
	 */
	var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];

	/**
	 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
	 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
	 * return 1
	 */
	var MAX_NUM = Math.pow(2, 53);

	var name$3n = 'erf';
	var factory_1$3A = factory$3A;

	var erf = {
		name: name$3n,
		factory: factory_1$3A
	};

	var special = [erf];

	var flatten$c = array.flatten;


	function factory$3B(type, config, load, typed) {
	  var add = load(addScalar);
	  var divide = load(divideScalar);
	  var compare$$1 = load(compare);
	  var partitionSelect$$1 = load(partitionSelect);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the median of a matrix or a list with values. The values are
	   * sorted and the middle value is returned. In case of an even number of
	   * values, the average of the two middle values is returned.
	   * Supported types of values are: Number, BigNumber, Unit
	   *
	   * In case of a (multi dimensional) array or matrix, the median of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.median(a, b, c, ...)
	   *     math.median(A)
	   *
	   * Examples:
	   *
	   *     math.median(5, 2, 7)        // returns 5
	   *     math.median([3, -1, 5, 7])  // returns 4
	   *
	   * See also:
	   *
	   *     mean, min, max, sum, prod, std, var, quantileSeq
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The median
	   */
	  var median = typed('median', {
	    // median([a, b, c, d, ...])
	    'Array | Matrix': _median,

	    // median([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array$$1, dim) {
	      // TODO: implement median(A, dim)
	      throw new Error('median(A, dim) is not yet supported');
	      // return reduce(arguments[0], arguments[1], ...)
	    },

	    // median(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function median');
	      }

	      return _median(args);
	    }
	  });

	  /**
	   * Recursively calculate the median of an n-dimensional array
	   * @param {Array} array
	   * @return {Number} median
	   * @private
	   */
	  function _median(array$$1) {
	    try {
	      array$$1 = flatten$c(array$$1.valueOf());

	      var num = array$$1.length;
	      if (num === 0) {
	        throw new Error('Cannot calculate median of an empty array');
	      }

	      if (num % 2 === 0) {
	        // even: return the average of the two middle values
	        var mid = num / 2 - 1;
	        var right = partitionSelect$$1(array$$1, mid + 1);

	        // array now partitioned at mid + 1, take max of left part
	        var left = array$$1[mid];
	        for (var i = 0; i < mid; ++i) {
	          if (compare$$1(array$$1[i], left) > 0) {
	            left = array$$1[i];
	          }
	        }

	        return middle2(left, right);
	      } else {
	        // odd: return the middle value
	        var m = partitionSelect$$1(array$$1, (num - 1) / 2);

	        return middle(m);
	      }
	    } catch (err) {
	      throw improveErrorMessage$$1(err, 'median');
	    }
	  }

	  // helper function to type check the middle value of the array
	  var middle = typed({
	    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
	      return value;
	    }
	  });

	  // helper function to type check the two middle value of the array
	  var middle2 = typed({
	    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
	      return divide(add(left, right), 2);
	    }
	  });

	  median.toTex = undefined; // use default template

	  return median;
	}

	var name$3o = 'median';
	var factory_1$3B = factory$3B;

	var median = {
		name: name$3o,
		factory: factory_1$3B
	};

	var flatten$d = array.flatten;

	function factory$3C(type, config, load, typed) {
	  var abs$$1 = load(abs);
	  var map = load(map$5);
	  var median$$1 = load(median);
	  var subtract$$1 = load(subtract);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the median absolute deviation of a matrix or a list with values.
	   * The median absolute deviation is defined as the median of the absolute
	   * deviations from the median.
	   *
	   * Syntax:
	   *
	   *     math.mad(a, b, c, ...)
	   *     math.mad(A)
	   *
	   * Examples:
	   *
	   *     math.mad(10, 20, 30)             // returns 10
	   *     math.mad([1, 2, 3])              // returns 1
	   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
	   *
	   * See also:
	   *
	   *     median, mean, std, abs
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or multiple scalar values.
	   * @return {*} The median absolute deviation.
	   */
	  var mad = typed('mad', {
	    // mad([a, b, c, d, ...])
	    'Array | Matrix': _mad,

	    // mad(a, b, c, d, ...)
	    '...': function _(args) {
	      return _mad(args);
	    }
	  });

	  mad.toTex = undefined; // use default template

	  return mad;

	  function _mad(array$$1) {
	    array$$1 = flatten$d(array$$1.valueOf());

	    if (array$$1.length === 0) {
	      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
	    }

	    try {
	      var med = median$$1(array$$1);
	      return median$$1(map(array$$1, function (value) {
	        return abs$$1(subtract$$1(value, med));
	      }));
	    } catch (err) {
	      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
	        throw new TypeError(err.message.replace('median', 'mad'));
	      } else {
	        throw improveErrorMessage$$1(err, 'mad');
	      }
	    }
	  }
	}

	var name$3p = 'mad';
	var factory_1$3C = factory$3C;

	var mad = {
		name: name$3p,
		factory: factory_1$3C
	};

	var size$5 = array.size;




	function factory$3D(type, config, load, typed) {
	  var add$$1 = load(add);
	  var divide$$1 = load(divide);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the mean value of matrix or a list with values.
	   * In case of a multi dimensional array, the mean of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.mean(a, b, c, ...)
	   *     math.mean(A)
	   *     math.mean(A, dim)
	   *
	   * Examples:
	   *
	   *     math.mean(2, 1, 4, 3)                     // returns 2.5
	   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
	   *
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
	   *
	   * See also:
	   *
	   *     median, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The mean of all values
	   */
	  var mean = typed('mean', {
	    // mean([a, b, c, d, ...])
	    'Array | Matrix': _mean,

	    // mean([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': _nmeanDim,

	    // mean(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function mean');
	      }

	      return _mean(args);
	    }
	  });

	  mean.toTex = undefined; // use default template

	  return mean;

	  /**
	   * Calculate the mean value in an n-dimensional array, returning a
	   * n-1 dimensional array
	   * @param {Array} array
	   * @param {number} dim
	   * @return {number} mean
	   * @private
	   */
	  function _nmeanDim(array$$1, dim) {
	    try {
	      var sum = reduce(array$$1, dim, add$$1);
	      var s = Array.isArray(array$$1) ? size$5(array$$1) : array$$1.size();
	      return divide$$1(sum, s[dim]);
	    } catch (err) {
	      throw improveErrorMessage$$1(err, 'mean');
	    }
	  }

	  /**
	   * Recursively calculate the mean value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} mean
	   * @private
	   */
	  function _mean(array$$1) {
	    var sum = 0;
	    var num = 0;

	    deepForEach(array$$1, function (value) {
	      try {
	        sum = add$$1(sum, value);
	        num++;
	      } catch (err) {
	        throw improveErrorMessage$$1(err, 'mean', value);
	      }
	    });

	    if (num === 0) {
	      throw new Error('Cannot calculate mean of an empty array');
	    }

	    return divide$$1(sum, num);
	  }
	}

	var name$3q = 'mean';
	var factory_1$3D = factory$3D;

	var mean = {
		name: name$3q,
		factory: factory_1$3D
	};

	function factory$3E(type, config, load, typed) {
	  var smaller$$1 = load(smaller);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the maximum value of a matrix or a  list of values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.min(a, b, c, ...)
	   *     math.min(A)
	   *     math.min(A, dim)
	   *
	   * Examples:
	   *
	   *     math.min(2, 1, 4, 3)                  // returns 1
	   *     math.min([2, 1, 4, 3])                // returns 1
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
	   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, max, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The minimum value
	   */
	  var min = typed('min', {
	    // min([a, b, c, d, ...])
	    'Array | Matrix': _min,

	    // min([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      return reduce(array, dim.valueOf(), _smallest);
	    },

	    // min(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function min');
	      }

	      return _min(args);
	    }
	  });

	  min.toTex = '\\min\\left(${args}\\right)';

	  return min;

	  /**
	   * Return the smallest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is smallest, or y when y is smallest
	   * @private
	   */
	  function _smallest(x, y) {
	    try {
	      return smaller$$1(x, y) ? x : y;
	    } catch (err) {
	      throw improveErrorMessage$$1(err, 'min', y);
	    }
	  }

	  /**
	   * Recursively calculate the minimum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} min
	   * @private
	   */
	  function _min(array) {
	    var min = void 0;

	    deepForEach(array, function (value) {
	      try {
	        if (min === undefined || smaller$$1(value, min)) {
	          min = value;
	        }
	      } catch (err) {
	        throw improveErrorMessage$$1(err, 'min', value);
	      }
	    });

	    if (min === undefined) {
	      throw new Error('Cannot calculate min of an empty array');
	    }

	    return min;
	  }
	}

	var name$3r = 'min';
	var factory_1$3E = factory$3E;

	var min = {
		name: name$3r,
		factory: factory_1$3E
	};

	var flatten$e = array.flatten;

	function factory$3F(type, config, load, typed) {
	  /**
	  * Computes the mode of a set of numbers or a list with values(numbers or characters).
	  * If there are more than one modes, it returns a list of those values.
	  *
	  * Syntax:
	  *
	  *     math.mode(a, b, c, ...)
	  *     math.mode(A)
	  *
	  * Examples:
	  *
	  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
	  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
	  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
	  *     math.mode('a','a','b','c')                           // returns ["a"]
	  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
	  *
	  * See also:
	  *
	  *     median,
	  *     mean
	  *
	  * @param {... *} args  A single matrix
	  * @return {*} The mode of all values
	  */

	  var mode = typed('mode', {
	    'Array | Matrix': _mode,

	    '...': function _(args) {
	      return _mode(args);
	    }
	  });

	  return mode;

	  /**
	   * Calculates the mode in an 1-dimensional array
	   * @param {Array} values
	   * @return {number} mode
	   * @private
	   */
	  function _mode(values) {
	    values = flatten$e(values.valueOf());
	    var num = values.length;
	    if (num === 0) {
	      throw new Error('Cannot calculate mode of an empty array');
	    }

	    var count = {};
	    var mode = [];
	    var max = 0;
	    for (var i in values) {
	      if (!(values[i] in count)) {
	        count[values[i]] = 0;
	      }
	      count[values[i]]++;
	      if (count[values[i]] === max) {
	        mode.push(values[i]);
	      } else if (count[values[i]] > max) {
	        max = count[values[i]];
	        mode = [values[i]];
	      }
	    }
	    return mode;
	  }
	}

	var name$3s = 'mode';
	var factory_1$3F = factory$3F;

	var mode = {
		name: name$3s,
		factory: factory_1$3F
	};

	function factory$3G(type, config, load, typed) {
	  var multiply = load(multiplyScalar);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the product of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.prod(a, b, c, ...)
	   *     math.prod(A)
	   *
	   * Examples:
	   *
	   *     math.multiply(2, 3)           // returns 6
	   *     math.prod(2, 3)               // returns 6
	   *     math.prod(2, 3, 4)            // returns 24
	   *     math.prod([2, 3, 4])          // returns 24
	   *     math.prod([[2, 5], [4, 3]])   // returns 120
	   *
	   * See also:
	   *
	   *    mean, median, min, max, sum, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The product of all values
	   */
	  var prod = typed('prod', {
	    // prod([a, b, c, d, ...])
	    'Array | Matrix': _prod,

	    // prod([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      // TODO: implement prod(A, dim)
	      throw new Error('prod(A, dim) is not yet supported');
	      // return reduce(arguments[0], arguments[1], math.prod)
	    },

	    // prod(a, b, c, d, ...)
	    '...': function _(args) {
	      return _prod(args);
	    }
	  });

	  prod.toTex = undefined; // use default template

	  return prod;

	  /**
	   * Recursively calculate the product of an n-dimensional array
	   * @param {Array} array
	   * @return {number} prod
	   * @private
	   */
	  function _prod(array) {
	    var prod = void 0;

	    deepForEach(array, function (value) {
	      try {
	        prod = prod === undefined ? value : multiply(prod, value);
	      } catch (err) {
	        throw improveErrorMessage$$1(err, 'prod', value);
	      }
	    });

	    if (prod === undefined) {
	      throw new Error('Cannot calculate prod of an empty array');
	    }

	    return prod;
	  }
	}

	var name$3t = 'prod';
	var factory_1$3G = factory$3G;

	var prod = {
		name: name$3t,
		factory: factory_1$3G
	};

	var isInteger$q = number.isInteger;
	var isNumber$4 = number.isNumber;
	var flatten$f = array.flatten;


	function factory$3H(type, config, load, typed) {
	  var add$$1 = load(add);
	  var multiply$$1 = load(multiply);
	  var partitionSelect$$1 = load(partitionSelect);
	  var compare$$1 = load(compare);

	  /**
	   * Compute the prob order quantile of a matrix or a list with values.
	   * The sequence is sorted and the middle value is returned.
	   * Supported types of sequence values are: Number, BigNumber, Unit
	   * Supported types of probability are: Number, BigNumber
	   *
	   * In case of a (multi dimensional) array or matrix, the prob order quantile
	   * of all elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.quantileSeq(A, prob[, sorted])
	   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
	   *     math.quantileSeq(A, N[, sorted])
	   *
	   * Examples:
	   *
	   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
	   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
	   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
	   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
	   *
	   * See also:
	   *
	   *     median, mean, min, max, sum, prod, std, var
	   *
	   * @param {Array, Matrix} data                A single matrix or Array
	   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
	   *                                            the amount of evenly distributed steps of
	   *                                            probabilities; only one of these options can
	   *                                            be provided
	   * @param {Boolean} sorted=false              is data sorted in ascending order
	   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
	   */
	  function quantileSeq(data, probOrN, sorted) {
	    var probArr = void 0,
	        dataArr = void 0,
	        one = void 0;

	    if (arguments.length < 2 || arguments.length > 3) {
	      throw new SyntaxError('Function quantileSeq requires two or three parameters');
	    }

	    if (isCollection(data)) {
	      sorted = sorted || false;
	      if (typeof sorted === 'boolean') {
	        dataArr = data.valueOf();
	        if (isNumber$4(probOrN)) {
	          if (probOrN < 0) {
	            throw new Error('N/prob must be non-negative');
	          }

	          if (probOrN <= 1) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN > 1) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!isInteger$q(probOrN)) {
	              throw new Error('N must be a positive integer');
	            }

	            var nPlusOne = probOrN + 1;
	            probArr = new Array(probOrN);
	            for (var i = 0; i < probOrN;) {
	              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
	            }
	            return probArr;
	          }
	        }

	        if (type.isBigNumber(probOrN)) {
	          if (probOrN.isNegative()) {
	            throw new Error('N/prob must be non-negative');
	          }

	          one = new probOrN.constructor(1);

	          if (probOrN.lte(one)) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN.gt(one)) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!probOrN.isInteger()) {
	              throw new Error('N must be a positive integer');
	            }

	            // largest possible Array length is 2^32-1
	            // 2^32 < 10^15, thus safe conversion guaranteed
	            var intN = probOrN.toNumber();
	            if (intN > 4294967295) {
	              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
	            }

	            var _nPlusOne = new type.BigNumber(intN + 1);
	            probArr = new Array(intN);
	            for (var _i = 0; _i < intN;) {
	              probArr[_i] = _quantileSeq(dataArr, new type.BigNumber(++_i).div(_nPlusOne), sorted);
	            }
	            return probArr;
	          }
	        }

	        if (Array.isArray(probOrN)) {
	          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
	          probArr = new Array(probOrN.length);
	          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
	            var currProb = probOrN[_i2];
	            if (isNumber$4(currProb)) {
	              if (currProb < 0 || currProb > 1) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else if (type.isBigNumber(currProb)) {
	              one = new currProb.constructor(1);
	              if (currProb.isNegative() || currProb.gt(one)) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else {
	              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	            }

	            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
	          }
	          return probArr;
	        }

	        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	      }

	      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	    }

	    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	  }

	  /**
	   * Calculate the prob order quantile of an n-dimensional array.
	   *
	   * @param {Array} array
	   * @param {Number, BigNumber} prob
	   * @param {Boolean} sorted
	   * @return {Number, BigNumber, Unit} prob order quantile
	   * @private
	   */
	  function _quantileSeq(array$$1, prob, sorted) {
	    var flat = flatten$f(array$$1);
	    var len = flat.length;
	    if (len === 0) {
	      throw new Error('Cannot calculate quantile of an empty sequence');
	    }

	    if (isNumber$4(prob)) {
	      var _index = prob * (len - 1);
	      var _fracPart = _index % 1;
	      if (_fracPart === 0) {
	        var value = sorted ? flat[_index] : partitionSelect$$1(flat, _index);

	        validate(value);

	        return value;
	      }

	      var _integerPart = Math.floor(_index);

	      var _left = void 0;
	      var _right = void 0;
	      if (sorted) {
	        _left = flat[_integerPart];
	        _right = flat[_integerPart + 1];
	      } else {
	        _right = partitionSelect$$1(flat, _integerPart + 1);

	        // max of partition is kth largest
	        _left = flat[_integerPart];
	        for (var i = 0; i < _integerPart; ++i) {
	          if (compare$$1(flat[i], _left) > 0) {
	            _left = flat[i];
	          }
	        }
	      }

	      validate(_left);
	      validate(_right);

	      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	      return add$$1(multiply$$1(_left, 1 - _fracPart), multiply$$1(_right, _fracPart));
	    }

	    // If prob is a BigNumber
	    var index = prob.times(len - 1);
	    if (index.isInteger()) {
	      index = index.toNumber();
	      var _value = sorted ? flat[index] : partitionSelect$$1(flat, index);

	      validate(_value);

	      return _value;
	    }

	    var integerPart = index.floor();
	    var fracPart = index.minus(integerPart);
	    var integerPartNumber = integerPart.toNumber();

	    var left = void 0;
	    var right = void 0;
	    if (sorted) {
	      left = flat[integerPartNumber];
	      right = flat[integerPartNumber + 1];
	    } else {
	      right = partitionSelect$$1(flat, integerPartNumber + 1);

	      // max of partition is kth largest
	      left = flat[integerPartNumber];
	      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
	        if (compare$$1(flat[_i3], left) > 0) {
	          left = flat[_i3];
	        }
	      }
	    }

	    validate(left);
	    validate(right);

	    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	    var one = new fracPart.constructor(1);
	    return add$$1(multiply$$1(left, one.minus(fracPart)), multiply$$1(right, fracPart));
	  }

	  /**
	   * Check if array value types are valid, throw error otherwise.
	   * @param {number | BigNumber | Unit} x
	   * @param {number | BigNumber | Unit} x
	   * @private
	   */
	  var validate = typed({
	    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
	      return x;
	    }
	  });

	  return quantileSeq;
	}

	var name$3u = 'quantileSeq';
	var factory_1$3H = factory$3H;

	var quantileSeq = {
		name: name$3u,
		factory: factory_1$3H
	};

	var DEFAULT_NORMALIZATION = 'unbiased';



	function factory$3I(type, config, load, typed) {
	  var add = load(addScalar);
	  var subtract$$1 = load(subtract);
	  var multiply = load(multiplyScalar);
	  var divide = load(divideScalar);
	  var improveErrorMessage$$1 = load(improveErrorMessage);

	  /**
	   * Compute the variance of a matrix or a  list with values.
	   * In case of a (multi dimensional) array or matrix, the variance over all
	   * elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Note that older browser may not like the variable name `var`. In that
	   * case, the function can be called as `math['var'](...)` instead of
	   * `math.var(...)`.
	   *
	   * Syntax:
	   *
	   *     math.var(a, b, c, ...)
	   *     math.var(A)
	   *     math.var(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.var(2, 4, 6)                     // returns 4
	   *     math.var([2, 4, 6, 8])                // returns 6.666666666666667
	   *     math.var([2, 4, 6, 8], 'uncorrected') // returns 5
	   *     math.var([2, 4, 6, 8], 'biased')      // returns 4
	   *
	   *     math.var([[1, 2, 3], [4, 5, 6]])      // returns 3.5
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, std, sum
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The variance
	   */
	  var variance = typed('variance', {
	    // var([a, b, c, d, ...])
	    'Array | Matrix': function ArrayMatrix(array) {
	      return _var(array, DEFAULT_NORMALIZATION);
	    },

	    // var([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _var,

	    // var(a, b, c, d, ...)
	    '...': function _(args) {
	      return _var(args, DEFAULT_NORMALIZATION);
	    }
	  });

	  variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';

	  return variance;

	  /**
	   * Recursively calculate the variance of an n-dimensional array
	   * @param {Array} array
	   * @param {string} normalization
	   *                        Determines how to normalize the variance:
	   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
	   *                        - 'uncorrected' The sum of squared errors is divided by n
	   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
	   * @return {number | BigNumber} variance
	   * @private
	   */
	  function _var(array, normalization) {
	    var sum = 0;
	    var num = 0;

	    if (array.length === 0) {
	      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
	    }

	    // calculate the mean and number of elements
	    deepForEach(array, function (value) {
	      try {
	        sum = add(sum, value);
	        num++;
	      } catch (err) {
	        throw improveErrorMessage$$1(err, 'var', value);
	      }
	    });
	    if (num === 0) throw new Error('Cannot calculate var of an empty array');

	    var mean = divide(sum, num);

	    // calculate the variance
	    sum = 0;
	    deepForEach(array, function (value) {
	      var diff = subtract$$1(value, mean);
	      sum = add(sum, multiply(diff, diff));
	    });

	    switch (normalization) {
	      case 'uncorrected':
	        return divide(sum, num);

	      case 'biased':
	        return divide(sum, num + 1);

	      case 'unbiased':
	        var zero = type.isBigNumber(sum) ? new type.BigNumber(0) : 0;
	        return num === 1 ? zero : divide(sum, num - 1);

	      default:
	        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
	    }
	  }
	}

	var name$3v = 'var';
	var factory_1$3I = factory$3I;

	var _var = {
		name: name$3v,
		factory: factory_1$3I
	};

	function factory$3J(type, config, load, typed) {
	  var sqrt$$1 = load(sqrt);
	  var variance = load(_var);

	  /**
	   * Compute the standard deviation of a matrix or a  list with values.
	   * The standard deviations is defined as the square root of the variance:
	   * `std(A) = sqrt(var(A))`.
	   * In case of a (multi dimensional) array or matrix, the standard deviation
	   * over all elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Syntax:
	   *
	   *     math.std(a, b, c, ...)
	   *     math.std(A)
	   *     math.std(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.std(2, 4, 6)                     // returns 2
	   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
	   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
	   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
	   *
	   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, sum, var
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The standard deviation
	   */
	  var std = typed('std', {
	    // std([a, b, c, d, ...])
	    'Array | Matrix': _std,

	    // std([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _std,

	    // std(a, b, c, d, ...)
	    '...': function _(args) {
	      return _std(args);
	    }
	  });

	  std.toTex = undefined; // use default template

	  return std;

	  function _std(array, normalization) {
	    if (array.length === 0) {
	      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
	    }

	    try {
	      return sqrt$$1(variance.apply(null, arguments));
	    } catch (err) {
	      if (err instanceof TypeError && err.message.indexOf(' var') !== -1) {
	        throw new TypeError(err.message.replace(' var', ' std'));
	      } else {
	        throw err;
	      }
	    }
	  }
	}

	var name$3w = 'std';
	var factory_1$3J = factory$3J;

	var std = {
		name: name$3w,
		factory: factory_1$3J
	};

	var statistics = [mad, max, mean, median, min, mode, prod, quantileSeq, std, sum, _var];

	var isString$4 = string.isString;
	var format$8 = string.format;

	function factory$3K(type, config, load, typed) {
	  /**
	   * Interpolate values into a string template.
	   *
	   * Syntax:
	   *
	   *     math.print(template, values)
	   *     math.print(template, values, precision)
	   *     math.print(template, values, options)
	   *
	   * Example usage:
	   *
	   *     // the following outputs: 'Lucy is 5 years old'
	   *     math.print('Lucy is $age years old', {age: 5})
	   *
	   *     // the following outputs: 'The value of pi is 3.141592654'
	   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
	   *
	   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
	   *     math.print('Hello $user.name! The date is $date', {
	   *       user: {
	   *         name: 'Mary',
	   *       },
	   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
	   *     })
	   *
	   *     // the following outputs: 'My favorite fruits are apples and bananas !'
	   *     math.print('My favorite fruits are $0 and $1 !', [
	   *       'apples',
	   *       'bananas'
	   *     ])
	   *
	   * See also:
	   *
	   *     format
	   *
	   * @param {string} template           A string containing variable placeholders.
	   * @param {Object | Array | Matrix}   values An object or array containing variables
	   *                                    which will be filled in in the template.
	   * @param {number | Object} [options] Formatting options,
	   *                                    or the number of digits to format numbers.
	   *                                    See function math.format for a description
	   *                                    of all options.
	   * @return {string} Interpolated string
	   */
	  var print = typed('print', {
	    // note: Matrix will be converted automatically to an Array
	    'string, Object | Array': _print,
	    'string, Object | Array, number | Object': _print
	  });

	  print.toTex = undefined; // use default template

	  return print;
	}

	/**
	 * Interpolate values into a string template.
	 * @param {string} template
	 * @param {Object} values
	 * @param {number | Object} [options]
	 * @returns {string} Interpolated string
	 * @private
	 */
	function _print(template, values, options) {
	  return template.replace(/\$([\w.]+)/g, function (original, key) {
	    var keys = key.split('.');
	    var value = values[keys.shift()];
	    while (keys.length && value !== undefined) {
	      var k = keys.shift();
	      value = k ? value[k] : value + '.';
	    }

	    if (value !== undefined) {
	      if (!isString$4(value)) {
	        return format$8(value, options);
	      } else {
	        return value;
	      }
	    }

	    return original;
	  });
	}

	var name$3x = 'print';
	var factory_1$3K = factory$3K;

	var print = {
		name: name$3x,
		factory: factory_1$3K
	};

	var string$8 = [format$2, print];

	function factory$3L(type, config, load, typed) {
	  /**
	   * Calculate the inverse cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acos(x)
	   *
	   * Examples:
	   *
	   *    math.acos(0.5)           // returns number 1.0471975511965979
	   *    math.acos(math.cos(1.5)) // returns number 1.5
	   *
	   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cos, atan, asin
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
	   */
	  var acos = typed('acos', {
	    'number': function number(x) {
	      if (x >= -1 && x <= 1 || config.predictable) {
	        return Math.acos(x);
	      } else {
	        return new type.Complex(x, 0).acos();
	      }
	    },

	    'Complex': function Complex(x) {
	      return x.acos();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.acos();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acos);
	    }
	  });

	  acos.toTex = { 1: '\\cos^{-1}\\left(${args[0]}\\right)' };

	  return acos;
	}

	var name$3y = 'acos';
	var factory_1$3L = factory$3L;

	var acos = {
		name: name$3y,
		factory: factory_1$3L
	};

	function factory$3M(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arccos of a value,
	   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acosh(x)
	   *
	   * Examples:
	   *
	   *    math.acosh(1.5)       // returns 0.9624236501192069
	   *
	   * See also:
	   *
	   *    cosh, asinh, atanh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
	   */
	  var acosh = typed('acosh', {
	    'number': function number(x) {
	      if (x >= 1 || config.predictable) {
	        return _acosh(x);
	      }
	      if (x <= -1) {
	        return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
	      }
	      return new type.Complex(x, 0).acosh();
	    },

	    'Complex': function Complex(x) {
	      return x.acosh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.acosh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acosh);
	    }
	  });

	  acosh.toTex = { 1: '\\cosh^{-1}\\left(${args[0]}\\right)' };

	  return acosh;
	}

	/**
	 * Calculate the hyperbolic arccos of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _acosh = Math.acosh || function (x) {
	  return Math.log(Math.sqrt(x * x - 1) + x);
	};

	var name$3z = 'acosh';
	var factory_1$3M = factory$3M;

	var acosh = {
		name: name$3z,
		factory: factory_1$3M
	};

	function factory$3N(type, config, load, typed) {
	  /**
	   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acot(x)
	   *
	   * Examples:
	   *
	   *    math.acot(0.5)           // returns number 0.4636476090008061
	   *    math.acot(math.cot(1.5)) // returns number 1.5
	   *
	   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cot, atan
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cotangent of x
	   */
	  var acot = typed('acot', {
	    'number': function number(x) {
	      return Math.atan(1 / x);
	    },

	    'Complex': function Complex(x) {
	      return x.acot();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).atan();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acot);
	    }
	  });

	  acot.toTex = { 1: '\\cot^{-1}\\left(${args[0]}\\right)' };

	  return acot;
	}

	var name$3A = 'acot';
	var factory_1$3N = factory$3N;

	var acot = {
		name: name$3A,
		factory: factory_1$3N
	};

	function factory$3O(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arccotangent of a value,
	   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acoth(x)
	   *
	   * Examples:
	   *
	   *    math.acoth(0.5)       // returns 0.8047189562170503
	   *
	   * See also:
	   *
	   *    acsch, asech
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
	   */
	  var acoth = typed('acoth', {
	    'number': function number(x) {
	      if (x >= 1 || x <= -1 || config.predictable) {
	        return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
	      }
	      return new type.Complex(x, 0).acoth();
	    },

	    'Complex': function Complex(x) {
	      return x.acoth();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).atanh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acoth);
	    }
	  });

	  acoth.toTex = { 1: '\\coth^{-1}\\left(${args[0]}\\right)' };

	  return acoth;
	}

	var name$3B = 'acoth';
	var factory_1$3O = factory$3O;

	var acoth = {
		name: name$3B,
		factory: factory_1$3O
	};

	function factory$3P(type, config, load, typed) {
	  /**
	   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsc(x)
	   *
	   * Examples:
	   *
	   *    math.acsc(0.5)           // returns number 0.5235987755982989
	   *    math.acsc(math.csc(1.5)) // returns number ~1.5
	   *
	   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    csc, asin, asec
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cosecant of x
	   */
	  var acsc = typed('acsc', {
	    'number': function number(x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.asin(1 / x);
	      }
	      return new type.Complex(x, 0).acsc();
	    },

	    'Complex': function Complex(x) {
	      return x.acsc();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).asin();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acsc);
	    }
	  });

	  acsc.toTex = { 1: '\\csc^{-1}\\left(${args[0]}\\right)' };

	  return acsc;
	}

	var name$3C = 'acsc';
	var factory_1$3P = factory$3P;

	var acsc = {
		name: name$3C,
		factory: factory_1$3P
	};

	function factory$3Q(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arccosecant of a value,
	   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsch(x)
	   *
	   * Examples:
	   *
	   *    math.acsch(0.5)       // returns 1.4436354751788103
	   *
	   * See also:
	   *
	   *    asech, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
	   */
	  var acsch = typed('acsch', {
	    'number': function number(x) {
	      x = 1 / x;
	      return Math.log(x + Math.sqrt(x * x + 1));
	    },

	    'Complex': function Complex(x) {
	      return x.acsch();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).asinh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acsch);
	    }
	  });

	  acsch.toTex = { 1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)' };

	  return acsch;
	}

	var name$3D = 'acsch';
	var factory_1$3Q = factory$3Q;

	var acsch = {
		name: name$3D,
		factory: factory_1$3Q
	};

	function factory$3R(type, config, load, typed) {
	  /**
	   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asec(x)
	   *
	   * Examples:
	   *
	   *    math.asec(0.5)           // returns 1.0471975511965979
	   *    math.asec(math.sec(1.5)) // returns 1.5
	   *
	   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    acos, acot, acsc
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} The arc secant of x
	   */
	  var asec = typed('asec', {
	    'number': function number(x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.acos(1 / x);
	      }
	      return new type.Complex(x, 0).asec();
	    },

	    'Complex': function Complex(x) {
	      return x.asec();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).acos();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, asec);
	    }
	  });

	  asec.toTex = { 1: '\\sec^{-1}\\left(${args[0]}\\right)' };

	  return asec;
	}

	var name$3E = 'asec';
	var factory_1$3R = factory$3R;

	var asec = {
		name: name$3E,
		factory: factory_1$3R
	};

	function factory$3S(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arcsecant of a value,
	   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asech(x)
	   *
	   * Examples:
	   *
	   *    math.asech(0.5)       // returns 1.3169578969248166
	   *
	   * See also:
	   *
	   *    acsch, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
	   */
	  var asech = typed('asech', {
	    'number': function number(x) {
	      if (x <= 1 && x >= -1 || config.predictable) {
	        x = 1 / x;

	        var ret = Math.sqrt(x * x - 1);
	        if (x > 0 || config.predictable) {
	          return Math.log(ret + x);
	        }

	        return new type.Complex(Math.log(ret - x), Math.PI);
	      }

	      return new type.Complex(x, 0).asech();
	    },

	    'Complex': function Complex(x) {
	      return x.asech();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).acosh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, asech);
	    }
	  });

	  asech.toTex = { 1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)' };

	  return asech;
	}

	var name$3F = 'asech';
	var factory_1$3S = factory$3S;

	var asech = {
		name: name$3F,
		factory: factory_1$3S
	};

	function factory$3T(type, config, load, typed) {
	  /**
	   * Calculate the inverse sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asin(x)
	   *
	   * Examples:
	   *
	   *    math.asin(0.5)           // returns number 0.5235987755982989
	   *    math.asin(math.sin(1.5)) // returns number ~1.5
	   *
	   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    sin, atan, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
	   */
	  var asin = typed('asin', {
	    'number': function number(x) {
	      if (x >= -1 && x <= 1 || config.predictable) {
	        return Math.asin(x);
	      } else {
	        return new type.Complex(x, 0).asin();
	      }
	    },

	    'Complex': function Complex(x) {
	      return x.asin();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.asin();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since asin(0) = 0
	      return deepMap(x, asin, true);
	    }
	  });

	  asin.toTex = { 1: '\\sin^{-1}\\left(${args[0]}\\right)' };

	  return asin;
	}

	var name$3G = 'asin';
	var factory_1$3T = factory$3T;

	var asin = {
		name: name$3G,
		factory: factory_1$3T
	};

	function factory$3U(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arcsine of a value,
	   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asinh(x)
	   *
	   * Examples:
	   *
	   *    math.asinh(0.5)       // returns 0.48121182505960347
	   *
	   * See also:
	   *
	   *    acosh, atanh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
	   */
	  var asinh = typed('asinh', {
	    'number': Math.asinh || function (x) {
	      return Math.log(Math.sqrt(x * x + 1) + x);
	    },

	    'Complex': function Complex(x) {
	      return x.asinh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.asinh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since asinh(0) = 0
	      return deepMap(x, asinh, true);
	    }
	  });

	  asinh.toTex = { 1: '\\sinh^{-1}\\left(${args[0]}\\right)' };

	  return asinh;
	}

	var name$3H = 'asinh';
	var factory_1$3U = factory$3U;

	var asinh = {
		name: name$3H,
		factory: factory_1$3U
	};

	function factory$3V(type, config, load, typed) {
	  /**
	   * Calculate the inverse tangent of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan(x)
	   *
	   * Examples:
	   *
	   *    math.atan(0.5)           // returns number 0.4636476090008061
	   *    math.atan(math.tan(1.5)) // returns number 1.5
	   *
	   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, asin, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
	   */
	  var atan = typed('atan', {
	    'number': function number(x) {
	      return Math.atan(x);
	    },

	    'Complex': function Complex(x) {
	      return x.atan();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.atan();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since atan(0) = 0
	      return deepMap(x, atan, true);
	    }
	  });

	  atan.toTex = { 1: '\\tan^{-1}\\left(${args[0]}\\right)' };

	  return atan;
	}

	var name$3I = 'atan';
	var factory_1$3V = factory$3V;

	var atan = {
		name: name$3I,
		factory: factory_1$3V
	};

	function factory$3W(type, config, load, typed) {
	  var matrix$$1 = load(matrix);

	  var algorithm02$$1 = load(algorithm02);
	  var algorithm03$$1 = load(algorithm03);
	  var algorithm09$$1 = load(algorithm09);
	  var algorithm11$$1 = load(algorithm11);
	  var algorithm12$$1 = load(algorithm12);
	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Calculate the inverse tangent function with two arguments, y/x.
	   * By providing two arguments, the right quadrant of the computed angle can be
	   * determined.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan2(y, x)
	   *
	   * Examples:
	   *
	   *    math.atan2(2, 2) / math.pi       // returns number 0.25
	   *
	   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
	   *    const x = math.cos(angle)
	   *    const y = math.sin(angle)
	   *
	   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, atan, sin, cos
	   *
	   * @param {number | Array | Matrix} y  Second dimension
	   * @param {number | Array | Matrix} x  First dimension
	   * @return {number | Array | Matrix} Four-quadrant inverse tangent
	   */
	  var atan2 = typed('atan2', {

	    'number, number': Math.atan2,

	    // Complex numbers doesn't seem to have a reasonable implementation of
	    // atan2(). Even Matlab removed the support, after they only calculated
	    // the atan only on base of the real part of the numbers and ignored the imaginary.

	    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
	      return type.BigNumber.atan2(y, x);
	    },

	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm09$$1(x, y, atan2, false);
	    },

	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      // mind the order of y and x!
	      return algorithm02$$1(y, x, atan2, true);
	    },

	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$$1(x, y, atan2, false);
	    },

	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$$1(x, y, atan2);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      return atan2(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return atan2(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      return atan2(x, matrix$$1(y));
	    },

	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$$1(x, y, atan2, false);
	    },

	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$$1(x, y, atan2, false);
	    },

	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // mind the order of y and x
	      return algorithm12$$1(y, x, atan2, true);
	    },

	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // mind the order of y and x
	      return algorithm14$$1(y, x, atan2, true);
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      return algorithm14$$1(matrix$$1(x), y, atan2, false).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      return algorithm14$$1(matrix$$1(y), x, atan2, true).valueOf();
	    }
	  });

	  atan2.toTex = { 2: '\\mathrm{atan2}\\left(${args}\\right)' };

	  return atan2;
	}

	var name$3J = 'atan2';
	var factory_1$3W = factory$3W;

	var atan2 = {
		name: name$3J,
		factory: factory_1$3W
	};

	function factory$3X(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arctangent of a value,
	   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atanh(x)
	   *
	   * Examples:
	   *
	   *    math.atanh(0.5)       // returns 0.5493061443340549
	   *
	   * See also:
	   *
	   *    acosh, asinh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
	   */
	  var atanh = typed('atanh', {
	    'number': function number(x) {
	      if (x <= 1 && x >= -1 || config.predictable) {
	        return _atanh(x);
	      }
	      return new type.Complex(x, 0).atanh();
	    },

	    'Complex': function Complex(x) {
	      return x.atanh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.atanh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since atanh(0) = 0
	      return deepMap(x, atanh, true);
	    }
	  });

	  atanh.toTex = { 1: '\\tanh^{-1}\\left(${args[0]}\\right)' };

	  return atanh;
	}

	/**
	 * Calculate the hyperbolic arctangent of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _atanh = Math.atanh || function (x) {
	  return Math.log((1 + x) / (1 - x)) / 2;
	};

	var name$3K = 'atanh';
	var factory_1$3X = factory$3X;

	var atanh = {
		name: name$3K,
		factory: factory_1$3X
	};

	function factory$3Y(type, config, load, typed) {
	  /**
	   * Calculate the cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cos(x)
	   *
	   * Examples:
	   *
	   *    math.cos(2)                      // returns number -0.4161468365471422
	   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
	   *    math.cos(math.unit(180, 'deg'))  // returns number -1
	   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
	   *
	   *    const angle = 0.2
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
	   */
	  var cos = typed('cos', {
	    'number': Math.cos,

	    'Complex': function Complex(x) {
	      return x.cos();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.cos();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cos is no angle');
	      }
	      return cos(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cos);
	    }
	  });

	  cos.toTex = { 1: '\\cos\\left(${args[0]}\\right)' };

	  return cos;
	}

	var name$3L = 'cos';
	var factory_1$3Y = factory$3Y;

	var cos = {
		name: name$3L,
		factory: factory_1$3Y
	};

	function factory$3Z(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosine of a value,
	   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cosh(x)
	   *
	   * Examples:
	   *
	   *    math.cosh(0.5)       // returns number 1.1276259652063807
	   *
	   * See also:
	   *
	   *    sinh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
	   */
	  var cosh = typed('cosh', {
	    'number': _cosh,

	    'Complex': function Complex(x) {
	      return x.cosh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.cosh();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cosh is no angle');
	      }
	      return cosh(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cosh);
	    }
	  });

	  cosh.toTex = { 1: '\\cosh\\left(${args[0]}\\right)' };

	  return cosh;
	}

	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _cosh = Math.cosh || function (x) {
	  return (Math.exp(x) + Math.exp(-x)) / 2;
	};

	var name$3M = 'cosh';
	var factory_1$3Z = factory$3Z;

	var cosh = {
		name: name$3M,
		factory: factory_1$3Z
	};

	function factory$3_(type, config, load, typed) {
	  /**
	   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cot(x)
	   *
	   * Examples:
	   *
	   *    math.cot(2)      // returns number -0.45765755436028577
	   *    1 / math.tan(2)  // returns number -0.45765755436028577
	   *
	   * See also:
	   *
	   *    tan, sec, csc
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cotangent of x
	   */
	  var cot = typed('cot', {
	    'number': function number(x) {
	      return 1 / Math.tan(x);
	    },

	    'Complex': function Complex(x) {
	      return x.cot();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.tan());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cot is no angle');
	      }
	      return cot(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cot);
	    }
	  });

	  cot.toTex = { 1: '\\cot\\left(${args[0]}\\right)' };

	  return cot;
	}

	var name$3N = 'cot';
	var factory_1$3_ = factory$3_;

	var cot = {
		name: name$3N,
		factory: factory_1$3_
	};

	function factory$40(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cotangent of a value,
	   * defined as `coth(x) = 1 / tanh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.coth(x)
	   *
	   * Examples:
	   *
	   *    // coth(x) = 1 / tanh(x)
	   *    math.coth(2)         // returns 1.0373147207275482
	   *    1 / math.tanh(2)     // returns 1.0373147207275482
	   *
	   * See also:
	   *
	   *    sinh, tanh, cosh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
	   */
	  var coth = typed('coth', {
	    'number': _coth,

	    'Complex': function Complex(x) {
	      return x.coth();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.tanh());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function coth is no angle');
	      }
	      return coth(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, coth);
	    }
	  });

	  coth.toTex = { 1: '\\coth\\left(${args[0]}\\right)' };

	  return coth;
	}

	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _coth(x) {
	  var e = Math.exp(2 * x);
	  return (e + 1) / (e - 1);
	}

	var name$3O = 'coth';
	var factory_1$40 = factory$40;

	var coth = {
		name: name$3O,
		factory: factory_1$40
	};

	function factory$41(type, config, load, typed) {
	  /**
	   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csc(x)
	   *
	   * Examples:
	   *
	   *    math.csc(2)      // returns number 1.099750170294617
	   *    1 / math.sin(2)  // returns number 1.099750170294617
	   *
	   * See also:
	   *
	   *    sin, sec, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cosecant of x
	   */
	  var csc = typed('csc', {
	    'number': function number(x) {
	      return 1 / Math.sin(x);
	    },

	    'Complex': function Complex(x) {
	      return x.csc();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.sin());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function csc is no angle');
	      }
	      return csc(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, csc);
	    }
	  });

	  csc.toTex = { 1: '\\csc\\left(${args[0]}\\right)' };

	  return csc;
	}

	var name$3P = 'csc';
	var factory_1$41 = factory$41;

	var csc = {
		name: name$3P,
		factory: factory_1$41
	};

	var sign$2 = number.sign;

	function factory$42(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosecant of a value,
	   * defined as `csch(x) = 1 / sinh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csch(x)
	   *
	   * Examples:
	   *
	   *    // csch(x) = 1/ sinh(x)
	   *    math.csch(0.5)       // returns 1.9190347513349437
	   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
	   *
	   * See also:
	   *
	   *    sinh, sech, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
	   */
	  var csch = typed('csch', {
	    'number': _csch,

	    'Complex': function Complex(x) {
	      return x.csch();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.sinh());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function csch is no angle');
	      }
	      return csch(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, csch);
	    }
	  });

	  csch.toTex = { 1: '\\mathrm{csch}\\left(${args[0]}\\right)' };

	  return csch;
	}

	/**
	 * Calculate the hyperbolic cosecant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _csch(x) {
	  // consider values close to zero (+/-)
	  if (x === 0) {
	    return Number.POSITIVE_INFINITY;
	  } else {
	    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign$2(x);
	  }
	}

	var name$3Q = 'csch';
	var factory_1$42 = factory$42;

	var csch = {
		name: name$3Q,
		factory: factory_1$42
	};

	function factory$43(type, config, load, typed) {
	  /**
	   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sec(x)
	   *
	   * Examples:
	   *
	   *    math.sec(2)      // returns number -2.4029979617223822
	   *    1 / math.cos(2)  // returns number -2.4029979617223822
	   *
	   * See also:
	   *
	   *    cos, csc, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Secant of x
	   */
	  var sec = typed('sec', {
	    'number': function number(x) {
	      return 1 / Math.cos(x);
	    },

	    'Complex': function Complex(x) {
	      return x.sec();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.cos());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sec is no angle');
	      }
	      return sec(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, sec);
	    }
	  });

	  sec.toTex = { 1: '\\sec\\left(${args[0]}\\right)' };

	  return sec;
	}

	var name$3R = 'sec';
	var factory_1$43 = factory$43;

	var sec = {
		name: name$3R,
		factory: factory_1$43
	};

	function factory$44(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic secant of a value,
	   * defined as `sech(x) = 1 / cosh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sech(x)
	   *
	   * Examples:
	   *
	   *    // sech(x) = 1/ cosh(x)
	   *    math.sech(0.5)       // returns 0.886818883970074
	   *    1 / math.cosh(0.5)   // returns 0.886818883970074
	   *
	   * See also:
	   *
	   *    cosh, csch, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
	   */
	  var sech = typed('sech', {
	    'number': _sech,

	    'Complex': function Complex(x) {
	      return x.sech();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.cosh());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sech is no angle');
	      }
	      return sech(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, sech);
	    }
	  });

	  sech.toTex = { 1: '\\mathrm{sech}\\left(${args[0]}\\right)' };

	  return sech;
	}

	/**
	 * Calculate the hyperbolic secant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _sech(x) {
	  return 2 / (Math.exp(x) + Math.exp(-x));
	}

	var name$3S = 'sech';
	var factory_1$44 = factory$44;

	var sech = {
		name: name$3S,
		factory: factory_1$44
	};

	function factory$45(type, config, load, typed) {
	  /**
	   * Calculate the sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sin(x)
	   *
	   * Examples:
	   *
	   *    math.sin(2)                      // returns number 0.9092974268256813
	   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
	   *    math.sin(math.unit(90, 'deg'))   // returns number 1
	   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
	   *
	   *    const angle = 0.2
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
	   */
	  var sin = typed('sin', {
	    'number': Math.sin,

	    'Complex': function Complex(x) {
	      return x.sin();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.sin();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sin is no angle');
	      }
	      return sin(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sin(0) = 0
	      return deepMap(x, sin, true);
	    }
	  });

	  sin.toTex = { 1: '\\sin\\left(${args[0]}\\right)' };

	  return sin;
	}

	var name$3T = 'sin';
	var factory_1$45 = factory$45;

	var sin = {
		name: name$3T,
		factory: factory_1$45
	};

	function factory$46(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic sine of a value,
	   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sinh(x)
	   *
	   * Examples:
	   *
	   *    math.sinh(0.5)       // returns number 0.5210953054937474
	   *
	   * See also:
	   *
	   *    cosh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
	   */
	  var sinh = typed('sinh', {
	    'number': _sinh,

	    'Complex': function Complex(x) {
	      return x.sinh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.sinh();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sinh is no angle');
	      }
	      return sinh(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sinh(0) = 0
	      return deepMap(x, sinh, true);
	    }
	  });

	  sinh.toTex = { 1: '\\sinh\\left(${args[0]}\\right)' };

	  return sinh;
	}

	/**
	 * Calculate the hyperbolic sine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _sinh = Math.sinh || function (x) {
	  return (Math.exp(x) - Math.exp(-x)) / 2;
	};

	var name$3U = 'sinh';
	var factory_1$46 = factory$46;

	var sinh = {
		name: name$3U,
		factory: factory_1$46
	};

	function factory$47(type, config, load, typed) {
	  /**
	   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tan(x)
	   *
	   * Examples:
	   *
	   *    math.tan(0.5)                    // returns number 0.5463024898437905
	   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
	   *    math.tan(math.pi / 4)            // returns number 1
	   *    math.tan(math.unit(45, 'deg'))   // returns number 1
	   *
	   * See also:
	   *
	   *    atan, sin, cos
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
	   */
	  var tan = typed('tan', {
	    'number': Math.tan,

	    'Complex': function Complex(x) {
	      return x.tan();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.tan();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function tan is no angle');
	      }
	      return tan(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since tan(0) = 0
	      return deepMap(x, tan, true);
	    }
	  });

	  tan.toTex = { 1: '\\tan\\left(${args[0]}\\right)' };

	  return tan;
	}

	var name$3V = 'tan';
	var factory_1$47 = factory$47;

	var tan = {
		name: name$3V,
		factory: factory_1$47
	};

	function factory$48(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic tangent of a value,
	   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tanh(x)
	   *
	   * Examples:
	   *
	   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
	   *    math.tanh(0.5)                   // returns 0.46211715726000974
	   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
	   *    1 / math.coth(0.5)               // returns 0.46211715726000974
	   *
	   * See also:
	   *
	   *    sinh, cosh, coth
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
	   */
	  var tanh = typed('tanh', {
	    'number': _tanh,

	    'Complex': function Complex(x) {
	      return x.tanh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.tanh();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function tanh is no angle');
	      }
	      return tanh(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since tanh(0) = 0
	      return deepMap(x, tanh, true);
	    }
	  });

	  tanh.toTex = { 1: '\\tanh\\left(${args[0]}\\right)' };

	  return tanh;
	}

	/**
	 * Calculate the hyperbolic tangent of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _tanh = Math.tanh || function (x) {
	  var e = Math.exp(2 * x);
	  return (e - 1) / (e + 1);
	};

	var name$3W = 'tanh';
	var factory_1$48 = factory$48;

	var tanh = {
		name: name$3W,
		factory: factory_1$48
	};

	var trigonometry = [acos, acosh, acot, acoth, acsc, acsch, asec, asech, asin, asinh, atan, atan2, atanh, cos, cosh, cot, coth, csc, csch, sec, sech, sin, sinh, tan, tanh];

	function factory$49(type, config, load, typed) {
	  var latex$$1 = latex;

	  var matrix$$1 = load(matrix);

	  var algorithm13$$1 = load(algorithm13);
	  var algorithm14$$1 = load(algorithm14);

	  /**
	   * Change the unit of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.to(x, unit)
	   *
	   * Examples:
	   *
	   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
	   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
	   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
	   *
	   * See also:
	   *
	   *    unit
	   *
	   * @param {Unit | Array | Matrix} x     The unit to be converted.
	   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
	   *                                      or a unit without value.
	   * @return {Unit | Array | Matrix} value with changed, fixed unit.
	   */
	  var to = typed('to', {

	    'Unit, Unit | string': function UnitUnitString(x, unit) {
	      return x.to(unit);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm13$$1(x, y, to);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return to(matrix$$1(x), matrix$$1(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return to(matrix$$1(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return to(x, matrix$$1(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14$$1(x, y, to, false);
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14$$1(y, x, to, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(x), y, to, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$$1(matrix$$1(y), x, to, true).valueOf();
	    }
	  });

	  to.toTex = {
	    2: '\\left(${args[0]}' + latex$$1.operators['to'] + '${args[1]}\\right)'
	  };

	  return to;
	}

	var name$3X = 'to';
	var factory_1$49 = factory$49;

	var to = {
		name: name$3X,
		factory: factory_1$49
	};

	var unit$2 = [to];

	function factory$4a(type, config, load, typed) {
	  /**
	   * Clone an object.
	   *
	   * Syntax:
	   *
	   *     math.clone(x)
	   *
	   * Examples:
	   *
	   *    math.clone(3.5)                   // returns number 3.5
	   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
	   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
	   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
	   *    math.clone("hello world")         // returns string "hello world"
	   *
	   * @param {*} x   Object to be cloned
	   * @return {*} A clone of object x
	   */
	  var clone = typed('clone', {
	    'any': object.clone
	  });

	  clone.toTex = undefined; // use default template

	  return clone;
	}

	var name$3Y = 'clone';
	var factory_1$4a = factory$4a;

	var clone$9 = {
		name: name$3Y,
		factory: factory_1$4a
	};

	function factory$4b(type, config, load, typed) {
	  /**
	   * Test whether a value is prime: has no divisors other than itself and one.
	   * The function supports type `number`, `bignumber`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPrime(x)
	   *
	   * Examples:
	   *
	   *    math.isPrime(3)                     // returns true
	   *    math.isPrime(-2)                    // returns false
	   *    math.isPrime(0)                     // returns false
	   *    math.isPrime(-0)                    // returns false
	   *    math.isPrime(0.5)                   // returns false
	   *    math.isPrime('2')                   // returns true
	   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPrime = typed('isPrime', {
	    'number': function number(x) {
	      if (x < 2) {
	        return false;
	      }
	      if (x === 2) {
	        return true;
	      }
	      if (x % 2 === 0) {
	        return false;
	      }
	      for (var i = 3; i * i <= x; i += 2) {
	        if (x % i === 0) {
	          return false;
	        }
	      }
	      return true;
	    },

	    'BigNumber': function BigNumber(x) {
	      if (x.lt(2)) {
	        return false;
	      }
	      if (x.equals(2)) {
	        return true;
	      }
	      if (x.mod(2).isZero()) {
	        return false;
	      }
	      for (var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)) {
	        if (x.mod(i).isZero()) {
	          return false;
	        }
	      }
	      return true;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isPrime);
	    }
	  });

	  return isPrime;
	}

	var name$3Z = 'isPrime';
	var factory_1$4b = factory$4b;

	var isPrime = {
		name: name$3Z,
		factory: factory_1$4b
	};

	function factory$4c(type, config, load, typed) {
	  /**
	   * Test whether a value is NaN (not a number).
	   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNaN(x)
	   *
	   * Examples:
	   *
	   *    math.isNaN(3)                     // returns false
	   *    math.isNaN(NaN)                   // returns true
	   *    math.isNaN(0)                     // returns false
	   *    math.isNaN(math.bignumber(NaN))   // returns true
	   *    math.isNaN(math.bignumber(0))     // returns false
	   *    math.isNaN(math.fraction(-2, 5))  // returns false
	   *    math.isNaN('-2')                  // returns false
	   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isNegative, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is NaN.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNaN = typed('isNaN', {
	    'number': function number(x) {
	      return Number.isNaN(x);
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isNaN();
	    },

	    'Fraction': function Fraction(x) {
	      return false;
	    },

	    'Complex': function Complex(x) {
	      return x.isNaN();
	    },

	    'Unit': function Unit(x) {
	      return Number.isNaN(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, Number.isNaN);
	    }
	  });

	  return isNaN;
	}

	var name$3_ = 'isNaN';
	var factory_1$4c = factory$4c;

	var _isNaN = {
		name: name$3_,
		factory: factory_1$4c
	};

	var utils$1 = [clone$9, isInteger$k, isNegative, isNumeric, isPositive, isPrime, isZero, _isNaN, _typeof$4];

	var _function$2 = [algebra, arithmetic, bitwise$1, combinatorics, complex$5, geometry, logical, matrix$2, probability, relational, set, special, statistics, string$8, trigonometry, unit$2, utils$1];

	var bignumber$2 = {
	  'name': 'bignumber',
	  'category': 'Construction',
	  'syntax': ['bignumber(x)'],
	  'description': 'Create a big number from a number or string.',
	  'examples': ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
	  'seealso': ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
	};

	var boolean_1$2 = {
	  'name': 'boolean',
	  'category': 'Construction',
	  'syntax': ['x', 'boolean(x)'],
	  'description': 'Convert a string or number into a boolean.',
	  'examples': ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
	  'seealso': ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
	};

	var complex$6 = {
	  'name': 'complex',
	  'category': 'Construction',
	  'syntax': ['complex()', 'complex(re, im)', 'complex(string)'],
	  'description': 'Create a complex number.',
	  'examples': ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
	  'seealso': ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
	};

	var createUnit$1 = {
	  'name': 'createUnit',
	  'category': 'Construction',
	  'syntax': ['createUnit(definitions)', 'createUnit(name, definition)'],
	  'description': 'Create a user-defined unit and register it with the Unit type.',
	  'examples': ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
	  'seealso': ['unit', 'splitUnit']
	};

	var fraction$4 = {
	  'name': 'fraction',
	  'category': 'Construction',
	  'syntax': ['fraction(num)', 'fraction(num,den)'],
	  'description': 'Create a fraction from a number or from a numerator and denominator.',
	  'examples': ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
	};

	var construction = {
	  'name': 'index',
	  'category': 'Construction',
	  'syntax': ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
	  'description': 'Create an index to get or replace a subset of a matrix',
	  'examples': ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
	};

	var matrix$3 = {
	  'name': 'matrix',
	  'category': 'Construction',
	  'syntax': ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
	  'description': 'Create a matrix.',
	  'examples': ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
	};

	var number$5 = {
	  'name': 'number',
	  'category': 'Construction',
	  'syntax': ['x', 'number(x)', 'number(unit, valuelessUnit)'],
	  'description': 'Create a number or convert a string or boolean into a number.',
	  'examples': ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
	};

	var sparse$1 = {
	  'name': 'sparse',
	  'category': 'Construction',
	  'syntax': ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
	  'description': 'Create a sparse matrix.',
	  'examples': ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
	};

	var splitUnit$1 = {
	  'name': 'splitUnit',
	  'category': 'Construction',
	  'syntax': ['splitUnit(unit: Unit, parts: Unit[])'],
	  'description': 'Split a unit in an array of units whose sum is equal to the original unit.',
	  'examples': ['splitUnit(1 m, ["feet", "inch"])'],
	  'seealso': ['unit', 'createUnit']
	};

	var string$9 = {
	  'name': 'string',
	  'category': 'Construction',
	  'syntax': ['"text"', 'string(x)'],
	  'description': 'Create a string or convert a value to a string',
	  'examples': ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
	};

	var unit$3 = {
	  'name': 'unit',
	  'category': 'Construction',
	  'syntax': ['value unit', 'unit(value, unit)', 'unit(string)'],
	  'description': 'Create a unit.',
	  'examples': ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
	};

	var e = {
	  'name': 'e',
	  'category': 'Constants',
	  'syntax': ['e'],
	  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
	  'examples': ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
	  'seealso': ['exp']
	};

	var _false = {
	  'name': 'false',
	  'category': 'Constants',
	  'syntax': ['false'],
	  'description': 'Boolean value false',
	  'examples': ['false'],
	  'seealso': ['true']
	};

	var i = {
	  'name': 'i',
	  'category': 'Constants',
	  'syntax': ['i'],
	  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
	  'examples': ['i', 'i * i', 'sqrt(-1)'],
	  'seealso': []
	};

	var _Infinity = {
	  'name': 'Infinity',
	  'category': 'Constants',
	  'syntax': ['Infinity'],
	  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
	  'examples': ['Infinity', '1 / 0'],
	  'seealso': []
	};

	var LN2 = {
	  'name': 'LN2',
	  'category': 'Constants',
	  'syntax': ['LN2'],
	  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
	  'examples': ['LN2', 'log(2)'],
	  'seealso': []
	};

	var LN10 = {
	  'name': 'LN10',
	  'category': 'Constants',
	  'syntax': ['LN10'],
	  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
	  'examples': ['LN10', 'log(10)'],
	  'seealso': []
	};

	var LOG2E = {
	  'name': 'LOG2E',
	  'category': 'Constants',
	  'syntax': ['LOG2E'],
	  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
	  'examples': ['LOG2E', 'log(e, 2)'],
	  'seealso': []
	};

	var LOG10E = {
	  'name': 'LOG10E',
	  'category': 'Constants',
	  'syntax': ['LOG10E'],
	  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
	  'examples': ['LOG10E', 'log(e, 10)'],
	  'seealso': []
	};

	var _NaN = {
	  'name': 'NaN',
	  'category': 'Constants',
	  'syntax': ['NaN'],
	  'description': 'Not a number',
	  'examples': ['NaN', '0 / 0'],
	  'seealso': []
	};

	var _null = {
	  'name': 'null',
	  'category': 'Constants',
	  'syntax': ['null'],
	  'description': 'Value null',
	  'examples': ['null'],
	  'seealso': ['true', 'false']
	};

	var pi = {
	  'name': 'pi',
	  'category': 'Constants',
	  'syntax': ['pi'],
	  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
	  'examples': ['pi', 'sin(pi/2)'],
	  'seealso': ['tau']
	};

	var phi = {
	  'name': 'phi',
	  'category': 'Constants',
	  'syntax': ['phi'],
	  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
	  'examples': ['phi'],
	  'seealso': []
	};

	var SQRT1_2 = {
	  'name': 'SQRT1_2',
	  'category': 'Constants',
	  'syntax': ['SQRT1_2'],
	  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
	  'examples': ['SQRT1_2', 'sqrt(1/2)'],
	  'seealso': []
	};

	var SQRT2 = {
	  'name': 'SQRT2',
	  'category': 'Constants',
	  'syntax': ['SQRT2'],
	  'description': 'Returns the square root of 2, approximately equal to 1.414',
	  'examples': ['SQRT2', 'sqrt(2)'],
	  'seealso': []
	};

	var tau = {
	  'name': 'tau',
	  'category': 'Constants',
	  'syntax': ['tau'],
	  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
	  'examples': ['tau', '2 * pi'],
	  'seealso': ['pi']
	};

	var _true = {
	  'name': 'true',
	  'category': 'Constants',
	  'syntax': ['true'],
	  'description': 'Boolean value true',
	  'examples': ['true'],
	  'seealso': ['false']
	};

	var version$1 = {
	  'name': 'version',
	  'category': 'Constants',
	  'syntax': ['version'],
	  'description': 'A string with the version number of math.js',
	  'examples': ['version'],
	  'seealso': []
	};

	var derivative$1 = {
	  'name': 'derivative',
	  'category': 'Algebra',
	  'syntax': ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
	  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
	  'examples': ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.eval({x: 3})'],
	  'seealso': ['simplify', 'parse', 'eval']
	};

	var lsolve$1 = {
	  'name': 'lsolve',
	  'category': 'Algebra',
	  'syntax': ['x=lsolve(L, b)'],
	  'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
	  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
	  'seealso': ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
	};

	var lup$1 = {
	  'name': 'lup',
	  'category': 'Algebra',
	  'syntax': ['lup(m)'],
	  'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
	  'examples': ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
	  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
	};

	var lusolve$1 = {
	  'name': 'lusolve',
	  'category': 'Algebra',
	  'syntax': ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
	  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
	  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
	  'seealso': ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
	};

	var simplify$1 = {
	  'name': 'simplify',
	  'category': 'Algebra',
	  'syntax': ['simplify(expr)', 'simplify(expr, rules)'],
	  'description': 'Simplify an expression tree.',
	  'examples': ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.eval({x: 2})'],
	  'seealso': ['derivative', 'parse', 'eval']
	};

	var rationalize$1 = {
	  'name': 'rationalize',
	  'category': 'Algebra',
	  'syntax': ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
	  'description': 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
	  'examples': ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
	  'seealso': ['simplify']
	};

	var slu$1 = {
	  'name': 'slu',
	  'category': 'Algebra',
	  'syntax': ['slu(A, order, threshold)'],
	  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
	  'examples': ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
	  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
	};

	var usolve$1 = {
	  'name': 'usolve',
	  'category': 'Algebra',
	  'syntax': ['x=usolve(U, b)'],
	  'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
	  'examples': ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
	  'seealso': ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
	};

	var qr$1 = {
	  'name': 'qr',
	  'category': 'Algebra',
	  'syntax': ['qr(A)'],
	  'description': 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
	  'examples': ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
	  'seealso': ['lup', 'slu', 'matrix']
	};

	var abs$1 = {
	  'name': 'abs',
	  'category': 'Arithmetic',
	  'syntax': ['abs(x)'],
	  'description': 'Compute the absolute value.',
	  'examples': ['abs(3.5)', 'abs(-4.2)'],
	  'seealso': ['sign']
	};

	var add$1 = {
	  'name': 'add',
	  'category': 'Operators',
	  'syntax': ['x + y', 'add(x, y)'],
	  'description': 'Add two values.',
	  'examples': ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
	  'seealso': ['subtract']
	};

	var cbrt$1 = {
	  'name': 'cbrt',
	  'category': 'Arithmetic',
	  'syntax': ['cbrt(x)', 'cbrt(x, allRoots)'],
	  'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
	  'examples': ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
	  'seealso': ['square', 'sqrt', 'cube', 'multiply']
	};

	var ceil$1 = {
	  'name': 'ceil',
	  'category': 'Arithmetic',
	  'syntax': ['ceil(x)'],
	  'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
	  'examples': ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
	  'seealso': ['floor', 'fix', 'round']
	};

	var cube$1 = {
	  'name': 'cube',
	  'category': 'Arithmetic',
	  'syntax': ['cube(x)'],
	  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
	  'examples': ['cube(2)', '2^3', '2 * 2 * 2'],
	  'seealso': ['multiply', 'square', 'pow']
	};

	var divide$1 = {
	  'name': 'divide',
	  'category': 'Operators',
	  'syntax': ['x / y', 'divide(x, y)'],
	  'description': 'Divide two values.',
	  'examples': ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
	  'seealso': ['multiply']
	};

	var dotDivide$1 = {
	  'name': 'dotDivide',
	  'category': 'Operators',
	  'syntax': ['x ./ y', 'dotDivide(x, y)'],
	  'description': 'Divide two values element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
	  'seealso': ['multiply', 'dotMultiply', 'divide']
	};

	var dotMultiply$1 = {
	  'name': 'dotMultiply',
	  'category': 'Operators',
	  'syntax': ['x .* y', 'dotMultiply(x, y)'],
	  'description': 'Multiply two values element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
	  'seealso': ['multiply', 'divide', 'dotDivide']
	};

	var dotPow$1 = {
	  'name': 'dotpow',
	  'category': 'Operators',
	  'syntax': ['x .^ y', 'dotpow(x, y)'],
	  'description': 'Calculates the power of x to y element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
	  'seealso': ['pow']
	};

	var exp$1 = {
	  'name': 'exp',
	  'category': 'Arithmetic',
	  'syntax': ['exp(x)'],
	  'description': 'Calculate the exponent of a value.',
	  'examples': ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
	  'seealso': ['expm', 'expm1', 'pow', 'log']
	};

	var expm$1 = {
	  'name': 'expm',
	  'category': 'Arithmetic',
	  'syntax': ['exp(x)'],
	  'description': 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
	  'examples': ['expm([[0,2],[0,0]])'],
	  'seealso': ['exp']
	};

	var expm1$1 = {
	  'name': 'expm1',
	  'category': 'Arithmetic',
	  'syntax': ['expm1(x)'],
	  'description': 'Calculate the value of subtracting 1 from the exponential value.',
	  'examples': ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
	  'seealso': ['exp', 'pow', 'log']
	};

	var fix$1 = {
	  'name': 'fix',
	  'category': 'Arithmetic',
	  'syntax': ['fix(x)'],
	  'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
	  'examples': ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
	  'seealso': ['ceil', 'floor', 'round']
	};

	var floor$1 = {
	  'name': 'floor',
	  'category': 'Arithmetic',
	  'syntax': ['floor(x)'],
	  'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
	  'examples': ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
	  'seealso': ['ceil', 'fix', 'round']
	};

	var gcd$1 = {
	  'name': 'gcd',
	  'category': 'Arithmetic',
	  'syntax': ['gcd(a, b)', 'gcd(a, b, c, ...)'],
	  'description': 'Compute the greatest common divisor.',
	  'examples': ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
	  'seealso': ['lcm', 'xgcd']
	};

	var hypot$1 = {
	  'name': 'hypot',
	  'category': 'Arithmetic',
	  'syntax': ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
	  'description': 'Calculate the hypotenusa of a list with values. ',
	  'examples': ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
	  'seealso': ['abs', 'norm']
	};

	var lcm$1 = {
	  'name': 'lcm',
	  'category': 'Arithmetic',
	  'syntax': ['lcm(x, y)'],
	  'description': 'Compute the least common multiple.',
	  'examples': ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
	  'seealso': ['gcd']
	};

	var log$1 = {
	  'name': 'log',
	  'category': 'Arithmetic',
	  'syntax': ['log(x)', 'log(x, base)'],
	  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
	  'examples': ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
	  'seealso': ['exp', 'log1p', 'log2', 'log10']
	};

	var log2$1 = {
	  'name': 'log2',
	  'category': 'Arithmetic',
	  'syntax': ['log2(x)'],
	  'description': 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
	  'examples': ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
	  'seealso': ['exp', 'log1p', 'log', 'log10']
	};

	var log1p$1 = {
	  'name': 'log1p',
	  'category': 'Arithmetic',
	  'syntax': ['log1p(x)', 'log1p(x, base)'],
	  'description': 'Calculate the logarithm of a `value+1`',
	  'examples': ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
	  'seealso': ['exp', 'log', 'log2', 'log10']
	};

	var log10$1 = {
	  'name': 'log10',
	  'category': 'Arithmetic',
	  'syntax': ['log10(x)'],
	  'description': 'Compute the 10-base logarithm of a value.',
	  'examples': ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
	  'seealso': ['exp', 'log']
	};

	var mod$1 = {
	  'name': 'mod',
	  'category': 'Operators',
	  'syntax': ['x % y', 'x mod y', 'mod(x, y)'],
	  'description': 'Calculates the modulus, the remainder of an integer division.',
	  'examples': ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
	  'seealso': ['divide']
	};

	var multiply$1 = {
	  'name': 'multiply',
	  'category': 'Operators',
	  'syntax': ['x * y', 'multiply(x, y)'],
	  'description': 'multiply two values.',
	  'examples': ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
	  'seealso': ['divide']
	};

	var norm$1 = {
	  'name': 'norm',
	  'category': 'Arithmetic',
	  'syntax': ['norm(x)', 'norm(x, p)'],
	  'description': 'Calculate the norm of a number, vector or matrix.',
	  'examples': ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
	};

	var nthRoot$1 = {
	  'name': 'nthRoot',
	  'category': 'Arithmetic',
	  'syntax': ['nthRoot(a)', 'nthRoot(a, root)'],
	  'description': 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
	  'examples': ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
	  'seealso': ['nthRoots', 'pow', 'sqrt']
	};

	var nthRoots$1 = {
	  'name': 'nthRoots',
	  'category': 'Arithmetic',
	  'syntax': ['nthRoots(A)', 'nthRoots(A, root)'],
	  'description': '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
	  'examples': ['nthRoots(1)', 'nthRoots(1, 3)'],
	  'seealso': ['sqrt', 'pow', 'nthRoot']
	};

	var pow$1 = {
	  'name': 'pow',
	  'category': 'Operators',
	  'syntax': ['x ^ y', 'pow(x, y)'],
	  'description': 'Calculates the power of x to y, x^y.',
	  'examples': ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
	  'seealso': ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
	};

	var round$1 = {
	  'name': 'round',
	  'category': 'Arithmetic',
	  'syntax': ['round(x)', 'round(x, n)'],
	  'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
	  'examples': ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
	  'seealso': ['ceil', 'floor', 'fix']
	};

	var sign$3 = {
	  'name': 'sign',
	  'category': 'Arithmetic',
	  'syntax': ['sign(x)'],
	  'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
	  'examples': ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
	  'seealso': ['abs']
	};

	var sqrt$1 = {
	  'name': 'sqrt',
	  'category': 'Arithmetic',
	  'syntax': ['sqrt(x)'],
	  'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',
	  'examples': ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
	  'seealso': ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
	};

	var sqrtm$1 = {
	  'name': 'sqrtm',
	  'category': 'Arithmetic',
	  'syntax': ['sqrtm(x)'],
	  'description': 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
	  'examples': ['sqrtm([[1, 2], [3, 4]])'],
	  'seealso': ['sqrt', 'abs', 'square', 'multiply']
	};

	var square$1 = {
	  'name': 'square',
	  'category': 'Arithmetic',
	  'syntax': ['square(x)'],
	  'description': 'Compute the square of a value. The square of x is x * x.',
	  'examples': ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
	  'seealso': ['multiply', 'pow', 'sqrt', 'cube']
	};

	var subtract$1 = {
	  'name': 'subtract',
	  'category': 'Operators',
	  'syntax': ['x - y', 'subtract(x, y)'],
	  'description': 'subtract two values.',
	  'examples': ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
	  'seealso': ['add']
	};

	var unaryMinus$1 = {
	  'name': 'unaryMinus',
	  'category': 'Operators',
	  'syntax': ['-x', 'unaryMinus(x)'],
	  'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',
	  'examples': ['-4.5', '-(-5.6)', '-"22"'],
	  'seealso': ['add', 'subtract', 'unaryPlus']
	};

	var unaryPlus$1 = {
	  'name': 'unaryPlus',
	  'category': 'Operators',
	  'syntax': ['+x', 'unaryPlus(x)'],
	  'description': 'Converts booleans and strings to numbers.',
	  'examples': ['+true', '+"2"'],
	  'seealso': ['add', 'subtract', 'unaryMinus']
	};

	var xgcd$1 = {
	  'name': 'xgcd',
	  'category': 'Arithmetic',
	  'syntax': ['xgcd(a, b)'],
	  'description': 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
	  'examples': ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
	  'seealso': ['gcd', 'lcm']
	};

	var bitAnd$2 = {
	  'name': 'bitAnd',
	  'category': 'Bitwise',
	  'syntax': ['x & y', 'bitAnd(x, y)'],
	  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
	  'examples': ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
	  'seealso': ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var bitNot$2 = {
	  'name': 'bitNot',
	  'category': 'Bitwise',
	  'syntax': ['~x', 'bitNot(x)'],
	  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
	  'examples': ['~1', '~2', 'bitNot([2, -3, 4])'],
	  'seealso': ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var bitOr$2 = {
	  'name': 'bitOr',
	  'category': 'Bitwise',
	  'syntax': ['x | y', 'bitOr(x, y)'],
	  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
	  'examples': ['5 | 3', 'bitOr([1, 2, 3], 4)'],
	  'seealso': ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var bitXor$2 = {
	  'name': 'bitXor',
	  'category': 'Bitwise',
	  'syntax': ['bitXor(x, y)'],
	  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
	  'examples': ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var leftShift$2 = {
	  'name': 'leftShift',
	  'category': 'Bitwise',
	  'syntax': ['x << y', 'leftShift(x, y)'],
	  'description': 'Bitwise left logical shift of a value x by y number of bits.',
	  'examples': ['4 << 1', '8 >> 1'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
	};

	var rightArithShift$2 = {
	  'name': 'rightArithShift',
	  'category': 'Bitwise',
	  'syntax': ['x >> y', 'rightArithShift(x, y)'],
	  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
	  'examples': ['8 >> 1', '4 << 1', '-12 >> 2'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
	};

	var rightLogShift$1 = {
	  'name': 'rightLogShift',
	  'category': 'Bitwise',
	  'syntax': ['x >>> y', 'rightLogShift(x, y)'],
	  'description': 'Bitwise right logical shift of a value x by y number of bits.',
	  'examples': ['8 >>> 1', '4 << 1', '-12 >>> 2'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
	};

	var bellNumbers$1 = {
	  'name': 'bellNumbers',
	  'category': 'Combinatorics',
	  'syntax': ['bellNumbers(n)'],
	  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': ['bellNumbers(3)', 'bellNumbers(8)'],
	  'seealso': ['stirlingS2']
	};

	var catalan$1 = {
	  'name': 'catalan',
	  'category': 'Combinatorics',
	  'syntax': ['catalan(n)'],
	  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': ['catalan(3)', 'catalan(8)'],
	  'seealso': ['bellNumbers']
	};

	var composition$1 = {
	  'name': 'composition',
	  'category': 'Combinatorics',
	  'syntax': ['composition(n, k)'],
	  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
	  'examples': ['composition(5, 3)'],
	  'seealso': ['combinations']
	};

	var stirlingS2$1 = {
	  'name': 'stirlingS2',
	  'category': 'Combinatorics',
	  'syntax': ['stirlingS2(n, k)'],
	  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
	  'examples': ['stirlingS2(5, 3)'],
	  'seealso': ['bellNumbers']
	};

	var config$1 = {
	  'name': 'config',
	  'category': 'Core',
	  'syntax': ['config()', 'config(options)'],
	  'description': 'Get configuration or change configuration.',
	  'examples': ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
	  'seealso': []
	};

	var _import$1 = {
	  'name': 'import',
	  'category': 'Core',
	  'syntax': ['import(functions)', 'import(functions, options)'],
	  'description': 'Import functions or constants from an object.',
	  'examples': ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
	  'seealso': []
	};

	var typed$1 = {
	  'name': 'typed',
	  'category': 'Core',
	  'syntax': ['typed(signatures)', 'typed(name, signatures)'],
	  'description': 'Create a typed function.',
	  'examples': ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
	  'seealso': []
	};

	var arg$1 = {
	  'name': 'arg',
	  'category': 'Complex',
	  'syntax': ['arg(x)'],
	  'description': 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
	  'examples': ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
	  'seealso': ['re', 'im', 'conj', 'abs']
	};

	var conj$1 = {
	  'name': 'conj',
	  'category': 'Complex',
	  'syntax': ['conj(x)'],
	  'description': 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
	  'examples': ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
	  'seealso': ['re', 'im', 'abs', 'arg']
	};

	var re$1 = {
	  'name': 're',
	  'category': 'Complex',
	  'syntax': ['re(x)'],
	  'description': 'Get the real part of a complex number.',
	  'examples': ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
	  'seealso': ['im', 'conj', 'abs', 'arg']
	};

	var im$1 = {
	  'name': 'im',
	  'category': 'Complex',
	  'syntax': ['im(x)'],
	  'description': 'Get the imaginary part of a complex number.',
	  'examples': ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
	  'seealso': ['re', 'conj', 'abs', 'arg']
	};

	var _eval = {
	  'name': 'eval',
	  'category': 'Expression',
	  'syntax': ['eval(expression)', 'eval([expr1, expr2, expr3, ...])'],
	  'description': 'Evaluate an expression or an array with expressions.',
	  'examples': ['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'],
	  'seealso': []
	};

	var help = {
	  'name': 'help',
	  'category': 'Expression',
	  'syntax': ['help(object)', 'help(string)'],
	  'description': 'Display documentation on a function or data type.',
	  'examples': ['help(sqrt)', 'help("complex")'],
	  'seealso': []
	};

	var distance$1 = {
	  'name': 'distance',
	  'category': 'Geometry',
	  'syntax': ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2])'],
	  'description': 'Calculates the Euclidean distance between two points.',
	  'examples': ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
	  'seealso': []
	};

	var intersect$1 = {
	  'name': 'intersect',
	  'category': 'Geometry',
	  'syntax': ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
	  'description': 'Computes the intersection point of lines and/or planes.',
	  'examples': ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
	  'seealso': []
	};

	var and$1 = {
	  'name': 'and',
	  'category': 'Logical',
	  'syntax': ['x and y', 'and(x, y)'],
	  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
	  'examples': ['true and false', 'true and true', '2 and 4'],
	  'seealso': ['not', 'or', 'xor']
	};

	var not$1 = {
	  'name': 'not',
	  'category': 'Logical',
	  'syntax': ['not x', 'not(x)'],
	  'description': 'Logical not. Flips the boolean value of given argument.',
	  'examples': ['not true', 'not false', 'not 2', 'not 0'],
	  'seealso': ['and', 'or', 'xor']
	};

	var or$1 = {
	  'name': 'or',
	  'category': 'Logical',
	  'syntax': ['x or y', 'or(x, y)'],
	  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
	  'examples': ['true or false', 'false or false', '0 or 4'],
	  'seealso': ['not', 'and', 'xor']
	};

	var xor$1 = {
	  'name': 'xor',
	  'category': 'Logical',
	  'syntax': ['x xor y', 'xor(x, y)'],
	  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
	  'examples': ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
	  'seealso': ['not', 'and', 'or']
	};

	var concat$1 = {
	  'name': 'concat',
	  'category': 'Matrix',
	  'syntax': ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
	  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
	  'examples': ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
	  'seealso': ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var cross$1 = {
	  'name': 'cross',
	  'category': 'Matrix',
	  'syntax': ['cross(A, B)'],
	  'description': 'Calculate the cross product for two vectors in three dimensional space.',
	  'examples': ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
	  'seealso': ['multiply', 'dot']
	};

	var ctranspose$1 = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': ['x\'', 'ctranspose(x)'],
	  'description': 'Complex Conjugate and Transpose a matrix',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
	};

	var det$1 = {
	  'name': 'det',
	  'category': 'Matrix',
	  'syntax': ['det(x)'],
	  'description': 'Calculate the determinant of a matrix',
	  'examples': ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
	  'seealso': ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var diag$1 = {
	  'name': 'diag',
	  'category': 'Matrix',
	  'syntax': ['diag(x)', 'diag(x, k)'],
	  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
	  'examples': ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
	  'seealso': ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var dot$1 = {
	  'name': 'dot',
	  'category': 'Matrix',
	  'syntax': ['dot(A, B)', 'A * B'],
	  'description': 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
	  'examples': ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
	  'seealso': ['multiply', 'cross']
	};

	var identity$1 = {
	  'name': 'identity',
	  'category': 'Matrix',
	  'syntax': ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
	  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
	  'examples': ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var filter$1 = {
	  'name': 'filter',
	  'category': 'Matrix',
	  'syntax': ['filter(x, test)'],
	  'description': 'Filter items in a matrix.',
	  'examples': ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
	  'seealso': ['sort', 'map', 'forEach']
	};

	var flatten$g = {
	  'name': 'flatten',
	  'category': 'Matrix',
	  'syntax': ['flatten(x)'],
	  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
	  'seealso': ['concat', 'resize', 'size', 'squeeze']
	};

	var forEach$3 = {
	  'name': 'forEach',
	  'category': 'Matrix',
	  'syntax': ['forEach(x, callback)'],
	  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
	  'examples': ['forEach([1, 2, 3], function(val) { console.log(val) })'],
	  'seealso': ['map', 'sort', 'filter']
	};

	var inv$1 = {
	  'name': 'inv',
	  'category': 'Matrix',
	  'syntax': ['inv(x)'],
	  'description': 'Calculate the inverse of a matrix',
	  'examples': ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var kron$1 = {
	  'name': 'kron',
	  'category': 'Matrix',
	  'syntax': ['kron(x, y)'],
	  'description': 'Calculates the kronecker product of 2 matrices or vectors.',
	  'examples': ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
	  'seealso': ['multiply', 'dot', 'cross']
	};

	var map$6 = {
	  'name': 'map',
	  'category': 'Matrix',
	  'syntax': ['map(x, callback)'],
	  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
	  'examples': ['map([1, 2, 3], square)'],
	  'seealso': ['filter', 'forEach']
	};

	var ones$1 = {
	  'name': 'ones',
	  'category': 'Matrix',
	  'syntax': ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
	  'description': 'Create a matrix containing ones.',
	  'examples': ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var partitionSelect$1 = {
	  'name': 'partitionSelect',
	  'category': 'Matrix',
	  'syntax': ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
	  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
	  'examples': ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
	  'seealso': ['sort']
	};

	var range$1 = {
	  'name': 'range',
	  'category': 'Type',
	  'syntax': ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
	  'description': 'Create a range. Lower bound of the range is included, upper bound is excluded.',
	  'examples': ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var resize$3 = {
	  'name': 'resize',
	  'category': 'Matrix',
	  'syntax': ['resize(x, size)', 'resize(x, size, defaultValue)'],
	  'description': 'Resize a matrix.',
	  'examples': ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
	  'seealso': ['size', 'subset', 'squeeze', 'reshape']
	};

	var reshape$1 = {
	  'name': 'reshape',
	  'category': 'Matrix',
	  'syntax': ['reshape(x, sizes)'],
	  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',
	  'examples': ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
	  'seealso': ['size', 'squeeze', 'resize']
	};

	var size$6 = {
	  'name': 'size',
	  'category': 'Matrix',
	  'syntax': ['size(x)'],
	  'description': 'Calculate the size of a matrix.',
	  'examples': ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var sort$1 = {
	  'name': 'sort',
	  'category': 'Matrix',
	  'syntax': ['sort(x)', 'sort(x, compare)'],
	  'description': 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
	  'examples': ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
	  'seealso': ['map', 'filter', 'forEach']
	};

	var squeeze$1 = {
	  'name': 'squeeze',
	  'category': 'Matrix',
	  'syntax': ['squeeze(x)'],
	  'description': 'Remove inner and outer singleton dimensions from a matrix.',
	  'examples': ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
	};

	var subset$1 = {
	  'name': 'subset',
	  'category': 'Matrix',
	  'syntax': ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
	  'description': 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
	  'examples': ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
	};

	var trace$1 = {
	  'name': 'trace',
	  'category': 'Matrix',
	  'syntax': ['trace(A)'],
	  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
	  'examples': ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
	};

	var transpose$1 = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': ['x\'', 'transpose(x)'],
	  'description': 'Transpose a matrix',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
	};

	var zeros$1 = {
	  'name': 'zeros',
	  'category': 'Matrix',
	  'syntax': ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
	  'description': 'Create a matrix containing zeros.',
	  'examples': ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
	};

	var combinations$1 = {
	  'name': 'combinations',
	  'category': 'Probability',
	  'syntax': ['combinations(n, k)'],
	  'description': 'Compute the number of combinations of n items taken k at a time',
	  'examples': ['combinations(7, 5)'],
	  'seealso': ['permutations', 'factorial']
	};

	var factorial$1 = {
	  'name': 'factorial',
	  'category': 'Probability',
	  'syntax': ['n!', 'factorial(n)'],
	  'description': 'Compute the factorial of a value',
	  'examples': ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
	  'seealso': ['combinations', 'permutations', 'gamma']
	};

	var gamma$1 = {
	  'name': 'gamma',
	  'category': 'Probability',
	  'syntax': ['gamma(n)'],
	  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
	  'examples': ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
	  'seealso': ['factorial']
	};

	var kldivergence$1 = {
	  'name': 'kldivergence',
	  'category': 'Probability',
	  'syntax': ['kldivergence(x, y)'],
	  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
	  'examples': ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
	  'seealso': []
	};

	var multinomial$1 = {
	  'name': 'multinomial',
	  'category': 'Probability',
	  'syntax': ['multinomial(A)'],
	  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
	  'examples': ['multinomial([1, 2, 1])'],
	  'seealso': ['combinations', 'factorial']
	};

	var permutations$1 = {
	  'name': 'permutations',
	  'category': 'Probability',
	  'syntax': ['permutations(n)', 'permutations(n, k)'],
	  'description': 'Compute the number of permutations of n items taken k at a time',
	  'examples': ['permutations(5)', 'permutations(5, 3)'],
	  'seealso': ['combinations', 'factorial']
	};

	var pickRandom$1 = {
	  'name': 'pickRandom',
	  'category': 'Probability',
	  'syntax': ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
	  'description': 'Pick a random entry from a given array.',
	  'examples': ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
	  'seealso': ['random', 'randomInt']
	};

	var random$1 = {
	  'name': 'random',
	  'category': 'Probability',
	  'syntax': ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
	  'description': 'Return a random number.',
	  'examples': ['random()', 'random(10, 20)', 'random([2, 3])'],
	  'seealso': ['pickRandom', 'randomInt']
	};

	var randomInt$1 = {
	  'name': 'randomInt',
	  'category': 'Probability',
	  'syntax': ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
	  'description': 'Return a random integer number',
	  'examples': ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
	  'seealso': ['pickRandom', 'random']
	};

	var compare$1 = {
	  'name': 'compare',
	  'category': 'Relational',
	  'syntax': ['compare(x, y)'],
	  'description': 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
	  'examples': ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
	};

	var compareNatural$1 = {
	  'name': 'compareNatural',
	  'category': 'Relational',
	  'syntax': ['compareNatural(x, y)'],
	  'description': 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
	  'examples': ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
	};

	var compareText$1 = {
	  'name': 'compareText',
	  'category': 'Relational',
	  'syntax': ['compareText(x, y)'],
	  'description': 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
	  'examples': ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
	  'seealso': ['compare', 'compareNatural']
	};

	var deepEqual$2 = {
	  'name': 'deepEqual',
	  'category': 'Relational',
	  'syntax': ['deepEqual(x, y)'],
	  'description': 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
	  'examples': ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
	  'seealso': ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
	};

	var equal$1 = {
	  'name': 'equal',
	  'category': 'Relational',
	  'syntax': ['x == y', 'equal(x, y)'],
	  'description': 'Check equality of two values. Returns true if the values are equal, and false if not.',
	  'examples': ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
	  'seealso': ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
	};

	var equalText$1 = {
	  'name': 'equalText',
	  'category': 'Relational',
	  'syntax': ['equalText(x, y)'],
	  'description': 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
	  'examples': ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
	  'seealso': ['compare', 'compareNatural', 'compareText', 'equal']
	};

	var larger$1 = {
	  'name': 'larger',
	  'category': 'Relational',
	  'syntax': ['x > y', 'larger(x, y)'],
	  'description': 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
	  'examples': ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
	};

	var largerEq$1 = {
	  'name': 'largerEq',
	  'category': 'Relational',
	  'syntax': ['x >= y', 'largerEq(x, y)'],
	  'description': 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
	  'examples': ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
	  'seealso': ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
	};

	var smaller$1 = {
	  'name': 'smaller',
	  'category': 'Relational',
	  'syntax': ['x < y', 'smaller(x, y)'],
	  'description': 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
	  'examples': ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
	  'seealso': ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
	};

	var smallerEq$1 = {
	  'name': 'smallerEq',
	  'category': 'Relational',
	  'syntax': ['x <= y', 'smallerEq(x, y)'],
	  'description': 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
	  'examples': ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
	  'seealso': ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
	};

	var unequal$1 = {
	  'name': 'unequal',
	  'category': 'Relational',
	  'syntax': ['x != y', 'unequal(x, y)'],
	  'description': 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
	  'examples': ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
	  'seealso': ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
	};

	var setCartesian$1 = {
	  'name': 'setCartesian',
	  'category': 'Set',
	  'syntax': ['setCartesian(set1, set2)'],
	  'description': 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setCartesian([1, 2], [3, 4])'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
	};

	var setDifference$1 = {
	  'name': 'setDifference',
	  'category': 'Set',
	  'syntax': ['setDifference(set1, set2)'],
	  'description': 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setUnion', 'setIntersect', 'setSymDifference']
	};

	var setDistinct$1 = {
	  'name': 'setDistinct',
	  'category': 'Set',
	  'syntax': ['setDistinct(set)'],
	  'description': 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setDistinct([1, 1, 1, 2, 2, 3])'],
	  'seealso': ['setMultiplicity']
	};

	var setIntersect$1 = {
	  'name': 'setIntersect',
	  'category': 'Set',
	  'syntax': ['setIntersect(set1, set2)'],
	  'description': 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setUnion', 'setDifference']
	};

	var setIsSubset$1 = {
	  'name': 'setIsSubset',
	  'category': 'Set',
	  'syntax': ['setIsSubset(set1, set2)'],
	  'description': 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference']
	};

	var setMultiplicity$1 = {
	  'name': 'setMultiplicity',
	  'category': 'Set',
	  'syntax': ['setMultiplicity(element, set)'],
	  'description': 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
	  'seealso': ['setDistinct', 'setSize']
	};

	var setPowerset$1 = {
	  'name': 'setPowerset',
	  'category': 'Set',
	  'syntax': ['setPowerset(set)'],
	  'description': 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setPowerset([1, 2, 3])'],
	  'seealso': ['setCartesian']
	};

	var setSize$1 = {
	  'name': 'setSize',
	  'category': 'Set',
	  'syntax': ['setSize(set)', 'setSize(set, unique)'],
	  'description': 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference']
	};

	var setSymDifference$1 = {
	  'name': 'setSymDifference',
	  'category': 'Set',
	  'syntax': ['setSymDifference(set1, set2)'],
	  'description': 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference']
	};

	var setUnion$1 = {
	  'name': 'setUnion',
	  'category': 'Set',
	  'syntax': ['setUnion(set1, set2)'],
	  'description': 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setIntersect', 'setDifference']
	};

	var erf$1 = {
	  'name': 'erf',
	  'category': 'Special',
	  'syntax': ['erf(x)'],
	  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
	  'examples': ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
	  'seealso': []
	};

	var mad$1 = {
	  'name': 'mad',
	  'category': 'Statistics',
	  'syntax': ['mad(a, b, c, ...)', 'mad(A)'],
	  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
	  'examples': ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
	  'seealso': ['mean', 'median', 'std', 'abs']
	};

	var max$1 = {
	  'name': 'max',
	  'category': 'Statistics',
	  'syntax': ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
	  'description': 'Compute the maximum value of a list of values.',
	  'examples': ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
	  'seealso': ['mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
	};

	var mean$1 = {
	  'name': 'mean',
	  'category': 'Statistics',
	  'syntax': ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
	  'description': 'Compute the arithmetic mean of a list of values.',
	  'examples': ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
	  'seealso': ['max', 'median', 'min', 'prod', 'std', 'sum', 'var']
	};

	var median$1 = {
	  'name': 'median',
	  'category': 'Statistics',
	  'syntax': ['median(a, b, c, ...)', 'median(A)'],
	  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
	  'examples': ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
	  'seealso': ['max', 'mean', 'min', 'prod', 'std', 'sum', 'var', 'quantileSeq']
	};

	var min$1 = {
	  'name': 'min',
	  'category': 'Statistics',
	  'syntax': ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
	  'description': 'Compute the minimum value of a list of values.',
	  'examples': ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
	  'seealso': ['max', 'mean', 'median', 'prod', 'std', 'sum', 'var']
	};

	var mode$1 = {
	  'name': 'mode',
	  'category': 'Statistics',
	  'syntax': ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
	  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
	  'examples': ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
	  'seealso': ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'var']
	};

	var prod$1 = {
	  'name': 'prod',
	  'category': 'Statistics',
	  'syntax': ['prod(a, b, c, ...)', 'prod(A)'],
	  'description': 'Compute the product of all values.',
	  'examples': ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'var']
	};

	var quantileSeq$1 = {
	  'name': 'quantileSeq',
	  'category': 'Statistics',
	  'syntax': ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
	  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
	  'examples': ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
	  'seealso': ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'var']
	};

	var std$1 = {
	  'name': 'std',
	  'category': 'Statistics',
	  'syntax': ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
	  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'var']
	};

	var sum$1 = {
	  'name': 'sum',
	  'category': 'Statistics',
	  'syntax': ['sum(a, b, c, ...)', 'sum(A)'],
	  'description': 'Compute the sum of all values.',
	  'examples': ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
	  'seealso': ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
	};

	var _var$1 = {
	  'name': 'var',
	  'category': 'Statistics',
	  'syntax': ['var(a, b, c, ...)', 'var(A)', 'var(A, normalization)'],
	  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': ['var(2, 4, 6)', 'var([2, 4, 6, 8])', 'var([2, 4, 6, 8], "uncorrected")', 'var([2, 4, 6, 8], "biased")', 'var([1, 2, 3; 4, 5, 6])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
	};

	var acos$1 = {
	  'name': 'acos',
	  'category': 'Trigonometry',
	  'syntax': ['acos(x)'],
	  'description': 'Compute the inverse cosine of a value in radians.',
	  'examples': ['acos(0.5)', 'acos(cos(2.3))'],
	  'seealso': ['cos', 'atan', 'asin']
	};

	var acosh$1 = {
	  'name': 'acosh',
	  'category': 'Trigonometry',
	  'syntax': ['acosh(x)'],
	  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
	  'examples': ['acosh(1.5)'],
	  'seealso': ['cosh', 'asinh', 'atanh']
	};

	var acot$1 = {
	  'name': 'acot',
	  'category': 'Trigonometry',
	  'syntax': ['acot(x)'],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
	  'seealso': ['cot', 'atan']
	};

	var acoth$1 = {
	  'name': 'acoth',
	  'category': 'Trigonometry',
	  'syntax': ['acoth(x)'],
	  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
	  'examples': ['acoth(2)', 'acoth(0.5)'],
	  'seealso': ['acsch', 'asech']
	};

	var acsc$1 = {
	  'name': 'acsc',
	  'category': 'Trigonometry',
	  'syntax': ['acsc(x)'],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
	  'seealso': ['csc', 'asin', 'asec']
	};

	var acsch$1 = {
	  'name': 'acsch',
	  'category': 'Trigonometry',
	  'syntax': ['acsch(x)'],
	  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
	  'examples': ['acsch(0.5)'],
	  'seealso': ['asech', 'acoth']
	};

	var asec$1 = {
	  'name': 'asec',
	  'category': 'Trigonometry',
	  'syntax': ['asec(x)'],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
	  'seealso': ['acos', 'acot', 'acsc']
	};

	var asech$1 = {
	  'name': 'asech',
	  'category': 'Trigonometry',
	  'syntax': ['asech(x)'],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': ['asech(0.5)'],
	  'seealso': ['acsch', 'acoth']
	};

	var asin$1 = {
	  'name': 'asin',
	  'category': 'Trigonometry',
	  'syntax': ['asin(x)'],
	  'description': 'Compute the inverse sine of a value in radians.',
	  'examples': ['asin(0.5)', 'asin(sin(0.5))'],
	  'seealso': ['sin', 'acos', 'atan']
	};

	var asinh$1 = {
	  'name': 'asinh',
	  'category': 'Trigonometry',
	  'syntax': ['asinh(x)'],
	  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
	  'examples': ['asinh(0.5)'],
	  'seealso': ['acosh', 'atanh']
	};

	var atan$1 = {
	  'name': 'atan',
	  'category': 'Trigonometry',
	  'syntax': ['atan(x)'],
	  'description': 'Compute the inverse tangent of a value in radians.',
	  'examples': ['atan(0.5)', 'atan(tan(0.5))'],
	  'seealso': ['tan', 'acos', 'asin']
	};

	var atanh$1 = {
	  'name': 'atanh',
	  'category': 'Trigonometry',
	  'syntax': ['atanh(x)'],
	  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
	  'examples': ['atanh(0.5)'],
	  'seealso': ['acosh', 'asinh']
	};

	var atan2$1 = {
	  'name': 'atan2',
	  'category': 'Trigonometry',
	  'syntax': ['atan2(y, x)'],
	  'description': 'Computes the principal value of the arc tangent of y/x in radians.',
	  'examples': ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
	  'seealso': ['sin', 'cos', 'tan']
	};

	var cos$1 = {
	  'name': 'cos',
	  'category': 'Trigonometry',
	  'syntax': ['cos(x)'],
	  'description': 'Compute the cosine of x in radians.',
	  'examples': ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
	  'seealso': ['acos', 'sin', 'tan']
	};

	var cosh$1 = {
	  'name': 'cosh',
	  'category': 'Trigonometry',
	  'syntax': ['cosh(x)'],
	  'description': 'Compute the hyperbolic cosine of x in radians.',
	  'examples': ['cosh(0.5)'],
	  'seealso': ['sinh', 'tanh', 'coth']
	};

	var cot$1 = {
	  'name': 'cot',
	  'category': 'Trigonometry',
	  'syntax': ['cot(x)'],
	  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
	  'examples': ['cot(2)', '1 / tan(2)'],
	  'seealso': ['sec', 'csc', 'tan']
	};

	var coth$1 = {
	  'name': 'coth',
	  'category': 'Trigonometry',
	  'syntax': ['coth(x)'],
	  'description': 'Compute the hyperbolic cotangent of x in radians.',
	  'examples': ['coth(2)', '1 / tanh(2)'],
	  'seealso': ['sech', 'csch', 'tanh']
	};

	var csc$1 = {
	  'name': 'csc',
	  'category': 'Trigonometry',
	  'syntax': ['csc(x)'],
	  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
	  'examples': ['csc(2)', '1 / sin(2)'],
	  'seealso': ['sec', 'cot', 'sin']
	};

	var csch$1 = {
	  'name': 'csch',
	  'category': 'Trigonometry',
	  'syntax': ['csch(x)'],
	  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
	  'examples': ['csch(2)', '1 / sinh(2)'],
	  'seealso': ['sech', 'coth', 'sinh']
	};

	var sec$1 = {
	  'name': 'sec',
	  'category': 'Trigonometry',
	  'syntax': ['sec(x)'],
	  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
	  'examples': ['sec(2)', '1 / cos(2)'],
	  'seealso': ['cot', 'csc', 'cos']
	};

	var sech$1 = {
	  'name': 'sech',
	  'category': 'Trigonometry',
	  'syntax': ['sech(x)'],
	  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
	  'examples': ['sech(2)', '1 / cosh(2)'],
	  'seealso': ['coth', 'csch', 'cosh']
	};

	var sin$1 = {
	  'name': 'sin',
	  'category': 'Trigonometry',
	  'syntax': ['sin(x)'],
	  'description': 'Compute the sine of x in radians.',
	  'examples': ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
	  'seealso': ['asin', 'cos', 'tan']
	};

	var sinh$1 = {
	  'name': 'sinh',
	  'category': 'Trigonometry',
	  'syntax': ['sinh(x)'],
	  'description': 'Compute the hyperbolic sine of x in radians.',
	  'examples': ['sinh(0.5)'],
	  'seealso': ['cosh', 'tanh']
	};

	var tan$1 = {
	  'name': 'tan',
	  'category': 'Trigonometry',
	  'syntax': ['tan(x)'],
	  'description': 'Compute the tangent of x in radians.',
	  'examples': ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
	  'seealso': ['atan', 'sin', 'cos']
	};

	var tanh$1 = {
	  'name': 'tanh',
	  'category': 'Trigonometry',
	  'syntax': ['tanh(x)'],
	  'description': 'Compute the hyperbolic tangent of x in radians.',
	  'examples': ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
	  'seealso': ['sinh', 'cosh']
	};

	var to$1 = {
	  'name': 'to',
	  'category': 'Units',
	  'syntax': ['x to unit', 'to(x, unit)'],
	  'description': 'Change the unit of a value.',
	  'examples': ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
	  'seealso': []
	};

	var clone$a = {
	  'name': 'clone',
	  'category': 'Utils',
	  'syntax': ['clone(x)'],
	  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
	  'examples': ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
	  'seealso': []
	};

	var format$9 = {
	  'name': 'format',
	  'category': 'Utils',
	  'syntax': ['format(value)', 'format(value, precision)'],
	  'description': 'Format a value of any type as string.',
	  'examples': ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
	  'seealso': ['print']
	};

	var _isNaN$1 = {
	  'name': 'isNaN',
	  'category': 'Utils',
	  'syntax': ['isNaN(x)'],
	  'description': 'Test whether a value is NaN (not a number)',
	  'examples': ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};

	var isInteger$r = {
	  'name': 'isInteger',
	  'category': 'Utils',
	  'syntax': ['isInteger(x)'],
	  'description': 'Test whether a value is an integer number.',
	  'examples': ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};

	var isNegative$1 = {
	  'name': 'isNegative',
	  'category': 'Utils',
	  'syntax': ['isNegative(x)'],
	  'description': 'Test whether a value is negative: smaller than zero.',
	  'examples': ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
	  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
	};

	var isNumeric$1 = {
	  'name': 'isNumeric',
	  'category': 'Utils',
	  'syntax': ['isNumeric(x)'],
	  'description': 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
	  'examples': ['isNumeric(2)', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric("3")', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
	  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
	};

	var isPositive$1 = {
	  'name': 'isPositive',
	  'category': 'Utils',
	  'syntax': ['isPositive(x)'],
	  'description': 'Test whether a value is positive: larger than zero.',
	  'examples': ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};

	var isPrime$1 = {
	  'name': 'isPrime',
	  'category': 'Utils',
	  'syntax': ['isPrime(x)'],
	  'description': 'Test whether a value is prime: has no divisors other than itself and one.',
	  'examples': ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};

	var isZero$1 = {
	  'name': 'isZero',
	  'category': 'Utils',
	  'syntax': ['isZero(x)'],
	  'description': 'Test whether a value is zero.',
	  'examples': ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
	};

	var _typeof$d = {
	  'name': 'typeof',
	  'category': 'Utils',
	  'syntax': ['typeof(x)'],
	  'description': 'Get the type of a variable.',
	  'examples': ['typeof(3.5)', 'typeof(2 - 4i)', 'typeof(45 deg)', 'typeof("hello world")'],
	  'seealso': []
	};

	function factory$4d(construction$$1, config, load, typed) {
	  var docs = {};

	  // construction functions
	  docs.bignumber = bignumber$2;
	  docs['boolean'] = boolean_1$2;
	  docs.complex = complex$6;
	  docs.createUnit = createUnit$1;
	  docs.fraction = fraction$4;
	  docs.index = construction;
	  docs.matrix = matrix$3;
	  docs.number = number$5;
	  docs.sparse = sparse$1;
	  docs.splitUnit = splitUnit$1;
	  docs.string = string$9;
	  docs.unit = unit$3;

	  // constants
	  docs.e = e;
	  docs.E = e;
	  docs['false'] = _false;
	  docs.i = i;
	  docs['Infinity'] = _Infinity;
	  docs.LN2 = LN2;
	  docs.LN10 = LN10;
	  docs.LOG2E = LOG2E;
	  docs.LOG10E = LOG10E;
	  docs.NaN = _NaN;
	  docs['null'] = _null;
	  docs.pi = pi;
	  docs.PI = pi;
	  docs.phi = phi;
	  docs.SQRT1_2 = SQRT1_2;
	  docs.SQRT2 = SQRT2;
	  docs.tau = tau;
	  docs['true'] = _true;
	  docs.version = version$1;

	  // physical constants
	  // TODO: more detailed docs for physical constants
	  docs.speedOfLight = { description: 'Speed of light in vacuum', examples: ['speedOfLight'] };
	  docs.gravitationConstant = { description: 'Newtonian constant of gravitation', examples: ['gravitationConstant'] };
	  docs.planckConstant = { description: 'Planck constant', examples: ['planckConstant'] };
	  docs.reducedPlanckConstant = { description: 'Reduced Planck constant', examples: ['reducedPlanckConstant'] };

	  docs.magneticConstant = { description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant'] };
	  docs.electricConstant = { description: 'Electric constant (vacuum permeability)', examples: ['electricConstant'] };
	  docs.vacuumImpedance = { description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance'] };
	  docs.coulomb = { description: 'Coulomb\'s constant', examples: ['coulomb'] };
	  docs.elementaryCharge = { description: 'Elementary charge', examples: ['elementaryCharge'] };
	  docs.bohrMagneton = { description: 'Borh magneton', examples: ['bohrMagneton'] };
	  docs.conductanceQuantum = { description: 'Conductance quantum', examples: ['conductanceQuantum'] };
	  docs.inverseConductanceQuantum = { description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']
	    // docs.josephson = {description: 'Josephson constant', examples: ['josephson']}
	  };docs.magneticFluxQuantum = { description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum'] };
	  docs.nuclearMagneton = { description: 'Nuclear magneton', examples: ['nuclearMagneton'] };
	  docs.klitzing = { description: 'Von Klitzing constant', examples: ['klitzing'] };

	  docs.bohrRadius = { description: 'Borh radius', examples: ['bohrRadius'] };
	  docs.classicalElectronRadius = { description: 'Classical electron radius', examples: ['classicalElectronRadius'] };
	  docs.electronMass = { description: 'Electron mass', examples: ['electronMass'] };
	  docs.fermiCoupling = { description: 'Fermi coupling constant', examples: ['fermiCoupling'] };
	  docs.fineStructure = { description: 'Fine-structure constant', examples: ['fineStructure'] };
	  docs.hartreeEnergy = { description: 'Hartree energy', examples: ['hartreeEnergy'] };
	  docs.protonMass = { description: 'Proton mass', examples: ['protonMass'] };
	  docs.deuteronMass = { description: 'Deuteron Mass', examples: ['deuteronMass'] };
	  docs.neutronMass = { description: 'Neutron mass', examples: ['neutronMass'] };
	  docs.quantumOfCirculation = { description: 'Quantum of circulation', examples: ['quantumOfCirculation'] };
	  docs.rydberg = { description: 'Rydberg constant', examples: ['rydberg'] };
	  docs.thomsonCrossSection = { description: 'Thomson cross section', examples: ['thomsonCrossSection'] };
	  docs.weakMixingAngle = { description: 'Weak mixing angle', examples: ['weakMixingAngle'] };
	  docs.efimovFactor = { description: 'Efimov factor', examples: ['efimovFactor'] };

	  docs.atomicMass = { description: 'Atomic mass constant', examples: ['atomicMass'] };
	  docs.avogadro = { description: 'Avogadro\'s number', examples: ['avogadro'] };
	  docs.boltzmann = { description: 'Boltzmann constant', examples: ['boltzmann'] };
	  docs.faraday = { description: 'Faraday constant', examples: ['faraday'] };
	  docs.firstRadiation = { description: 'First radiation constant', examples: ['firstRadiation'] };
	  docs.loschmidt = { description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt'] };
	  docs.gasConstant = { description: 'Gas constant', examples: ['gasConstant'] };
	  docs.molarPlanckConstant = { description: 'Molar Planck constant', examples: ['molarPlanckConstant'] };
	  docs.molarVolume = { description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume'] };
	  docs.sackurTetrode = { description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode'] };
	  docs.secondRadiation = { description: 'Second radiation constant', examples: ['secondRadiation'] };
	  docs.stefanBoltzmann = { description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann'] };
	  docs.wienDisplacement = { description: 'Wien displacement law constant', examples: ['wienDisplacement']
	    // docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']}

	  };docs.molarMass = { description: 'Molar mass constant', examples: ['molarMass'] };
	  docs.molarMassC12 = { description: 'Molar mass constant of carbon-12', examples: ['molarMassC12'] };
	  docs.gravity = { description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity'] };

	  docs.planckLength = { description: 'Planck length', examples: ['planckLength'] };
	  docs.planckMass = { description: 'Planck mass', examples: ['planckMass'] };
	  docs.planckTime = { description: 'Planck time', examples: ['planckTime'] };
	  docs.planckCharge = { description: 'Planck charge', examples: ['planckCharge'] };
	  docs.planckTemperature = { description: 'Planck temperature', examples: ['planckTemperature']

	    // functions - algebra
	  };docs.derivative = derivative$1;
	  docs.lsolve = lsolve$1;
	  docs.lup = lup$1;
	  docs.lusolve = lusolve$1;
	  docs.simplify = simplify$1;
	  docs.rationalize = rationalize$1;
	  docs.slu = slu$1;
	  docs.usolve = usolve$1;
	  docs.qr = qr$1;

	  // functions - arithmetic
	  docs.abs = abs$1;
	  docs.add = add$1;
	  docs.cbrt = cbrt$1;
	  docs.ceil = ceil$1;
	  docs.cube = cube$1;
	  docs.divide = divide$1;
	  docs.dotDivide = dotDivide$1;
	  docs.dotMultiply = dotMultiply$1;
	  docs.dotPow = dotPow$1;
	  docs.exp = exp$1;
	  docs.expm = expm$1;
	  docs.expm1 = expm1$1;
	  docs.fix = fix$1;
	  docs.floor = floor$1;
	  docs.gcd = gcd$1;
	  docs.hypot = hypot$1;
	  docs.lcm = lcm$1;
	  docs.log = log$1;
	  docs.log2 = log2$1;
	  docs.log1p = log1p$1;
	  docs.log10 = log10$1;
	  docs.mod = mod$1;
	  docs.multiply = multiply$1;
	  docs.norm = norm$1;
	  docs.nthRoot = nthRoot$1;
	  docs.nthRoots = nthRoots$1;
	  docs.pow = pow$1;
	  docs.round = round$1;
	  docs.sign = sign$3;
	  docs.sqrt = sqrt$1;
	  docs.sqrtm = sqrtm$1;
	  docs.square = square$1;
	  docs.subtract = subtract$1;
	  docs.unaryMinus = unaryMinus$1;
	  docs.unaryPlus = unaryPlus$1;
	  docs.xgcd = xgcd$1;

	  // functions - bitwise
	  docs.bitAnd = bitAnd$2;
	  docs.bitNot = bitNot$2;
	  docs.bitOr = bitOr$2;
	  docs.bitXor = bitXor$2;
	  docs.leftShift = leftShift$2;
	  docs.rightArithShift = rightArithShift$2;
	  docs.rightLogShift = rightLogShift$1;

	  // functions - combinatorics
	  docs.bellNumbers = bellNumbers$1;
	  docs.catalan = catalan$1;
	  docs.composition = composition$1;
	  docs.stirlingS2 = stirlingS2$1;

	  // functions - core
	  docs['config'] = config$1;
	  docs['import'] = _import$1;
	  docs['typed'] = typed$1;

	  // functions - complex
	  docs.arg = arg$1;
	  docs.conj = conj$1;
	  docs.re = re$1;
	  docs.im = im$1;

	  // functions - expression
	  docs['eval'] = _eval;
	  docs.help = help;

	  // functions - geometry
	  docs.distance = distance$1;
	  docs.intersect = intersect$1;

	  // functions - logical
	  docs['and'] = and$1;
	  docs['not'] = not$1;
	  docs['or'] = or$1;
	  docs['xor'] = xor$1;

	  // functions - matrix
	  docs['concat'] = concat$1;
	  docs.cross = cross$1;
	  docs.ctranspose = ctranspose$1;
	  docs.det = det$1;
	  docs.diag = diag$1;
	  docs.dot = dot$1;
	  docs.identity = identity$1;
	  docs.filter = filter$1;
	  docs.flatten = flatten$g;
	  docs.forEach = forEach$3;
	  docs.inv = inv$1;
	  docs.kron = kron$1;
	  docs.map = map$6;
	  docs.ones = ones$1;
	  docs.partitionSelect = partitionSelect$1;
	  docs.range = range$1;
	  docs.resize = resize$3;
	  docs.reshape = reshape$1;
	  docs.size = size$6;
	  docs.sort = sort$1;
	  docs.squeeze = squeeze$1;
	  docs.subset = subset$1;
	  docs.trace = trace$1;
	  docs.transpose = transpose$1;
	  docs.zeros = zeros$1;

	  // functions - probability
	  docs.combinations = combinations$1;
	  // docs.distribution = require('./function/probability/distribution')
	  docs.factorial = factorial$1;
	  docs.gamma = gamma$1;
	  docs.kldivergence = kldivergence$1;
	  docs.multinomial = multinomial$1;
	  docs.permutations = permutations$1;
	  docs.pickRandom = pickRandom$1;
	  docs.random = random$1;
	  docs.randomInt = randomInt$1;

	  // functions - relational
	  docs.compare = compare$1;
	  docs.compareNatural = compareNatural$1;
	  docs.compareText = compareText$1;
	  docs.deepEqual = deepEqual$2;
	  docs['equal'] = equal$1;
	  docs.equalText = equalText$1;
	  docs.larger = larger$1;
	  docs.largerEq = largerEq$1;
	  docs.smaller = smaller$1;
	  docs.smallerEq = smallerEq$1;
	  docs.unequal = unequal$1;

	  // functions - set
	  docs.setCartesian = setCartesian$1;
	  docs.setDifference = setDifference$1;
	  docs.setDistinct = setDistinct$1;
	  docs.setIntersect = setIntersect$1;
	  docs.setIsSubset = setIsSubset$1;
	  docs.setMultiplicity = setMultiplicity$1;
	  docs.setPowerset = setPowerset$1;
	  docs.setSize = setSize$1;
	  docs.setSymDifference = setSymDifference$1;
	  docs.setUnion = setUnion$1;

	  // functions - special
	  docs.erf = erf$1;

	  // functions - statistics
	  docs.mad = mad$1;
	  docs.max = max$1;
	  docs.mean = mean$1;
	  docs.median = median$1;
	  docs.min = min$1;
	  docs.mode = mode$1;
	  docs.prod = prod$1;
	  docs.quantileSeq = quantileSeq$1;
	  docs.std = std$1;
	  docs.sum = sum$1;
	  docs['var'] = _var$1;

	  // functions - trigonometry
	  docs.acos = acos$1;
	  docs.acosh = acosh$1;
	  docs.acot = acot$1;
	  docs.acoth = acoth$1;
	  docs.acsc = acsc$1;
	  docs.acsch = acsch$1;
	  docs.asec = asec$1;
	  docs.asech = asech$1;
	  docs.asin = asin$1;
	  docs.asinh = asinh$1;
	  docs.atan = atan$1;
	  docs.atanh = atanh$1;
	  docs.atan2 = atan2$1;
	  docs.cos = cos$1;
	  docs.cosh = cosh$1;
	  docs.cot = cot$1;
	  docs.coth = coth$1;
	  docs.csc = csc$1;
	  docs.csch = csch$1;
	  docs.sec = sec$1;
	  docs.sech = sech$1;
	  docs.sin = sin$1;
	  docs.sinh = sinh$1;
	  docs.tan = tan$1;
	  docs.tanh = tanh$1;

	  // functions - units
	  docs.to = to$1;

	  // functions - utils
	  docs.clone = clone$a;
	  docs.format = format$9;
	  docs.isNaN = _isNaN$1;
	  docs.isInteger = isInteger$r;
	  docs.isNegative = isNegative$1;
	  docs.isNumeric = isNumeric$1;
	  docs.isPositive = isPositive$1;
	  docs.isPrime = isPrime$1;
	  docs.isZero = isZero$1;
	  // docs.print = require('./function/utils/print') // TODO: add documentation for print as soon as the parser supports objects.
	  docs['typeof'] = _typeof$d;

	  return docs;
	}

	var name$40 = 'docs';
	var path$O = 'expression';
	var factory_1$4d = factory$4d;

	var embeddedDocs = {
		name: name$40,
		path: path$O,
		factory: factory_1$4d
	};

	function factory$4e(type, config, load, typed) {
	  var parse$$1 = load(parse);

	  /**
	   * Parse and compile an expression.
	   * Returns a an object with a function `eval([scope])` to evaluate the
	   * compiled expression.
	   *
	   * Syntax:
	   *
	   *     math.compile(expr)                       // returns one node
	   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
	   *
	   * Examples:
	   *
	   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
	   *     code1.eval() // 5
	   *
	   *     let scope = {a: 3, b: 4}
	   *     const code2 = math.compile('a * b') // 12
	   *     code2.eval(scope) // 12
	   *     scope.a = 5
	   *     code2.eval(scope) // 20
	   *
	   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
	   *     nodes[2].eval() // 12
	   *
	   * See also:
	   *
	   *    parse, eval
	   *
	   * @param {string | string[] | Array | Matrix} expr
	   *            The expression to be compiled
	   * @return {{eval: Function} | Array.<{eval: Function}>} code
	   *            An object with the compiled expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function string(expr) {
	      return parse$$1(expr).compile();
	    },

	    'Array | Matrix': function ArrayMatrix(expr) {
	      return deepMap(expr, function (entry) {
	        return parse$$1(entry).compile();
	      });
	    }
	  });
	}

	var name$41 = 'compile';
	var factory_1$4e = factory$4e;

	var compile = {
		name: name$41,
		factory: factory_1$4e
	};

	function factory$4f(type, config, load, typed) {
	  var parse$$1 = load(parse);

	  /**
	   * Evaluate an expression.
	   *
	   * Note the evaluating arbitrary expressions may involve security risks,
	   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
	   *
	   * Syntax:
	   *
	   *     math.eval(expr)
	   *     math.eval(expr, scope)
	   *     math.eval([expr1, expr2, expr3, ...])
	   *     math.eval([expr1, expr2, expr3, ...], scope)
	   *
	   * Example:
	   *
	   *     math.eval('(2+3)/4')                // 1.25
	   *     math.eval('sqrt(3^2 + 4^2)')        // 5
	   *     math.eval('sqrt(-4)')               // 2i
	   *     math.eval(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
	   *
	   *     let scope = {a:3, b:4}
	   *     math.eval('a * b', scope)           // 12
	   *
	   * See also:
	   *
	   *    parse, compile
	   *
	   * @param {string | string[] | Matrix} expr   The expression to be evaluated
	   * @param {Object} [scope]                    Scope to read/write variables
	   * @return {*} The result of the expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function string(expr) {
	      var scope = {};
	      return parse$$1(expr).compile().eval(scope);
	    },

	    'string, Object': function stringObject(expr, scope) {
	      return parse$$1(expr).compile().eval(scope);
	    },

	    'Array | Matrix': function ArrayMatrix(expr) {
	      var scope = {};
	      return deepMap(expr, function (entry) {
	        return parse$$1(entry).compile().eval(scope);
	      });
	    },

	    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
	      return deepMap(expr, function (entry) {
	        return parse$$1(entry).compile().eval(scope);
	      });
	    }
	  });
	}

	var name$42 = 'eval';
	var factory_1$4f = factory$4f;

	var _eval$1 = {
		name: name$42,
		factory: factory_1$4f
	};

	var getSafeProperty$8 = customs.getSafeProperty;

	function factory$4g(type, config, load, typed, math) {
	  var docs = load(embeddedDocs);

	  /**
	   * Retrieve help on a function or data type.
	   * Help files are retrieved from the documentation in math.expression.docs.
	   *
	   * Syntax:
	   *
	   *    math.help(search)
	   *
	   * Examples:
	   *
	   *    console.log(math.help('sin').toString())
	   *    console.log(math.help(math.add).toString())
	   *    console.log(math.help(math.add).toJSON())
	   *
	   * @param {Function | string | Object} search   A function or function name
	   *                                              for which to get help
	   * @return {Help} A help object
	   */
	  return typed('help', {
	    'any': function any(search) {
	      var prop = void 0;
	      var name = search;

	      if (typeof search !== 'string') {
	        for (prop in math) {
	          // search in functions and constants
	          if (math.hasOwnProperty(prop) && search === math[prop]) {
	            name = prop;
	            break;
	          }
	        }

	        /* TODO: implement help for data types
	         if (!text) {
	         // search data type
	         for (prop in math.type) {
	         if (math.type.hasOwnProperty(prop)) {
	         if (search === math.type[prop]) {
	         text = prop
	         break
	         }
	         }
	         }
	         }
	         */
	      }

	      var doc = getSafeProperty$8(docs, name);
	      if (!doc) {
	        throw new Error('No documentation found on "' + name + '"');
	      }
	      return new type.Help(doc);
	    }
	  });
	}

	var math$g = true; // request access to the math namespace as 5th argument of the factory function
	var name$43 = 'help';
	var factory_1$4g = factory$4g;

	var help$1 = {
		math: math$g,
		name: name$43,
		factory: factory_1$4g
	};

	var extend$3 = object.extend;


	function factory$4h(type, config, load, typed, math) {
	  var _parse = load(parse);

	  /**
	   * @constructor Parser
	   * Parser contains methods to evaluate or parse expressions, and has a number
	   * of convenience methods to get, set, and remove variables from memory. Parser
	   * keeps a scope containing variables in memory, which is used for all
	   * evaluations.
	   *
	   * Methods:
	   *    const result = parser.eval(expr)  // evaluate an expression
	   *    const value = parser.get(name)    // retrieve a variable from the parser
	   *    const values = parser.getAll()    // retrieve all defined variables
	   *    parser.set(name, value)           // set a variable in the parser
	   *    parser.remove(name)               // clear a variable from the
	   *                                      // parsers scope
	   *    parser.clear()                    // clear the parsers scope
	   *
	   * Example usage:
	   *    const parser = new Parser()
	   *    // Note: there is a convenience method which can be used instead:
	   *    // const parser = new math.parser()
	   *
	   *    // evaluate expressions
	   *    parser.eval('sqrt(3^2 + 4^2)')         // 5
	   *    parser.eval('sqrt(-4)')                // 2i
	   *    parser.eval('2 inch in cm')            // 5.08 cm
	   *    parser.eval('cos(45 deg)')             // 0.7071067811865476
	   *
	   *    // define variables and functions
	   *    parser.eval('x = 7 / 2')               // 3.5
	   *    parser.eval('x + 3')                   // 6.5
	   *    parser.eval('function f(x, y) = x^y')  // f(x, y)
	   *    parser.eval('f(2, 3)')                 // 8
	   *
	   *    // get and set variables and functions
	   *    const x = parser.get('x')              // 7
	   *    const f = parser.get('f')              // function
	   *    const g = f(3, 2)                      // 9
	   *    parser.set('h', 500)
	   *    const i = parser.eval('h / 2')         // 250
	   *    parser.set('hello', function (name) {
	   *        return 'hello, ' + name + '!'
	   *    })
	   *    parser.eval('hello("user")')           // "hello, user!"
	   *
	   *    // clear defined functions and variables
	   *    parser.clear()
	   *
	   */
	  function Parser() {
	    if (!(this instanceof Parser)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    this.scope = {};
	  }

	  /**
	   * Attach type information
	   */
	  Parser.prototype.type = 'Parser';
	  Parser.prototype.isParser = true;

	  /**
	   * Parse an expression and return the parsed function node.
	   * The node tree can be compiled via `code = node.compile(math)`,
	   * and the compiled code can be executed as `code.eval([scope])`
	   * @param {string} expr
	   * @return {Node} node
	   * @throws {Error}
	   */
	  Parser.prototype.parse = function (expr) {
	    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
	  };

	  /**
	   * Parse and compile an expression, return the compiled javascript code.
	   * The node can be evaluated via code.eval([scope])
	   * @param {string} expr
	   * @return {{eval: function}} code
	   * @throws {Error}
	   */
	  Parser.prototype.compile = function (expr) {
	    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
	  };

	  /**
	   * Parse and evaluate the given expression
	   * @param {string} expr   A string containing an expression, for example "2+3"
	   * @return {*} result     The result, or undefined when the expression was empty
	   * @throws {Error}
	   */
	  Parser.prototype.eval = function (expr) {
	    // TODO: validate arguments
	    return _parse(expr).compile().eval(this.scope);
	  };

	  /**
	   * Get a variable (a function or variable) by name from the parsers scope.
	   * Returns undefined when not found
	   * @param {string} name
	   * @return {* | undefined} value
	   */
	  Parser.prototype.get = function (name) {
	    // TODO: validate arguments
	    return name in this.scope ? customs.getSafeProperty(this.scope, name) : undefined;
	  };

	  /**
	   * Get a map with all defined variables
	   * @return {Object} values
	   */
	  Parser.prototype.getAll = function () {
	    return extend$3({}, this.scope);
	  };

	  /**
	   * Set a symbol (a function or variable) by name from the parsers scope.
	   * @param {string} name
	   * @param {* | undefined} value
	   */
	  Parser.prototype.set = function (name, value) {
	    // TODO: validate arguments
	    return customs.setSafeProperty(this.scope, name, value);
	  };

	  /**
	   * Remove a variable from the parsers scope
	   * @param {string} name
	   */
	  Parser.prototype.remove = function (name) {
	    // TODO: validate arguments
	    delete this.scope[name];
	  };

	  /**
	   * Clear the scope with variables and functions
	   */
	  Parser.prototype.clear = function () {
	    for (var name in this.scope) {
	      if (this.scope.hasOwnProperty(name)) {
	        delete this.scope[name];
	      }
	    }
	  };

	  return Parser;
	}

	var name$44 = 'Parser';
	var path$P = 'expression';
	var factory_1$4h = factory$4h;
	var math$h = true; // requires the math namespace as 5th argument

	var Parser = {
		name: name$44,
		path: path$P,
		factory: factory_1$4h,
		math: math$h
	};

	function factory$4i(type, config, load, typed, math) {
	  var Parser$$1 = load(Parser);

	  /**
	   * Create a parser. The function creates a new `math.expression.Parser` object.
	   *
	   * Syntax:
	   *
	   *    math.parser()
	   *
	   * Examples:
	   *
	   *     const parser = new math.parser()
	   *
	   *     // evaluate expressions
	   *     const a = parser.eval('sqrt(3^2 + 4^2)') // 5
	   *     const b = parser.eval('sqrt(-4)')        // 2i
	   *     const c = parser.eval('2 inch in cm')    // 5.08 cm
	   *     const d = parser.eval('cos(45 deg)')     // 0.7071067811865476
	   *
	   *     // define variables and functions
	   *     parser.eval('x = 7 / 2')                 // 3.5
	   *     parser.eval('x + 3')                     // 6.5
	   *     parser.eval('function f(x, y) = x^y')    // f(x, y)
	   *     parser.eval('f(2, 3)')                   // 8
	   *
	   *     // get and set variables and functions
	   *     const x = parser.get('x')                // 7
	   *     const f = parser.get('f')                // function
	   *     const g = f(3, 2)                        // 9
	   *     parser.set('h', 500)
	   *     const i = parser.eval('h / 2')           // 250
	   *     parser.set('hello', function (name) {
	   *       return 'hello, ' + name + '!'
	   *     })
	   *     parser.eval('hello("user")')           // "hello, user!"
	   *
	   *     // clear defined functions and variables
	   *     parser.clear()
	   *
	   * See also:
	   *
	   *    eval, compile, parse
	   *
	   * @return {Parser} Parser
	   */
	  return typed('parser', {
	    '': function _() {
	      return new Parser$$1(math);
	    }
	  });
	}

	var name$45 = 'parser';
	var factory_1$4i = factory$4i;
	var math$i = true; // requires the math namespace as 5th argument

	var parser = {
		name: name$45,
		factory: factory_1$4i,
		math: math$i
	};

	var _function$3 = [compile, _eval$1, help$1, parse$1, parser];

	function factory$4j(type, config, load, typed) {
	  /**
	   * @constructor UpdateNode
	   */
	  function UpdateNode() {
	    // TODO: deprecated since v3. Cleanup some day
	    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
	  }

	  return UpdateNode;
	}

	var name$46 = 'UpdateNode';
	var path$Q = 'expression.node';
	var factory_1$4j = factory$4j;

	var UpdateNode = {
		name: name$46,
		path: path$Q,
		factory: factory_1$4j
	};

	var node = [AccessorNode, ArrayNode, AssignmentNode, BlockNode, ConditionalNode, ConstantNode, IndexNode, FunctionAssignmentNode, FunctionNode, Node, ObjectNode, OperatorNode, ParenthesisNode, RangeNode, SymbolNode, UpdateNode];

	var errorTransform$2 = error_transform.transform;

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function concat
	 * from one-based to zero based
	 */
	function factory$4k(type, config, load, typed) {
	  var concat$$1 = load(concat);

	  // @see: comment of concat itself
	  return typed('concat', {
	    '...any': function any(args) {
	      // change last argument from one-based to zero-based
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (type.isNumber(last)) {
	        args[lastIndex] = last - 1;
	      } else if (type.isBigNumber(last)) {
	        args[lastIndex] = last.minus(1);
	      }

	      try {
	        return concat$$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$2(err);
	      }
	    }
	  });
	}

	var name$47 = 'concat';
	var path$R = 'expression.transform';
	var factory_1$4k = factory$4k;

	var concat_transform = {
		name: name$47,
		path: path$R,
		factory: factory_1$4k
	};

	function factory$4l(type, config, load, typed) {
	  /**
	   * Compile an inline expression like "x > 0"
	   * @param {Node} expression
	   * @param {Object} math
	   * @param {Object} scope
	   * @return {function} Returns a function with one argument which fills in the
	   *                    undefined variable (like "x") and evaluates the expression
	   */
	  return function compileInlineExpression(expression, math, scope) {
	    // find an undefined symbol
	    var symbol = expression.filter(function (node) {
	      return type.isSymbolNode(node) && !(node.name in math) && !(node.name in scope);
	    })[0];

	    if (!symbol) {
	      throw new Error('No undefined variable found in inline expression "' + expression + '"');
	    }

	    // create a test function for this equation
	    var name = symbol.name; // variable name
	    var subScope = Object.create(scope);
	    var eq = expression.compile();
	    return function inlineExpression(x) {
	      subScope[name] = x;
	      return eq.eval(subScope);
	    };
	  };
	}

	var factory_1$4l = factory$4l;

	var compileInlineExpression = {
		factory: factory_1$4l
	};

	var filter$2 = array.filter;
	var filterRegExp$1 = array.filterRegExp;
	var maxArgumentCount$4 = _function.maxArgumentCount;

	/**
	 * Attach a transform function to math.filter
	 * Adds a property transform containing the transform function.
	 *
	 * This transform adds support for equations as test function for math.filter,
	 * so you can do something like 'filter([3, -2, 5], x > 0)'.
	 */
	function factory$4m(type, config, load, typed) {
	  var compileInlineExpression$$1 = load(compileInlineExpression);
	  var matrix$$1 = load(matrix);

	  function filterTransform(args, math, scope) {
	    var x = void 0,
	        callback = void 0;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction)
	        callback = args[1].compile().eval(scope);
	      } else {
	        // an expression like filter([3, -2, 5], x > 0)
	        callback = compileInlineExpression$$1(args[1], math, scope);
	      }
	    }

	    return filter(x, callback);
	  }
	  filterTransform.rawArgs = true;

	  // one based version of function filter
	  var filter = typed('filter', {
	    'Array, function': _filter,

	    'Matrix, function': function MatrixFunction(x, test) {
	      return matrix$$1(_filter(x.toArray(), test));
	    },

	    'Array, RegExp': filterRegExp$1,

	    'Matrix, RegExp': function MatrixRegExp(x, test) {
	      return matrix$$1(filterRegExp$1(x.toArray(), test));
	    }
	  });

	  filter.toTex = undefined; // use default template

	  return filterTransform;
	}

	/**
	 * Filter values in a callback given a callback function
	 *
	 * !!! Passes a one-based index !!!
	 *
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filter(x, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$4(callback);

	  return filter$2(x, function (value, index, array$$1) {
	    // invoke the callback function with the right number of arguments
	    if (args === 1) {
	      return callback(value);
	    } else if (args === 2) {
	      return callback(value, [index + 1]);
	    } else {
	      // 3 or -1
	      return callback(value, [index + 1], array$$1);
	    }
	  });
	}

	var name$48 = 'filter';
	var path$S = 'expression.transform';
	var factory_1$4m = factory$4m;

	var filter_transform = {
		name: name$48,
		path: path$S,
		factory: factory_1$4m
	};

	var maxArgumentCount$5 = _function.maxArgumentCount;
	var forEach$4 = array.forEach;

	/**
	 * Attach a transform function to math.forEach
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory$4n(type, config, load, typed) {
	  var compileInlineExpression$$1 = load(compileInlineExpression);

	  function forEachTransform(args, math, scope) {
	    var x = void 0,
	        callback = void 0;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
	        // a function pointer, like forEach([3, -2, 5], myTestFunction)
	        callback = args[1].compile().eval(scope);
	      } else {
	        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
	        callback = compileInlineExpression$$1(args[1], math, scope);
	      }
	    }

	    return _forEach(x, callback);
	  }
	  forEachTransform.rawArgs = true;

	  // one-based version of forEach
	  var _forEach = typed('forEach', {
	    'Array | Matrix, function': function ArrayMatrixFunction(array$$1, callback) {
	      // figure out what number of arguments the callback function expects
	      var args = maxArgumentCount$5(callback);

	      var recurse = function recurse(value, index) {
	        if (Array.isArray(value)) {
	          forEach$4(value, function (child, i) {
	            // we create a copy of the index array and append the new index value
	            recurse(child, index.concat(i + 1)); // one based index, hence i+1
	          });
	        } else {
	          // invoke the callback function with the right number of arguments
	          if (args === 1) {
	            callback(value);
	          } else if (args === 2) {
	            callback(value, index);
	          } else {
	            // 3 or -1
	            callback(value, index, array$$1);
	          }
	        }
	      };
	      recurse(array$$1.valueOf(), []); // pass Array
	    }
	  });

	  return forEachTransform;
	}

	var name$49 = 'forEach';
	var path$T = 'expression.transform';
	var factory_1$4n = factory$4n;

	var forEach_transform = {
		name: name$49,
		path: path$T,
		factory: factory_1$4n
	};

	/**
	 * Attach a transform function to math.index
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */

	function factory$4o(type, config, load) {
	  return function indexTransform() {
	    var args = [];
	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      // change from one-based to zero based, and convert BigNumber to number
	      if (type.isRange(arg)) {
	        arg.start--;
	        arg.end -= arg.step > 0 ? 0 : 2;
	      } else if (arg && arg.isSet === true) {
	        arg = arg.map(function (v) {
	          return v - 1;
	        });
	      } else if (type.isArray(arg) || type.isMatrix(arg)) {
	        arg = arg.map(function (v) {
	          return v - 1;
	        });
	      } else if (type.isNumber(arg)) {
	        arg--;
	      } else if (type.isBigNumber(arg)) {
	        arg = arg.toNumber() - 1;
	      } else if (typeof arg === 'string') ; else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }

	      args[i] = arg;
	    }

	    var res = new type.Index();
	    type.Index.apply(res, args);
	    return res;
	  };
	}

	var name$4a = 'index';
	var path$U = 'expression.transform';
	var factory_1$4o = factory$4o;

	var index_transform = {
		name: name$4a,
		path: path$U,
		factory: factory_1$4o
	};

	var maxArgumentCount$6 = _function.maxArgumentCount;
	var map$7 = array.map;

	/**
	 * Attach a transform function to math.map
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory$4p(type, config, load, typed) {
	  var compileInlineExpression$$1 = load(compileInlineExpression);
	  var matrix$$1 = load(matrix);

	  function mapTransform(args, math, scope) {
	    var x = void 0,
	        callback = void 0;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction)
	        callback = args[1].compile().eval(scope);
	      } else {
	        // an expression like filter([3, -2, 5], x > 0)
	        callback = compileInlineExpression$$1(args[1], math, scope);
	      }
	    }

	    return map(x, callback);
	  }
	  mapTransform.rawArgs = true;

	  // one-based version of map function
	  var map = typed('map', {
	    'Array, function': function ArrayFunction(x, callback) {
	      return _map$1(x, callback, x);
	    },

	    'Matrix, function': function MatrixFunction(x, callback) {
	      return matrix$$1(_map$1(x.valueOf(), callback, x));
	    }
	  });

	  return mapTransform;
	}

	/**
	 * Map for a multi dimensional array. One-based indexes
	 * @param {Array} array
	 * @param {function} callback
	 * @param {Array} orig
	 * @return {Array}
	 * @private
	 */
	function _map$1(array$$1, callback, orig) {
	  // figure out what number of arguments the callback function expects
	  var argsCount = maxArgumentCount$6(callback);

	  function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return map$7(value, function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
	      });
	    } else {
	      // invoke the (typed) callback function with the right number of arguments
	      if (argsCount === 1) {
	        return callback(value);
	      } else if (argsCount === 2) {
	        return callback(value, index);
	      } else {
	        // 3 or -1
	        return callback(value, index, orig);
	      }
	    }
	  }

	  return recurse(array$$1, []);
	}

	var name$4b = 'map';
	var path$V = 'expression.transform';
	var factory_1$4p = factory$4p;

	var map_transform = {
		name: name$4b,
		path: path$V,
		factory: factory_1$4p
	};

	var errorTransform$3 = error_transform.transform;


	/**
	 * Attach a transform function to math.max
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function max
	 * from one-based to zero based
	 */
	function factory$4q(type, config, load, typed) {
	  var max$$1 = load(max);

	  return typed('max', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return max$$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$3(err);
	      }
	    }
	  });
	}

	var name$4c = 'max';
	var path$W = 'expression.transform';
	var factory_1$4q = factory$4q;

	var max_transform = {
		name: name$4c,
		path: path$W,
		factory: factory_1$4q
	};

	var errorTransform$4 = error_transform.transform;


	/**
	 * Attach a transform function to math.mean
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function mean
	 * from one-based to zero based
	 */
	function factory$4r(type, config, load, typed) {
	  var mean$$1 = load(mean);

	  return typed('mean', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return mean$$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$4(err);
	      }
	    }
	  });
	}

	var name$4d = 'mean';
	var path$X = 'expression.transform';
	var factory_1$4r = factory$4r;

	var mean_transform = {
		name: name$4d,
		path: path$X,
		factory: factory_1$4r
	};

	var errorTransform$5 = error_transform.transform;


	/**
	 * Attach a transform function to math.min
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function min
	 * from one-based to zero based
	 */
	function factory$4s(type, config, load, typed) {
	  var min$$1 = load(min);

	  return typed('min', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return min$$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$5(err);
	      }
	    }
	  });
	}

	var name$4e = 'min';
	var path$Y = 'expression.transform';
	var factory_1$4s = factory$4s;

	var min_transform = {
		name: name$4e,
		path: path$Y,
		factory: factory_1$4s
	};

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */

	function factory$4t(type, config, load, typed) {
	  var range$$1 = load(range);

	  return typed('range', {
	    '...any': function any(args) {
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last !== 'boolean') {
	        // append a parameter includeEnd=true
	        args.push(true);
	      }

	      return range$$1.apply(null, args);
	    }
	  });
	}

	var name$4f = 'range';
	var path$Z = 'expression.transform';
	var factory_1$4t = factory$4t;

	var range_transform = {
		name: name$4f,
		path: path$Z,
		factory: factory_1$4t
	};

	var errorTransform$6 = error_transform.transform;

	/**
	 * Attach a transform function to math.subset
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */
	function factory$4u(type, config, load, typed) {
	  var subset$$1 = load(subset);

	  return typed('subset', {
	    '...any': function any(args) {
	      try {
	        return subset$$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$6(err);
	      }
	    }
	  });
	}

	var name$4g = 'subset';
	var path$_ = 'expression.transform';
	var factory_1$4u = factory$4u;

	var subset_transform = {
		name: name$4g,
		path: path$_,
		factory: factory_1$4u
	};

	var transform$1 = [concat_transform, filter_transform, forEach_transform, index_transform, map_transform, max_transform, mean_transform, min_transform, range_transform, subset_transform];

	function factory$4v(type, config, load, typed) {
	  var parser$$1 = load(parser)();

	  /**
	   * Documentation object
	   * @param {Object} doc  Object containing properties:
	   *                      {string} name
	   *                      {string} category
	   *                      {string} description
	   *                      {string[]} syntax
	   *                      {string[]} examples
	   *                      {string[]} seealso
	   * @constructor
	   */
	  function Help(doc) {
	    if (!(this instanceof Help)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!doc) throw new Error('Argument "doc" missing');

	    this.doc = doc;
	  }

	  /**
	   * Attach type information
	   */
	  Help.prototype.type = 'Help';
	  Help.prototype.isHelp = true;

	  /**
	   * Generate a string representation of the Help object
	   * @return {string} Returns a string
	   * @private
	   */
	  Help.prototype.toString = function () {
	    var doc = this.doc || {};
	    var desc = '\n';

	    if (doc.name) {
	      desc += 'Name: ' + doc.name + '\n\n';
	    }
	    if (doc.category) {
	      desc += 'Category: ' + doc.category + '\n\n';
	    }
	    if (doc.description) {
	      desc += 'Description:\n    ' + doc.description + '\n\n';
	    }
	    if (doc.syntax) {
	      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
	    }
	    if (doc.examples) {
	      desc += 'Examples:\n';
	      for (var i = 0; i < doc.examples.length; i++) {
	        var expr = doc.examples[i];
	        desc += '    ' + expr + '\n';

	        var res = void 0;
	        try {
	          // note: res can be undefined when `expr` is an empty string
	          res = parser$$1.eval(expr);
	        } catch (e) {
	          res = e;
	        }
	        if (res !== undefined && !type.isHelp(res)) {
	          desc += '        ' + string.format(res, { precision: 14 }) + '\n';
	        }
	      }
	      desc += '\n';
	    }
	    if (doc.seealso && doc.seealso.length) {
	      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
	    }

	    return desc;
	  };

	  /**
	   * Export the help object to JSON
	   */
	  Help.prototype.toJSON = function () {
	    var obj = object.clone(this.doc);
	    obj.mathjs = 'Help';
	    return obj;
	  };

	  /**
	   * Instantiate a Help object from a JSON object
	   * @param {Object} json
	   * @returns {Help} Returns a new Help object
	   */
	  Help.fromJSON = function (json) {
	    var doc = {};
	    for (var prop in json) {
	      if (prop !== 'mathjs') {
	        // ignore mathjs field
	        doc[prop] = json[prop];
	      }
	    }
	    return new Help(doc);
	  };

	  /**
	   * Returns a string representation of the Help object
	   */
	  Help.prototype.valueOf = Help.prototype.toString;

	  return Help;
	}

	var name$4h = 'Help';
	var path$10 = 'type';
	var factory_1$4v = factory$4v;

	var Help = {
		name: name$4h,
		path: path$10,
		factory: factory_1$4v
	};

	var expression = [
	// Note that the docs folder is called "embeddedDocs" and not "docs" to prevent issues
	// with yarn autoclean. See https://github.com/josdejong/mathjs/issues/969
	embeddedDocs, _function$3, node, transform$1, Help, parse, Parser];

	function factory$4w(type, config, load, typed, math) {
	  /**
	   * Instantiate mathjs data types from their JSON representation
	   * @param {string} key
	   * @param {*} value
	   * @returns {*} Returns the revived object
	   */
	  return function reviver(key, value) {
	    var constructor = type[value && value.mathjs] || math.expression && math.expression.node[value && value.mathjs];
	    // TODO: instead of checking math.expression.node, expose all Node classes on math.type too

	    if (constructor && typeof constructor.fromJSON === 'function') {
	      return constructor.fromJSON(value);
	    }

	    return value;
	  };
	}

	var name$4i = 'reviver';
	var path$11 = 'json';
	var factory_1$4w = factory$4w;
	var math$j = true; // request the math namespace as fifth argument

	var reviver = {
		name: name$4i,
		path: path$11,
		factory: factory_1$4w,
		math: math$j
	};

	var json = [reviver];

	var error = [{
	  name: 'ArgumentsError',
	  path: 'error',
	  factory: function factory() {
	    return ArgumentsError_1;
	  }
	}, {
	  name: 'DimensionError',
	  path: 'error',
	  factory: function factory() {
	    return DimensionError_1;
	  }
	}, {
	  name: 'IndexError',
	  path: 'error',
	  factory: function factory() {
	    return IndexError_1;
	  }
	}];

	// This file contains all factory functions of math.js

	var lib = [type, // data types (Matrix, Complex, Unit, ...)
	constants$1, // constants
	_function$2, // functions

	// load ./expression *after* ./function since we need to
	// attach transforms to functions that are imported there
	expression, // expression parsing

	json, // serialization utility (math.json.reviver)
	error // errors
	];

	var main = createCommonjsModule(function (module) {



	var _core2 = _interopRequireDefault(core);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * math.js factory function. Creates a new instance of math.js
	 *
	 * @param {Object} [config] Available configuration options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'matrix' (default) or 'array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'bignumber', or
	 *                              'fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-4)`
	 *                              returns `complex('2i')` when predictable is false, and
	 *                              returns `NaN` when true.
	 */
	function create(config) {
	  // create a new math.js instance
	  var math = _core2.default.create(config);
	  math.create = create;

	  // import data types, functions, constants, expression parser, etc.
	  math['import'](lib);

	  return math;
	}

	// return a new instance of math.js
	module.exports = create();
	});

	unwrapExports(main);

	var mathjs = main;

	const controls = {
	    data() {
	        return {
	            opaque: 1,
	            xBounds: [-1, 1],
	            yBounds: [-1, 1],
	            zBounds: [-1, 1],
	            styleObject: {
	                border: '1px solid black',
	                width: '200px',
	            },
	        };
	    },
	    template: `
        <div :style="styleObject">
            Opacity: <drag-number
                :initialvalue="1.0"
                :resolution="0.01"
                :pixels-per-tick="5.0"
                :min="0.0"
                :max="1.0"
                @value-changed="$emit('opacity-updated', $event)">
            </drag-number>
            <br>
            Brightness: <drag-number
                :initialvalue="1.0"
                :resolution="0.1"
                :pixels-per-tick="5.0"
                :min="0.0"
                :max="10.0"
                @value-changed="$emit('brightness-updated', $event)">
            </drag-number>
            <br>
            R: <drag-number
                :initialvalue="1.0"
                :resolution="0.02"
                :pixels-per-tick="5.0"
                :min="0.0"
                :max="2.0"
                @value-changed="$emit('r-updated', $event)">
            </drag-number>
            <br>
            X bounds: [<drag-number :initialvalue="xBounds[0]"></drag-number>, <drag-number :initialvalue="xBounds[1]"></drag-number>]
            <br>
            Y bounds: [<drag-number :initialvalue="yBounds[0]"></drag-number>, <drag-number :initialvalue="yBounds[1]"></drag-number>]
            <br>
            Z bounds: [<drag-number :initialvalue="zBounds[0]"></drag-number>, <drag-number :initialvalue="zBounds[1]"></drag-number>]
        </div>
    `,
	};

	const dragNumber = {
	    props: {
	        initialvalue: {
	            type: Number,
	            default: 0.0,
	        },
	        resolution: {
	            type: Number,
	            default: 1.0,
	        },
	        max: {
	            type: Number,
	            default: Infinity,
	        },
	        min: {
	            type: Number,
	            default: -Infinity,
	        },
	        'pixels-per-tick': {
	            type: Number,
	            default: 1,
	        },
	        fix: {
	            type: Number,
	            default: 2,
	        },
	    },
	    data() {
	        return {
	            value: 0.0,
	            _resolution: 1, // change in value per pixel dragged
	            state: 'drag', // 'drag' or 'input'
	            dragging: false,
	            mouseStart: [0, 0],
	            valueStart: 0,
	        };
	    },
	    created() {
	        this.value = Number(this.initialvalue);
	        this._resolution = this.resolution !== undefined ? Number(this.resolution) : 1.0;
	        // These must be registered to the document so that we can
	        // drag beyond the end of the element containing the number
	        document.addEventListener('mousemove', (evt) => {
	            if (this.dragging) {
	                evt.preventDefault();
	                this.onDrag(evt);
	            }
	        });
	        document.addEventListener('mouseup', (evt) => {
	            if (this.dragging) {
	                evt.preventDefault();
	                this.onDragFinish(evt);
	            }
	        });
	    },
	    template: `
        <span
            ref="dn"
            v-if="state === 'drag'"
            class="drag-number"
            @mousedown="onDragStart"
            @mouseup="onClick"
            >{{ value.toFixed(fix) }}</span>
        <input
            type="number"
            ref="input"
            v-else-if="state === 'input'"
            @keyup.enter="setDrag"
            @blur="setDrag">
    `,
	    methods: {
	        setInput() {
	            this.state = 'input';
	            this.$nextTick(() => {
	                this.$refs.input.value = this.value;
	                this.$refs.input.focus();
	            });
	        },
	        setDrag() {
	            let newValue = Number(this.$refs.input.value);
	            if (newValue > this.max) {
	                newValue = this.max;
	            }
	            if (newValue < this.min) {
	                newValue = this.min;
	            }
	            this.value = newValue;
	            this.state = 'drag';
	        },
	        onDragStart(evt) {
	            this.mouseStart = [evt.pageX, evt.pageY];
	            this.valueStart = this.value;
	            this.dragging = true;
	            this.dragged = false;
	        },
	        onDrag(evt) {
	            // Mark that we are dragging, so we don't accidentally switch to an input on mouseup
	            this.dragged = true;
	            const delta = Math.floor((evt.pageX - this.mouseStart[0]) / this.pixelsPerTick);
	            let newValue = this.valueStart + delta * this._resolution;
	            if (newValue > this.max) {
	                newValue = this.max;
	            }
	            if (newValue < this.min) {
	                newValue = this.min;
	            }
	            this.value = newValue;
	        },
	        onDragFinish() {
	            this.dragged = false;
	            this.dragging = false;
	        },
	        onClick() {
	            // Only fire if we haven't dragged during this click
	            // NOTE: It is necessary that this method is fired AFTER onDragFinish
	            if (!this.dragged) {
	                this.setInput();
	            }
	        },
	    },
	    watch: {
	        value(val) {
	            this.$emit('value-changed', {
	                key: this.$vnode.key,
	                value: val,
	            });
	        },
	    },
	};

	const eqnEdit = {
	    props: ['equationhtml'],
	    data() {
	        return {
	            styleObject: {
	                width: '50vw',
	                height: '30px',
	                'font-size': 'x-large',
	            },
	        };
	    },
	    template: `
        <span :style="styleObject">
            <span v-for="node in equationhtml">
                <drag-number
                    v-if="node.type === 'coefficient'"
                    :resolution="0.1"
                    :pixels-per-tick="2.0"
                    :initialvalue="node.value"
                    :key="node.id"
                    @value-changed="valueChanged">
                </drag-number>
                <span v-else-if="node.type === 'static'">{{ node.value }}</span>
                <span v-else-if="node.type === 'power'">
                    <eqn-edit :equationhtml="node.value"></eqn-edit><sup>{{ node.power }}</sup>
                </span>
                <span v-else-if="node.type === 'error'" class="error">{{ node.value }}</span>
            </span>
        </span>
    `,
	    methods: {
	        valueChanged(val) {
	            this.$emit('coefficient-changed', val);
	        },
	    },
	};

	const eqnInput = {
	    data: function () {
	        return {
	            equation: '',
	            styleObject: {
	                width: '50vw',
	                height: '30px',
	                'font-size': 'large',
	            },
	        };
	    },
	    template: `
        <span>
            <font v-bind:style="{ 'font-size': styleObject['font-size'] }"> 0 = </font>
            <input v-bind:style="styleObject" placeholder="f(x,y,z)" v-model="equation" @keyup.enter="graph">
            <button v-on:click="graph">Graph!</button>
        </span>
    `,
	    methods: {
	        graph: function() {
	            this.$emit('graph', {
	                newEquation: this.equation,
	            });
	        },
	    },
	};

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	if ( Number.isInteger === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

		Number.isInteger = function ( value ) {

			return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

		};

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( 'name' in Function.prototype === false ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		( function () {

			Object.assign = function ( target ) {

				if ( target === undefined || target === null ) {

					throw new TypeError( 'Cannot convert undefined or null to object' );

				}

				var output = Object( target );

				for ( var index = 1; index < arguments.length; index ++ ) {

					var source = arguments[ index ];

					if ( source !== undefined && source !== null ) {

						for ( var nextKey in source ) {

							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

								output[ nextKey ] = source[ nextKey ];

							}

						}

					}

				}

				return output;

			};

		} )();

	}

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = listenerArray.slice( 0 );

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	var REVISION = '95dev';
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var NearestFilter = 1003;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipMapLinearFilter = 1008;
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RGB_S3TC_DXT1_Format = 33776;
	var RGBA_S3TC_DXT1_Format = 33777;
	var RGBA_S3TC_DXT3_Format = 33778;
	var RGBA_S3TC_DXT5_Format = 33779;
	var RGB_PVRTC_4BPPV1_Format = 35840;
	var RGB_PVRTC_2BPPV1_Format = 35841;
	var RGBA_PVRTC_4BPPV1_Format = 35842;
	var RGBA_PVRTC_2BPPV1_Format = 35843;
	var RGB_ETC1_Format = 36196;
	var RGBA_ASTC_4x4_Format = 37808;
	var RGBA_ASTC_5x4_Format = 37809;
	var RGBA_ASTC_5x5_Format = 37810;
	var RGBA_ASTC_6x5_Format = 37811;
	var RGBA_ASTC_6x6_Format = 37812;
	var RGBA_ASTC_8x5_Format = 37813;
	var RGBA_ASTC_8x6_Format = 37814;
	var RGBA_ASTC_8x8_Format = 37815;
	var RGBA_ASTC_10x5_Format = 37816;
	var RGBA_ASTC_10x6_Format = 37817;
	var RGBA_ASTC_10x8_Format = 37818;
	var RGBA_ASTC_10x10_Format = 37819;
	var RGBA_ASTC_12x10_Format = 37820;
	var RGBA_ASTC_12x12_Format = 37821;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;
	var TangentSpaceNormalMap = 0;
	var ObjectSpaceNormalMap = 1;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: ( function () {

			// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

			var lut = [];

			for ( var i = 0; i < 256; i ++ ) {

				lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

			}

			return function generateUUID() {

				var d0 = Math.random() * 0xffffffff | 0;
				var d1 = Math.random() * 0xffffffff | 0;
				var d2 = Math.random() * 0xffffffff | 0;
				var d3 = Math.random() * 0xffffffff | 0;
				var uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
					lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
					lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
					lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];

				// .toUpperCase() here flattens concatenated strings to save heap memory space.
				return uuid.toUpperCase();

			};

		} )(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		ceilPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

		},

		floorPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Object.defineProperties( Vector2.prototype, {

		"width": {

			get: function () {

				return this.x;

			},

			set: function ( value ) {

				this.x = value;

			}

		},

		"height": {

			get: function () {

				return this.y;

			},

			set: function ( value ) {

				this.y = value;

			}

		}

	} );

	Object.assign( Vector2.prototype, {

		isVector2: true,

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min = new Vector2();
			var max = new Vector2();

			return function clampScalar( minVal, maxVal ) {

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		cross: function ( v ) {

			return this.x * v.y - this.y * v.x;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix4.prototype, {

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		},

		extractRotation: function () {

			var v1 = new Vector3();

			return function extractRotation( m ) {

				// this method does not support reflection matrices

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;
				te[ 3 ] = 0;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;
				te[ 7 ] = 0;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;
				te[ 11 ] = 0;

				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// bottom row
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// last column
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function () {

			var zero = new Vector3( 0, 0, 0 );
			var one = new Vector3( 1, 1, 1 );

			return function makeRotationFromQuaternion( q ) {

				return this.compose( zero, q, one );

			};

		}(),

		lookAt: function () {

			var x = new Vector3();
			var y = new Vector3();
			var z = new Vector3();

			return function lookAt( eye, target, up ) {

				var te = this.elements;

				z.subVectors( eye, target );

				if ( z.lengthSq() === 0 ) {

					// eye and target are in the same position

					z.z = 1;

				}

				z.normalize();
				x.crossVectors( up, z );

				if ( x.lengthSq() === 0 ) {

					// up and z are parallel

					if ( Math.abs( up.z ) === 1 ) {

						z.x += 0.0001;

					} else {

						z.z += 0.0001;

					}

					z.normalize();
					x.crossVectors( up, z );

				}

				x.normalize();
				y.crossVectors( z, x );

				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToBufferAttribute: function () {

			var v1 = new Vector3();

			return function applyToBufferAttribute( attribute ) {

				for ( var i = 0, l = attribute.count; i < l; i ++ ) {

					v1.x = attribute.getX( i );
					v1.y = attribute.getY( i );
					v1.z = attribute.getZ( i );

					v1.applyMatrix4( this );

					attribute.setXYZ( i, v1.x, v1.y, v1.z );

				}

				return attribute;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeShear: function ( x, y, z ) {

			this.set(

				1, y, z, 0,
				x, 1, z, 0,
				x, y, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			var x2 = x + x,	y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			var sx = scale.x, sy = scale.y, sz = scale.z;

		        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		        te[ 1 ] = ( xy + wz ) * sx;
		        te[ 2 ] = ( xz - wy ) * sx;
		        te[ 3 ] = 0;

		        te[ 4 ] = ( xy - wz ) * sy;
		        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		        te[ 6 ] = ( yz + wx ) * sy;
		        te[ 7 ] = 0;

		        te[ 8 ] = ( xz + wy ) * sz;
		        te[ 9 ] = ( yz - wx ) * sz;
		        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		        te[ 11 ] = 0;

		        te[ 12 ] = position.x;
		        te[ 13 ] = position.y;
		        te[ 14 ] = position.z;
		        te[ 15 ] = 1;

		        return this;

		},

		decompose: function () {

			var vector = new Vector3();
			var matrix = new Matrix4();

			return function decompose( position, quaternion, scale ) {

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) sx = - sx;

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part
				matrix.copy( this );

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makePerspective: function ( left, right, top, bottom, near, far ) {

			if ( far === undefined ) {

				console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

			}

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for ( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Object.assign( Quaternion, {

		slerp: function ( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	Object.defineProperties( Quaternion.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this.onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this.onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this.onChangeCallback();

			}

		},

		w: {

			get: function () {

				return this._w;

			},

			set: function ( value ) {

				this._w = value;
				this.onChangeCallback();

			}

		}

	} );

	Object.assign( Quaternion.prototype, {

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( ! ( euler && euler.isEuler ) ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var cos = Math.cos;
			var sin = Math.sin;

			var c1 = cos( x / 2 );
			var c2 = cos( y / 2 );
			var c3 = cos( z / 2 );

			var s1 = sin( x / 2 );
			var s2 = sin( y / 2 );
			var s3 = sin( z / 2 );

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// assumes direction vectors vFrom and vTo are normalized

			var v1 = new Vector3();
			var r;

			var EPS = 0.000001;

			return function setFromUnitVectors( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				return this.normalize();

			};

		}(),

		angleTo: function ( q ) {

			return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );

		},

		rotateTowards: function ( q, step ) {

			var angle = this.angleTo( q );

			if ( angle === 0 ) return this;

			var t = Math.min( 1, step / angle );

			this.slerp( q, t );

			return this;

		},

		inverse: function () {

			// quaternion is assumed to have unit length

			return this.conjugate();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if ( sqrSinHalfTheta <= Number.EPSILON ) {

				var s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;

				return this.normalize();

			}

			var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Object.assign( Vector3.prototype, {

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion = new Quaternion();

			return function applyEuler( euler ) {

				if ( ! ( euler && euler.isEuler ) ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				return this.applyQuaternion( quaternion.setFromEuler( euler ) );

			};

		}(),

		applyAxisAngle: function () {

			var quaternion = new Quaternion();

			return function applyAxisAngle( axis, angle ) {

				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix = new Matrix4();

			return function project( camera ) {

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyMatrix4( matrix );

			};

		}(),

		unproject: function () {

			var matrix = new Matrix4();

			return function unproject( camera ) {

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyMatrix4( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min = new Vector3();
			var max = new Vector3();

			return function clampScalar( minVal, maxVal ) {

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		// TODO lengthSquared?

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			return this.crossVectors( this, v );

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( vector ) {

			var scalar = vector.dot( this ) / vector.lengthSq();

			return this.copy( vector ).multiplyScalar( scalar );

		},

		projectOnPlane: function () {

			var v1 = new Vector3();

			return function projectOnPlane( planeNormal ) {

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1 = new Vector3();

			return function reflect( normal ) {

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			};

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function ( s ) {

			var sinPhiRadius = Math.sin( s.phi ) * s.radius;

			this.x = sinPhiRadius * Math.sin( s.theta );
			this.y = Math.cos( s.phi ) * s.radius;
			this.z = sinPhiRadius * Math.cos( s.theta );

			return this;

		},

		setFromCylindrical: function ( c ) {

			this.x = c.radius * Math.sin( c.theta );
			this.y = c.y;
			this.z = c.radius * Math.cos( c.theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			var e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	function Matrix3() {

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix3.prototype, {

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		},

		setFromMatrix4: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToBufferAttribute: function () {

			var v1 = new Vector3();

			return function applyToBufferAttribute( attribute ) {

				for ( var i = 0, l = attribute.count; i < l; i ++ ) {

					v1.x = attribute.getX( i );
					v1.y = attribute.getY( i );
					v1.z = attribute.getZ( i );

					v1.applyMatrix3( this );

					attribute.setXYZ( i, v1.x, v1.y, v1.z );

				}

				return attribute;

			};

		}(),

		multiply: function ( m ) {

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( matrix && matrix.isMatrix4 ) {

				console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

			var c = Math.cos( rotation );
			var s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

		},

		scale: function ( sx, sy ) {

			var te = this.elements;

			te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
			te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

			return this;

		},

		rotate: function ( theta ) {

			var c = Math.cos( theta );
			var s = Math.sin( theta );

			var te = this.elements;

			var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
			var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

			te[ 0 ] = c * a11 + s * a21;
			te[ 3 ] = c * a12 + s * a22;
			te[ 6 ] = c * a13 + s * a23;

			te[ 1 ] = - s * a11 + c * a21;
			te[ 4 ] = - s * a12 + c * a22;
			te[ 7 ] = - s * a13 + c * a23;

			return this;

		},

		translate: function ( tx, ty ) {

			var te = this.elements;

			te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
			te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for ( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var ImageUtils = {

		getDataURL: function ( image ) {

			var canvas;

			if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				if ( typeof OffscreenCanvas !== 'undefined' ) {

					canvas = new OffscreenCanvas( image.width, image.height );

				} else {

					canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

				}

				var context = canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var textureId = 0;

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: textureId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding : LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Texture,

		isTexture: true,

		updateMatrix: function () {

			this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			var output = {

				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,

				wrap: [ this.wrapS, this.wrapT ],

				format: this.format,
				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY

			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

					var url;

					if ( Array.isArray( image ) ) {

						// process array of images e.g. CubeTexture

						url = [];

						for ( var i = 0, l = image.length; i < l; i ++ ) {

							url.push( ImageUtils.getDataURL( image[ i ] ) );

						}

					} else {

						// process single image

						url = ImageUtils.getDataURL( image );

					}

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: url
					};

				}

				output.image = image.uuid;

			}

			if ( ! isRootObject ) {

				meta.textures[ this.uuid ] = output;

			}

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping ) return;

			uv.applyMatrix3( this.matrix );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	} );

	Object.defineProperty( Texture.prototype, "needsUpdate", {

		set: function ( value ) {

			if ( value === true ) this.version ++;

		}

	} );

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Object.assign( Vector4.prototype, {

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector4();
					max = new Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		}

	} );

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : true;

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: WebGLRenderTarget,

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
		this.activeMipMapLevel = 0;

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}

	Object.assign( Box3.prototype, {

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromBufferAttribute: function ( attribute ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				var x = attribute.getX( i );
				var y = attribute.getY( i );
				var z = attribute.getZ( i );

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector3();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function ( object ) {

			this.makeEmpty();

			return this.expandByObject( object );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getCenter() target is now required' );
				target = new Vector3();

			}

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getSize() target is now required' );
				target = new Vector3();

			}

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		expandByObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var scope, i, l;

			var v1 = new Vector3();

			function traverse( node ) {

				var geometry = node.geometry;

				if ( geometry !== undefined ) {

					if ( geometry.isGeometry ) {

						var vertices = geometry.vertices;

						for ( i = 0, l = vertices.length; i < l; i ++ ) {

							v1.copy( vertices[ i ] );
							v1.applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					} else if ( geometry.isBufferGeometry ) {

						var attribute = geometry.attributes.position;

						if ( attribute !== undefined ) {

							for ( i = 0, l = attribute.count; i < l; i ++ ) {

								v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						}

					}

				}

			}

			return function expandByObject( object ) {

				scope = this;

				object.updateMatrixWorld( true );

				object.traverse( traverse );

				return this;

			};

		}(),

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;

		},

		getParameter: function ( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getParameter() target is now required' );
				target = new Vector3();

			}

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

		},

		intersectsSphere: ( function () {

			var closestPoint = new Vector3();

			return function intersectsSphere( sphere ) {

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		intersectsTriangle: ( function () {

			// triangle centered vertices
			var v0 = new Vector3();
			var v1 = new Vector3();
			var v2 = new Vector3();

			// triangle edge vectors
			var f0 = new Vector3();
			var f1 = new Vector3();
			var f2 = new Vector3();

			var testAxis = new Vector3();

			var center = new Vector3();
			var extents = new Vector3();

			var triangleNormal = new Vector3();

			function satForAxes( axes ) {

				var i, j;

				for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {

					testAxis.fromArray( axes, i );
					// project the aabb onto the seperating axis
					var r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );
					// project all 3 vertices of the triangle onto the seperating axis
					var p0 = v0.dot( testAxis );
					var p1 = v1.dot( testAxis );
					var p2 = v2.dot( testAxis );
					// actual test, basically see if either of the most extreme of the triangle points intersects r
					if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

						// points of the projected triangle are outside the projected half-length of the aabb
						// the axis is seperating and we can exit
						return false;

					}

				}

				return true;

			}

			return function intersectsTriangle( triangle ) {

				if ( this.isEmpty() ) {

					return false;

				}

				// compute box center and extents
				this.getCenter( center );
				extents.subVectors( this.max, center );

				// translate triangle to aabb origin
				v0.subVectors( triangle.a, center );
				v1.subVectors( triangle.b, center );
				v2.subVectors( triangle.c, center );

				// compute edge vectors for triangle
				f0.subVectors( v1, v0 );
				f1.subVectors( v2, v1 );
				f2.subVectors( v0, v2 );

				// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
				// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
				// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
				var axes = [
					0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,
					f0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,
					- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0
				];
				if ( ! satForAxes( axes ) ) {

					return false;

				}

				// test 3 face normals from the aabb
				axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
				if ( ! satForAxes( axes ) ) {

					return false;

				}

				// finally testing the face normal of the triangle
				// use already existing triangle edge vectors here
				triangleNormal.crossVectors( f0, f1 );
				axes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];
				return satForAxes( axes );

			};

		} )(),

		clampPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .clampPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector3();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new Vector3();

			return function getBoundingSphere( target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );
					target = new Sphere();

				}

				this.getCenter( target.center );

				target.radius = this.getSize( v1 ).length() * 0.5;

				return target;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if ( this.isEmpty() ) this.makeEmpty();

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function ( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty( ) ) return this;

			var m = matrix.elements;

			var xax = m[ 0 ] * this.min.x, xay = m[ 1 ] * this.min.x, xaz = m[ 2 ] * this.min.x;
			var xbx = m[ 0 ] * this.max.x, xby = m[ 1 ] * this.max.x, xbz = m[ 2 ] * this.max.x;
			var yax = m[ 4 ] * this.min.y, yay = m[ 5 ] * this.min.y, yaz = m[ 6 ] * this.min.y;
			var ybx = m[ 4 ] * this.max.y, yby = m[ 5 ] * this.max.y, ybz = m[ 6 ] * this.max.y;
			var zax = m[ 8 ] * this.min.z, zay = m[ 9 ] * this.min.z, zaz = m[ 10 ] * this.min.z;
			var zbx = m[ 8 ] * this.max.z, zby = m[ 9 ] * this.max.z, zbz = m[ 10 ] * this.max.z;

			this.min.x = Math.min( xax, xbx ) + Math.min( yax, ybx ) + Math.min( zax, zbx ) + m[ 12 ];
			this.min.y = Math.min( xay, xby ) + Math.min( yay, yby ) + Math.min( zay, zby ) + m[ 13 ];
			this.min.z = Math.min( xaz, xbz ) + Math.min( yaz, ybz ) + Math.min( zaz, zbz ) + m[ 14 ];
			this.max.x = Math.max( xax, xbx ) + Math.max( yax, ybx ) + Math.max( zax, zbx ) + m[ 12 ];
			this.max.y = Math.max( xay, xby ) + Math.max( yay, yby ) + Math.max( zay, zby ) + m[ 13 ];
			this.max.z = Math.max( xaz, xbz ) + Math.max( yaz, ybz ) + Math.max( zaz, zbz ) + m[ 14 ];

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Object.assign( Sphere.prototype, {

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new Box3();

			return function setFromPoints( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).getCenter( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

		},

		clampPoint: function ( point, target ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			if ( target === undefined ) {

				console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
				target = new Vector3();

			}

			target.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				target.sub( this.center ).normalize();
				target.multiplyScalar( this.radius ).add( this.center );

			}

			return target;

		},

		getBoundingBox: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
				target = new Box3();

			}

			target.set( this.center, this.center );
			target.expandByScalar( this.radius );

			return target;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	function Plane( normal, constant ) {

		// normal is assumed to be normalized

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Object.assign( Plane.prototype, {

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function setFromCoplanarPoints( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .projectPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

		},

		intersectLine: function () {

			var v1 = new Vector3();

			return function intersectLine( line, target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Plane: .intersectLine() target is now required' );
					target = new Vector3();

				}

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return target.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return target.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new Vector3();
			var m1 = new Matrix3();

			return function applyMatrix4( matrix, optionalNormalMatrix ) {

				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );

				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

				this.constant = - referencePoint.dot( normal );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Object.assign( Frustum.prototype, {

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new Sphere();

			return function intersectsObject( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSprite: function () {

			var sphere = new Sphere();

			return function intersectsSprite( sprite ) {

				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p = new Vector3();

			return function intersectsBox( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6; i ++ ) {

					var plane = planes[ i ];

					// corner at max distance

					p.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					if ( plane.distanceToPoint( p ) < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),

		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	} );

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "\nvec3 transformed = vec3( position );\n";

	var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

	var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

	var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

	var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

	var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

	var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

	var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

	var lights_pars_begin = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n";

	var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

	var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

	var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n";

	var normal_fragment_maps = "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

	var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

	var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";

	var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

	var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";

	var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";

	var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

	var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

	var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

	var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n";

	var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";

	var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

	var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tvec4 mvPosition;\n\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars_begin: lights_pars_begin,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normalmap_pars_fragment: normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert,
		sprite_frag: sprite_frag,
		sprite_vert: sprite_vert
	};

	/**
	 * Uniform Utilities
	 */

	var UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src && ( parameter_src.isColor ||
						parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
						parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
						parameter_src.isTexture ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	Object.assign( Color.prototype, {

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value && value.isColor ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function setHSL( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = _Math.euclideanModulo( h, 1 );
				s = _Math.clamp( s, 0, 1 );
				l = _Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function ( gammaFactor ) {

			this.copyGammaToLinear( this, gammaFactor );

			return this;

		},

		convertLinearToGamma: function ( gammaFactor ) {

			this.copyLinearToGamma( this, gammaFactor );

			return this;

		},

		copySRGBToLinear: function () {

			function SRGBToLinear( c ) {

				return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

			}

			return function copySRGBToLinear( color ) {

				this.r = SRGBToLinear( color.r );
				this.g = SRGBToLinear( color.g );
				this.b = SRGBToLinear( color.b );

				return this;

			};

		}(),

		copyLinearToSRGB: function () {

			function LinearToSRGB( c ) {

				return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

			}

			return function copyLinearToSRGB( color ) {

				this.r = LinearToSRGB( color.r );
				this.g = LinearToSRGB( color.g );
				this.b = LinearToSRGB( color.b );

				return this;

			};

		}(),

		convertSRGBToLinear: function () {

			this.copySRGBToLinear( this );

			return this;

		},

		convertLinearToSRGB: function () {

			this.copyLinearToSRGB( this );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( target ) {

			// h,s,l ranges are in 0.0 - 1.0

			if ( target === undefined ) {

				console.warn( 'THREE.Color: .getHSL() target is now required' );
				target = { h: 0, s: 0, l: 0 };

			}

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;

			return target;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function () {

			var hsl = {};

			return function ( h, s, l ) {

				this.getHSL( hsl );

				hsl.h += h; hsl.s += s; hsl.l += l;

				this.setHSL( hsl.h, hsl.s, hsl.l );

				return this;

			};

		}(),

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function ( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	} );

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			uvTransform: { value: new Matrix3() },

			alphaMap: { value: null },

		},

		specularmap: {

			specularMap: { value: null },

		},

		envmap: {

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 },
			maxMipLevel: { value: 0 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		gradientmap: {

			gradientMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },

			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			uvTransform: { value: new Matrix3() }

		},

		sprite: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			center: { value: new Vector2( 0.5, 0.5 ) },
			rotation: { value: 0.0 },
			map: { value: null },
			uvTransform: { value: new Matrix3() }

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					specular: { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0.5 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		points: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.points,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		sprite: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.sprite,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		equirect: {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		},

		shadow: {

			uniforms: UniformsUtils.merge( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: new Color( 0x00000 ) },
					opacity: { value: 1.0 }
				},
			] ),

			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag

		}

	};

	ShaderLib.physical = {

		uniforms: UniformsUtils.merge( [
			ShaderLib.standard.uniforms,
			{
				clearCoat: { value: 0 },
				clearCoatRoughness: { value: 0 }
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAnimation() {

		var context = null;
		var isAnimating = false;
		var animationLoop = null;

		function onAnimationFrame( time, frame ) {

			if ( isAnimating === false ) return;

			animationLoop( time, frame );

			context.requestAnimationFrame( onAnimationFrame );

		}

		return {

			start: function () {

				if ( isAnimating === true ) return;
				if ( animationLoop === null ) return;

				context.requestAnimationFrame( onAnimationFrame );

				isAnimating = true;

			},

			stop: function () {

				isAnimating = false;

			},

			setAnimationLoop: function ( callback ) {

				animationLoop = callback;

			},

			setContext: function ( value ) {

				context = value;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAttributes( gl ) {

		var buffers = new WeakMap();

		function createBuffer( attribute, bufferType ) {

			var array = attribute.array;
			var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			var buffer = gl.createBuffer();

			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );

			attribute.onUploadCallback();

			var type = gl.FLOAT;

			if ( array instanceof Float32Array ) {

				type = gl.FLOAT;

			} else if ( array instanceof Float64Array ) {

				console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

			} else if ( array instanceof Uint16Array ) {

				type = gl.UNSIGNED_SHORT;

			} else if ( array instanceof Int16Array ) {

				type = gl.SHORT;

			} else if ( array instanceof Uint32Array ) {

				type = gl.UNSIGNED_INT;

			} else if ( array instanceof Int32Array ) {

				type = gl.INT;

			} else if ( array instanceof Int8Array ) {

				type = gl.BYTE;

			} else if ( array instanceof Uint8Array ) {

				type = gl.UNSIGNED_BYTE;

			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};

		}

		function updateBuffer( buffer, attribute, bufferType ) {

			var array = attribute.array;
			var updateRange = attribute.updateRange;

			gl.bindBuffer( bufferType, buffer );

			if ( attribute.dynamic === false ) {

				gl.bufferData( bufferType, array, gl.STATIC_DRAW );

			} else if ( updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, array );

			} else if ( updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

				updateRange.count = - 1; // reset range

			}

		}

		//

		function get( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			return buffers.get( attribute );

		}

		function remove( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			var data = buffers.get( attribute );

			if ( data ) {

				gl.deleteBuffer( data.buffer );

				buffers.delete( attribute );

			}

		}

		function update( attribute, bufferType ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			var data = buffers.get( attribute );

			if ( data === undefined ) {

				buffers.set( attribute, createBuffer( attribute, bufferType ) );

			} else if ( data.version < attribute.version ) {

				updateBuffer( data.buffer, attribute, bufferType );

				data.version = attribute.version;

			}

		}

		return {

			get: get,
			remove: remove,
			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Object.defineProperties( Euler.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this.onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this.onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this.onChangeCallback();

			}

		},

		order: {

			get: function () {

				return this._order;

			},

			set: function ( value ) {

				this._order = value;
				this.onChangeCallback();

			}

		}

	} );

	Object.assign( Euler.prototype, {

		isEuler: true,

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix = new Matrix4();

			return function setFromQuaternion( q, order, update ) {

				matrix.makeRotationFromQuaternion( q );

				return this.setFromRotationMatrix( matrix, order, update );

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new Quaternion();

			return function reorder( newOrder ) {

				q.setFromEuler( this );

				return this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1 | 0;

	}

	Object.assign( Layers.prototype, {

		set: function ( channel ) {

			this.mask = 1 << channel | 0;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel | 0;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel | 0;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel | 0 );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	var object3DId = 0;

	function Object3D() {

		Object.defineProperty( this, 'id', { value: object3DId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Object3D,

		isObject3D: true,

		onBeforeRender: function () {},
		onAfterRender: function () {},

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		applyQuaternion: function ( q ) {

			this.quaternion.premultiply( q );

			return this;

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new Quaternion();

			return function rotateOnAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateOnWorldAxis: function () {

			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent

			var q1 = new Quaternion();

			return function rotateOnWorldAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.premultiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function rotateX( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function rotateY( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function rotateZ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new Vector3();

			return function translateOnAxis( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function translateX( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function translateY( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function translateZ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new Matrix4();

			return function worldToLocal( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This method does not support objects with rotated and/or translated parent(s)

			var m1 = new Matrix4();
			var vector = new Vector3();

			return function lookAt( x, y, z ) {

				if ( x.isVector3 ) {

					vector.copy( x );

				} else {

					vector.set( x, y, z );

				}

				if ( this.isCamera ) {

					m1.lookAt( this.position, vector, this.up );

				} else {

					m1.lookAt( vector, this.position, this.up );

				}

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( ( object && object.isObject3D ) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

				return this;

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

			return this;

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			return target.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new Vector3();
			var scale = new Vector3();

			return function getWorldQuaternion( target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
					target = new Quaternion();

				}

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, target, scale );

				return target;

			};

		}(),

		getWorldScale: function () {

			var position = new Vector3();
			var quaternion = new Quaternion();

			return function getWorldScale( target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
					target = new Vector3();

				}

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, target );

				return target;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
					target = new Vector3();

				}

				this.getWorldQuaternion( quaternion );

				return target.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate || force ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			// meta is a string when called from JSON.stringify
			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {}
				};

				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;
			if ( this.frustumCulled === false ) object.frustumCulled = false;
			if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();

			if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

			//

			function serialize( library, element ) {

				if ( library[ element.uuid ] === undefined ) {

					library[ element.uuid ] = element.toJSON( meta );

				}

				return element.uuid;

			}

			if ( this.isMesh || this.isLine || this.isPoints ) {

				object.geometry = serialize( meta.geometries, this.geometry );

				var parameters = this.geometry.parameters;

				if ( parameters !== undefined && parameters.shapes !== undefined ) {

					var shapes = parameters.shapes;

					if ( Array.isArray( shapes ) ) {

						for ( var i = 0, l = shapes.length; i < l; i ++ ) {

							var shape = shapes[ i ];

							serialize( meta.shapes, shape );

						}

					} else {

						serialize( meta.shapes, shapes );

					}

				}

			}

			if ( this.material !== undefined ) {

				if ( Array.isArray( this.material ) ) {

					var uuids = [];

					for ( var i = 0, l = this.material.length; i < l; i ++ ) {

						uuids.push( serialize( meta.materials, this.material[ i ] ) );

					}

					object.material = uuids;

				} else {

					object.material = serialize( meta.materials, this.material );

				}

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
				var shapes = extractFromCache( meta.shapes );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;
				if ( shapes.length > 0 ) output.shapes = shapes;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.layers.mask = source.layers.mask;
			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();
		this.projectionMatrix = new Matrix4();

	}

	Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Camera,

		isCamera: true,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );
			this.projectionMatrix.copy( source.projectionMatrix );

			return this;

		},

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
					target = new Vector3();

				}

				this.getWorldQuaternion( quaternion );

				return target.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			};

		}(),

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			this.matrixWorldInverse.getInverse( this.matrixWorld );

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null && this.view.enabled ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = ( color && color.isColor ) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Object.assign( Face3.prototype, {

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	var geometryId = 0; // Geometry uses even numbers as Id

	function Geometry() {

		Object.defineProperty( this, 'id', { value: geometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Geometry,

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1 = new Matrix4();

			return function rotateX( angle ) {

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1 = new Matrix4();

			return function rotateY( angle ) {

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1 = new Matrix4();

			return function rotateZ( angle ) {

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1 = new Matrix4();

			return function translate( x, y, z ) {

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1 = new Matrix4();

			return function scale( x, y, z ) {

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj = new Object3D();

			return function lookAt( vector ) {

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			var groups = geometry.groups;

			if ( groups.length > 0 ) {

				for ( var i = 0; i < groups.length; i ++ ) {

					var group = groups[ i ];

					var start = group.start;
					var count = group.count;

					for ( var j = start, jl = start + count; j < jl; j += 3 ) {

						if ( indices !== undefined ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

						} else {

							addFace( j, j + 1, j + 2, group.materialIndex );

						}

					}

				}

			} else {

				if ( indices !== undefined ) {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				} else {

					for ( var i = 0; i < positions.length / 3; i += 3 ) {

						addFace( i, i + 1, i + 2 );

					}

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			var offset = new Vector3();

			return function center() {

				this.computeBoundingBox();

				this.boundingBox.getCenter( offset ).negate();

				this.translate( offset.x, offset.y, offset.z );

				return this;

			};

		}(),

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( ! ( geometry && geometry.isGeometry ) ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				uvs1 = this.faceVertexUvs[ 0 ],
				uvs2 = geometry.faceVertexUvs[ 0 ],
				colors1 = this.colors,
				colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( ! ( mesh && mesh.isMesh ) ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		setFromPoints: function ( points ) {

			this.vertices = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return this;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			var i, il, j, jl, k, kl;

			// reset

			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
			this.morphTargets = [];
			this.morphNormals = [];
			this.skinWeights = [];
			this.skinIndices = [];
			this.lineDistances = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// vertices

			var vertices = source.vertices;

			for ( i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			// colors

			var colors = source.colors;

			for ( i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			// faces

			var faces = source.faces;

			for ( i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			// face vertex uvs

			for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			// morph targets

			var morphTargets = source.morphTargets;

			for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = {};
				morphTarget.name = morphTargets[ i ].name;

				// vertices

				if ( morphTargets[ i ].vertices !== undefined ) {

					morphTarget.vertices = [];

					for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

						morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

					}

				}

				// normals

				if ( morphTargets[ i ].normals !== undefined ) {

					morphTarget.normals = [];

					for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

						morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

					}

				}

				this.morphTargets.push( morphTarget );

			}

			// morph normals

			var morphNormals = source.morphNormals;

			for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

				var morphNormal = {};

				// vertex normals

				if ( morphNormals[ i ].vertexNormals !== undefined ) {

					morphNormal.vertexNormals = [];

					for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

						var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
						var destVertexNormal = {};

						destVertexNormal.a = srcVertexNormal.a.clone();
						destVertexNormal.b = srcVertexNormal.b.clone();
						destVertexNormal.c = srcVertexNormal.c.clone();

						morphNormal.vertexNormals.push( destVertexNormal );

					}

				}

				// face normals

				if ( morphNormals[ i ].faceNormals !== undefined ) {

					morphNormal.faceNormals = [];

					for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

						morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

					}

				}

				this.morphNormals.push( morphNormal );

			}

			// skin weights

			var skinWeights = source.skinWeights;

			for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

				this.skinWeights.push( skinWeights[ i ].clone() );

			}

			// skin indices

			var skinIndices = source.skinIndices;

			for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

				this.skinIndices.push( skinIndices[ i ].clone() );

			}

			// line distances

			var lineDistances = source.lineDistances;

			for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

				this.lineDistances.push( lineDistances[ i ] );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// update flags

			this.elementsNeedUpdate = source.elementsNeedUpdate;
			this.verticesNeedUpdate = source.verticesNeedUpdate;
			this.uvsNeedUpdate = source.uvsNeedUpdate;
			this.normalsNeedUpdate = source.normalsNeedUpdate;
			this.colorsNeedUpdate = source.colorsNeedUpdate;
			this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
			this.groupsNeedUpdate = source.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) this.version ++;

		}

	} );

	Object.assign( BufferAttribute.prototype, {

		isBufferAttribute: true,

		onUploadCallback: function () {},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.itemSize : 0;
			this.array = array;

			return this;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.name = source.name;
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		},

		clone: function () {

			return new this.constructor( this.array, this.itemSize ).copy( this );

		}

	} );

	//

	function Int8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

	}

	Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


	function Uint8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

	}

	Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


	function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

	}

	Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


	function Int16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

	}

	Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


	function Uint16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

	}

	Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


	function Int32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

	}

	Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


	function Uint32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

	}

	Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


	function Float32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

	}

	Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


	function Float64BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

	}

	Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, {

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex = undefined;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			if ( vertices.length > 0 && faces.length === 0 ) {

				console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

			}

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function arrayMax( array ) {

		if ( array.length === 0 ) return - Infinity;

		var max = array[ 0 ];

		for ( var i = 1, l = array.length; i < l; ++ i ) {

			if ( array[ i ] > max ) max = array[ i ];

		}

		return max;

	}

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

		this.userData = {};

	}

	BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: BufferGeometry,

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			if ( Array.isArray( index ) ) {

				this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

			} else {

				this.index = index;

			}

		},

		addAttribute: function ( name, attribute ) {

			if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				return this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return this;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToBufferAttribute( position );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToBufferAttribute( normal );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1 = new Matrix4();

			return function rotateX( angle ) {

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1 = new Matrix4();

			return function rotateY( angle ) {

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1 = new Matrix4();

			return function rotateZ( angle ) {

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1 = new Matrix4();

			return function translate( x, y, z ) {

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1 = new Matrix4();

			return function scale( x, y, z ) {

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj = new Object3D();

			return function lookAt( vector ) {

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			var offset = new Vector3();

			return function center() {

				this.computeBoundingBox();

				this.boundingBox.getCenter( offset ).negate();

				this.translate( offset.x, offset.y, offset.z );

				return this;

			};

		}(),

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object.isPoints || object.isLine ) {

				var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object.isMesh ) {

				if ( geometry && geometry.isGeometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		setFromPoints: function ( points ) {

			var position = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );

			}

			this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object.isMesh ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var position = this.attributes.position;

			if ( position !== undefined ) {

				this.boundingBox.setFromBufferAttribute( position );

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			var box = new Box3();
			var vector = new Vector3();

			return function computeBoundingSphere() {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new Sphere();

				}

				var position = this.attributes.position;

				if ( position ) {

					var center = this.boundingSphere.center;

					box.setFromBufferAttribute( position );
					box.getCenter( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = position.count; i < il; i ++ ) {

						vector.x = position.getX( i );
						vector.y = position.getY( i );
						vector.z = position.getZ( i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC;
				var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				var cb = new Vector3(), ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( ! ( geometry && geometry.isBufferGeometry ) ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) {

				offset = 0;

				console.warn(
					'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
					+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
				);

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var vector = new Vector3();

			return function normalizeNormals() {

				var normals = this.attributes.normal;

				for ( var i = 0, il = normals.count; i < il; i ++ ) {

					vector.x = normals.getX( i );
					vector.y = normals.getY( i );
					vector.z = normals.getZ( i );

					vector.normalize();

					normals.setXYZ( i, vector.x, vector.y, vector.z );

				}

			};

		}(),

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

			}

			var groups = this.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				geometry2.addGroup( group.start, group.count, group.materialIndex );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
			if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array,
					normalized: attribute.normalized
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var name, i, l;

			// reset

			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// index

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			// attributes

			var attributes = source.attributes;

			for ( name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			// morph attributes

			var morphAttributes = source.morphAttributes;

			for ( name in morphAttributes ) {

				var array = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

					array.push( morphAttribute[ i ].clone() );

				}

				this.morphAttributes[ name ] = array;

			}

			// groups

			var groups = source.groups;

			for ( i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// draw range

			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;

			// user data

			this.userData = source.userData;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// BoxGeometry

	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();

	}

	BoxGeometry.prototype = Object.create( Geometry.prototype );
	BoxGeometry.prototype.constructor = BoxGeometry;

	// BoxBufferGeometry

	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		BufferGeometry.call( this );

		this.type = 'BoxBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		var scope = this;

		width = width || 1;
		height = height || 1;
		depth = depth || 1;

		// segments

		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var numberOfVertices = 0;
		var groupStart = 0;

		// build each side of the box geometry

		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			var segmentWidth = width / gridX;
			var segmentHeight = height / gridY;

			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var vertexCounter = 0;
			var groupCount = 0;

			var ix, iy;

			var vector = new Vector3();

			// generate vertices, normals and uvs

			for ( iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segmentHeight - heightHalf;

				for ( ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segmentWidth - widthHalf;

					// set values to correct vector component

					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer

					vertices.push( vector.x, vector.y, vector.z );

					// set values to correct vector component

					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer

					normals.push( vector.x, vector.y, vector.z );

					// uvs

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

					// counters

					vertexCounter += 1;

				}

			}

			// indices

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// increase counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups

			groupStart += groupCount;

			// update total number of vertices

			numberOfVertices += vertexCounter;

		}

	}

	BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PlaneGeometry

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
		this.mergeVertices();

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	// PlaneBufferGeometry

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		width = width || 1;
		height = height || 1;

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var ix, iy;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices.push( x, - y, 0 );

				normals.push( 0, 0, 1 );

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

			}

		}

		// indices

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var materialId = 0;

	function Material() {

		Object.defineProperty( this, 'id', { value: materialId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;
		this.lights = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.flatShading = false;
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.shadowSide = null;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this.userData = {};

		this.needsUpdate = true;

	}

	Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Material,

		isMaterial: true,

		onBeforeCompile: function () {},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				// for backward compatability if shading is set in the constructor
				if ( key === 'shading' ) {

					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( newValue === FlatShading ) ? true : false;
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue && currentValue.isColor ) {

					currentValue.set( newValue );

				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = ( meta === undefined || typeof meta === 'string' );

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( this.color && this.color.isColor ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
			if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

			if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;
			if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
			if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

			if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;

			if ( this.aoMap && this.aoMap.isTexture ) {

				data.aoMap = this.aoMap.toJSON( meta ).uuid;
				data.aoMapIntensity = this.aoMapIntensity;

			}

			if ( this.bumpMap && this.bumpMap.isTexture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}

			if ( this.normalMap && this.normalMap.isTexture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();

			}

			if ( this.displacementMap && this.displacementMap.isTexture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}

			if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( this.envMap && this.envMap.isTexture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.gradientMap && this.gradientMap.isTexture ) {

				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.flatShading === true ) data.flatShading = this.flatShading;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			// rotation (SpriteMaterial)
			if ( this.rotation !== 0 ) data.rotation = this.rotation;

			if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
			if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
			if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
			if ( this.scale !== undefined ) data.scale = this.scale;

			if ( this.dithering === true ) data.dithering = true;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			if ( this.morphTargets === true ) data.morphTargets = true;
			if ( this.skinning === true ) data.skinning = true;

			if ( this.visible === false ) data.visible = false;
			if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;
			this.lights = source.lights;

			this.blending = source.blending;
			this.side = source.side;
			this.flatShading = source.flatShading;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.dithering = source.dithering;

			this.alphaTest = source.alphaTest;
			this.premultipliedAlpha = source.premultipliedAlpha;

			this.overdraw = source.overdraw;

			this.visible = source.visible;
			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			this.clipShadows = source.clipShadows;
			this.clipIntersection = source.clipIntersection;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

			this.clippingPlanes = dstPlanes;

			this.shadowSide = source.shadowSide;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = UniformsUtils.clone( source.uniforms );

		this.defines = Object.assign( {}, source.defines );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3();

	}

	Object.assign( Ray.prototype, {

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Ray: .at() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function () {

			var v1 = new Vector3();

			return function recast( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			target.subVectors( point, this.origin );

			var directionDistance = target.dot( this.direction );

			if ( directionDistance < 0 ) {

				return target.copy( this.origin );

			}

			return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new Vector3();

			return function distanceSqToPoint( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new Vector3();
			var segDir = new Vector3();
			var diff = new Vector3();

			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new Vector3();

			return function intersectSphere( sphere, target ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, target );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, target );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t : null;

		},

		intersectPlane: function ( plane, target ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, target );

		},

		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, target ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, target );

		},

		intersectsBox: ( function () {

			var v = new Vector3();

			return function intersectsBox( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new Vector3();
			var edge1 = new Vector3();
			var edge2 = new Vector3();
			var normal = new Vector3();

			return function intersectTriangle( a, b, c, backfaceCulling, target ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, target );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Object.assign( Triangle, {

		getNormal: function () {

			var v0 = new Vector3();

			return function getNormal( a, b, c, target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Triangle: .getNormal() target is now required' );
					target = new Vector3();

				}

				target.subVectors( c, b );
				v0.subVectors( a, b );
				target.cross( v0 );

				var targetLengthSq = target.lengthSq();
				if ( targetLengthSq > 0 ) {

					return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

				}

				return target.set( 0, 0, 0 );

			};

		}(),

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		getBarycoord: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();
			var v2 = new Vector3();

			return function getBarycoord( point, a, b, c, target ) {

				v0.subVectors( c, a );
				v1.subVectors( b, a );
				v2.subVectors( point, a );

				var dot00 = v0.dot( v0 );
				var dot01 = v0.dot( v1 );
				var dot02 = v0.dot( v2 );
				var dot11 = v1.dot( v1 );
				var dot12 = v1.dot( v2 );

				var denom = ( dot00 * dot11 - dot01 * dot01 );

				if ( target === undefined ) {

					console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
					target = new Vector3();

				}

				// collinear or singular triangle
				if ( denom === 0 ) {

					// arbitrary location outside of triangle?
					// not sure if this is the best idea, maybe should be returning undefined
					return target.set( - 2, - 1, - 1 );

				}

				var invDenom = 1 / denom;
				var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
				var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

				// barycentric coordinates must always sum to 1
				return target.set( 1 - u - v, v, u );

			};

		}(),

		containsPoint: function () {

			var v1 = new Vector3();

			return function containsPoint( point, a, b, c ) {

				Triangle.getBarycoord( point, a, b, c, v1 );

				return ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );

			};

		}()

	} );

	Object.assign( Triangle.prototype, {

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		getArea: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();

			return function getArea() {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		getMidpoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
				target = new Vector3();

			}

			return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		getNormal: function ( target ) {

			return Triangle.getNormal( this.a, this.b, this.c, target );

		},

		getPlane: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getPlane() target is now required' );
				target = new Vector3();

			}

			return target.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		getBarycoord: function ( point, target ) {

			return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		intersectsBox: function ( box ) {

			return box.intersectsTriangle( this );

		},

		closestPointToPoint: function () {

			var vab = new Vector3();
			var vac = new Vector3();
			var vbc = new Vector3();
			var vap = new Vector3();
			var vbp = new Vector3();
			var vcp = new Vector3();

			return function closestPointToPoint( p, target ) {

				if ( target === undefined ) {

					console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
					target = new Vector3();

				}

				var a = this.a, b = this.b, c = this.c;
				var v, w;

				// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
				// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
				// under the accompanying license; see chapter 5.1.5 for detailed explanation.
				// basically, we're distinguishing which of the voronoi regions of the triangle
				// the point lies in with the minimum amount of redundant computation.

				vab.subVectors( b, a );
				vac.subVectors( c, a );
				vap.subVectors( p, a );
				var d1 = vab.dot( vap );
				var d2 = vac.dot( vap );
				if ( d1 <= 0 && d2 <= 0 ) {

					// vertex region of A; barycentric coords (1, 0, 0)
					return target.copy( a );

				}

				vbp.subVectors( p, b );
				var d3 = vab.dot( vbp );
				var d4 = vac.dot( vbp );
				if ( d3 >= 0 && d4 <= d3 ) {

					// vertex region of B; barycentric coords (0, 1, 0)
					return target.copy( b );

				}

				var vc = d1 * d4 - d3 * d2;
				if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

					v = d1 / ( d1 - d3 );
					// edge region of AB; barycentric coords (1-v, v, 0)
					return target.copy( a ).addScaledVector( vab, v );

				}

				vcp.subVectors( p, c );
				var d5 = vab.dot( vcp );
				var d6 = vac.dot( vcp );
				if ( d6 >= 0 && d5 <= d6 ) {

					// vertex region of C; barycentric coords (0, 0, 1)
					return target.copy( c );

				}

				var vb = d5 * d2 - d1 * d6;
				if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

					w = d2 / ( d2 - d6 );
					// edge region of AC; barycentric coords (1-w, 0, w)
					return target.copy( a ).addScaledVector( vac, w );

				}

				var va = d3 * d6 - d5 * d4;
				if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

					vbc.subVectors( c, b );
					w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
					// edge region of BC; barycentric coords (0, 1-w, w)
					return target.copy( b ).addScaledVector( vbc, w ); // edge region of BC

				}

				// face region
				var denom = 1 / ( va + vb + vc );
				// u = va * denom
				v = vb * denom;
				w = vc * denom;
				return target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );

			};

		}(),

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			if ( source.morphTargetInfluences !== undefined ) {

				this.morphTargetInfluences = source.morphTargetInfluences.slice();

			}

			if ( source.morphTargetDictionary !== undefined ) {

				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

			}

			return this;

		},

		updateMorphTargets: function () {

			var geometry = this.geometry;
			var m, ml, name;

			if ( geometry.isBufferGeometry ) {

				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );

				if ( keys.length > 0 ) {

					var morphAttribute = morphAttributes[ keys[ 0 ] ];

					if ( morphAttribute !== undefined ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

							name = morphAttribute[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			} else {

				var morphTargets = geometry.morphTargets;

				if ( morphTargets !== undefined && morphTargets.length > 0 ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

						name = morphTargets[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		},

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();

			var tempA = new Vector3();
			var tempB = new Vector3();
			var tempC = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			var barycoord = new Vector3();

			var intersectionPoint = new Vector3();
			var intersectionPointWorld = new Vector3();

			function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

				Triangle.getBarycoord( point, p1, p2, p3, barycoord );

				uv1.multiplyScalar( barycoord.x );
				uv2.multiplyScalar( barycoord.y );
				uv3.multiplyScalar( barycoord.z );

				uv1.add( uv2 ).add( uv3 );

				return uv1.clone();

			}

			function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

				var intersect;

				if ( material.side === BackSide ) {

					intersect = ray.intersectTriangle( pC, pB, pA, true, point );

				} else {

					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

				}

				if ( intersect === null ) return null;

				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

				if ( distance < raycaster.near || distance > raycaster.far ) return null;

				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};

			}

			function checkBufferGeometryIntersection( object, material, raycaster, ray, position, uv, a, b, c ) {

				vA.fromBufferAttribute( position, a );
				vB.fromBufferAttribute( position, b );
				vC.fromBufferAttribute( position, c );

				var intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );

				if ( intersection ) {

					if ( uv ) {

						uvA.fromBufferAttribute( uv, a );
						uvB.fromBufferAttribute( uv, b );
						uvC.fromBufferAttribute( uv, c );

						intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

					}

					var face = new Face3( a, b, c );
					Triangle.getNormal( vA, vB, vC, face.normal );

					intersection.face = face;

				}

				return intersection;

			}

			return function raycast( raycaster, intersects ) {

				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;

				if ( material === undefined ) return;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				// Check boundingBox before continuing

				if ( geometry.boundingBox !== null ) {

					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

				}

				var intersection;

				if ( geometry.isBufferGeometry ) {

					var a, b, c;
					var index = geometry.index;
					var position = geometry.attributes.position;
					var uv = geometry.attributes.uv;
					var groups = geometry.groups;
					var drawRange = geometry.drawRange;
					var i, j, il, jl;
					var group, groupMaterial;
					var start, end;

					if ( index !== null ) {

						// indexed buffer geometry

						if ( Array.isArray( material ) ) {

							for ( i = 0, il = groups.length; i < il; i ++ ) {

								group = groups[ i ];
								groupMaterial = material[ group.materialIndex ];

								start = Math.max( group.start, drawRange.start );
								end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

								for ( j = start, jl = end; j < jl; j += 3 ) {

									a = index.getX( j );
									b = index.getX( j + 1 );
									c = index.getX( j + 2 );

									intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );

									if ( intersection ) {

										intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
										intersects.push( intersection );

									}

								}

							}

						} else {

							start = Math.max( 0, drawRange.start );
							end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

							for ( i = start, il = end; i < il; i += 3 ) {

								a = index.getX( i );
								b = index.getX( i + 1 );
								c = index.getX( i + 2 );

								intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
									intersects.push( intersection );

								}

							}

						}

					} else if ( position !== undefined ) {

						// non-indexed buffer geometry

						if ( Array.isArray( material ) ) {

							for ( i = 0, il = groups.length; i < il; i ++ ) {

								group = groups[ i ];
								groupMaterial = material[ group.materialIndex ];

								start = Math.max( group.start, drawRange.start );
								end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

								for ( j = start, jl = end; j < jl; j += 3 ) {

									a = j;
									b = j + 1;
									c = j + 2;

									intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );

									if ( intersection ) {

										intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
										intersects.push( intersection );

									}

								}

							}

						} else {

							start = Math.max( 0, drawRange.start );
							end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

							for ( i = start, il = end; i < il; i += 3 ) {

								a = i;
								b = i + 1;
								c = i + 2;

								intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
									intersects.push( intersection );

								}

							}

						}

					}

				} else if ( geometry.isGeometry ) {

					var fvA, fvB, fvC;
					var isMultiMaterial = Array.isArray( material );

					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var uvs;

					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

						var face = faces[ f ];
						var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

						if ( faceMaterial === undefined ) continue;

						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];

						if ( faceMaterial.morphTargets === true ) {

							var morphTargets = geometry.morphTargets;
							var morphInfluences = this.morphTargetInfluences;

							vA.set( 0, 0, 0 );
							vB.set( 0, 0, 0 );
							vC.set( 0, 0, 0 );

							for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

								var influence = morphInfluences[ t ];

								if ( influence === 0 ) continue;

								var targets = morphTargets[ t ].vertices;

								vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
								vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
								vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

							}

							vA.add( fvA );
							vB.add( fvB );
							vC.add( fvC );

							fvA = vA;
							fvB = vB;
							fvC = vC;

						}

						intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

						if ( intersection ) {

							if ( uvs && uvs[ f ] ) {

								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );

								intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

							}

							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );

						}

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

		var clearColor = new Color( 0x000000 );
		var clearAlpha = 0;

		var planeCamera, planeMesh;
		var boxMesh;

		function render( renderList, scene, camera, forceClear ) {

			var background = scene.background;

			if ( background === null ) {

				setClear( clearColor, clearAlpha );

			} else if ( background && background.isColor ) {

				setClear( background, 1 );
				forceClear = true;

			}

			if ( renderer.autoClear || forceClear ) {

				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

			}

			if ( background && background.isCubeTexture ) {

				if ( boxMesh === undefined ) {

					boxMesh = new Mesh(
						new BoxBufferGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							uniforms: ShaderLib.cube.uniforms,
							vertexShader: ShaderLib.cube.vertexShader,
							fragmentShader: ShaderLib.cube.fragmentShader,
							side: BackSide,
							depthTest: true,
							depthWrite: false,
							fog: false
						} )
					);

					boxMesh.geometry.removeAttribute( 'normal' );
					boxMesh.geometry.removeAttribute( 'uv' );

					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

						this.matrixWorld.copyPosition( camera.matrixWorld );

					};

					objects.update( boxMesh );

				}

				boxMesh.material.uniforms.tCube.value = background;

				renderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );

			} else if ( background && background.isTexture ) {

				if ( planeCamera === undefined ) {

					planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

					planeMesh = new Mesh(
						new PlaneBufferGeometry( 2, 2 ),
						new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
					);

					objects.update( planeMesh );

				}

				planeMesh.material.map = background;

				// TODO Push this to renderList

				renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

			}

		}

		function setClear( color, alpha ) {

			state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

		}

		return {

			getClearColor: function () {

				return clearColor;

			},
			setClearColor: function ( color, alpha ) {

				clearColor.set( color );
				clearAlpha = alpha !== undefined ? alpha : 1;
				setClear( clearColor, clearAlpha );

			},
			getClearAlpha: function () {

				return clearAlpha;

			},
			setClearAlpha: function ( alpha ) {

				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			render: render

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			info.update( count, mode );

		}

		function renderInstances( geometry, start, count ) {

			var extension;

			if ( capabilities.isWebGL2 ) {

				extension = gl;

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );

			info.update( count, mode, geometry.maxInstancedCount );

		}

		//

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		return {

			isWebGL2: isWebGL2,

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function ( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function () {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function () {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

				// there's no local clipping

				if ( renderingShadows ) {

					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();

				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;

			return dstArray;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, attributes, info ) {

		var geometries = {};
		var wireframeAttributes = {};

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				attributes.remove( buffergeometry.index );

			}

			for ( var name in buffergeometry.attributes ) {

				attributes.remove( buffergeometry.attributes[ name ] );

			}

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			var attribute = wireframeAttributes[ buffergeometry.id ];

			if ( attribute ) {

				attributes.remove( attribute );
				delete wireframeAttributes[ buffergeometry.id ];

			}

			//

			info.memory.geometries --;

		}

		function get( object, geometry ) {

			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry ) return buffergeometry;

			geometry.addEventListener( 'dispose', onGeometryDispose );

			if ( geometry.isBufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry.isGeometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries[ geometry.id ] = buffergeometry;

			info.memory.geometries ++;

			return buffergeometry;

		}

		function update( geometry ) {

			var index = geometry.index;
			var geometryAttributes = geometry.attributes;

			if ( index !== null ) {

				attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in geometryAttributes ) {

				attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					attributes.update( array[ i ], gl.ARRAY_BUFFER );

				}

			}

		}

		function getWireframeAttribute( geometry ) {

			var attribute = wireframeAttributes[ geometry.id ];

			if ( attribute ) return attribute;

			var indices = [];

			var geometryIndex = geometry.index;
			var geometryAttributes = geometry.attributes;

			// console.time( 'wireframe' );

			if ( geometryIndex !== null ) {

				var array = geometryIndex.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = geometryAttributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

			attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

			wireframeAttributes[ geometry.id ] = attribute;

			return attribute;

		}

		return {

			get: get,
			update: update,

			getWireframeAttribute: getWireframeAttribute

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, bytesPerElement;

		function setIndex( value ) {

			type = value.type;
			bytesPerElement = value.bytesPerElement;

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * bytesPerElement );

			info.update( count, mode );

		}

		function renderInstances( geometry, start, count ) {

			var extension;

			if ( capabilities.isWebGL2 ) {

				extension = gl;

			} else {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

			info.update( count, mode, geometry.maxInstancedCount );

		}

		//

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WebGLInfo( gl ) {

		var memory = {
			geometries: 0,
			textures: 0
		};

		var render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update( count, mode, instanceCount ) {

			instanceCount = instanceCount || 1;

			render.calls ++;

			switch ( mode ) {

				case gl.TRIANGLES:
					render.triangles += instanceCount * ( count / 3 );
					break;

				case gl.TRIANGLE_STRIP:
				case gl.TRIANGLE_FAN:
					render.triangles += instanceCount * ( count - 2 );
					break;

				case gl.LINES:
					render.lines += instanceCount * ( count / 2 );
					break;

				case gl.LINE_STRIP:
					render.lines += instanceCount * ( count - 1 );
					break;

				case gl.LINE_LOOP:
					render.lines += instanceCount * count;
					break;

				case gl.POINTS:
					render.points += instanceCount * count;
					break;

				default:
					console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
					break;

			}

		}

		function reset() {

			render.frame ++;
			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;

		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

	}

	function WebGLMorphtargets( gl ) {

		var influencesList = {};
		var morphInfluences = new Float32Array( 8 );

		function update( object, geometry, material, program ) {

			var objectInfluences = object.morphTargetInfluences;

			var length = objectInfluences.length;

			var influences = influencesList[ geometry.id ];

			if ( influences === undefined ) {

				// initialise list

				influences = [];

				for ( var i = 0; i < length; i ++ ) {

					influences[ i ] = [ i, 0 ];

				}

				influencesList[ geometry.id ] = influences;

			}

			var morphTargets = material.morphTargets && geometry.morphAttributes.position;
			var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

			// Remove current morphAttributes

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				if ( influence[ 1 ] !== 0 ) {

					if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
					if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );

				}

			}

			// Collect influences

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];

			}

			influences.sort( absNumericalSort );

			// Add morphAttributes

			for ( var i = 0; i < 8; i ++ ) {

				var influence = influences[ i ];

				if ( influence ) {

					var index = influence[ 0 ];
					var value = influence[ 1 ];

					if ( value ) {

						if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
						if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );

						morphInfluences[ i ] = value;
						continue;

					}

				}

				morphInfluences[ i ] = 0;

			}

			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

		}

		return {

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( geometries, info ) {

		var updateList = {};

		function update( object ) {

			var frame = info.render.frame;

			var geometry = object.geometry;
			var buffergeometry = geometries.get( object, geometry );

			// Update once per frame

			if ( updateList[ buffergeometry.id ] !== frame ) {

				if ( geometry.isGeometry ) {

					buffergeometry.updateFromObject( object );

				}

				geometries.update( buffergeometry );

				updateList[ buffergeometry.id ] = frame;

			}

			return buffergeometry;

		}

		function dispose() {

			updateList = {};

		}

		return {

			update: update,
			dispose: dispose

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author tschw
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyCubeTexture = new CubeTexture();

	// --- Base for inner nodes (including the root) ---

	function UniformContainer() {

		this.seq = [];
		this.map = {};

	}

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Float32Array caches used for uploading Matrix uniforms

	var mat4array = new Float32Array( 16 );
	var mat3array = new Float32Array( 9 );
	var mat2array = new Float32Array( 4 );

	// Flattening for arrays of vectors and matrices

	function flatten$h( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	function arraysEqual( a, b ) {

		if ( a.length !== b.length ) return false;

		for ( var i = 0, l = a.length; i < l; i ++ ) {

			if ( a[ i ] !== b[ i ] ) return false;

		}

		return true;

	}

	function copyArray( a, b ) {

		for ( var i = 0, l = b.length; i < l; i ++ ) {

			a[ i ] = b[ i ];

		}

	}

	// Texture unit allocation

	function allocTexUnits( renderer, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			r[ i ] = renderer.allocTextureUnit();

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValue1f( gl, v ) {

		var cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1f( this.addr, v );

		cache[ 0 ] = v;

	}

	function setValue1i( gl, v ) {

		var cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1i( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single float vector (from flat array or THREE.VectorN)

	function setValue2fv( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2f( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValue3fv( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3f( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else if ( v.r !== undefined ) {

			if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

				gl.uniform3f( this.addr, v.r, v.g, v.b );

				cache[ 0 ] = v.r;
				cache[ 1 ] = v.g;
				cache[ 2 ] = v.b;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValue4fv( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single matrix (from flat array or MatrixN)

	function setValue2fm( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix2fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat2array.set( elements );

			gl.uniformMatrix2fv( this.addr, false, mat2array );

			copyArray( cache, elements );

		}

	}

	function setValue3fm( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix3fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat3array.set( elements );

			gl.uniformMatrix3fv( this.addr, false, mat3array );

			copyArray( cache, elements );

		}

	}

	function setValue4fm( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix4fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat4array.set( elements );

			gl.uniformMatrix4fv( this.addr, false, mat4array );

			copyArray( cache, elements );

		}

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, renderer ) {

		var cache = this.cache;
		var unit = renderer.allocTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		renderer.setTexture2D( v || emptyTexture, unit );

	}

	function setValueT6( gl, v, renderer ) {

		var cache = this.cache;
		var unit = renderer.allocTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		renderer.setTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValue2iv( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform2iv( this.addr, v );

		copyArray( cache, v );

	}

	function setValue3iv( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform3iv( this.addr, v );

		copyArray( cache, v );

	}

	function setValue4iv( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform4iv( this.addr, v );

		copyArray( cache, v );

	}

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1f; // FLOAT
			case 0x8b50: return setValue2fv; // _VEC2
			case 0x8b51: return setValue3fv; // _VEC3
			case 0x8b52: return setValue4fv; // _VEC4

			case 0x8b5a: return setValue2fm; // _MAT2
			case 0x8b5b: return setValue3fm; // _MAT3
			case 0x8b5c: return setValue4fm; // _MAT4

			case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
			case 0x8b60: return setValueT6; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// Array of scalars

	function setValue1fv( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform1fv( this.addr, v );

		copyArray( cache, v );

	}
	function setValue1iv( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform1iv( this.addr, v );

		copyArray( cache, v );

	}

	// Array of vectors (flat or from THREE classes)

	function setValueV2a( gl, v ) {

		var cache = this.cache;
		var data = flatten$h( v, this.size, 2 );

		if ( arraysEqual( cache, data ) ) return;

		gl.uniform2fv( this.addr, data );

		this.updateCache( data );

	}

	function setValueV3a( gl, v ) {

		var cache = this.cache;
		var data = flatten$h( v, this.size, 3 );

		if ( arraysEqual( cache, data ) ) return;

		gl.uniform3fv( this.addr, data );

		this.updateCache( data );

	}

	function setValueV4a( gl, v ) {

		var cache = this.cache;
		var data = flatten$h( v, this.size, 4 );

		if ( arraysEqual( cache, data ) ) return;

		gl.uniform4fv( this.addr, data );

		this.updateCache( data );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2a( gl, v ) {

		var cache = this.cache;
		var data = flatten$h( v, this.size, 4 );

		if ( arraysEqual( cache, data ) ) return;

		gl.uniformMatrix2fv( this.addr, false, data );

		this.updateCache( data );

	}

	function setValueM3a( gl, v ) {

		var cache = this.cache;
		var data = flatten$h( v, this.size, 9 );

		if ( arraysEqual( cache, data ) ) return;

		gl.uniformMatrix3fv( this.addr, false, data );

		this.updateCache( data );

	}

	function setValueM4a( gl, v ) {

		var cache = this.cache;
		var data = flatten$h( v, this.size, 16 );

		if ( arraysEqual( cache, data ) ) return;

		gl.uniformMatrix4fv( this.addr, false, data );

		this.updateCache( data );

	}

	// Array of textures (2D / Cube)

	function setValueT1a( gl, v, renderer ) {

		var cache = this.cache;
		var n = v.length;

		var units = allocTexUnits( renderer, n );

		if ( arraysEqual( cache, units ) === false ) {

			gl.uniform1iv( this.addr, units );
			copyArray( cache, units );

		}

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6a( gl, v, renderer ) {

		var cache = this.cache;
		var n = v.length;

		var units = allocTexUnits( renderer, n );

		if ( arraysEqual( cache, units ) === false ) {

			gl.uniform1iv( this.addr, units );
			copyArray( cache, units );

		}

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1fv; // FLOAT
			case 0x8b50: return setValueV2a; // _VEC2
			case 0x8b51: return setValueV3a; // _VEC3
			case 0x8b52: return setValueV4a; // _VEC4

			case 0x8b5a: return setValueM2a; // _MAT2
			case 0x8b5b: return setValueM3a; // _MAT3
			case 0x8b5c: return setValueM4a; // _MAT4

			case 0x8b5e: return setValueT1a; // SAMPLER_2D
			case 0x8b60: return setValueT6a; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	PureArrayUniform.prototype.updateCache = function ( data ) {

		var cache = this.cache;

		if ( data instanceof Float32Array && cache.length !== data.length ) {

			this.cache = new Float32Array( data.length );

		}

		copyArray( cache, data );

	};

	function StructuredUniform( id ) {

		this.id = id;

		UniformContainer.call( this ); // mix-in

	}

	StructuredUniform.prototype.setValue = function ( gl, value ) {

		// Note: Don't need an extra 'renderer' parameter, since samplers
		// are not allowed in structured uniforms.

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ] );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		while ( true ) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {

				// step into inner node / create it in case it doesn't exist

				var map = container.map, next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program, renderer ) {

		UniformContainer.call( this );

		this.renderer = renderer;

		var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

		for ( var i = 0; i < n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				addr = gl.getUniformLocation( program, info.name );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, value, this.renderer );

	};

	WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) this.setValue( gl, name, v );

	};


	// Static interface

	WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {

				// note: always updating when .needsUpdate is undefined
				u.setValue( gl, v.value, renderer );

			}

		}

	};

	WebGLUniforms.seqWithValue = function ( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) r.push( u );

		}

		return r;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

		}

		if ( gl.getShaderInfoLog( shader ) !== '' ) {

			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

		}

		// --enable-privileged-webgl-extension
		// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear', '( value )' ];
			case sRGBEncoding:
				return [ 'sRGB', '( value )' ];
			case RGBEEncoding:
				return [ 'RGBE', '( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM', '( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM', '( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD', '( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case Uncharted2ToneMapping:
				toneMappingName = 'Uncharted2';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

	}

	function replaceClippingPlaneNums( string, parameters ) {

		return string
			.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
			.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

	}

	function parseIncludes( string ) {

		var pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

		function replace( match, include ) {

			var replace = ShaderChunk[ include ];

			if ( replace === undefined ) {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

			return parseIncludes( replace );

		}

		return string.replace( pattern, replace );

	}

	function unrollLoops( string ) {

		var pattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

		function replace( match, start, end, snippet ) {

			var unroll = '';

			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

				unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

			}

			return unroll;

		}

		return string.replace( pattern, replace );

	}

	function WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities ) {

		var gl = renderer.context;

		var defines = material.defines;

		var vertexShader = shader.vertexShader;
		var fragmentShader = shader.fragmentShader;

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		}

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( material.envMap.mapping ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

			switch ( material.envMap.mapping ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

			switch ( material.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		// console.log( 'building new program ' );

		//

		var customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );

		var customDefines = generateDefines( defines );

		//

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixVertex.length > 0 ) {

				prefixVertex += '\n';

			}

			prefixFragment = [

				customExtensions,
				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixFragment.length > 0 ) {

				prefixFragment += '\n';

			}

		} else {

			prefixVertex = [

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,
				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

				parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				parameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',

				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

				parameters.dithering ? '#define DITHERING' : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

				parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = parseIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );
		vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

		fragmentShader = parseIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );
		fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

		if ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {

			var isGLSL3ShaderMaterial = false;

			var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

			if ( material.isShaderMaterial &&
				vertexShader.match( versionRegex ) !== null &&
				fragmentShader.match( versionRegex ) !== null ) {

				isGLSL3ShaderMaterial = true;

				vertexShader = vertexShader.replace( versionRegex, '' );
				fragmentShader = fragmentShader.replace( versionRegex, '' );

			}

			// GLSL 3.0 conversion
			prefixVertex = [
				'#version 300 es\n',
				'#define attribute in',
				'#define varying out',
				'#define texture2D texture'
			].join( '\n' ) + '\n' + prefixVertex;

			prefixFragment = [
				'#version 300 es\n',
				'#define varying in',
				isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
				isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
				'#define gl_FragDepthEXT gl_FragDepth',
				'#define texture2D texture',
				'#define textureCube texture',
				'#define texture2DProj textureProj',
				'#define texture2DLodEXT textureLod',
				'#define texture2DProjLodEXT textureProjLod',
				'#define textureCubeLodEXT textureLod',
				'#define texture2DGradEXT textureGrad',
				'#define texture2DProjGradEXT textureProjGrad',
				'#define textureCubeGradEXT textureGrad'
			].join( '\n' ) + '\n' + prefixFragment;

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		var programLog = gl.getProgramInfoLog( program ).trim();
		var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
		var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

		var runnable = true;
		var haveDiagnostics = true;

		// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
		// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

			runnable = false;

			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,
				material: material,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function () {

			if ( cachedUniforms === undefined ) {

				cachedUniforms = new WebGLUniforms( gl, program, renderer );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function () {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function () {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		// DEPRECATED

		Object.defineProperties( this, {

			uniforms: {
				get: function () {

					console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
					return this.getUniforms();

				}
			},

			attributes: {
				get: function () {

					console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
					return this.getAttributes();

				}
			}

		} );


		//

		this.name = shader.name;
		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, extensions, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap", "gradientMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
		];


		function allocateBones( object ) {

			var skeleton = object.skeleton;
			var bones = skeleton.bones;

			if ( capabilities.floatVertexTextures ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = Math.min( nVertexMatrices, bones.length );

				if ( maxBones < bones.length ) {

					console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
					return 0;

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( map.isTexture ) {

				encoding = map.encoding;

			} else if ( map.isWebGLRenderTarget ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
			var precision = capabilities.precision;

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getRenderTarget();

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				gradientMap: !! material.gradientMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: !! fog,
				useFog: material.fog,
				fogExp: ( fog && fog.isFogExp2 ),

				flatShading: material.flatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				dithering: material.dithering,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			array.push( material.onBeforeCompile.toString() );

			array.push( renderer.gammaOutput );

			return array.join();

		};

		this.acquireProgram = function ( material, shader, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function ( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = new WeakMap();

		function get( object ) {

			var map = properties.get( object );

			if ( map === undefined ) {

				map = {};
				properties.set( object, map );

			}

			return map;

		}

		function remove( object ) {

			properties.delete( object );

		}

		function update( object, key, value ) {

			properties.get( object )[ key ] = value;

		}

		function dispose() {

			properties = new WeakMap();

		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function painterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.program && b.program && a.program !== b.program ) {

			return a.program.id - b.program.id;

		} else if ( a.material.id !== b.material.id ) {

			return a.material.id - b.material.id;

		} else if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}


	function WebGLRenderList() {

		var renderItems = [];
		var renderItemsIndex = 0;

		var opaque = [];
		var transparent = [];

		function init() {

			renderItemsIndex = 0;

			opaque.length = 0;
			transparent.length = 0;

		}

		function push( object, geometry, material, z, group ) {

			var renderItem = renderItems[ renderItemsIndex ];

			if ( renderItem === undefined ) {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					program: material.program,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};

				renderItems[ renderItemsIndex ] = renderItem;

			} else {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.program = material.program;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;

			}


			( material.transparent === true ? transparent : opaque ).push( renderItem );

			renderItemsIndex ++;

		}

		function sort() {

			if ( opaque.length > 1 ) opaque.sort( painterSortStable );
			if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );

		}

		return {
			opaque: opaque,
			transparent: transparent,

			init: init,
			push: push,

			sort: sort
		};

	}

	function WebGLRenderLists() {

		var lists = {};

		function get( scene, camera ) {

			var hash = scene.id + ',' + camera.id;
			var list = lists[ hash ];

			if ( list === undefined ) {

				// console.log( 'THREE.WebGLRenderLists:', hash );

				list = new WebGLRenderList();
				lists[ hash ] = list;

			}

			return list;

		}

		function dispose() {

			lists = {};

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function UniformsCache() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
							// TODO (abelnation): set RectAreaLight shadow uniforms
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	var count = 0;

	function WebGLLights() {

		var cache = new UniformsCache();

		var state = {

			id: count ++,

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: []

		};

		var vector3 = new Vector3();
		var matrix4 = new Matrix4();
		var matrix42 = new Matrix4();

		function setup( lights, shadows, camera ) {

			var r = 0, g = 0, b = 0;

			var directionalLength = 0;
			var pointLength = 0;
			var spotLength = 0;
			var rectAreaLength = 0;
			var hemiLength = 0;

			var viewMatrix = camera.matrixWorldInverse;

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				var color = light.color;
				var intensity = light.intensity;
				var distance = light.distance;

				var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isDirectionalLight ) {

					var uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

					}

					state.directionalShadowMap[ directionalLength ] = shadowMap;
					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					state.directional[ directionalLength ] = uniforms;

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

					}

					state.spotShadowMap[ spotLength ] = shadowMap;
					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					state.spot[ spotLength ] = uniforms;

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					var uniforms = cache.get( light );

					// (a) intensity is the total visible light emitted
					//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

					// (b) intensity is the brightness of the light
					uniforms.color.copy( color ).multiplyScalar( intensity );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					// extract local rotation of light to derive width/height half vectors
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );

					// TODO (abelnation): RectAreaLight distance?
					// uniforms.distance = distance;

					state.rectArea[ rectAreaLength ] = uniforms;

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
						uniforms.shadowCameraNear = shadow.camera.near;
						uniforms.shadowCameraFar = shadow.camera.far;

					}

					state.pointShadowMap[ pointLength ] = shadowMap;
					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
					state.point[ pointLength ] = uniforms;

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					var uniforms = cache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					state.hemi[ hemiLength ] = uniforms;

					hemiLength ++;

				}

			}

			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;

			state.directional.length = directionalLength;
			state.spot.length = spotLength;
			state.rectArea.length = rectAreaLength;
			state.point.length = pointLength;
			state.hemi.length = hemiLength;

			state.hash = state.id + ',' + directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;

		}

		return {
			setup: setup,
			state: state
		};

	}

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WebGLRenderState() {

		var lights = new WebGLLights();

		var lightsArray = [];
		var shadowsArray = [];

		function init() {

			lightsArray.length = 0;
			shadowsArray.length = 0;

		}

		function pushLight( light ) {

			lightsArray.push( light );

		}

		function pushShadow( shadowLight ) {

			shadowsArray.push( shadowLight );

		}

		function setupLights( camera ) {

			lights.setup( lightsArray, shadowsArray, camera );

		}

		var state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,

			lights: lights
		};

		return {
			init: init,
			state: state,
			setupLights: setupLights,

			pushLight: pushLight,
			pushShadow: pushShadow
		};

	}

	function WebGLRenderStates() {

		var renderStates = {};

		function get( scene, camera ) {

			var hash = scene.id + ',' + camera.id;

			var renderState = renderStates[ hash ];

			if ( renderState === undefined ) {

				renderState = new WebGLRenderState();
				renderStates[ hash ] = renderState;

			}

			return renderState;

		}

		function dispose() {

			renderStates = {};

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  referencePosition: <float>,
	 *  nearDistance: <float>,
	 *  farDistance: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>
	 *
	 * }
	 */

	function MeshDistanceMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDistanceMaterial';

		this.referencePosition = new Vector3();
		this.nearDistance = 1;
		this.farDistance = 1000;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDistanceMaterial.prototype = Object.create( Material.prototype );
	MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

	MeshDistanceMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.referencePosition.copy( source.referencePosition );
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

		var _frustum = new Frustum(),
			_projScreenMatrix = new Matrix4(),

			_shadowMapSize = new Vector2(),
			_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),

			_lookTarget = new Vector3(),
			_lightPositionWorld = new Vector3(),

			_MorphingFlag = 1,
			_SkinningFlag = 2,

			_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

			_depthMaterials = new Array( _NumberOfMaterialVariants ),
			_distanceMaterials = new Array( _NumberOfMaterialVariants ),

			_materialCache = {};

		var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

		var cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new Vector4(), new Vector4(), new Vector4(),
			new Vector4(), new Vector4(), new Vector4()
		];

		// init

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = new MeshDepthMaterial( {

				depthPacking: RGBADepthPacking,

				morphTargets: useMorphing,
				skinning: useSkinning

			} );

			_depthMaterials[ i ] = depthMaterial;

			//

			var distanceMaterial = new MeshDistanceMaterial( {

				morphTargets: useMorphing,
				skinning: useSkinning

			} );

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.render = function ( lights, scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( lights.length === 0 ) return;

			// TODO Clean up (needed in case of contextlost)
			var _gl = _renderer.context;
			var _state = _renderer.state;

			// Set GL state for depth map.
			_state.disable( _gl.BLEND );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );

			// render depth map

			var faceCount;

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];
				var shadow = light.shadow;
				var isPointLight = light && light.isPointLight;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				var shadowCamera = shadow.camera;

				_shadowMapSize.copy( shadow.mapSize );
				_shadowMapSize.min( _maxShadowMapSize );

				if ( isPointLight ) {

					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";

					shadowCamera.updateProjectionMatrix();

				}

				if ( shadow.isSpotLightShadow ) {

					shadow.update( light );

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				if ( isPointLight ) {

					faceCount = 6;

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position

					shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

				} else {

					faceCount = 1;

					_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

				}

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );
						shadowCamera.updateMatrixWorld();

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					}

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					renderObject( scene, camera, shadowCamera, isPointLight );

				}

			}

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {

			var geometry = object.geometry;

			var result = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = false;

				if ( material.morphTargets ) {

					if ( geometry && geometry.isBufferGeometry ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( geometry && geometry.isGeometry ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				if ( object.isSkinnedMesh && material.skinning === false ) {

					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

				}

				var useSkinning = object.isSkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				result = materialVariants[ variantIndex ];

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
					material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			result.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( isPointLight && result.isMeshDistanceMaterial ) {

				result.referencePosition.copy( lightPositionWorld );
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;

			}

			return result;

		}

		function renderObject( object, camera, shadowCamera, isPointLight ) {

			if ( object.visible === false ) return;

			var visible = object.layers.test( camera.layers );

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					var geometry = _objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

							var group = groups[ k ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

							}

						}

					} else if ( material.visible ) {

						var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				renderObject( children[ i ], camera, shadowCamera, isPointLight );

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, utils, capabilities ) {

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4( 0, 0, 0, 0 );

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a, premultipliedAlpha ) {

					if ( premultipliedAlpha === true ) {

						r *= a; g *= a; b *= a;

					}

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( gl.NEVER );
									break;

								case AlwaysDepth:

									gl.depthFunc( gl.ALWAYS );
									break;

								case LessDepth:

									gl.depthFunc( gl.LESS );
									break;

								case LessEqualDepth:

									gl.depthFunc( gl.LEQUAL );
									break;

								case EqualDepth:

									gl.depthFunc( gl.EQUAL );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( gl.GEQUAL );
									break;

								case GreaterDepth:

									gl.depthFunc( gl.GREATER );
									break;

								case NotEqualDepth:

									gl.depthFunc( gl.NOTEQUAL );
									break;

								default:

									gl.depthFunc( gl.LEQUAL );

							}

						} else {

							gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( stencilTest ) {

						enable( gl.STENCIL_TEST );

					} else {

						disable( gl.STENCIL_TEST );

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var enabledCapabilities = {};

		var compressedTextureFormats = null;

		var currentProgram = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

		var lineWidthAvailable = false;
		var version = 0;
		var glVersion = gl.getParameter( gl.VERSION );

		if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

			version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 1.0 );

		} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

			version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 2.0 );

		}

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		// init

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( gl.DEPTH_TEST );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( gl.CULL_FACE );

		enable( gl.BLEND );
		setBlending( NormalBlending );

		//

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			enableAttributeAndDivisor( attribute, 0 );

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				var extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

				extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( enabledCapabilities[ id ] !== true ) {

				gl.enable( id );
				enabledCapabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( enabledCapabilities[ id ] !== false ) {

				gl.disable( id );
				enabledCapabilities[ id ] = false;

			}

		}

		function getCompressedTextureFormats() {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||
				     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		}

		function useProgram( program ) {

			if ( currentProgram !== program ) {

				gl.useProgram( program );

				currentProgram = program;

				return true;

			}

			return false;

		}

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending !== NoBlending ) {

				enable( gl.BLEND );

			} else {

				disable( gl.BLEND );

			}

			if ( blending !== CustomBlending ) {

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					switch ( blending ) {

						case AdditiveBlending:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

							} else {

								gl.blendEquation( gl.FUNC_ADD );
								gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

							}
							break;

						case SubtractiveBlending:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

							} else {

								gl.blendEquation( gl.FUNC_ADD );
								gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

							}
							break;

						case MultiplyBlending:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

							} else {

								gl.blendEquation( gl.FUNC_ADD );
								gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

							}
							break;

						default:

							if ( premultipliedAlpha ) {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

							} else {

								gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
								gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

							}

					}

				}

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			} else {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			}

			currentBlending = blending;
			currentPremultipledAlpha = premultipliedAlpha;

		}

		function setMaterial( material, frontFaceCW ) {

			material.side === DoubleSide
				? disable( gl.CULL_FACE )
				: enable( gl.CULL_FACE );

			var flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) flipSided = ! flipSided;

			setFlipSided( flipSided );

			( material.blending === NormalBlending && material.transparent === false )
				? setBlending( NoBlending )
				: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );

			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				if ( lineWidthAvailable ) gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function setScissorTest( scissorTest ) {

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			enabledCapabilities = {};

			compressedTextureFormats = null;

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentProgram = null;

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,
			getCompressedTextureFormats: getCompressedTextureFormats,

			useProgram: useProgram,

			setBlending: setBlending,
			setMaterial: setMaterial,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

		var _videoTextures = {};
		var _canvas;

		//

		function clampToMaxSize( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				if ( 'data' in image ) {

					console.warn( 'THREE.WebGLRenderer: image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
					return;

				}

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {

				if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

				_canvas.width = _Math.floorPowerOfTwo( image.width );
				_canvas.height = _Math.floorPowerOfTwo( image.height );

				var context = _canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, _canvas.width, _canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height, image );

				return _canvas;

			}

			return image;

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( capabilities.isWebGL2 ) return false;

			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

		}

		function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

			return texture.generateMipmaps && isPowerOfTwo &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

		}

		function generateMipmap( target, texture, width, height ) {

			_gl.generateMipmap( target );

			var textureProperties = properties.get( texture );

			// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
			textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

		}

		function getInternalFormat( glFormat, glType ) {

			if ( ! capabilities.isWebGL2 ) return glFormat;

			if ( glFormat === _gl.RGB ) {

				if ( glType === _gl.FLOAT ) return _gl.RGB32F;
				if ( glType === _gl.HALF_FLOAT ) return _gl.RGB16F;
				if ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGB8;

			}

			if ( glFormat === _gl.RGBA ) {

				if ( glType === _gl.FLOAT ) return _gl.RGBA32F;
				if ( glType === _gl.HALF_FLOAT ) return _gl.RGBA16F;
				if ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGBA8;

			}

			return glFormat;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			if ( texture.isVideoTexture ) {

				delete _videoTextures[ texture.id ];

			}

			info.memory.textures --;

		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			info.memory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.remove( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) return;

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget.isWebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.remove( renderTarget.texture );
			properties.remove( renderTarget );

		}

		//



		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.isVideoTexture ) updateVideoTexture( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						info.memory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = ( texture && texture.isCompressedTexture );
					var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
						isPowerOfTwoImage = isPowerOfTwo( image ),
						glFormat = utils.convert( texture.format ),
						glType = utils.convert( texture.type ),
						glInternalFormat = getInternalFormat( glFormat, glType );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( ! isCompressed ) {

						textureProperties.__maxMipLevel = 0;

					} else {

						textureProperties.__maxMipLevel = mipmaps.length - 1;

					}

					if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

						// We assume images for cube map have the same size.
						generateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				info.memory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = utils.convert( texture.format ),
				glType = utils.convert( texture.type ),
				glInternalFormat = getInternalFormat( glFormat, glType );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture.isDepthTexture ) {

				// populate depth texture with dummy data

				glInternalFormat = _gl.DEPTH_COMPONENT;

				if ( texture.type === FloatType ) {

					if ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
					glInternalFormat = _gl.DEPTH_COMPONENT32F;

				} else if ( capabilities.isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					glInternalFormat = _gl.DEPTH_COMPONENT16;

				}

				if ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

						texture.type = UnsignedShortType;
						glType = utils.convert( texture.type );

					}

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					glInternalFormat = _gl.DEPTH_STENCIL;

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedInt248Type ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

						texture.type = UnsignedInt248Type;
						glType = utils.convert( texture.type );

					}

				}

				state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( texture.isDataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
					textureProperties.__maxMipLevel = 0;

				}

			} else if ( texture.isCompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

				textureProperties.__maxMipLevel = mipmaps.length - 1;

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );
					textureProperties.__maxMipLevel = 0;

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

				generateMipmap( _gl.TEXTURE_2D, texture, image.width, image.height );

			}

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = utils.convert( renderTarget.texture.format );
			var glType = utils.convert( renderTarget.texture.type );
			var glInternalFormat = getInternalFormat( glFormat, glType );
			state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

			}

			// upload an empty depth texture with framebuffer size
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {

				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;

			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else {

				throw new Error( 'Unknown depthTexture format' );

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			info.memory.textures ++;

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {

					generateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );

				}

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {

					generateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );

				}

				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

				var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				generateMipmap( target, texture, renderTarget.width, renderTarget.height );
				state.bindTexture( target, null );

			}

		}

		function updateVideoTexture( texture ) {

			var id = texture.id;
			var frame = info.render.frame;

			// Check the last frame we updated the VideoTexture

			if ( _videoTextures[ id ] !== frame ) {

				_videoTextures[ id ] = frame;
				texture.update();

			}

		}

		this.setTexture2D = setTexture2D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;

	}

	/**
	 * @author thespite / http://www.twitter.com/thespite
	 */

	function WebGLUtils( gl, extensions, capabilities ) {

		function convert( p ) {

			var extension;

			if ( p === RepeatWrapping ) return gl.REPEAT;
			if ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;
			if ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;

			if ( p === NearestFilter ) return gl.NEAREST;
			if ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;
			if ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;

			if ( p === LinearFilter ) return gl.LINEAR;
			if ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;
			if ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;

			if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;

			if ( p === ByteType ) return gl.BYTE;
			if ( p === ShortType ) return gl.SHORT;
			if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
			if ( p === IntType ) return gl.INT;
			if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
			if ( p === FloatType ) return gl.FLOAT;

			if ( p === HalfFloatType ) {

				if ( capabilities.isWebGL2 ) return gl.HALF_FLOAT;

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) return extension.HALF_FLOAT_OES;

			}

			if ( p === AlphaFormat ) return gl.ALPHA;
			if ( p === RGBFormat ) return gl.RGB;
			if ( p === RGBAFormat ) return gl.RGBA;
			if ( p === LuminanceFormat ) return gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

			if ( p === AddEquation ) return gl.FUNC_ADD;
			if ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;
			if ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;

			if ( p === ZeroFactor ) return gl.ZERO;
			if ( p === OneFactor ) return gl.ONE;
			if ( p === SrcColorFactor ) return gl.SRC_COLOR;
			if ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;
			if ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;
			if ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;
			if ( p === DstAlphaFactor ) return gl.DST_ALPHA;
			if ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;

			if ( p === DstColorFactor ) return gl.DST_COLOR;
			if ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;
			if ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
				p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
				p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
				p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
				p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_astc' );

				if ( extension !== null ) {

					return p;

				}

			}

			if ( p === MinEquation || p === MaxEquation ) {

				if ( capabilities.isWebGL2 ) {

					if ( p === MinEquation ) return gl.MIN;
					if ( p === MaxEquation ) return gl.MAX;

				}

				extension = extensions.get( 'EXT_blend_minmax' );

				if ( extension !== null ) {

					if ( p === MinEquation ) return extension.MIN_EXT;
					if ( p === MaxEquation ) return extension.MAX_EXT;

				}

			}

			if ( p === UnsignedInt248Type ) {

				if ( capabilities.isWebGL2 ) return gl.UNSIGNED_INT_24_8;

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

			}

			return 0;

		}

		return { convert: convert };

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group,

		isGroup: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan(
					_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( this.view !== null && this.view.enabled ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ArrayCamera( array ) {

		PerspectiveCamera.call( this );

		this.cameras = array || [];

	}

	ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

		constructor: ArrayCamera,

		isArrayCamera: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebVRManager( renderer ) {

		var scope = this;

		var device = null;
		var frameData = null;

		var poseTarget = null;

		var controllers = [];
		var standingMatrix = new Matrix4();
		var standingMatrixInverse = new Matrix4();

		if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

			frameData = new window.VRFrameData();
			window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

		}

		var matrixWorldInverse = new Matrix4();
		var tempQuaternion = new Quaternion();
		var tempPosition = new Vector3();

		var cameraL = new PerspectiveCamera();
		cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
		cameraL.layers.enable( 1 );

		var cameraR = new PerspectiveCamera();
		cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
		cameraR.layers.enable( 2 );

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		function isPresenting() {

			return device !== null && device.isPresenting === true;

		}

		var currentSize, currentPixelRatio;

		function onVRDisplayPresentChange() {

			if ( isPresenting() ) {

				var eyeParameters = device.getEyeParameters( 'left' );
				var renderWidth = eyeParameters.renderWidth;
				var renderHeight = eyeParameters.renderHeight;

				currentPixelRatio = renderer.getPixelRatio();
				currentSize = renderer.getSize();

				renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

				animation.start();

			} else if ( scope.enabled ) {

				renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

				animation.stop();

			}

		}

		//

		var isTriggerPressed = false;

		function findGamepad( id ) {

			var gamepads = navigator.getGamepads && navigator.getGamepads();

			for ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {

				var gamepad = gamepads[ i ];

				if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
					gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
					gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
					gamepad.id.startsWith( 'Spatial Controller' ) ) ) {

					if ( j === id ) return gamepad;

					j ++;

				}

			}

		}

		function updateControllers() {

			for ( var i = 0; i < controllers.length; i ++ ) {

				var controller = controllers[ i ];

				var gamepad = findGamepad( i );

				if ( gamepad !== undefined && gamepad.pose !== undefined ) {

					if ( gamepad.pose === null ) return;

					//  Pose

					var pose = gamepad.pose;

					if ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );

					if ( pose.position !== null ) controller.position.fromArray( pose.position );
					if ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );
					controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
					controller.matrix.premultiply( standingMatrix );
					controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
					controller.matrixWorldNeedsUpdate = true;
					controller.visible = true;

					//  Trigger

					var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;

					if ( isTriggerPressed !== gamepad.buttons[ buttonId ].pressed ) {

						isTriggerPressed = gamepad.buttons[ buttonId ].pressed;

						if ( isTriggerPressed ) {

							controller.dispatchEvent( { type: 'selectstart' } );

						} else {

							controller.dispatchEvent( { type: 'selectend' } );
							controller.dispatchEvent( { type: 'select' } );

						}

					}

				} else {

					controller.visible = false;

				}

			}

		}

		//

		this.enabled = false;
		this.userHeight = 1.6;

		this.getController = function ( id ) {

			var controller = controllers[ id ];

			if ( controller === undefined ) {

				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;

				controllers[ id ] = controller;

			}

			return controller;

		};

		this.getDevice = function () {

			return device;

		};

		this.setDevice = function ( value ) {

			if ( value !== undefined ) device = value;

			animation.setContext( value );

		};

		this.setPoseTarget = function ( object ) {

			if ( object !== undefined ) poseTarget = object;

		};

		this.getCamera = function ( camera ) {

			if ( device === null ) {

				camera.position.set( 0, scope.userHeight, 0 );
				return camera;

			}

			device.depthNear = camera.near;
			device.depthFar = camera.far;

			device.getFrameData( frameData );

			//

			var stageParameters = device.stageParameters;

			if ( stageParameters ) {

				standingMatrix.fromArray( stageParameters.sittingToStandingTransform );

			} else {

				standingMatrix.makeTranslation( 0, scope.userHeight, 0 );

			}


			var pose = frameData.pose;
			var poseObject = poseTarget !== null ? poseTarget : camera;

			// We want to manipulate poseObject by its position and quaternion components since users may rely on them.
			poseObject.matrix.copy( standingMatrix );
			poseObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );

			if ( pose.orientation !== null ) {

				tempQuaternion.fromArray( pose.orientation );
				poseObject.quaternion.multiply( tempQuaternion );

			}

			if ( pose.position !== null ) {

				tempQuaternion.setFromRotationMatrix( standingMatrix );
				tempPosition.fromArray( pose.position );
				tempPosition.applyQuaternion( tempQuaternion );
				poseObject.position.add( tempPosition );

			}

			poseObject.updateMatrixWorld();

			if ( device.isPresenting === false ) return camera;

			//

			cameraL.near = camera.near;
			cameraR.near = camera.near;

			cameraL.far = camera.far;
			cameraR.far = camera.far;

			cameraVR.matrixWorld.copy( camera.matrixWorld );
			cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

			cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
			cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

			// TODO (mrdoob) Double check this code

			standingMatrixInverse.getInverse( standingMatrix );

			cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
			cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

			var parent = poseObject.parent;

			if ( parent !== null ) {

				matrixWorldInverse.getInverse( parent.matrixWorld );

				cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
				cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

			}

			// envMap and Mirror needs camera.matrixWorld

			cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
			cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

			cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
			cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

			// HACK (mrdoob)
			// https://github.com/w3c/webvr/issues/203

			cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

			//

			var layers = device.getLayers();

			if ( layers.length ) {

				var layer = layers[ 0 ];

				if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

					cameraL.bounds.fromArray( layer.leftBounds );

				}

				if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

					cameraR.bounds.fromArray( layer.rightBounds );

				}

			}

			updateControllers();

			return cameraVR;

		};

		this.getStandingMatrix = function () {

			return standingMatrix;

		};

		this.isPresenting = isPresenting;

		// Animation Loop

		var animation = new WebGLAnimation();

		this.setAnimationLoop = function ( callback ) {

			animation.setAnimationLoop( callback );

		};

		this.submitFrame = function () {

			if ( isPresenting() ) device.submitFrame();

		};

		this.dispose = function () {

			if ( typeof window !== 'undefined' ) {

				window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebXRManager( renderer ) {

		var gl = renderer.context;

		var device = null;
		var session = null;

		var frameOfRef = null;

		var pose = null;

		var controllers = [];
		var inputSources = [];

		function isPresenting() {

			return session !== null && frameOfRef !== null;


		}

		//

		var cameraL = new PerspectiveCamera();
		cameraL.layers.enable( 1 );
		cameraL.viewport = new Vector4();

		var cameraR = new PerspectiveCamera();
		cameraR.layers.enable( 2 );
		cameraR.viewport = new Vector4();

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		this.enabled = false;

		this.getController = function ( id ) {

			var controller = controllers[ id ];

			if ( controller === undefined ) {

				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;

				controllers[ id ] = controller;

			}

			return controller;

		};

		this.getDevice = function () {

			return device;

		};

		this.setDevice = function ( value ) {

			if ( value !== undefined ) device = value;
			if ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );

		};

		//

		function onSessionEvent( event ) {

			var controller = controllers[ inputSources.indexOf( event.inputSource ) ];
			if ( controller ) controller.dispatchEvent( { type: event.type } );

		}

		function onSessionEnd() {

			renderer.setFramebuffer( null );
			animation.stop();

		}

		this.setSession = function ( value, options ) {

			session = value;

			if ( session !== null ) {

				session.addEventListener( 'select', onSessionEvent );
				session.addEventListener( 'selectstart', onSessionEvent );
				session.addEventListener( 'selectend', onSessionEvent );
				session.addEventListener( 'end', onSessionEnd );

				session.baseLayer = new XRWebGLLayer( session, gl );
				session.requestFrameOfReference( options.frameOfReferenceType ).then( function ( value ) {

					frameOfRef = value;

					renderer.setFramebuffer( session.baseLayer.framebuffer );

					animation.setContext( session );
					animation.start();

				} );

				//

				inputSources = session.getInputSources();

				session.addEventListener( 'inputsourceschange', function () {

					inputSources = session.getInputSources();
					console.log( inputSources );

				} );

			}

		};

		function updateCamera( camera, parent ) {

			if ( parent === null ) {

				camera.matrixWorld.copy( camera.matrix );

			} else {

				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

			}

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		}

		this.getCamera = function ( camera ) {

			if ( isPresenting() ) {

				var parent = camera.parent;
				var cameras = cameraVR.cameras;

				// apply camera.parent to cameraVR

				updateCamera( cameraVR, parent );

				for ( var i = 0; i < cameras.length; i ++ ) {

					updateCamera( cameras[ i ], parent );

				}

				// update camera and its children

				camera.matrixWorld.copy( cameraVR.matrixWorld );

				var children = camera.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].updateMatrixWorld( true );

				}

				return cameraVR;

			}

			return camera;

		};

		this.isPresenting = isPresenting;

		// Animation Loop

		var onAnimationFrameCallback = null;

		function onAnimationFrame( time, frame ) {

			pose = frame.getDevicePose( frameOfRef );

			if ( pose !== null ) {

				var layer = session.baseLayer;
				var views = frame.views;

				for ( var i = 0; i < views.length; i ++ ) {

					var view = views[ i ];
					var viewport = layer.getViewport( view );
					var viewMatrix = pose.getViewMatrix( view );

					var camera = cameraVR.cameras[ i ];
					camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
					camera.projectionMatrix.fromArray( view.projectionMatrix );
					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

					if ( i === 0 ) {

						cameraVR.matrix.copy( camera.matrix );

						// HACK (mrdoob)
						// https://github.com/w3c/webvr/issues/203

						cameraVR.projectionMatrix.copy( camera.projectionMatrix );

					}

				}

			}

			//

			for ( var i = 0; i < controllers.length; i ++ ) {

				var controller = controllers[ i ];

				var inputSource = inputSources[ i ];

				if ( inputSource ) {

					var inputPose = frame.getInputPose( inputSource, frameOfRef );

					if ( inputPose !== null ) {

						controller.matrix.elements = inputPose.pointerMatrix;
						controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
						controller.visible = true;

						continue;

					}

				}

				controller.visible = false;

			}

			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

		}

		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;

		};

		this.dispose = function () {};

		// DEPRECATED

		this.getStandingMatrix = function () {

			console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
			return new THREE.Matrix4();

		};

		this.submitFrame = function () {};

	}

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		console.log( 'THREE.WebGLRenderer', REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,

			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
			_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';

		var currentRenderList = null;
		var currentRenderState = null;

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

			_isContextLost = false,

			// internal state cache

			_framebuffer = null,

			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,
			_currentGeometryProgram = '',

			_currentCamera = null,
			_currentArrayCamera = null,

			_currentViewport = new Vector4(),
			_currentScissor = new Vector4(),
			_currentScissorTest = null,

			//

			_usedTextureUnits = 0,

			//

			_width = _canvas.width,
			_height = _canvas.height,

			_pixelRatio = 1,

			_viewport = new Vector4( 0, 0, _width, _height ),
			_scissor = new Vector4( 0, 0, _width, _height ),
			_scissorTest = false,

			// frustum

			_frustum = new Frustum(),

			// clipping

			_clipping = new WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,

			// camera matrices cache

			_projScreenMatrix = new Matrix4(),

			_vector3 = new Vector3();

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		// initialize

		var _gl;

		try {

			var contextAttributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference
			};

			// event listeners must be registered before WebGL context is created, see #12753

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

			_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw new Error( 'Error creating WebGL context with your selected attributes.' );

				} else {

					throw new Error( 'Error creating WebGL context.' );

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error.message );

		}

		var extensions, capabilities, state, info;
		var properties, textures, attributes, geometries, objects;
		var programCache, renderLists, renderStates;

		var background, morphtargets, bufferRenderer, indexedBufferRenderer;

		var utils;

		function initGLContext() {

			extensions = new WebGLExtensions( _gl );

			capabilities = new WebGLCapabilities( _gl, extensions, parameters );

			if ( ! capabilities.isWebGL2 ) {

				extensions.get( 'WEBGL_depth_texture' );
				extensions.get( 'OES_texture_float' );
				extensions.get( 'OES_texture_half_float' );
				extensions.get( 'OES_texture_half_float_linear' );
				extensions.get( 'OES_standard_derivatives' );
				extensions.get( 'OES_element_index_uint' );
				extensions.get( 'ANGLE_instanced_arrays' );

			}

			extensions.get( 'OES_texture_float_linear' );

			utils = new WebGLUtils( _gl, extensions, capabilities );

			state = new WebGLState( _gl, extensions, utils, capabilities );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			info = new WebGLInfo( _gl );
			properties = new WebGLProperties();
			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
			attributes = new WebGLAttributes( _gl );
			geometries = new WebGLGeometries( _gl, attributes, info );
			objects = new WebGLObjects( geometries, info );
			morphtargets = new WebGLMorphtargets( _gl );
			programCache = new WebGLPrograms( _this, extensions, capabilities );
			renderLists = new WebGLRenderLists();
			renderStates = new WebGLRenderStates();

			background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

			info.programs = programCache.programs;

			_this.context = _gl;
			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.state = state;
			_this.info = info;

		}

		initGLContext();

		// vr

		var vr = ( 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );

		this.vr = vr;

		// shadow map

		var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

		this.shadowMap = shadowMap;

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.loseContext();

		};

		this.forceContextRestore = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.restoreContext();

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _width, _height, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			if ( vr.isPresenting() ) {

				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
				return;

			}

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.getDrawingBufferSize = function () {

			return {
				width: _width * _pixelRatio,
				height: _height * _pixelRatio
			};

		};

		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

			_width = width;
			_height = height;

			_pixelRatio = pixelRatio;

			_canvas.width = width * pixelRatio;
			_canvas.height = height * pixelRatio;

			this.setViewport( 0, 0, width, height );

		};

		this.getCurrentViewport = function () {

			return _currentViewport;

		};

		this.setViewport = function ( x, y, width, height ) {

			_viewport.set( x, _height - y - height, width, height );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			_scissor.set( x, _height - y - height, width, height );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return background.getClearColor();

		};

		this.setClearColor = function () {

			background.setClearColor.apply( background, arguments );

		};

		this.getClearAlpha = function () {

			return background.getClearAlpha();

		};

		this.setClearAlpha = function () {

			background.setClearAlpha.apply( background, arguments );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		//

		this.dispose = function () {

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			objects.dispose();

			vr.dispose();

			animation.stop();

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			console.log( 'THREE.WebGLRenderer: Context Lost.' );

			_isContextLost = true;

		}

		function onContextRestore( /* event */ ) {

			console.log( 'THREE.WebGLRenderer: Context Restored.' );

			_isContextLost = false;

			initGLContext();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.remove( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		function renderObjectImmediate( object, program ) {

			object.render( function ( object ) {

				_this.renderBufferImmediate( object, program );

			} );

		}

		this.renderBufferImmediate = function ( object, program ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var programAttributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.position );
				_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.normal );
				_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.uv );
				_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( programAttributes.color );
				_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			var frontFaceCW = ( object.isMesh && object.normalMatrix.determinant() < 0 );

			state.setMaterial( material, frontFaceCW );

			var program = setProgram( camera, fog, material, object );
			var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

			var updateBuffers = false;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			if ( object.morphTargetInfluences ) {

				morphtargets.update( object, geometry, material, program );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;
			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = geometries.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var attribute;
			var renderer = bufferRenderer;

			if ( index !== null ) {

				attribute = attributes.get( index );

				renderer = indexedBufferRenderer;
				renderer.setIndex( attribute );

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

				}

			}

			//

			var dataCount = Infinity;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) return;

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( _gl.LINES );

				} else if ( object.isLineLoop ) {

					renderer.setMode( _gl.LINE_LOOP );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( _gl.POINTS );

			} else if ( object.isSprite ) {

				renderer.setMode( _gl.TRIANGLES );

			}

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				if ( geometry.maxInstancedCount > 0 ) {

					renderer.renderInstances( geometry, drawStart, drawCount );

				}

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry ) {

			if ( geometry && geometry.isInstancedBufferGeometry & ! capabilities.isWebGL2 ) {

				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var normalized = geometryAttribute.normalized;
						var size = geometryAttribute.itemSize;

						var attribute = attributes.get( geometryAttribute );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) continue;

						var buffer = attribute.buffer;
						var type = attribute.type;
						var bytesPerElement = attribute.bytesPerElement;

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Compile

		this.compile = function ( scene, camera ) {

			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();

			scene.traverse( function ( object ) {

				if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				}

			} );

			currentRenderState.setupLights( camera );

			scene.traverse( function ( object ) {

				if ( object.material ) {

					if ( Array.isArray( object.material ) ) {

						for ( var i = 0; i < object.material.length; i ++ ) {

							initMaterial( object.material[ i ], scene.fog, object );

						}

					} else {

						initMaterial( object.material, scene.fog, object );

					}

				}

			} );

		};

		// Animation Loop

		var onAnimationFrameCallback = null;

		function onAnimationFrame( time ) {

			if ( vr.isPresenting() ) return;
			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

		}

		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		if ( typeof window !== 'undefined' ) animation.setContext( window );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;
			vr.setAnimationLoop( callback );

			animation.start();

		};

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( ! ( camera && camera.isCamera ) ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			if ( _isContextLost ) return;

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			if ( vr.enabled ) {

				camera = vr.getCamera( camera );

			}

			//

			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();

			scene.onBeforeRender( _this, scene, camera, renderTarget );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			currentRenderList = renderLists.get( scene, camera );
			currentRenderList.init();

			projectObject( scene, camera, _this.sortObjects );

			if ( _this.sortObjects === true ) {

				currentRenderList.sort();

			}

			//

			if ( _clippingEnabled ) _clipping.beginShadows();

			var shadowsArray = currentRenderState.state.shadowsArray;

			shadowMap.render( shadowsArray, scene, camera );

			currentRenderState.setupLights( camera );

			if ( _clippingEnabled ) _clipping.endShadows();

			//

			if ( this.info.autoReset ) this.info.reset();

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			//

			background.render( currentRenderList, scene, camera, forceClear );

			// render scene

			var opaqueObjects = currentRenderList.opaque;
			var transparentObjects = currentRenderList.transparent;

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
				if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

				// transparent pass (back-to-front order)

				if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

			}

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				textures.updateRenderTargetMipmap( renderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest( true );
			state.buffers.depth.setMask( true );
			state.buffers.color.setMask( true );

			state.setPolygonOffset( false );

			scene.onAfterRender( _this, scene, camera );

			if ( vr.enabled ) {

				vr.submitFrame();

			}

			// _gl.finish();

			currentRenderList = null;
			currentRenderState = null;

		};

		/*
		// TODO Duplicated code (Frustum)

		var _sphere = new Sphere();

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
			applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}
		*/

		function projectObject( object, camera, sortObjects ) {

			if ( object.visible === false ) return;

			var visible = object.layers.test( camera.layers );

			if ( visible ) {

				if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				} else if ( object.isSprite ) {

					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						currentRenderList.push( object, geometry, material, _vector3.z, null );

					}

				} else if ( object.isImmediateRenderObject ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					currentRenderList.push( object, null, object.material, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						object.skeleton.update();

					}

					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						if ( Array.isArray( material ) ) {

							var groups = geometry.groups;

							for ( var i = 0, l = groups.length; i < l; i ++ ) {

								var group = groups[ i ];
								var groupMaterial = material[ group.materialIndex ];

								if ( groupMaterial && groupMaterial.visible ) {

									currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

								}

							}

						} else if ( material.visible ) {

							currentRenderList.push( object, geometry, material, _vector3.z, null );

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, sortObjects );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				if ( camera.isArrayCamera ) {

					_currentArrayCamera = camera;

					var cameras = camera.cameras;

					for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

						var camera2 = cameras[ j ];

						if ( object.layers.test( camera2.layers ) ) {

							if ( 'viewport' in camera2 ) { // XR

								state.viewport( _currentViewport.copy( camera2.viewport ) );

							} else {

								var bounds = camera2.bounds;

								var x = bounds.x * _width;
								var y = bounds.y * _height;
								var width = bounds.z * _width;
								var height = bounds.w * _height;

								state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );

							}

							renderObject( object, scene, camera2, geometry, material, group );

						}

					}

				} else {

					_currentArrayCamera = null;

					renderObject( object, scene, camera, geometry, material, group );

				}

			}

		}

		function renderObject( object, scene, camera, geometry, material, group ) {

			object.onBeforeRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

			if ( object.isImmediateRenderObject ) {

				state.setMaterial( material );

				var program = setProgram( camera, scene.fog, material, object );

				_currentGeometryProgram = '';

				renderObjectImmediate( object, program );

			} else {

				_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

			}

			object.onAfterRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var lights = currentRenderState.state.lights;
			var shadowsArray = currentRenderState.state.shadowsArray;

			var parameters = programCache.getParameters(
				material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( materialProperties.lightsHash !== lights.state.hash ) {

				properties.update( material, 'lightsHash', lights.state.hash );
				programChange = false;

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.shader = {
						name: material.type,
						uniforms: UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.shader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.onBeforeCompile( materialProperties.shader, _this );

				// Computing code again as onBeforeCompile may have changed the shaders
				code = programCache.getProgramCode( material, parameters );

				program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var programAttributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.shader.uniforms;

			if ( ! material.isShaderMaterial &&
				! material.isRawShaderMaterial ||
				material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.lightsHash = lights.state.hash;

			if ( material.lights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.pointLights.value = lights.state.point;
				uniforms.hemisphereLights.value = lights.state.hemi;

				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
				// TODO (abelnation): add area lights shadow info to uniforms

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
					WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );
			var lights = currentRenderState.state.lights;

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
						camera === _currentCamera &&
						material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
						material.clippingPlanes, material.clipIntersection, material.clipShadows,
						camera, materialProperties, useCache );

				}

			}

			if ( material.needsUpdate === false ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
					materialProperties.numIntersection !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.shader.uniforms;

			if ( state.useProgram( program.program ) ) {

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}

				// Avoid unneeded uniform updates per ArrayCamera's sub-camera

				if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

					_currentCamera = ( _currentArrayCamera || camera );

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
					material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial ||
					material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
							_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ||
					material.skinning ) {

					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				}

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					var bones = skeleton.bones;

					if ( capabilities.floatVertexTextures ) {

						if ( skeleton.boneTexture === undefined ) {

							// layout (1 matrix = 4 pixels)
							//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
							//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
							//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
							//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
							//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


							var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
							size = _Math.ceilPowerOfTwo( size );
							size = Math.max( size, 4 );

							var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
							boneMatrices.set( skeleton.boneMatrices ); // copy current values

							var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
							boneTexture.needsUpdate = true;

							skeleton.boneMatrices = boneMatrices;
							skeleton.boneTexture = boneTexture;
							skeleton.boneTextureSize = size;

						}

						p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
						p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial ) {

				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
				p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

				if ( material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshToonMaterial ) {

						refreshUniformsToon( m_uniforms, material );

					} else {

						refreshUniformsPhong( m_uniforms, material );

					}

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshPhysicalMaterial ) {

						refreshUniformsPhysical( m_uniforms, material );

					} else {

						refreshUniformsStandard( m_uniforms, material );

					}

				} else if ( material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDepth( m_uniforms, material );

				} else if ( material.isMeshDistanceMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDistance( m_uniforms, material );

				} else if ( material.isMeshNormalMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsNormal( m_uniforms, material );

				} else if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

					if ( material.isLineDashedMaterial ) {

						refreshUniformsDash( m_uniforms, material );

					}

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isSpriteMaterial ) {

					refreshUniformsSprites( m_uniforms, material );

				} else if ( material.isShadowMaterial ) {

					m_uniforms.color.value = material.color;
					m_uniforms.opacity.value = material.opacity;

				}

				// RectAreaLight Texture
				// TODO (mrdoob): Find a nicer implementation

				if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
				if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );

			}

			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );
				material.uniformsNeedUpdate = false;

			}

			if ( material.isSpriteMaterial ) {

				p_uniforms.setValue( _gl, 'center', object.center );

			}

			// common matrices

			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			if ( material.color ) {

				uniforms.diffuse.value = material.color;

			}

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			if ( material.specularMap ) {

				uniforms.specularMap.value = material.specularMap;

			}

			if ( material.envMap ) {

				uniforms.envMap.value = material.envMap;

				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

				uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				if ( material.map.matrixAutoUpdate === true ) {

					material.map.updateMatrix();

				}

				uniforms.uvTransform.value.copy( material.map.matrix );

			}

		}

		function refreshUniformsSprites( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;
			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				if ( material.map.matrixAutoUpdate === true ) {

					material.map.updateMatrix();

				}

				uniforms.uvTransform.value.copy( material.map.matrix );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsToon( uniforms, material ) {

			refreshUniformsPhong( uniforms, material );

			if ( material.gradientMap ) {

				uniforms.gradientMap.value = material.gradientMap;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			refreshUniformsStandard( uniforms, material );

			uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

		}

		function refreshUniformsDepth( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsDistance( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			uniforms.referencePosition.value.copy( material.referencePosition );
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;

		}

		function refreshUniformsNormal( uniforms, material ) {

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// Textures

		function allocTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		this.allocTextureUnit = allocTextureUnit;

		// this.setTexture2D = setTexture2D;
		this.setTexture2D = ( function () {

			var warned = false;

			// backwards compatibility: peel texture.texture
			return function setTexture2D( texture, slot ) {

				if ( texture && texture.isWebGLRenderTarget ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTexture = ( function () {

			var warned = false;

			return function setTexture( texture, slot ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
					warned = true;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTextureCube = ( function () {

			var warned = false;

			return function setTextureCube( texture, slot ) {

				// backwards compatibility: peel texture.texture
				if ( texture && texture.isWebGLRenderTargetCube ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( ( texture && texture.isCubeTexture ) ||
					( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

					// CompressedTexture can have Array in image :/

					// this function alone should take care of cube textures
					textures.setTextureCube( texture, slot );

				} else {

					// assumed: texture property of THREE.WebGLRenderTargetCube

					textures.setTextureCubeDynamic( texture, slot );

				}

			};

		}() );

		//

		this.setFramebuffer = function ( value ) {

			_framebuffer = value;

		};

		this.getRenderTarget = function () {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var framebuffer = _framebuffer;
			var isCube = false;

			if ( renderTarget ) {

				var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLRenderTargetCube ) {

					framebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];
					isCube = true;

				} else {

					framebuffer = __webglFramebuffer;

				}

				_currentViewport.copy( renderTarget.viewport );
				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

			} else {

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.viewport( _currentViewport );
			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
						! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		this.copyFramebufferToTexture = function ( position, texture, level ) {

			var width = texture.image.width;
			var height = texture.image.height;
			var glFormat = utils.convert( texture.format );

			this.setTexture2D( texture, 0 );

			_gl.copyTexImage2D( _gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0 );

		};

		this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

			var width = srcTexture.image.width;
			var height = srcTexture.image.height;
			var glFormat = utils.convert( dstTexture.format );
			var glType = utils.convert( dstTexture.type );

			this.setTexture2D( dstTexture, 0 );

			if ( srcTexture.isDataTexture ) {

				_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

			} else {

				_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	FogExp2.prototype.isFogExp2 = true;

	FogExp2.prototype.clone = function () {

		return new FogExp2( this.color, this.density );

	};

	FogExp2.prototype.toJSON = function ( /* meta */ ) {

		return {
			type: 'FogExp2',
			color: this.color.getHex(),
			density: this.density
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Fog.prototype.isFog = true;

	Fog.prototype.clone = function () {

		return new Fog( this.color, this.near, this.far );

	};

	Fog.prototype.toJSON = function ( /* meta */ ) {

		return {
			type: 'Fog',
			color: this.color.getHex(),
			near: this.near,
			far: this.far
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene() {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	}

	Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Scene,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();
			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
			if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

			return data;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) this.version ++;

		}

	} );

	Object.assign( InterleavedBuffer.prototype, {

		isInterleavedBuffer: true,

		onUploadCallback: function () {},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.stride : 0;
			this.array = array;

			return this;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}

	Object.defineProperties( InterleavedBufferAttribute.prototype, {

		count: {

			get: function () {

				return this.data.count;

			}

		},

		array: {

			get: function () {

				return this.data.array;

			}

		}

	} );

	Object.assign( InterleavedBufferAttribute.prototype, {

		isInterleavedBufferAttribute: true,

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2()
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.lights = false;
		this.transparent = true;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;
	SpriteMaterial.prototype.isSpriteMaterial = true;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var geometry$1;

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		if ( geometry$1 === undefined ) {

			geometry$1 = new BufferGeometry();

			var float32Array = new Float32Array( [
				- 0.5, - 0.5, 0, 0, 0,
				0.5, - 0.5, 0, 1, 0,
				0.5, 0.5, 0, 1, 1,
				- 0.5, 0.5, 0, 0, 1
			] );

			var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

			geometry$1.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
			geometry$1.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
			geometry$1.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

		}

		this.geometry = geometry$1;
		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

		this.center = new Vector2( 0.5, 0.5 );

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: ( function () {

			var intersectPoint = new Vector3();
			var worldScale = new Vector3();
			var mvPosition = new Vector3();

			var alignedPosition = new Vector2();
			var rotatedPosition = new Vector2();
			var viewWorldMatrix = new Matrix4();

			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();

			function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

				// compute position in camera space
				alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

				// to check if rotation is not zero
				if ( sin !== undefined ) {

					rotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );
					rotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );

				} else {

					rotatedPosition.copy( alignedPosition );

				}


				vertexPosition.copy( mvPosition );
				vertexPosition.x += rotatedPosition.x;
				vertexPosition.y += rotatedPosition.y;

				// transform to world space
				vertexPosition.applyMatrix4( viewWorldMatrix );

			}

			return function raycast( raycaster, intersects ) {

				worldScale.setFromMatrixScale( this.matrixWorld );
				viewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );
				mvPosition.setFromMatrixPosition( this.modelViewMatrix );

				var rotation = this.material.rotation;
				var sin, cos;
				if ( rotation !== 0 ) {

					cos = Math.cos( rotation );
					sin = Math.sin( rotation );

				}

				var center = this.center;

				transformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
				transformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
				transformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );

				// check first triangle
				var intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );

				if ( intersect === null ) {

					// check second triangle
					transformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
					intersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );
					if ( intersect === null ) {

						return;

					}

				}

				var distance = raycaster.ray.origin.distanceTo( intersectPoint );

				if ( distance < raycaster.near || distance > raycaster.far ) return;

				intersects.push( {

					distance: distance,
					point: intersectPoint.clone(),
					face: null,
					object: this

				} );

			};

		}() ),

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			if ( source.center !== undefined ) this.center.copy( source.center );

			return this;

		}


	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

	}

	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) distance = 0;

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			for ( var i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		},

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( matrixPosition );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			};

		}() ),

		update: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function update( camera ) {

				var levels = this.levels;

				if ( levels.length > 1 ) {

					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );

					var distance = v1.distanceTo( v2 );

					levels[ 0 ].object.visible = true;

					for ( var i = 1, l = levels.length; i < l; i ++ ) {

						if ( distance >= levels[ i ].distance ) {

							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;

						} else {

							break;

						}

					}

					for ( ; i < l; i ++ ) {

						levels[ i ].object.visible = false;

					}

				}

			};

		}(),

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	function Skeleton( bones, boneInverses ) {

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );
		this.boneMatrices = new Float32Array( this.bones.length * 16 );

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ i ] ) {

					inverse.getInverse( this.bones[ i ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone, i, il;

			// recover the bind-time world matrices

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ i ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					if ( bone.parent && bone.parent.isBone ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: ( function () {

			var offsetMatrix = new Matrix4();
			var identityMatrix = new Matrix4();

			return function update() {

				var bones = this.bones;
				var boneInverses = this.boneInverses;
				var boneMatrices = this.boneMatrices;
				var boneTexture = this.boneTexture;

				// flatten bone matrices to array

				for ( var i = 0, il = bones.length; i < il; i ++ ) {

					// compute the offset between the current and the original transform

					var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

					offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
					offsetMatrix.toArray( boneMatrices, i * 16 );

				}

				if ( boneTexture !== undefined ) {

					boneTexture.needsUpdate = true;

				}

			};

		} )(),

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses );

		},

		getBoneByName: function ( name ) {

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var bone = this.bones[ i ];

				if ( bone.name === name ) {

					return bone;

				}

			}

			return undefined;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone() {

		Object3D.call( this );

		this.type = 'Bone';

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material ) {

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = 'attached';
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

		var bones = this.initBones();
		var skeleton = new Skeleton( bones );

		this.bind( skeleton, this.matrixWorld );

		this.normalizeSkinWeights();

	}

	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		initBones: function () {

			var bones = [], bone, gbone;
			var i, il;

			if ( this.geometry && this.geometry.bones !== undefined ) {

				// first, create array of 'Bone' objects from geometry data

				for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

					gbone = this.geometry.bones[ i ];

					// create new 'Bone' object

					bone = new Bone();
					bones.push( bone );

					// apply values

					bone.name = gbone.name;
					bone.position.fromArray( gbone.pos );
					bone.quaternion.fromArray( gbone.rotq );
					if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

				}

				// second, create bone hierarchy

				for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

					gbone = this.geometry.bones[ i ];

					if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

						// subsequent bones in the hierarchy

						bones[ gbone.parent ].add( bones[ i ] );

					} else {

						// topmost bone, immediate child of the skinned mesh

						this.add( bones[ i ] );

					}

				}

			}

			// now the bones are part of the scene graph and children of the skinned mesh.
			// let's update the corresponding matrices

			this.updateMatrixWorld( true );

			return bones;

		},

		bind: function ( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			var scale, i;

			if ( this.geometry && this.geometry.isGeometry ) {

				for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

					var sw = this.geometry.skinWeights[ i ];

					scale = 1.0 / sw.manhattanLength();

					if ( scale !== Infinity ) {

						sw.multiplyScalar( scale );

					} else {

						sw.set( 1, 0, 0, 0 ); // do something reasonable

					}

				}

			} else if ( this.geometry && this.geometry.isBufferGeometry ) {

				var vec = new Vector4();

				var skinWeight = this.geometry.attributes.skinWeight;

				for ( i = 0; i < skinWeight.count; i ++ ) {

					vec.x = skinWeight.getX( i );
					vec.y = skinWeight.getY( i );
					vec.z = skinWeight.getZ( i );
					vec.w = skinWeight.getW( i );

					scale = 1.0 / vec.manhattanLength();

					if ( scale !== Infinity ) {

						vec.multiplyScalar( scale );

					} else {

						vec.set( 1, 0, 0, 0 ); // do something reasonable

					}

					skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

				}

			}

		},

		updateMatrixWorld: function ( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, force );

			if ( this.bindMode === 'attached' ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === 'detached' ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.lights = false;

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		computeLineDistances: ( function () {

			var start = new Vector3();
			var end = new Vector3();

			return function computeLineDistances() {

				var geometry = this.geometry;

				if ( geometry.isBufferGeometry ) {

					// we assume non-indexed geometry

					if ( geometry.index === null ) {

						var positionAttribute = geometry.attributes.position;
						var lineDistances = [ 0 ];

						for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {

							start.fromBufferAttribute( positionAttribute, i - 1 );
							end.fromBufferAttribute( positionAttribute, i );

							lineDistances[ i ] = lineDistances[ i - 1 ];
							lineDistances[ i ] += start.distanceTo( end );

						}

						geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

					} else {

						console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

					}

				} else if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;
					var lineDistances = geometry.lineDistances;

					lineDistances[ 0 ] = 0;

					for ( var i = 1, l = vertices.length; i < l; i ++ ) {

						lineDistances[ i ] = lineDistances[ i - 1 ];
						lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );

					}

				}

				return this;

			};

		}() ),

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var precision = raycaster.linePrecision;
				var precisionSq = precision * precision;

				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = ( this && this.isLineSegments ) ? 2 : 1;

				if ( geometry.isBufferGeometry ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

							var a = indices[ i ];
							var b = indices[ i + 1 ];

							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					} else {

						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				} else if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;
					var nbVertices = vertices.length;

					for ( var i = 0; i < nbVertices - 1; i += step ) {

						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true,

		computeLineDistances: ( function () {

			var start = new Vector3();
			var end = new Vector3();

			return function computeLineDistances() {

				var geometry = this.geometry;

				if ( geometry.isBufferGeometry ) {

					// we assume non-indexed geometry

					if ( geometry.index === null ) {

						var positionAttribute = geometry.attributes.position;
						var lineDistances = [];

						for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {

							start.fromBufferAttribute( positionAttribute, i );
							end.fromBufferAttribute( positionAttribute, i + 1 );

							lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
							lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );

						}

						geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

					} else {

						console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

					}

				} else if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;
					var lineDistances = geometry.lineDistances;

					for ( var i = 0, l = vertices.length; i < l; i += 2 ) {

						start.copy( vertices[ i ] );
						end.copy( vertices[ i + 1 ] );

						lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
						lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );

					}

				}

				return this;

			};

		}() )

	} );

	/**
	 * @author mgreter / http://github.com/mgreter
	 */

	function LineLoop( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineLoop';

	}

	LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineLoop,

		isLineLoop: true,

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 *
	 *  morphTargets: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );
				sphere.radius += threshold;

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new Vector3();
				var intersectPoint = new Vector3();

				function testPoint( point, index ) {

					var rayPointDistanceSq = ray.distanceSqToPoint( point );

					if ( rayPointDistanceSq < localThresholdSq ) {

						ray.closestPointToPoint( point, intersectPoint );
						intersectPoint.applyMatrix4( matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectPoint );

						if ( distance < raycaster.near || distance > raycaster.far ) return;

						intersects.push( {

							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object

						} );

					}

				}

				if ( geometry.isBufferGeometry ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, il = indices.length; i < il; i ++ ) {

							var a = indices[ i ];

							position.fromArray( positions, a * 3 );

							testPoint( position, a );

						}

					} else {

						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

							position.fromArray( positions, i * 3 );

							testPoint( position, i );

						}

					}

				} else {

					var vertices = geometry.vertices;

					for ( var i = 0, l = vertices.length; i < l; i ++ ) {

						testPoint( vertices[ i ], i );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

	}

	VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

		constructor: VideoTexture,

		isVideoTexture: true,

		update: function () {

			var video = this.image;

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				this.needsUpdate = true;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;
	CanvasTexture.prototype.isCanvasTexture = true;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

		}

		if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		this.type = 'WireframeGeometry';

		// buffer

		var vertices = [];

		// helper variables

		var i, j, l, o, ol;
		var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];
		var vertex;

		// different logic for Geometry and BufferGeometry

		if ( geometry && geometry.isGeometry ) {

			// create a data structure that contains all edges without duplicates

			var faces = geometry.faces;

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( j = 0; j < 3; j ++ ) {

					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
					edge[ 1 ] = Math.max( edge1, edge2 );

					key = edge[ 0 ] + ',' + edge[ 1 ];

					if ( edges[ key ] === undefined ) {

						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex = geometry.vertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = geometry.vertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else if ( geometry && geometry.isBufferGeometry ) {

			var position, indices, groups;
			var group, start, count;
			var index1, index2;

			vertex = new Vector3();

			if ( geometry.index !== null ) {

				// indexed BufferGeometry

				position = geometry.attributes.position;
				indices = geometry.index;
				groups = geometry.groups;

				if ( groups.length === 0 ) {

					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

				}

				// create a data structure that contains all eges without duplicates

				for ( o = 0, ol = groups.length; o < ol; ++ o ) {

					group = groups[ o ];

					start = group.start;
					count = group.count;

					for ( i = start, l = ( start + count ); i < l; i += 3 ) {

						for ( j = 0; j < 3; j ++ ) {

							edge1 = indices.getX( i + j );
							edge2 = indices.getX( i + ( j + 1 ) % 3 );
							edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
							edge[ 1 ] = Math.max( edge1, edge2 );

							key = edge[ 0 ] + ',' + edge[ 1 ];

							if ( edges[ key ] === undefined ) {

								edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

							}

						}

					}

				}

				// generate vertices

				for ( key in edges ) {

					e = edges[ key ];

					vertex.fromBufferAttribute( position, e.index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					vertex.fromBufferAttribute( position, e.index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			} else {

				// non-indexed BufferGeometry

				position = geometry.attributes.position;

				for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

					for ( j = 0; j < 3; j ++ ) {

						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

						index1 = 3 * i + j;
						vertex.fromBufferAttribute( position, index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );

						index2 = 3 * i + ( ( j + 1 ) % 3 );
						vertex.fromBufferAttribute( position, index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );

					}

				}

			}

		}

		// build geometry

		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	// ParametricGeometry

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	// ParametricBufferGeometry

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		var EPS = 0.00001;

		var normal = new Vector3();

		var p0 = new Vector3(), p1 = new Vector3();
		var pu = new Vector3(), pv = new Vector3();

		var i, j;

		if ( func.length < 3 ) {

			console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

		}

		// generate vertices, normals and uvs

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			var v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				var u = j / slices;

				// vertex

				func( u, v, p0 );
				vertices.push( p0.x, p0.y, p0.z );

				// normal

				// approximate tangent vectors via finite differences

				if ( u - EPS >= 0 ) {

					func( u - EPS, v, p1 );
					pu.subVectors( p0, p1 );

				} else {

					func( u + EPS, v, p1 );
					pu.subVectors( p1, p0 );

				}

				if ( v - EPS >= 0 ) {

					func( u, v - EPS, p1 );
					pv.subVectors( p0, p1 );

				} else {

					func( u, v + EPS, p1 );
					pv.subVectors( p1, p0 );

				}

				// cross product of tangent vectors returns surface normal

				normal.crossVectors( pu, pv ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, v );

			}

		}

		// generate indices

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				var a = i * sliceCount + j;
				var b = i * sliceCount + j + 1;
				var c = ( i + 1 ) * sliceCount + j + 1;
				var d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PolyhedronGeometry

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	// PolyhedronBufferGeometry

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		appplyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

		if ( detail === 0 ) {

			this.computeVertexNormals(); // flat normals

		} else {

			this.normalizeNormals(); // smooth normals

		}

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function appplyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] = uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TetrahedronGeometry

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	// TetrahedronBufferGeometry

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
		];

		var indices = [
			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// OctahedronGeometry

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	// OctahedronBufferGeometry

	function OctahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
		];

		var indices = [
			0, 2, 4,	0, 4, 3,	0, 3, 5,
			0, 5, 2,	1, 2, 5,	1, 5, 3,
			1, 3, 4,	1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// IcosahedronGeometry

	function IcosahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	// IcosahedronBufferGeometry

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
			 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
			 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
		];

		var indices = [
			 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
			 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
			 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
			 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// DodecahedronGeometry

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	// DodecahedronBufferGeometry

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,	- 1, - 1, 1,
			- 1, 1, - 1, - 1, 1, 1,
			1, - 1, - 1, 1, - 1, 1,
			1, 1, - 1, 1, 1, 1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t, 0, - r, t,
			 0, r, - t, 0, r, t,

			// (±1/φ, ±φ, 0)
			- r, - t, 0, - r, t, 0,
			 r, - t, 0, r, t, 0,

			// (±φ, 0, ±1/φ)
			- t, 0, - r, t, 0, - r,
			- t, 0, r, t, 0, r
		];

		var indices = [
			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
			1, 12, 14, 	1, 14, 5, 	1, 5, 9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 */

	// TubeGeometry

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	// TubeBufferGeometry

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();
		var P = new Vector3();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			P = path.getPointAt( i / tubularSegments, P );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin = Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * based on http://www.blackpawn.com/texts/pqtorus/
	 */

	// TorusKnotGeometry

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	// TorusKnotBufferGeometry

	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 1;
		tube = tube || 0.4;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, j;

		var vertex = new Vector3();
		var normal = new Vector3();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

				normal.subVectors( vertex, P1 ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TorusGeometry

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
		this.mergeVertices();

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	// TorusBufferGeometry

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 1;
		tube = tube || 0.4;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex

				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
				normal.subVectors( vertex, center ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices

				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.2)
	 */

	var Earcut = {

		triangulate: function ( data, holeIndices, dim ) {

			dim = dim || 2;

			var hasHoles = holeIndices && holeIndices.length,
				outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
				outerNode = linkedList( data, 0, outerLen, dim, true ),
				triangles = [];

			if ( ! outerNode ) return triangles;

			var minX, minY, maxX, maxY, x, y, invSize;

			if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

			// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

			if ( data.length > 80 * dim ) {

				minX = maxX = data[ 0 ];
				minY = maxY = data[ 1 ];

				for ( var i = dim; i < outerLen; i += dim ) {

					x = data[ i ];
					y = data[ i + 1 ];
					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;

				}

				// minX, minY and invSize are later used to transform coords into integers for z-order calculation

				invSize = Math.max( maxX - minX, maxY - minY );
				invSize = invSize !== 0 ? 1 / invSize : 0;

			}

			earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

			return triangles;

		}

	};

	// create a circular doubly linked list from polygon points in the specified winding order

	function linkedList( data, start, end, dim, clockwise ) {

		var i, last;

		if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

			for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

		} else {

			for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

		}

		if ( last && equals( last, last.next ) ) {

			removeNode( last );
			last = last.next;

		}

		return last;

	}

	// eliminate colinear or duplicate points

	function filterPoints( start, end ) {

		if ( ! start ) return start;
		if ( ! end ) end = start;

		var p = start, again;

		do {

			again = false;

			if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

				removeNode( p );
				p = end = p.prev;
				if ( p === p.next ) break;
				again = true;

			} else {

				p = p.next;

			}

		} while ( again || p !== end );

		return end;

	}

	// main ear slicing loop which triangulates a polygon (given as a linked list)

	function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

		if ( ! ear ) return;

		// interlink polygon nodes in z-order

		if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

		var stop = ear, prev, next;

		// iterate through ears, slicing them one by one

		while ( ear.prev !== ear.next ) {

			prev = ear.prev;
			next = ear.next;

			if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

				// cut off the triangle
				triangles.push( prev.i / dim );
				triangles.push( ear.i / dim );
				triangles.push( next.i / dim );

				removeNode( ear );

				// skipping the next vertice leads to less sliver triangles
				ear = next.next;
				stop = next.next;

				continue;

			}

			ear = next;

			// if we looped through the whole remaining polygon and can't find any more ears

			if ( ear === stop ) {

				// try filtering points and slicing again

				if ( ! pass ) {

					earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

					// if this didn't work, try curing all small self-intersections locally

				} else if ( pass === 1 ) {

					ear = cureLocalIntersections( ear, triangles, dim );
					earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

				// as a last resort, try splitting the remaining polygon into two

				} else if ( pass === 2 ) {

					splitEarcut( ear, triangles, dim, minX, minY, invSize );

				}

				break;

			}

		}

	}

	// check whether a polygon node forms a valid ear with adjacent nodes

	function isEar( ear ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

		// now make sure we don't have other points inside the potential ear
		var p = ear.next.next;

		while ( p !== ear.prev ) {

			if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {

				return false;

			}

			p = p.next;

		}

		return true;

	}

	function isEarHashed( ear, minX, minY, invSize ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

		// triangle bbox; min & max are calculated like this for speed

		var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
			minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
			maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
			maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

		// z-order range for the current triangle bbox;

		var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
			maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

		// first look for points inside the triangle in increasing z-order

		var p = ear.nextZ;

		while ( p && p.z <= maxZ ) {

			if ( p !== ear.prev && p !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) return false;
			p = p.nextZ;

		}

		// then look for points in decreasing z-order

		p = ear.prevZ;

		while ( p && p.z >= minZ ) {

			if ( p !== ear.prev && p !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) return false;

			p = p.prevZ;

		}

		return true;

	}

	// go through all polygon nodes and cure small local self-intersections

	function cureLocalIntersections( start, triangles, dim ) {

		var p = start;

		do {

			var a = p.prev, b = p.next.next;

			if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

				triangles.push( a.i / dim );
				triangles.push( p.i / dim );
				triangles.push( b.i / dim );

				// remove two nodes involved

				removeNode( p );
				removeNode( p.next );

				p = start = b;

			}

			p = p.next;

		} while ( p !== start );

		return p;

	}

	// try splitting polygon into two and triangulate them independently

	function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

		// look for a valid diagonal that divides the polygon into two

		var a = start;

		do {

			var b = a.next.next;

			while ( b !== a.prev ) {

				if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

					// split the polygon in two by the diagonal

					var c = splitPolygon( a, b );

					// filter colinear points around the cuts

					a = filterPoints( a, a.next );
					c = filterPoints( c, c.next );

					// run earcut on each half

					earcutLinked( a, triangles, dim, minX, minY, invSize );
					earcutLinked( c, triangles, dim, minX, minY, invSize );
					return;

				}

				b = b.next;

			}

			a = a.next;

		} while ( a !== start );

	}

	// link every hole into the outer loop, producing a single-ring polygon without holes

	function eliminateHoles( data, holeIndices, outerNode, dim ) {

		var queue = [], i, len, start, end, list;

		for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

			start = holeIndices[ i ] * dim;
			end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
			list = linkedList( data, start, end, dim, false );
			if ( list === list.next ) list.steiner = true;
			queue.push( getLeftmost( list ) );

		}

		queue.sort( compareX );

		// process holes from left to right

		for ( i = 0; i < queue.length; i ++ ) {

			eliminateHole( queue[ i ], outerNode );
			outerNode = filterPoints( outerNode, outerNode.next );

		}

		return outerNode;

	}

	function compareX( a, b ) {

		return a.x - b.x;

	}

	// find a bridge between vertices that connects hole with an outer ring and and link it

	function eliminateHole( hole, outerNode ) {

		outerNode = findHoleBridge( hole, outerNode );

		if ( outerNode ) {

			var b = splitPolygon( outerNode, hole );

			filterPoints( b, b.next );

		}

	}

	// David Eberly's algorithm for finding a bridge between hole and outer polygon

	function findHoleBridge( hole, outerNode ) {

		var p = outerNode,
			hx = hole.x,
			hy = hole.y,
			qx = - Infinity,
			m;

		// find a segment intersected by a ray from the hole's leftmost point to the left;
		// segment's endpoint with lesser x will be potential connection point

		do {

			if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

				var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );

				if ( x <= hx && x > qx ) {

					qx = x;

					if ( x === hx ) {

						if ( hy === p.y ) return p;
						if ( hy === p.next.y ) return p.next;

					}

					m = p.x < p.next.x ? p : p.next;

				}

			}

			p = p.next;

		} while ( p !== outerNode );

		if ( ! m ) return null;

		if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint

		// look for points inside the triangle of hole point, segment intersection and endpoint;
		// if there are no points found, we have a valid connection;
		// otherwise choose the point of the minimum angle with the ray as connection point

		var stop = m,
			mx = m.x,
			my = m.y,
			tanMin = Infinity,
			tan;

		p = m.next;

		while ( p !== stop ) {

			if ( hx >= p.x && p.x >= mx && hx !== p.x &&
							pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

				tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

				if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

					m = p;
					tanMin = tan;

				}

			}

			p = p.next;

		}

		return m;

	}

	// interlink polygon nodes in z-order

	function indexCurve( start, minX, minY, invSize ) {

		var p = start;

		do {

			if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;

		} while ( p !== start );

		p.prevZ.nextZ = null;
		p.prevZ = null;

		sortLinked( p );

	}

	// Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html

	function sortLinked( list ) {

		var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;

		do {

			p = list;
			list = null;
			tail = null;
			numMerges = 0;

			while ( p ) {

				numMerges ++;
				q = p;
				pSize = 0;

				for ( i = 0; i < inSize; i ++ ) {

					pSize ++;
					q = q.nextZ;
					if ( ! q ) break;

				}

				qSize = inSize;

				while ( pSize > 0 || ( qSize > 0 && q ) ) {

					if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

						e = p;
						p = p.nextZ;
						pSize --;

					} else {

						e = q;
						q = q.nextZ;
						qSize --;

					}

					if ( tail ) tail.nextZ = e;
					else list = e;

					e.prevZ = tail;
					tail = e;

				}

				p = q;

			}

			tail.nextZ = null;
			inSize *= 2;

		} while ( numMerges > 1 );

		return list;

	}

	// z-order of a point given coords and inverse of the longer side of data bbox

	function zOrder( x, y, minX, minY, invSize ) {

		// coords are transformed into non-negative 15-bit integer range

		x = 32767 * ( x - minX ) * invSize;
		y = 32767 * ( y - minY ) * invSize;

		x = ( x | ( x << 8 ) ) & 0x00FF00FF;
		x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
		x = ( x | ( x << 2 ) ) & 0x33333333;
		x = ( x | ( x << 1 ) ) & 0x55555555;

		y = ( y | ( y << 8 ) ) & 0x00FF00FF;
		y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
		y = ( y | ( y << 2 ) ) & 0x33333333;
		y = ( y | ( y << 1 ) ) & 0x55555555;

		return x | ( y << 1 );

	}

	// find the leftmost node of a polygon ring

	function getLeftmost( start ) {

		var p = start, leftmost = start;

		do {

			if ( p.x < leftmost.x ) leftmost = p;
			p = p.next;

		} while ( p !== start );

		return leftmost;

	}

	// check if a point lies within a convex triangle

	function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

		return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
		 ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
		 ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

	}

	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)

	function isValidDiagonal( a, b ) {

		return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
			locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

	}

	// signed area of a triangle

	function area( p, q, r ) {

		return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

	}

	// check if two points are equal

	function equals( p1, p2 ) {

		return p1.x === p2.x && p1.y === p2.y;

	}

	// check if two segments intersect

	function intersects( p1, q1, p2, q2 ) {

		if ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||
				( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;

		return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
					 area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

	}

	// check if a polygon diagonal intersects any polygon segments

	function intersectsPolygon( a, b ) {

		var p = a;

		do {

			if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
							intersects( p, p.next, a, b ) ) {

				return true;

			}

			p = p.next;

		} while ( p !== a );

		return false;

	}

	// check if a polygon diagonal is locally inside the polygon

	function locallyInside( a, b ) {

		return area( a.prev, a, a.next ) < 0 ?
			area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
			area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

	}

	// check if the middle point of a polygon diagonal is inside the polygon

	function middleInside( a, b ) {

		var p = a,
			inside = false,
			px = ( a.x + b.x ) / 2,
			py = ( a.y + b.y ) / 2;

		do {

			if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
							( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {

				inside = ! inside;

			}

			p = p.next;

		} while ( p !== a );

		return inside;

	}

	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring

	function splitPolygon( a, b ) {

		var a2 = new Node$1( a.i, a.x, a.y ),
			b2 = new Node$1( b.i, b.x, b.y ),
			an = a.next,
			bp = b.prev;

		a.next = b;
		b.prev = a;

		a2.next = an;
		an.prev = a2;

		b2.next = a2;
		a2.prev = b2;

		bp.next = b2;
		b2.prev = bp;

		return b2;

	}

	// create a node and optionally link it with previous one (in a circular doubly linked list)

	function insertNode( i, x, y, last ) {

		var p = new Node$1( i, x, y );

		if ( ! last ) {

			p.prev = p;
			p.next = p;

		} else {

			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;

		}

		return p;

	}

	function removeNode( p ) {

		p.next.prev = p.prev;
		p.prev.next = p.next;

		if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
		if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

	}

	function Node$1( i, x, y ) {

		// vertice index in coordinates array
		this.i = i;

		// vertex coordinates
		this.x = x;
		this.y = y;

		// previous and next vertice nodes in a polygon ring
		this.prev = null;
		this.next = null;

		// z-order curve value
		this.z = null;

		// previous and next nodes in z-order
		this.prevZ = null;
		this.nextZ = null;

		// indicates whether this is a steiner point
		this.steiner = false;

	}

	function signedArea( data, start, end, dim ) {

		var sum = 0;

		for ( var i = start, j = end - dim; i < end; i += dim ) {

			sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
			j = i;

		}

		return sum;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		triangulateShape: function ( contour, holes ) {

			var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
			var holeIndices = []; // array of hole indices
			var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

			removeDupEndPts( contour );
			addContour( vertices, contour );

			//

			var holeIndex = contour.length;

			holes.forEach( removeDupEndPts );

			for ( var i = 0; i < holes.length; i ++ ) {

				holeIndices.push( holeIndex );
				holeIndex += holes[ i ].length;
				addContour( vertices, holes[ i ] );

			}

			//

			var triangles = Earcut.triangulate( vertices, holeIndices );

			//

			for ( var i = 0; i < triangles.length; i += 3 ) {

				faces.push( triangles.slice( i, i + 3 ) );

			}

			return faces;

		}

	};

	function removeDupEndPts( points ) {

		var l = points.length;

		if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

			points.pop();

		}

	}

	function addContour( vertices, contour ) {

		for ( var i = 0; i < contour.length; i ++ ) {

			vertices.push( contour[ i ].x );
			vertices.push( contour[ i ].y );

		}

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  depth: <float>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *  UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */

	// ExtrudeGeometry

	function ExtrudeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
		this.mergeVertices();

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	ExtrudeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;
		var options = this.parameters.options;

		return toJSON( shapes, options, data );

	};

	// ExtrudeBufferGeometry

	function ExtrudeBufferGeometry( shapes, options ) {

		BufferGeometry.call( this );

		this.type = 'ExtrudeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		var scope = this;

		var verticesArray = [];
		var uvArray = [];

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			var shape = shapes[ i ];
			addShape( shape );

		}

		// build geometry

		this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

		this.computeVertexNormals();

		// functions

		function addShape( shape ) {

			var placeholder = [];

			// options

			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
			var steps = options.steps !== undefined ? options.steps : 1;
			var depth = options.depth !== undefined ? options.depth : 100;

			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			var extrudePath = options.extrudePath;

			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

			// deprecated options

			if ( options.amount !== undefined ) {

				console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
				depth = options.amount;

			}

			//

			var extrudePts, extrudeByPath = false;
			var splineTube, binormal, normal, position2;

			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// TODO1 - have a .isClosed in spline?

				splineTube = extrudePath.computeFrenetFrames( steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;

			}

			// Variables initialization

			var ahole, h, hl; // looping of holes

			var shapePoints = shape.extractPoints( curveSegments );

			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;

			var reverse = ! ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];

					if ( ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

			}


			var faces = ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			var contour = vertices; // vertices has all points but contour has only points of circumference

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2( pt, vec, size ) {

				if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

				return vec.clone().multiplyScalar( size ).add( pt );

			}

			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				var v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;

				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return new Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					var direction_eq = false; // assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			var contourMovements = [];

			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			var holesMovements = [],
				oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				oneHoleMovements = [];

				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) j = 0;
					if ( k === il ) k = 0;

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y, - z );

					}

				}

			}

			bs = bevelSize;

			// Back facing vertices

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			var s;

			for ( s = 1; s <= steps; s ++ ) {

				for ( i = 0; i < vlen; i ++ ) {

					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, depth / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, depth + z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y, depth + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				var start = verticesArray.length / 3;

				if ( bevelEnabled ) {

					var layer = 0; // steps + 1
					var offset = vlen * layer;

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

				scope.addGroup( start, verticesArray.length / 3 - start, 0 );

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				var start = verticesArray.length / 3;
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}


				scope.addGroup( start, verticesArray.length / 3 - start, 1 );


			}

			function sidewalls( contour, layeroffset ) {

				var j, k;
				i = contour.length;

				while ( -- i >= 0 ) {

					j = i;
					k = i - 1;
					if ( k < 0 ) k = contour.length - 1;

					//console.log('b', i,j, i-1, k,vertices.length);

					var s = 0,
						sl = steps + bevelSegments * 2;

					for ( s = 0; s < sl; s ++ ) {

						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );

						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d );

					}

				}

			}

			function v( x, y, z ) {

				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );

			}


			function f3( a, b, c ) {

				addVertex( a );
				addVertex( b );
				addVertex( c );

				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );

			}

			function f4( a, b, c, d ) {

				addVertex( a );
				addVertex( b );
				addVertex( d );

				addVertex( b );
				addVertex( c );
				addVertex( d );


				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );

				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );

			}

			function addVertex( index ) {

				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );

			}


			function addUV( vector2 ) {

				uvArray.push( vector2.x );
				uvArray.push( vector2.y );

			}

		}

	}

	ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

	ExtrudeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;
		var options = this.parameters.options;

		return toJSON( shapes, options, data );

	};

	//

	var WorldUVGenerator = {

		generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];

			return [
				new Vector2( a_x, a_y ),
				new Vector2( b_x, b_y ),
				new Vector2( c_x, c_y )
			];

		},

		generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var a_z = vertices[ indexA * 3 + 2 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var b_z = vertices[ indexB * 3 + 2 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];
			var c_z = vertices[ indexC * 3 + 2 ];
			var d_x = vertices[ indexD * 3 ];
			var d_y = vertices[ indexD * 3 + 1 ];
			var d_z = vertices[ indexD * 3 + 2 ];

			if ( Math.abs( a_y - b_y ) < 0.01 ) {

				return [
					new Vector2( a_x, 1 - a_z ),
					new Vector2( b_x, 1 - b_z ),
					new Vector2( c_x, 1 - c_z ),
					new Vector2( d_x, 1 - d_z )
				];

			} else {

				return [
					new Vector2( a_y, 1 - a_z ),
					new Vector2( b_y, 1 - b_z ),
					new Vector2( c_y, 1 - c_z ),
					new Vector2( d_y, 1 - d_z )
				];

			}

		}
	};

	function toJSON( shapes, options, data ) {

		//

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		//

		if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();

		return data;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	// TextGeometry

	function TextGeometry( text, parameters ) {

		Geometry.call( this );

		this.type = 'TextGeometry';

		this.parameters = {
			text: text,
			parameters: parameters
		};

		this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
		this.mergeVertices();

	}

	TextGeometry.prototype = Object.create( Geometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	// TextBufferGeometry

	function TextBufferGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( ! ( font && font.isFont ) ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size );

		// translate parameters to ExtrudeGeometry API

		parameters.depth = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		ExtrudeBufferGeometry.call( this, shapes, parameters );

		this.type = 'TextBufferGeometry';

	}

	TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
	TextBufferGeometry.prototype.constructor = TextBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// SphereGeometry

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	// SphereBufferGeometry

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var ix, iy;

		var index = 0;
		var grid = [];

		var vertex = new Vector3();
		var normal = new Vector3();

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy <= heightSegments; iy ++ ) {

			var verticesRow = [];

			var v = iy / heightSegments;

			for ( ix = 0; ix <= widthSegments; ix ++ ) {

				var u = ix / widthSegments;

				// vertex

				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.set( vertex.x, vertex.y, vertex.z ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, 1 - v );

				verticesRow.push( index ++ );

			}

			grid.push( verticesRow );

		}

		// indices

		for ( iy = 0; iy < heightSegments; iy ++ ) {

			for ( ix = 0; ix < widthSegments; ix ++ ) {

				var a = grid[ iy ][ ix + 1 ];
				var b = grid[ iy ][ ix ];
				var c = grid[ iy + 1 ][ ix ];
				var d = grid[ iy + 1 ][ ix + 1 ];

				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// RingGeometry

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	// RingBufferGeometry

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 0.5;
		outerRadius = outerRadius || 1;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// some helper variables

		var segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				// values are generate from the inside of the ring to the outside

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex

				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, 0, 1 );

				// uv

				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;

				uvs.push( uv.x, uv.y );

			}

			// increase the radius for next row of vertices

			radius += radiusStep;

		}

		// indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// LatheGeometry

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	// LatheBufferGeometry

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]

		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


		// buffers

		var indices = [];
		var vertices = [];
		var uvs = [];

		// helper variables

		var base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex

				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;

				vertices.push( vertex.x, vertex.y, vertex.z );

				// uv

				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );

				uvs.push( uv.x, uv.y );


			}

		}

		// indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if ( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices

			base = segments * points.length * 3;

			for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line

				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line

				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals

				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals

				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			}

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// ShapeGeometry

	function ShapeGeometry( shapes, curveSegments ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( typeof curveSegments === 'object' ) {

			console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

			curveSegments = curveSegments.curveSegments;

		}

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
		this.mergeVertices();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	ShapeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON$1( shapes, data );

	};

	// ShapeBufferGeometry

	function ShapeBufferGeometry( shapes, curveSegments ) {

		BufferGeometry.call( this );

		this.type = 'ShapeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		curveSegments = curveSegments || 12;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var groupStart = 0;
		var groupCount = 0;

		// allow single and array values for "shapes" parameter

		if ( Array.isArray( shapes ) === false ) {

			addShape( shapes );

		} else {

			for ( var i = 0; i < shapes.length; i ++ ) {

				addShape( shapes[ i ] );

				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

				groupStart += groupCount;
				groupCount = 0;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


		// helper functions

		function addShape( shape ) {

			var i, l, shapeHole;

			var indexOffset = vertices.length / 3;
			var points = shape.extractPoints( curveSegments );

			var shapeVertices = points.shape;
			var shapeHoles = points.holes;

			// check direction of vertices

			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

				shapeVertices = shapeVertices.reverse();

				// also check if holes are in the opposite direction

				for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

					shapeHole = shapeHoles[ i ];

					if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

						shapeHoles[ i ] = shapeHole.reverse();

					}

				}

			}

			var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

			// join vertices of inner and outer paths to a single array

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );

			}

			// vertices, normals, uvs

			for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

				var vertex = shapeVertices[ i ];

				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs

			}

			// incides

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var a = face[ 0 ] + indexOffset;
				var b = face[ 1 ] + indexOffset;
				var c = face[ 2 ] + indexOffset;

				indices.push( a, b, c );
				groupCount += 3;

			}

		}

	}

	ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

	ShapeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON$1( shapes, data );

	};

	//

	function toJSON$1( shapes, data ) {

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		return data;

	}

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		this.type = 'EdgesGeometry';

		this.parameters = {
			thresholdAngle: thresholdAngle
		};

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		// buffer

		var vertices = [];

		// helper variables

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
		var edge = [ 0, 0 ], edges = {}, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];

		// prepare source geometry

		var geometry2;

		if ( geometry.isBufferGeometry ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var sourceVertices = geometry2.vertices;
		var faces = geometry2.faces;

		// now create a data structure where each entry represents an edge with its adjoining faces

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 );
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					edges[ key ].face2 = i;

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			var e = edges[ key ];

			// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

			if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

				var vertex = sourceVertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = sourceVertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		// build geometry

		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// CylinderGeometry

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	// CylinderBufferGeometry

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 1;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
		height = height || 1;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var index = 0;
		var indexArray = [];
		var halfHeight = height / 2;
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row

				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					// save index of vertex in respective row

					indexRow.push( index ++ );

				}

				// now save vertices of the row in our index array

				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices

					var a = indexArray[ y ][ x ];
					var b = indexArray[ y + 1 ][ x ];
					var c = indexArray[ y + 1 ][ x + 1 ];
					var d = indexArray[ y ][ x + 1 ];

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// update group counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex

				vertices.push( 0, halfHeight * sign, 0 );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uvs.push( 0.5, 0.5 );

				// increase index

				index ++;

			}

			// save the index of the last center vertex

			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );

				// increase index

				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top

					indices.push( i, i + 1, c );

				} else {

					// face bottom

					indices.push( i + 1, i, c );

				}

				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	// ConeGeometry

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	// ConeBufferGeometry

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author hughes
	 */

	// CircleGeometry

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	// CircleBufferGeometry

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, s;
		var vertex = new Vector3();
		var uv = new Vector2();

		// center point

		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );

		for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

			var segment = thetaStart + s / segments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uvs

			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// indices

		for ( i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



	var Geometries = /*#__PURE__*/Object.freeze({
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		TextBufferGeometry: TextBufferGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeBufferGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeBufferGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxBufferGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  color: <THREE.Color>
	 * }
	 */

	function ShadowMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShadowMaterial';

		this.color = new Color( 0x000000 );
		this.transparent = true;

		this.setValues( parameters );

	}

	ShadowMaterial.prototype = Object.create( Material.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	ShadowMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = { 'PHYSICAL': '' };

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = { 'PHYSICAL': '' };

		this.reflectivity = source.reflectivity;

		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author takahirox / http://github.com/takahirox
	 *
	 * parameters = {
	 *  gradientMap: new THREE.Texture( <Image> )
	 * }
	 */

	function MeshToonMaterial( parameters ) {

		MeshPhongMaterial.call( this );

		this.defines = { 'TOON': '' };

		this.type = 'MeshToonMaterial';

		this.gradientMap = null;

		this.setValues( parameters );

	}

	MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
	MeshToonMaterial.prototype.constructor = MeshToonMaterial;

	MeshToonMaterial.prototype.isMeshToonMaterial = true;

	MeshToonMaterial.prototype.copy = function ( source ) {

		MeshPhongMaterial.prototype.copy.call( this, source );

		this.gradientMap = source.gradientMap;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshNormalMaterial';

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		LineBasicMaterial.call( this );

		this.type = 'LineDashedMaterial';

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		LineBasicMaterial.prototype.copy.call( this, source );

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = /*#__PURE__*/Object.freeze({
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshToonMaterial: MeshToonMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshDistanceMaterial: MeshDistanceMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false;
		var itemsLoaded = 0;
		var itemsTotal = 0;
		var urlModifier = undefined;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

		this.resolveURL = function ( url ) {

			if ( urlModifier ) {

				return urlModifier( url );

			}

			return url;

		};

		this.setURLModifier = function ( transform ) {

			urlModifier = transform;
			return this;

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var loading = {};

	function FileLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FileLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check if request is duplicate

			if ( loading[ url ] !== undefined ) {

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				return;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[ 1 ];
				var isBase64 = !! dataUriRegexResult[ 2 ];
				var data = dataUriRegexResult[ 3 ];

				data = window.decodeURIComponent( data );

				if ( isBase64 ) data = window.atob( data );

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

							var view = new Uint8Array( data.length );

							for ( var i = 0; i < data.length; i ++ ) {

								view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ view.buffer ], { type: mimeType } );

							} else {

								response = view.buffer;

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					window.setTimeout( function () {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					}, 0 );

				} catch ( error ) {

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					window.setTimeout( function () {

						if ( onError ) onError( error );

						scope.manager.itemEnd( url );
						scope.manager.itemError( url );

					}, 0 );

				}

			} else {

				// Initialise array for duplicate requests

				loading[ url ] = [];

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				var request = new XMLHttpRequest();

				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = this.response;

					Cache.add( url, response );

					var callbacks = loading[ url ];

					delete loading[ url ];

					if ( this.status === 200 || this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onLoad ) callback.onLoad( response );

						}

						scope.manager.itemEnd( url );

					} else {

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onError ) callback.onError( event );

						}

						scope.manager.itemEnd( url );
						scope.manager.itemError( url );

					}

				}, false );

				request.addEventListener( 'progress', function ( event ) {

					var callbacks = loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onProgress ) callback.onProgress( event );

					}

				}, false );

				request.addEventListener( 'error', function ( event ) {

					var callbacks = loading[ url ];

					delete loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) callback.onError( event );

					}

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, false );

				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

				if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

				for ( var header in this.requestHeader ) {

					request.setRequestHeader( header, this.requestHeader[ header ] );

				}

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setMimeType: function ( value ) {

			this.mimeType = value;
			return this;

		},

		setRequestHeader: function ( value ) {

			this.requestHeader = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	function CompressedTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( CompressedTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps: [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	function DataTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( DataTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function ImageLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( ImageLoader.prototype, {

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

			function onImageLoad() {

				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );

				Cache.add( url, this );

				if ( onLoad ) onLoad( this );

				scope.manager.itemEnd( url );

			}

			function onImageError( event ) {

				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );

				if ( onError ) onError( event );

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			}

			image.addEventListener( 'load', onImageLoad, false );
			image.addEventListener( 'error', onImageError, false );

			if ( url.substr( 0, 5 ) !== 'data:' ) {

				if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

			}

			scope.manager.itemStart( url );

			image.src = url;

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function CubeTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( CubeTextureLoader.prototype, {

		crossOrigin: 'anonymous',

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function TextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( TextureLoader.prototype, {

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			loader.load( url, function ( image ) {

				texture.image = image;

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	Object.assign( Curve.prototype, {

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( /* t, optionalTarget */ ) {

			console.warn( 'THREE.Curve: .getPoint() not implemented.' );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u, optionalTarget ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t, optionalTarget );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( divisions === undefined ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( divisions === undefined ) divisions = this.arcLengthDivisions;

			if ( this.cacheArcLengths &&
				( this.cacheArcLengths.length === divisions + 1 ) &&
				! this.needsUpdate ) {

				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum: sum }; Sum is in the last element.

		},

		updateArcLengths: function () {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			if ( arcLengths[ i ] === targetArcLength ) {

				return i / ( il - 1 );

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function ( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.arcLengthDivisions = source.arcLengthDivisions;

			return this;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};

			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;

			return data;

		},

		fromJSON: function ( json ) {

			this.arcLengthDivisions = json.arcLengthDivisions;

			return this;

		}

	} );

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		Curve.call( this );

		this.type = 'EllipseCurve';

		this.aX = aX || 0;
		this.aY = aY || 0;

		this.xRadius = xRadius || 1;
		this.yRadius = yRadius || 1;

		this.aStartAngle = aStartAngle || 0;
		this.aEndAngle = aEndAngle || 2 * Math.PI;

		this.aClockwise = aClockwise || false;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return point.set( x, y );

	};

	EllipseCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.aX = source.aX;
		this.aY = source.aY;

		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;

		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;

		this.aClockwise = source.aClockwise;

		this.aRotation = source.aRotation;

		return this;

	};


	EllipseCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.aX = this.aX;
		data.aY = this.aY;

		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;

		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;

		data.aClockwise = this.aClockwise;

		data.aRotation = this.aRotation;

		return data;

	};

	EllipseCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.aX = json.aX;
		this.aY = json.aY;

		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;

		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;

		this.aClockwise = json.aClockwise;

		this.aRotation = json.aRotation;

		return this;

	};

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		this.type = 'ArcCurve';

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	ArcCurve.prototype.isArcCurve = true;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */


	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/

	function CubicPoly() {

		var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		function init( x0, x1, t0, t1 ) {

			c0 = x0;
			c1 = t0;
			c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;

		}

		return {

			initCatmullRom: function ( x0, x1, x2, x3, tension ) {

				init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

			},

			initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

				// compute tangents when parameterized in [t1,t2]
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

				// rescale tangents for parametrization in [0,1]
				t1 *= dt1;
				t2 *= dt1;

				init( x1, x2, t1, t2 );

			},

			calc: function ( t ) {

				var t2 = t * t;
				var t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;

			}

		};

	}

	//

	var tmp = new Vector3();
	var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

	function CatmullRomCurve3( points, closed, curveType, tension ) {

		Curve.call( this );

		this.type = 'CatmullRomCurve3';

		this.points = points || [];
		this.closed = closed || false;
		this.curveType = curveType || 'centripetal';
		this.tension = tension || 0.5;

	}

	CatmullRomCurve3.prototype = Object.create( Curve.prototype );
	CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

	CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var points = this.points;
		var l = points.length;

		var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		var p0, p1, p2, p3; // 4 points

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		p1 = points[ intPoint % l ];
		p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	};

	CatmullRomCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	};

	CatmullRomCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	};

	CatmullRomCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/Bézier_curve
	 */

	function CatmullRom( t, p0, p1, p2, p3 ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

	//

	function QuadraticBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * p;

	}

	function QuadraticBezierP1( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	}

	function QuadraticBezierP2( t, p ) {

		return t * t * p;

	}

	function QuadraticBezier( t, p0, p1, p2 ) {

		return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
			QuadraticBezierP2( t, p2 );

	}

	//

	function CubicBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	}

	function CubicBezierP1( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	}

	function CubicBezierP2( t, p ) {

		return 3 * ( 1 - t ) * t * t * p;

	}

	function CubicBezierP3( t, p ) {

		return t * t * t * p;

	}

	function CubicBezier( t, p0, p1, p2, p3 ) {

		return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
			CubicBezierP3( t, p3 );

	}

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
		this.v3 = v3 || new Vector2();

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.isCubicBezierCurve = true;

	CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);

		return point;

	};

	CubicBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function CubicBezierCurve3( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
		this.v3 = v3 || new Vector3();

	}

	CubicBezierCurve3.prototype = Object.create( Curve.prototype );
	CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

	CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);

		return point;

	};

	CubicBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function LineCurve( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve';

		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve.prototype.getTangent = function ( /* t */ ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	LineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function LineCurve3( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve3';

		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	LineCurve3.prototype = Object.create( Curve.prototype );
	LineCurve3.prototype.constructor = LineCurve3;

	LineCurve3.prototype.isLineCurve3 = true;

	LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

	QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);

		return point;

	};

	QuadraticBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve3( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

	QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);

		return point;

	};

	QuadraticBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function SplineCurve( points /* array of Vector2 */ ) {

		Curve.call( this );

		this.type = 'SplineCurve';

		this.points = points || [];

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var points = this.points;
		var p = ( points.length - 1 ) * t;

		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var p1 = points[ intPoint ];
		var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);

		return point;

	};

	SplineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		return this;

	};

	SplineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		return data;

	};

	SplineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );

		}

		return this;

	};



	var Curves = /*#__PURE__*/Object.freeze({
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		Curve.call( this );

		this.type = 'CurvePath';

		this.curves = [];
		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) divisions = 40;

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
					: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
						: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
							: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j ++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		copy: function ( source ) {

			Curve.prototype.copy.call( this, source );

			this.curves = [];

			for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

				var curve = source.curves[ i ];

				this.curves.push( curve.clone() );

			}

			this.autoClose = source.autoClose;

			return this;

		},

		toJSON: function () {

			var data = Curve.prototype.toJSON.call( this );

			data.autoClose = this.autoClose;
			data.curves = [];

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				var curve = this.curves[ i ];
				data.curves.push( curve.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Curve.prototype.fromJSON.call( this, json );

			this.autoClose = json.autoClose;
			this.curves = [];

			for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

				var curve = json.curves[ i ];
				this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

			}

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 **/

	function Path( points ) {

		CurvePath.call( this );

		this.type = 'Path';

		this.currentPoint = new Vector2();

		if ( points ) {

			this.setFromPoints( points );

		}

	}

	Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

		constructor: Path,

		setFromPoints: function ( points ) {

			this.moveTo( points[ 0 ].x, points[ 0 ].y );

			for ( var i = 1, l = points.length; i < l; i ++ ) {

				this.lineTo( points[ i ].x, points[ i ].y );

			}

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

		},

		copy: function ( source ) {

			CurvePath.prototype.copy.call( this, source );

			this.currentPoint.copy( source.currentPoint );

			return this;

		},

		toJSON: function () {

			var data = CurvePath.prototype.toJSON.call( this );

			data.currentPoint = this.currentPoint.toArray();

			return data;

		},

		fromJSON: function ( json ) {

			CurvePath.prototype.fromJSON.call( this, json );

			this.currentPoint.fromArray( json.currentPoint );

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape( points ) {

		Path.call( this, points );

		this.uuid = _Math.generateUUID();

		this.type = 'Shape';

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( Path.prototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// get points of shape and holes (keypoints based on segments parameter)

		extractPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		copy: function ( source ) {

			Path.prototype.copy.call( this, source );

			this.holes = [];

			for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

				var hole = source.holes[ i ];

				this.holes.push( hole.clone() );

			}

			return this;

		},

		toJSON: function () {

			var data = Path.prototype.toJSON.call( this );

			data.uuid = this.uuid;
			data.holes = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				var hole = this.holes[ i ];
				data.holes.push( hole.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Path.prototype.fromJSON.call( this, json );

			this.uuid = json.uuid;
			this.holes = [];

			for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

				var hole = json.holes[ i ];
				this.holes.push( new Path().fromJSON( hole ) );

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

			if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.matrix = new Matrix4();

	}

	Object.assign( LightShadow.prototype, {

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) object.bias = this.bias;
			if ( this.radius !== 1 ) object.radius = this.radius;
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		update: function ( light ) {

			var camera = this.camera;

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || camera.far;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				return this.intensity * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				this.intensity = power / Math.PI;

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				this.intensity = power / ( 4 * Math.PI );

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow( ) {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true

	} );

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function RectAreaLight( color, intensity, width, height ) {

		Light.call( this, color, intensity );

		this.type = 'RectAreaLight';

		this.width = ( width !== undefined ) ? width : 10;
		this.height = ( height !== undefined ) ? height : 10;

	}

	RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: RectAreaLight,

		isRectAreaLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.width = source.width;
			this.height = source.height;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Light.prototype.toJSON.call( this, meta );

			data.object.width = this.width;
			data.object.height = this.height;

			return data;

		}

	} );

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function ( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				// in ios9 array.subarray(from, undefined) will return empty array
				// but array.subarray(from) or array.subarray(from, len) is correct
				return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function ( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function ( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function ( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function ( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {

				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {

				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Object.assign( Interpolant.prototype, {

		evaluate: function ( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[ i1 ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {

						//- See http://jsperf.com/comparison-to-undefined/3
						//- slower code:
						//-
						//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ; ) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

						//- slower code:
						//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ; ) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[ i1 ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function () {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function ( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function ( /* i1, t0, t, t1 */ ) {

			throw new Error( 'call to abstract method' );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function ( /* i1, t0, t1 */ ) {

			// empty

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( Interpolant.prototype, {

		//( 0, t, t0 ), returns this.resultBuffer
		beforeStart_: Interpolant.prototype.copySampleValue_,

		//( N-1, tN-1, t ), returns this.resultBuffer
		afterEnd_: Interpolant.prototype.copySampleValue_,

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = - 0;
		this._offsetPrev = - 0;
		this._weightNext = - 0;
		this._offsetNext = - 0;

	}

	CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding

		},

		intervalChanged_: function ( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP = - wP * ppp + 2 * wP * pp - wP * p;
			var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
			var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
			var sN = wN * ppp - wN * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function ( i1 /*, t0, t, t1 */ ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
		if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	}

	// Static methods

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		toJSON: function ( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		}

	} );

	Object.assign( KeyframeTrack.prototype, {

		constructor: KeyframeTrack,

		TimeBufferType: Float32Array,

		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function ( result ) {

			return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function ( result ) {

			return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function ( result ) {

			return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function ( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( 'THREE.KeyframeTrack:', message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function () {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function () {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function ( timeOffset ) {

			if ( timeOffset !== 0.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function ( timeScale ) {

			if ( timeScale !== 1.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function ( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) {

				++ from;

			}

			while ( to !== - 1 && times[ to ] > endTime ) {

				-- to;

			}

			++ to; // inclusive -> exclusive bound

			if ( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function () {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if ( nKeys === 0 ) {

				console.error( 'THREE.KeyframeTrack: Track is empty.', this );
				valid = false;

			}

			var prevTime = null;

			for ( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
					valid = false;
					break;

				}

				if ( prevTime !== null && prevTime > currTime ) {

					console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function () {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for ( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else {

						keep = true;

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

					values[ writeOffset + j ] = values[ readOffset + j ];

				}

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrack.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function ( result ) {

			return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : - 1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		this.optimize();

	}

	function getTrackTypeForValueTypeName( typeName ) {

		switch ( typeName.toLowerCase() ) {

			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':

				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':

				return VectorKeyframeTrack;

			case 'color':

				return ColorKeyframeTrack;

			case 'quaternion':

				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':

				return BooleanKeyframeTrack;

			case 'string':

				return StringKeyframeTrack;

		}

		throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

	}

	function parseKeyframeTrack( json ) {

		if ( json.type === undefined ) {

			throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

		}

		var trackType = getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we assume a constructor compatible with the base
			return new trackType( json.name, json.times, json.values, json.interpolation );

		}

	}

	Object.assign( AnimationClip, {

		parse: function ( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},

		toJSON: function ( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks,
				'uuid': clip.uuid

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},

		CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );

			}

			return new AnimationClip( name, - 1, tracks );

		},

		findByName: function ( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}

			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function ( animation, bones ) {

			if ( ! animation ) {

				console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
				return null;

			}

			var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || - 1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) continue;

				// process morph targets
				if ( animationKeys[ 0 ].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};

					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[ k ].morphTargets ) {

							for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[ k ];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {

					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );

					addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	Object.assign( AnimationClip.prototype, {

		resetDuration: function () {

			var tracks = this.tracks, duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max( duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.textures = {};

	}

	Object.assign( MaterialLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
			if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.fog !== undefined ) material.fog = json.fog;
			if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
			if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
			if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

			if ( json.rotation !== undefined ) material.rotation = json.rotation;

			if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
			if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
			if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
			if ( json.scale !== undefined ) material.scale = json.scale;

			if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
			if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
			if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;

			if ( json.skinning !== undefined ) material.skinning = json.skinning;
			if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
			if ( json.dithering !== undefined ) material.dithering = json.dithering;

			if ( json.visible !== undefined ) material.visible = json.visible;
			if ( json.userData !== undefined ) material.userData = json.userData;

			// Deprecated

			if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

			// for PointsMaterial

			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
			if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

			if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

			return material;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( BufferGeometryLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new BufferGeometry();

			var index = json.data.index;

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	} );

	var TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		// Workaround for IE11 pre KB2929437. See #11440
		Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader() {}

	Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	Object.assign( Loader.prototype, {

		crossOrigin: 'anonymous',

		onLoadStart: function () {},

		onLoadProgress: function () {},

		onLoadComplete: function () {},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var BlendingMode = {
				NoBlending: NoBlending,
				NormalBlending: NormalBlending,
				AdditiveBlending: AdditiveBlending,
				SubtractiveBlending: SubtractiveBlending,
				MultiplyBlending: MultiplyBlending,
				CustomBlending: CustomBlending
			};

			var color = new Color();
			var textureLoader = new TextureLoader();
			var materialLoader = new MaterialLoader();

			return function createMaterial( m, texturePath, crossOrigin ) {

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = _Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: _Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {

						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = BlendingMode[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = value;
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = BackSide;
							break;
						case 'doubleSided':
							json.side = DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = VertexColors;
							if ( value === 'face' ) json.vertexColors = FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;

					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	} );

	/**
	 * @author Don McCurdy / https://www.donmccurdy.com
	 */

	var LoaderUtils = {

		decodeText: function ( array ) {

			if ( typeof TextDecoder !== 'undefined' ) {

				return new TextDecoder().decode( array );

			}

			// Avoid the String.fromCharCode.apply(null, array) shortcut, which
			// throws a "maximum call stack size exceeded" error for large arrays.

			var s = '';

			for ( var i = 0, il = array.length; i < il; i ++ ) {

				// Implicitly assumes little-endian.
				s += String.fromCharCode( array[ i ] );

			}

			// Merges multi-byte utf-8 characters.
			return decodeURIComponent( escape( s ) );

		},

		extractUrlBase: function ( url ) {

			var index = url.lastIndexOf( '/' );

			if ( index === - 1 ) return './';

			return url.substr( 0, index + 1 );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function JSONLoader( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.withCredentials = false;

	}

	Object.assign( JSONLoader.prototype, {

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );

			var loader = new FileLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;
			return this;

		},

		parse: ( function () {

			function parseModel( json, geometry ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

					offset, zLength,

					colorIndex, normalIndex, uvIndex, materialIndex,

					type,
					isQuad,
					hasMaterial,
					hasFaceVertexUv,
					hasFaceNormal, hasFaceVertexNormal,
					hasFaceColor, hasFaceVertexColor,

					vertex, face, faceA, faceB, hex, normal,

					uvLayer, uv, u, v,

					faces = json.faces,
					vertices = json.vertices,
					normals = json.normals,
					colors = json.colors,

					scale = json.scale,

					nUvLayers = 0;


				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];

					isQuad = isBitSet( type, 0 );
					hasMaterial = isBitSet( type, 1 );
					hasFaceVertexUv = isBitSet( type, 3 );
					hasFaceNormal = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor = isBitSet( type, 6 );
					hasFaceVertexColor = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			}

			function parseSkin( json, geometry ) {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x = json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a = json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			}

			function parseMorphing( json, geometry ) {

				var scale = json.scale;

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations( json, geometry ) {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			}

			return function parse( json, texturePath ) {

				if ( json.data !== undefined ) {

					// Geometry 4.0 spec
					json = json.data;

				}

				if ( json.scale !== undefined ) {

					json.scale = 1.0 / json.scale;

				} else {

					json.scale = 1.0;

				}

				var geometry = new Geometry();

				parseModel( json, geometry );
				parseSkin( json, geometry );
				parseMorphing( json, geometry );
				parseAnimations( json, geometry );

				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();

				if ( json.materials === undefined || json.materials.length === 0 ) {

					return { geometry: geometry };

				} else {

					var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

					return { geometry: geometry, materials: materials };

				}

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.texturePath = '';

	}

	Object.assign( ObjectLoader.prototype, {

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.load( url, function ( text ) {

				var json = null;

				try {

					json = JSON.parse( text );

				} catch ( error ) {

					if ( onError !== undefined ) onError( error );

					console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

					return;

				}

				var metadata = json.metadata;

				if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

					console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
					return;

				}

				scope.parse( json, onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;
			return this;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		parse: function ( json, onLoad ) {

			var shapes = this.parseShape( json.shapes );
			var geometries = this.parseGeometries( json.geometries, shapes );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseShape: function ( json ) {

			var shapes = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var shape = new Shape().fromJSON( json[ i ] );

					shapes[ shape.uuid ] = shape;

				}

			}

			return shapes;

		},

		parseGeometries: function ( json, shapes ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new JSONLoader();
				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'DodecahedronBufferGeometry':
						case 'IcosahedronGeometry':
						case 'IcosahedronBufferGeometry':
						case 'OctahedronGeometry':
						case 'OctahedronBufferGeometry':
						case 'TetrahedronGeometry':
						case 'TetrahedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'PolyhedronGeometry':
						case 'PolyhedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.vertices,
								data.indices,
								data.radius,
								data.details
							);

							break;

						case 'ShapeGeometry':
						case 'ShapeBufferGeometry':

							var geometryShapes = [];

							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

								var shape = shapes[ data.shapes[ j ] ];

								geometryShapes.push( shape );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.curveSegments
							);

							break;


						case 'ExtrudeGeometry':
						case 'ExtrudeBufferGeometry':

							var geometryShapes = [];

							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

								var shape = shapes[ data.shapes[ j ] ];

								geometryShapes.push( shape );

							}

							var extrudePath = data.options.extrudePath;

							if ( extrudePath !== undefined ) {

								data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.options
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;
					if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.type === 'MultiMaterial' ) {

						// Deprecated

						var array = [];

						for ( var j = 0; j < data.materials.length; j ++ ) {

							array.push( loader.parse( data.materials[ j ] ) );

						}

						materials[ data.uuid ] = array;

					} else {

						materials[ data.uuid ] = loader.parse( data );

					}

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var data = json[ i ];

				var clip = AnimationClip.parse( data );

				if ( data.uuid !== undefined ) clip.uuid = data.uuid;

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, il = json.length; i < il; i ++ ) {

					var image = json[ i ];
					var url = image.url;

					if ( Array.isArray( url ) ) {

						// load array of images e.g CubeTexture

						images[ image.uuid ] = [];

						for ( var j = 0, jl = url.length; j < jl; j ++ ) {

							var currentUrl = url[ j ];

							var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.texturePath + currentUrl;

							images[ image.uuid ].push( loadImage( path ) );

						}

					} else {

						// load single image

						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

						images[ image.uuid ] = loadImage( path );

					}

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof value === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture;

					if ( Array.isArray( images[ data.image ] ) ) {

						texture = new CubeTexture( images[ data.image ] );

					} else {

						texture = new Texture( images[ data.image ] );

					}

					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;

					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

					if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
					if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
					if ( data.center !== undefined ) texture.center.fromArray( data.center );
					if ( data.rotation !== undefined ) texture.rotation = data.rotation;

					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

					}

					if ( data.format !== undefined ) texture.format = data.format;

					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

					if ( data.flipY !== undefined ) texture.flipY = data.flipY;

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function ( data, geometries, materials ) {

			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) return undefined;

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) object.focus = data.focus;
					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
					if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;

			if ( data.matrix !== undefined ) {

				object.matrix.fromArray( data.matrix );

				if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
				if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
			if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
				if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
				if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
				if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
			if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
			if ( data.userData !== undefined ) object.userData = data.userData;
			if ( data.layers !== undefined ) object.layers.mask = data.layers;

			if ( data.children !== undefined ) {

				var children = data.children;

				for ( var i = 0; i < children.length; i ++ ) {

					object.add( this.parseObject( children[ i ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		}

	} );

	var TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};

	var TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};

	var TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipMapNearestFilter: NearestMipMapNearestFilter,
		NearestMipMapLinearFilter: NearestMipMapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipMapNearestFilter: LinearMipMapNearestFilter,
		LinearMipMapLinearFilter: LinearMipMapLinearFilter
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	 **/

	function ShapePath() {

		this.type = 'ShapePath';

		this.color = new Color();

		this.subPaths = [];
		this.currentPath = null;

	}

	Object.assign( ShapePath.prototype, {

		moveTo: function ( x, y ) {

			this.currentPath = new Path();
			this.subPaths.push( this.currentPath );
			this.currentPath.moveTo( x, y );

		},

		lineTo: function ( x, y ) {

			this.currentPath.lineTo( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

		},

		splineThru: function ( pts ) {

			this.currentPath.splineThru( pts );

		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) return [];

			if ( noHoles === true )	return	toShapesNoHoles( subPaths );


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */


	function Font( data ) {

		this.type = 'Font';

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size ) {

			if ( size === undefined ) size = 100;

			var shapes = [];
			var paths = createPaths( text, size, this.data );

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	function createPaths( text, size, data ) {

		var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988
		var scale = size / data.resolution;
		var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

		var paths = [];

		var offsetX = 0, offsetY = 0;

		for ( var i = 0; i < chars.length; i ++ ) {

			var char = chars[ i ];

			if ( char === '\n' ) {

				offsetX = 0;
				offsetY -= line_height;

			} else {

				var ret = createPath( char, scale, offsetX, offsetY, data );
				offsetX += ret.offsetX;
				paths.push( ret.path );

			}

		}

		return paths;

	}

	function createPath( char, scale, offsetX, offsetY, data ) {

		var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

		if ( ! glyph ) return;

		var path = new ShapePath();

		var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

		if ( glyph.o ) {

			var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

			for ( var i = 0, l = outline.length; i < l; ) {

				var action = outline[ i ++ ];

				switch ( action ) {

					case 'm': // moveTo

						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;

						path.moveTo( x, y );

						break;

					case 'l': // lineTo

						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;

						path.lineTo( x, y );

						break;

					case 'q': // quadraticCurveTo

						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;

						path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

						break;

					case 'b': // bezierCurveTo

						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;
						cpx2 = outline[ i ++ ] * scale + offsetX;
						cpy2 = outline[ i ++ ] * scale + offsetY;

						path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

						break;

				}

			}

		}

		return { offsetX: glyph.ha * scale, path: path };

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FontLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) onLoad( font );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var context;

	var AudioContext = {

		getContext: function () {

			if ( context === undefined ) {

				context = new ( window.AudioContext || window.webkitAudioContext )();

			}

			return context;

		},

		setContext: function ( value ) {

			context = value;

		}

	};

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( AudioLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.load( url, function ( buffer ) {

				// Create a copy of the buffer. The `decodeAudioData` method
				// detaches the buffer when complete, preventing reuse.
				var bufferCopy = buffer.slice( 0 );

				var context = AudioContext.getContext();
				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	}

	Object.assign( StereoCamera.prototype, {

		update: ( function () {

			var instance, focus, fov, aspect, near, far, zoom, eyeSep;

			var eyeRight = new Matrix4();
			var eyeLeft = new Matrix4();

			return function update( camera ) {

				var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

				if ( needsUpdate ) {

					instance = this;
					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;
					zoom = camera.zoom;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					eyeSep = this.eyeSep / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CubeCamera( near, far, cubeResolution ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
		this.renderTarget.texture.name = "CubeCamera";

		this.update = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

		this.clear = function ( renderer, color, depth, stencil ) {

			var renderTarget = this.renderTarget;

			for ( var i = 0; i < 6; i ++ ) {

				renderTarget.activeCubeFace = i;
				renderer.setRenderTarget( renderTarget );

				renderer.clear( color, depth, stencil );

			}

			renderer.setRenderTarget( null );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = AudioContext.getContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

			return this;

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

			return this;

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

			return this;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();

			var orientation = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				var listener = this.context.listener;
				var up = this.up;

				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				if ( listener.positionX ) {

					listener.positionX.setValueAtTime( position.x, this.context.currentTime );
					listener.positionY.setValueAtTime( position.y, this.context.currentTime );
					listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
					listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
					listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
					listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
					listener.upX.setValueAtTime( up.x, this.context.currentTime );
					listener.upY.setValueAtTime( up.y, this.context.currentTime );
					listener.upZ.setValueAtTime( up.z, this.context.currentTime );

				} else {

					listener.setPosition( position.x, position.y, position.z );
					listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

				}

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.buffer = null;
		this.loop = false;
		this.startTime = 0;
		this.offset = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setMediaElementSource: function ( mediaElement ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'mediaNode';
			this.source = this.context.createMediaElementSource( mediaElement );
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) this.play();

			return this;

		},

		play: function () {

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			var source = this.context.createBufferSource();

			source.buffer = this.buffer;
			source.loop = this.loop;
			source.onended = this.onEnded.bind( this );
			source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
			this.startTime = this.context.currentTime;
			source.start( this.startTime, this.offset );

			this.isPlaying = true;

			this.source = source;

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			if ( this.isPlaying === true ) {

				this.source.stop();
				this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
				this.isPlaying = false;

			}

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.offset = 0;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) value = [];

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.loop = value;

			if ( this.isPlaying === true ) {

				this.source.loop = this.loop;

			}

			return this;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},

		setVolume: function ( value ) {

			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

			return this;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

			return this;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

			return this;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

			return this;

		},

		setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

			this.panner.coneInnerAngle = coneInnerAngle;
			this.panner.coneOuterAngle = coneOuterAngle;
			this.panner.coneOuterGain = coneOuterGain;

			return this;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();

			var orientation = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				var panner = this.panner;
				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, 1 ).applyQuaternion( quaternion );

				panner.setPosition( position.x, position.y, position.z );
				panner.setOrientation( orientation.x, orientation.y, orientation.z );

			};

		} )()


	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':
				mixFunction = this._slerp;
				break;

			case 'string':
			case 'bool':
				bufferType = Array;
				mixFunction = this._select;
				break;

			default:
				mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	Object.assign( PropertyMixer.prototype, {

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function ( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function ( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
					buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function () {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function () {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function ( buffer, dstOffset, srcOffset, t ) {

			Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	} );

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	// Characters [].:/ are reserved for track binding syntax.
	var RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

	function Composite( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	}

	Object.assign( Composite.prototype, {

		getValue: function ( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function ( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					  n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					  n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					  n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	} );


	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	Object.assign( PropertyBinding, {

		Composite: Composite,

		create: function ( root, path, parsedPath ) {

			if ( ! ( root && root.isAnimationObjectGroup ) ) {

				return new PropertyBinding( root, path, parsedPath );

			} else {

				return new PropertyBinding.Composite( root, path, parsedPath );

			}

		},

		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param  {string} name Node name to be sanitized.
		 * @return {string}
		 */
		sanitizeNodeName: ( function () {

			var reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );

			return function sanitizeNodeName( name ) {

				return name.replace( /\s/g, '_' ).replace( reservedRe, '' );

			};

		}() ),

		parseTrackName: function () {

			// Attempts to allow node names from any language. ES5's `\w` regexp matches
			// only latin characters, and the unicode \p{L} is not yet supported. So
			// instead, we exclude reserved characters and match everything else.
			var wordChar = '[^' + RESERVED_CHARS_RE + ']';
			var wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

			// Parent directories, delimited by '/' or ':'. Currently unused, but must
			// be matched to parse the rest of the track name.
			var directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', wordChar );

			// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
			var nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );

			// Object on target node, and accessor. May not contain reserved
			// characters. Accessor may contain any character except closing bracket.
			var objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', wordChar );

			// Property and accessor. May not contain reserved characters. Accessor may
			// contain any non-bracket characters.
			var propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', wordChar );

			var trackRe = new RegExp( ''
				+ '^'
				+ directoryRe
				+ nodeRe
				+ objectRe
				+ propertyRe
				+ '$'
			);

			var supportedObjectNames = [ 'material', 'materials', 'bones' ];

			return function parseTrackName( trackName ) {

				var matches = trackRe.exec( trackName );

				if ( ! matches ) {

					throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

				}

				var results = {
					// directoryName: matches[ 1 ], // (tschw) currently unused
					nodeName: matches[ 2 ],
					objectName: matches[ 3 ],
					objectIndex: matches[ 4 ],
					propertyName: matches[ 5 ], // required
					propertyIndex: matches[ 6 ]
				};

				var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

				if ( lastDot !== undefined && lastDot !== - 1 ) {

					var objectName = results.nodeName.substring( lastDot + 1 );

					// Object names must be checked against a whitelist. Otherwise, there
					// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
					// 'bar' could be the objectName, or part of a nodeName (which can
					// include '.' characters).
					if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {

						results.nodeName = results.nodeName.substring( 0, lastDot );
						results.objectName = objectName;

					}

				}

				if ( results.propertyName === null || results.propertyName.length === 0 ) {

					throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

				}

				return results;

			};

		}(),

		findNode: function ( root, nodeName ) {

			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

				return root;

			}

			// search into skeleton bones.
			if ( root.skeleton ) {

				var bone = root.skeleton.getBoneByName( nodeName );

				if ( bone !== undefined ) {

					return bone;

				}

			}

			// search into node subtree.
			if ( root.children ) {

				var searchNodeSubtree = function ( children ) {

					for ( var i = 0; i < children.length; i ++ ) {

						var childNode = children[ i ];

						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

							return childNode;

						}

						var result = searchNodeSubtree( childNode.children );

						if ( result ) return result;

					}

					return null;

				};

				var subTreeNode = searchNodeSubtree( root.children );

				if ( subTreeNode ) {

					return subTreeNode;

				}

			}

			return null;

		}

	} );

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function () {},
		_setValue_unavailable: function () {},

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		],

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function () {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

			// ensure there is a value node
			if ( ! targetObject ) {

				console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
					'.' + propertyName + ' but it wasn\'t found.', targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {

				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {

					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
						return;

					}

					if ( targetObject.geometry.isBufferGeometry ) {

						if ( ! targetObject.geometry.morphAttributes ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

							if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}


					} else {

						if ( ! targetObject.geometry.morphTargets ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( Array.isArray( nodeProperty ) ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function () {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( PropertyBinding.prototype, {

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

	} );

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup() {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() {

					return scope._objects.length;

				},
				get inUse() {

					return this.total - scope.nCachedObjects_;

				}
			},
			get bindingsPerObject() {

				return scope._bindings.length;

			}

		};

	}

	Object.assign( AnimationObjectGroup.prototype, {

		isAnimationObjectGroup: true,

		add: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length,
				knownObject = undefined;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject ) {

					console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
							'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function () {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function ( path, parsedPath ) {

			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];
				bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function ( path ) {

			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	} );

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = - 1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// true -> zero effective time scale
		this.enabled = true;				// false -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	}

	Object.assign( AnimationAction.prototype, {

		// State & Scheduling

		play: function () {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function () {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function () {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = - 1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function () {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function () {

			return this._mixer._isActiveAction( this );

		},

		startAt: function ( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function ( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function ( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function () {

			return this._effectiveWeight;

		},

		fadeIn: function ( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function ( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function ( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if ( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function ( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function () {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the time scale stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function ( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function () {

			return this._effectiveTimeScale;

		},

		setDuration: function ( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function ( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function ( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function ( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function () {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function () {

			return this._mixer;

		},

		getClip: function () {

			return this._clip;

		},

		getRoot: function () {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function ( time, deltaTime, timeDirection, accuIndex ) {

			// called by the mixer

			if ( ! this.enabled ) {

				// call ._updateWeight() to update ._effectiveWeight

				this._updateWeight( time );
				return;

			}

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function ( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function ( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function ( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount;

			if ( loop === LoopOnce ) {

				if ( loopCount === - 1 ) {

					// just started

					this._loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break handle_stop;

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? - 1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				var pingPong = ( loop === LoopPingPong );

				if ( loopCount === - 1 ) {

					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings( true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings( this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {

					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending <= 0 ) {

						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						time = deltaTime > 0 ? duration : 0;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : - 1
						} );

					} else {

						// keep running

						if ( pending === 1 ) {

							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {

					// invert time for the "pong round"

					this.time = time;
					return duration - time;

				}

			}

			this.time = time;
			return time;

		},

		_setEndings: function ( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= ZeroSlopeEnding;
				settings.endingEnd		= ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function ( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	} );

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: AnimationMixer,

		_bindAction: function ( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
						PropertyBinding.create( root, trackName, path ),
						track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function ( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
						actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function ( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function () {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< AnimationAction >	- used as prototypes
			// 		actionByRoot: AnimationAction			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() {

						return scope._actions.length;

					},
					get inUse() {

						return scope._nActiveActions;

					}
				},
				bindings: {
					get total() {

						return scope._bindings.length;

					},
					get inUse() {

						return scope._nActiveBindings;

					}
				},
				controlInterpolants: {
					get total() {

						return scope._controlInterpolants.length;

					},
					get inUse() {

						return scope._nActiveControlInterpolants;

					}
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function ( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function ( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function ( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( action._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function ( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function ( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function ( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function ( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function ( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function () {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
					new Float32Array( 2 ), new Float32Array( 2 ),
					1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function ( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 ),

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					clipObject = prototypeAction._clip;

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function () {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function ( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				action._update( time, deltaTime, timeDirection, accuIndex );

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function () {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function ( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function ( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function ( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	Uniform.prototype.clone = function () {

		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

		constructor: InstancedBufferGeometry,

		isInstancedBufferGeometry: true,

		copy: function ( source ) {

			BufferGeometry.prototype.copy.call( this, source );

			this.maxInstancedCount = source.maxInstancedCount;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

		constructor: InstancedInterleavedBuffer,

		isInstancedInterleavedBuffer: true,

		copy: function ( source ) {

			InterleavedBuffer.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

		BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

		constructor: InstancedBufferAttribute,

		isInstancedBufferAttribute: true,

		copy: function ( source ) {

			BufferAttribute.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {

					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;

				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) return;

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	Object.assign( Raycaster.prototype, {

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( ( camera && camera.isPerspectiveCamera ) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

			} else if ( ( camera && camera.isOrthographicCamera ) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive, optionalTarget ) {

			var intersects = optionalTarget || [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive, optionalTarget ) {

			var intersects = optionalTarget || [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Object.assign( Clock.prototype, {

		start: function () {

			this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();
				return 0;

			}

			if ( this.running ) {

				var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The poles (phi) are at the positive and negative y axis.
	 * The equator starts at positive z.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
		this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

		return this;

	}

	Object.assign( Spherical.prototype, {

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function () {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function ( vec3 ) {

			this.radius = vec3.length();

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
				this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

			}

			return this;

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 *
	 */

	function Cylindrical( radius, theta, y ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
		this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
		this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

		return this;

	}

	Object.assign( Cylindrical.prototype, {

		set: function ( radius, theta, y ) {

			this.radius = radius;
			this.theta = theta;
			this.y = y;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;

			return this;

		},

		setFromVector3: function ( vec3 ) {

			this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
			this.theta = Math.atan2( vec3.x, vec3.z );
			this.y = vec3.y;

			return this;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Object.assign( Box2.prototype, {

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector2();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getCenter() target is now required' );
				target = new Vector2();

			}

			return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getSize() target is now required' );
				target = new Vector2();

			}

			return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y;

		},

		getParameter: function ( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getParameter() target is now required' );
				target = new Vector2();

			}

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 4 splitting planes to rule out intersections

			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

		},

		clampPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .clampPoint() target is now required' );
				target = new Vector2();

			}

			return target.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector2();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Object.assign( Line3.prototype, {

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .getCenter() target is now required' );
				target = new Vector3();

			}

			return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .delta() target is now required' );
				target = new Vector3();

			}

			return target.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .at() target is now required' );
				target = new Vector3();

			}

			return this.delta( target ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new Vector3();
			var startEnd = new Vector3();

			return function closestPointToPointParameter( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = _Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, target ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			return this.delta( target ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( /* renderCallback */ ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( objGeometry && objGeometry.isGeometry ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( objGeometry && objGeometry.isBufferGeometry ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function SpotLightHelper( light, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0, 	0, 0, 1,
			0, 0, 0, 	1, 0, 1,
			0, 0, 0,	- 1, 0, 1,
			0, 0, 0, 	0, 1, 1,
			0, 0, 0, 	0, - 1, 1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		var vector = new Vector3();
		var vector2 = new Vector3();

		return function update() {

			this.light.updateMatrixWorld();

			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			if ( this.color !== undefined ) {

				this.cone.material.color.set( this.color );

			} else {

				this.cone.material.color.copy( this.light.color );

			}

		};

	}();

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function getBoneList( object ) {

		var boneList = [];

		if ( object && object.isBone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

		}

		return boneList;

	}

	function SkeletonHelper( object ) {

		var bones = getBoneList( object );

		var geometry = new BufferGeometry();

		var vertices = [];
		var colors = [];

		var color1 = new Color( 0, 0, 1 );
		var color2 = new Color( 0, 1, 0 );

		for ( var i = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				vertices.push( 0, 0, 0 );
				vertices.push( 0, 0, 0 );
				colors.push( color1.r, color1.g, color1.b );
				colors.push( color2.r, color2.g, color2.b );

			}

		}

		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;
		this.bones = bones;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	}

	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.updateMatrixWorld = function () {

		var vector = new Vector3();

		var boneMatrix = new Matrix4();
		var matrixWorldInv = new Matrix4();

		return function updateMatrixWorld( force ) {

			var bones = this.bones;

			var geometry = this.geometry;
			var position = geometry.getAttribute( 'position' );

			matrixWorldInv.getInverse( this.root.matrixWorld );

			for ( var i = 0, j = 0; i < bones.length; i ++ ) {

				var bone = bones[ i ];

				if ( bone.parent && bone.parent.isBone ) {

					boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
					vector.setFromMatrixPosition( boneMatrix );
					position.setXYZ( j, vector.x, vector.y, vector.z );

					boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
					vector.setFromMatrixPosition( boneMatrix );
					position.setXYZ( j + 1, vector.x, vector.y, vector.z );

					j += 2;

				}

			}

			geometry.getAttribute( 'position' ).needsUpdate = true;

			Object3D.prototype.updateMatrixWorld.call( this, force );

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize, color ) {

		this.light = light;
		this.light.updateMatrixWorld();

		this.color = color;

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();


		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color );

		}

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author abelnation / http://github.com/abelnation
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function RectAreaLightHelper( light, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var material = new LineBasicMaterial( { fog: false } );

		var geometry = new BufferGeometry();

		geometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );

		this.line = new Line( geometry, material );
		this.add( this.line );


		this.update();

	}

	RectAreaLightHelper.prototype = Object.create( Object3D.prototype );
	RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

	RectAreaLightHelper.prototype.dispose = function () {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	RectAreaLightHelper.prototype.update = function () {

		// calculate new dimensions of the helper

		var hx = this.light.width * 0.5;
		var hy = this.light.height * 0.5;

		var position = this.line.geometry.attributes.position;
		var array = position.array;

		// update vertices

		array[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;
		array[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;
		array[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;
		array[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;
		array[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;

		position.needsUpdate = true;

		if ( this.color !== undefined ) {

			this.line.material.color.set( this.color );

		} else {

			this.line.material.color.copy( this.light.color );

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function HemisphereLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new OctahedronBufferGeometry( size );
		geometry.rotateY( Math.PI * 0.5 );

		this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		if ( this.color === undefined ) this.material.vertexColors = VertexColors;

		var position = geometry.getAttribute( 'position' );
		var colors = new Float32Array( position.count * 3 );

		geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

		this.add( new Mesh( geometry, this.material ) );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var vector = new Vector3();

		var color1 = new Color();
		var color2 = new Color();

		return function update() {

			var mesh = this.children[ 0 ];

			if ( this.color !== undefined ) {

				this.material.color.set( this.color );

			} else {

				var colors = mesh.geometry.getAttribute( 'color' );

				color1.copy( this.light.color );
				color2.copy( this.light.groundColor );

				for ( var i = 0, l = colors.count; i < l; i ++ ) {

					var color = ( i < ( l / 2 ) ) ? color1 : color2;

					colors.setXYZ( i, color.r, color.g, color.b );

				}

				colors.needsUpdate = true;

			}

			mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		size = size || 10;
		divisions = divisions || 10;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = size / divisions;
		var halfSize = size / 2;

		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

			vertices.push( - halfSize, 0, k, halfSize, 0, k );
			vertices.push( k, 0, - halfSize, k, 0, halfSize );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.create( LineSegments.prototype );
	GridHelper.prototype.constructor = GridHelper;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author Hectate / http://www.github.com/Hectate
	 */

	function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

		radius = radius || 10;
		radials = radials || 16;
		circles = circles || 8;
		divisions = divisions || 64;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var vertices = [];
		var colors = [];

		var x, z;
		var v, i, j, r, color;

		// create the radials

		for ( i = 0; i <= radials; i ++ ) {

			v = ( i / radials ) * ( Math.PI * 2 );

			x = Math.sin( v ) * radius;
			z = Math.cos( v ) * radius;

			vertices.push( 0, 0, 0 );
			vertices.push( x, 0, z );

			color = ( i & 1 ) ? color1 : color2;

			colors.push( color.r, color.g, color.b );
			colors.push( color.r, color.g, color.b );

		}

		// create the circles

		for ( i = 0; i <= circles; i ++ ) {

			color = ( i & 1 ) ? color1 : color2;

			r = radius - ( radius / circles * i );

			for ( j = 0; j < divisions; j ++ ) {

				// first vertex

				v = ( j / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

				// second vertex

				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

			}

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	PolarGridHelper.prototype = Object.create( LineSegments.prototype );
	PolarGridHelper.prototype.constructor = PolarGridHelper;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function DirectionalLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		if ( size === undefined ) size = 1;

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( [
			- size, size, 0,
			size, size, 0,
			size, - size, 0,
			- size, - size, 0,
			- size, size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.lightPlane = new Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.targetLine = new Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var v3 = new Vector3();

		return function update() {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			this.lightPlane.lookAt( v3 );

			if ( this.color !== undefined ) {

				this.lightPlane.material.color.set( this.color );
				this.targetLine.material.color.set( this.color );

			} else {

				this.lightPlane.material.color.copy( this.light.color );
				this.targetLine.material.color.copy( this.light.color );

			}

			this.targetLine.lookAt( v3 );
			this.targetLine.scale.z = v3.length();

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	function CameraHelper( camera ) {

		var geometry = new BufferGeometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var vertices = [];
		var colors = [];

		var pointMap = {};

		// colors

		var colorFrustum = new Color( 0xffaa00 );
		var colorCone = new Color( 0xff0000 );
		var colorUp = new Color( 0x00aaff );
		var colorTarget = new Color( 0xffffff );
		var colorCross = new Color( 0x333333 );

		// near

		addLine( 'n1', 'n2', colorFrustum );
		addLine( 'n2', 'n4', colorFrustum );
		addLine( 'n4', 'n3', colorFrustum );
		addLine( 'n3', 'n1', colorFrustum );

		// far

		addLine( 'f1', 'f2', colorFrustum );
		addLine( 'f2', 'f4', colorFrustum );
		addLine( 'f4', 'f3', colorFrustum );
		addLine( 'f3', 'f1', colorFrustum );

		// sides

		addLine( 'n1', 'f1', colorFrustum );
		addLine( 'n2', 'f2', colorFrustum );
		addLine( 'n3', 'f3', colorFrustum );
		addLine( 'n4', 'f4', colorFrustum );

		// cone

		addLine( 'p', 'n1', colorCone );
		addLine( 'p', 'n2', colorCone );
		addLine( 'p', 'n3', colorCone );
		addLine( 'p', 'n4', colorCone );

		// up

		addLine( 'u1', 'u2', colorUp );
		addLine( 'u2', 'u3', colorUp );
		addLine( 'u3', 'u1', colorUp );

		// target

		addLine( 'c', 't', colorTarget );
		addLine( 'p', 'c', colorCross );

		// cross

		addLine( 'cn1', 'cn2', colorCross );
		addLine( 'cn3', 'cn4', colorCross );

		addLine( 'cf1', 'cf2', colorCross );
		addLine( 'cf3', 'cf4', colorCross );

		function addLine( a, b, color ) {

			addPoint( a, color );
			addPoint( b, color );

		}

		function addPoint( id, color ) {

			vertices.push( 0, 0, 0 );
			colors.push( color.r, color.g, color.b );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

		}

		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new Vector3();
		var camera = new Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				var position = geometry.getAttribute( 'position' );

				for ( var i = 0, l = points.length; i < l; i ++ ) {

					position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

				}

			}

		}

		return function update() {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( 'c', 0, 0, - 1 );
			setPoint( 't', 0, 0, 1 );

			// near

			setPoint( 'n1', - w, - h, - 1 );
			setPoint( 'n2', w, - h, - 1 );
			setPoint( 'n3', - w, h, - 1 );
			setPoint( 'n4', w, h, - 1 );

			// far

			setPoint( 'f1', - w, - h, 1 );
			setPoint( 'f2', w, - h, 1 );
			setPoint( 'f3', - w, h, 1 );
			setPoint( 'f4', w, h, 1 );

			// up

			setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
			setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
			setPoint( 'u3', 0, h * 2, - 1 );

			// cross

			setPoint( 'cf1', - w, 0, 1 );
			setPoint( 'cf2', w, 0, 1 );
			setPoint( 'cf3', 0, - h, 1 );
			setPoint( 'cf4', 0, h, 1 );

			setPoint( 'cn1', - w, 0, - 1 );
			setPoint( 'cn2', w, 0, - 1 );
			setPoint( 'cn3', 0, - h, - 1 );
			setPoint( 'cn4', 0, h, - 1 );

			geometry.getAttribute( 'position' ).needsUpdate = true;

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 */

	function BoxHelper( object, color ) {

		this.object = object;

		if ( color === undefined ) color = 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.matrixAutoUpdate = false;

		this.update();

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = ( function () {

		var box = new Box3();

		return function update( object ) {

			if ( object !== undefined ) {

				console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

			}

			if ( this.object !== undefined ) {

				box.setFromObject( this.object );

			}

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
			array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
			array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
			array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	BoxHelper.prototype.setFromObject = function ( object ) {

		this.object = object;
		this.update();

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3Helper( box, hex ) {

		this.type = 'Box3Helper';

		this.box = box;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

		var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

		var geometry = new BufferGeometry();

		geometry.setIndex( new BufferAttribute( indices, 1 ) );

		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.geometry.computeBoundingSphere();

	}

	Box3Helper.prototype = Object.create( LineSegments.prototype );
	Box3Helper.prototype.constructor = Box3Helper;

	Box3Helper.prototype.updateMatrixWorld = function ( force ) {

		var box = this.box;

		if ( box.isEmpty() ) return;

		box.getCenter( this.position );

		box.getSize( this.scale );

		this.scale.multiplyScalar( 0.5 );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function PlaneHelper( plane, size, hex ) {

		this.type = 'PlaneHelper';

		this.plane = plane;

		this.size = ( size === undefined ) ? 1 : size;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		//

		var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

		var geometry2 = new BufferGeometry();
		geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

	}

	PlaneHelper.prototype = Object.create( Line.prototype );
	PlaneHelper.prototype.constructor = PlaneHelper;

	PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

		var scale = - this.plane.constant;

		if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

		this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

		this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

		this.lookAt( this.plane.normal );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var lineGeometry, coneGeometry;

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( color === undefined ) color = 0xffff00;
		if ( length === undefined ) length = 1;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		if ( lineGeometry === undefined ) {

			lineGeometry = new BufferGeometry();
			lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

			coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
			coneGeometry.translate( 0, - 0.5, 0 );

		}

		this.position.copy( origin );

		this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = ( function () {

		var axis = new Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.copy( color );
		this.cone.material.color.copy( color );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxesHelper( size ) {

		size = size || 1;

		var vertices = [
			0, 0, 0,	size, 0, 0,
			0, 0, 0,	0, size, 0,
			0, 0, 0,	0, 0, size
		];

		var colors = [
			1, 0, 0,	1, 0.6, 0,
			0, 1, 0,	0.6, 1, 0,
			0, 0, 1,	0, 0.6, 1
		];

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxesHelper.prototype = Object.create( LineSegments.prototype );
	AxesHelper.prototype.constructor = AxesHelper;

	//

	Curve.create = function ( construct, getPoint ) {

		console.log( 'THREE.Curve.create() has been deprecated' );

		construct.prototype = Object.create( Curve.prototype );
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;

		return construct;

	};

	//

	Object.assign( CurvePath.prototype, {

		createPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from path points (for Line or Points objects)

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		createSpacedPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from equidistant sampling along the path

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	//

	Object.assign( Path.prototype, {

		fromPoints: function ( points ) {

			console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
			this.setFromPoints( points );

		}

	} );

	//

	function Spline( points ) {

		console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	Spline.prototype = Object.create( CatmullRomCurve3.prototype );

	Object.assign( Spline.prototype, {

		initFromArray: function ( /* a */ ) {

			console.error( 'THREE.Spline: .initFromArray() has been removed.' );

		},
		getControlPointsArray: function ( /* optionalTarget */ ) {

			console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

		},
		reparametrizeByArcLength: function ( /* samplingCoef */ ) {

			console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

		}

	} );

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	SkeletonHelper.prototype.update = function () {

		console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

	};

	//

	Object.assign( Loader.prototype, {

		extractUrlBase: function ( url ) {

			console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
			return LoaderUtils.extractUrlBase( url );

		}

	} );

	//

	Object.assign( Box2.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Object.assign( Box3.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Line3.prototype.center = function ( optionalTarget ) {

		console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	};

	Object.assign( _Math, {

		random16: function () {

			console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		nearestPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
			return _Math.floorPowerOfTwo( value );

		},

		nextPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
			return _Math.ceilPowerOfTwo( value );

		}

	} );

	Object.assign( Matrix3.prototype, {

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

		}

	} );

	Object.assign( Matrix4.prototype, {

		extractPosition: function ( m ) {

			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );

		},
		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		getPosition: function () {

			var v1;

			return function getPosition() {

				if ( v1 === undefined ) v1 = new Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
				return v1.setFromMatrixColumn( this, 3 );

			};

		}(),
		setRotationFromQuaternion: function ( q ) {

			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );

		},
		multiplyToArray: function () {

			console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector4: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

		},
		rotateAxis: function ( v ) {

			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );

		},
		crossVector: function ( vector ) {

			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		translate: function () {

			console.error( 'THREE.Matrix4: .translate() has been removed.' );

		},
		rotateX: function () {

			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

		},
		rotateY: function () {

			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

		},
		rotateZ: function () {

			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

		},
		rotateByAxis: function () {

			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

		},
		makeFrustum: function ( left, right, bottom, top, near, far ) {

			console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
			return this.makePerspective( left, right, top, bottom, near, far );

		}

	} );

	Plane.prototype.isIntersectionLine = function ( line ) {

		console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
		return this.intersectsLine( line );

	};

	Quaternion.prototype.multiplyVector3 = function ( vector ) {

		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );

	};

	Object.assign( Ray.prototype, {

		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionPlane: function ( plane ) {

			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		}

	} );

	Object.assign( Triangle.prototype, {

		area: function () {

			console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
			return this.getArea();

		},
		barycoordFromPoint: function ( point, target ) {

			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return this.getBarycoord( point, target );

		},
		midpoint: function ( target ) {

			console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
			return this.getMidpoint( target );

		},
		normal: function ( target ) {

			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return this.getNormal( target );

		},
		plane: function ( target ) {

			console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
			return this.getPlane( target );

		}

	} );

	Object.assign( Triangle, {

		barycoordFromPoint: function ( point, a, b, c, target ) {

			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return Triangle.getBarycoord( point, a, b, c, target );

		},
		normal: function ( a, b, c, target ) {

			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return Triangle.getNormal( a, b, c, target );

		}

	} );

	Object.assign( Shape.prototype, {

		extractAllPoints: function ( divisions ) {

			console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
			return this.extractPoints( divisions );

		},
		extrude: function ( options ) {

			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );

		},
		makeGeometry: function ( options ) {

			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );

		}

	} );

	Object.assign( Vector2.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector3.prototype, {

		setEulerFromRotationMatrix: function () {

			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

		},
		setEulerFromQuaternion: function () {

			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

		},
		getPositionFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );

		},
		getScaleFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );

		},
		getColumnFromMatrix: function ( index, matrix ) {

			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );

		},
		applyProjection: function ( m ) {

			console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
			return this.applyMatrix4( m );

		},
		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector4.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	//

	Object.assign( Geometry.prototype, {

		computeTangents: function () {

			console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

		},
		computeLineDistances: function () {

			console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

		}

	} );

	Object.assign( Object3D.prototype, {

		getChildByName: function ( name ) {

			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );

		},
		renderDepth: function () {

			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

		},
		translate: function ( distance, axis ) {

			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );

		},
		getWorldRotation: function () {

			console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

		}

	} );

	Object.defineProperties( Object3D.prototype, {

		eulerOrder: {
			get: function () {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;

			},
			set: function ( value ) {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;

			}
		},
		useQuaternion: {
			get: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			},
			set: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			}
		}

	} );

	Object.defineProperties( LOD.prototype, {

		objects: {
			get: function () {

				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;

			}
		}

	} );

	Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

		get: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		}

	} );

	Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

		get: function () {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			return this.arcLengthDivisions;

		},
		set: function ( value ) {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			this.arcLengthDivisions = value;

		}

	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function () {

				console.warn( 'THREE.Light: .onlyShadow has been removed.' );

			}
		},
		shadowCameraFov: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;

			}
		},
		shadowCameraLeft: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;

			}
		},
		shadowCameraRight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;

			}
		},
		shadowCameraTop: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;

			}
		},
		shadowCameraBottom: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;

			}
		},
		shadowCameraNear: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;

			}
		},
		shadowCameraFar: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;

			}
		},
		shadowCameraVisible: {
			set: function () {

				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

			}
		},
		shadowBias: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;

			}
		},
		shadowDarkness: {
			set: function () {

				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

			}
		},
		shadowMapWidth: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;

			}
		},
		shadowMapHeight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;

			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {

		length: {
			get: function () {

				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
				return this.array.length;

			}
		},
		copyIndicesArray: function ( /* indices */ ) {

			console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

		}

	} );

	Object.assign( BufferGeometry.prototype, {

		addIndex: function ( index ) {

			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );

		},
		addDrawCall: function ( start, count, indexOffset ) {

			if ( indexOffset !== undefined ) {

				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );

		},
		clearDrawCalls: function () {

			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();

		},
		computeTangents: function () {

			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

		},
		computeOffsets: function () {

			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

		}

	} );

	Object.defineProperties( BufferGeometry.prototype, {

		drawcalls: {
			get: function () {

				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;

			}
		},
		offsets: {
			get: function () {

				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;

			}
		}

	} );

	//

	Object.assign( ExtrudeBufferGeometry.prototype, {

		getArrays: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

		},

		addShapeList: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

		},

		addShape: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

		}

	} );

	//

	Object.defineProperties( Uniform.prototype, {

		dynamic: {
			set: function () {

				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

			}
		},
		onUpdate: {
			value: function () {

				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;

			}
		}

	} );

	//

	Object.defineProperties( Material.prototype, {

		wrapAround: {
			get: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			}
		},
		wrapRGB: {
			get: function () {

				console.warn( 'THREE.Material: .wrapRGB has been removed.' );
				return new Color();

			}
		},

		shading: {
			get: function () {

				console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

			},
			set: function ( value ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( value === FlatShading );

			}
		}

	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {

		metal: {
			get: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;

			},
			set: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

			}
		}

	} );

	Object.defineProperties( ShaderMaterial.prototype, {

		derivatives: {
			get: function () {

				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;

			},
			set: function ( value ) {

				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;

			}
		}

	} );

	//

	Object.assign( WebGLRenderer.prototype, {

		animate: function ( callback ) {

			console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
			this.setAnimationLoop( callback );

		},

		getCurrentRenderTarget: function () {

			console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
			return this.getRenderTarget();

		},

		getMaxAnisotropy: function () {

			console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
			return this.capabilities.getMaxAnisotropy();

		},

		getPrecision: function () {

			console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
			return this.capabilities.precision;

		},

		resetGLState: function () {

			console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
			return this.state.reset();

		},

		supportsFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );

		},
		supportsHalfFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );

		},
		supportsStandardDerivatives: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );

		},
		supportsCompressedTextureS3TC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

		},
		supportsCompressedTexturePVRTC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

		},
		supportsBlendMinMax: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );

		},
		supportsVertexTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
			return this.capabilities.vertexTextures;

		},
		supportsInstancedArrays: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );

		},
		enableScissorTest: function ( boolean ) {

			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );

		},
		initMaterial: function () {

			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

		},
		addPrePlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

		},
		addPostPlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

		},
		updateShadowMap: function () {

			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

		},
		setFaceCulling: function () {

			console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

		}

	} );

	Object.defineProperties( WebGLRenderer.prototype, {

		shadowMapEnabled: {
			get: function () {

				return this.shadowMap.enabled;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;

			}
		},
		shadowMapType: {
			get: function () {

				return this.shadowMap.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;

			}
		},
		shadowMapCullFace: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

			}
		}
	} );

	Object.defineProperties( WebGLShadowMap.prototype, {

		cullFace: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function ( /* cullFace */ ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

			}
		},
		renderReverseSided: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

			}
		},
		renderSingleSided: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

			}
		}

	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {

		wrapS: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;

			}
		},
		wrapT: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;

			}
		},
		magFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;

			}
		},
		minFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;

			}
		},
		anisotropy: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;

			}
		},
		offset: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;

			}
		},
		repeat: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;

			}
		},
		format: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;

			}
		},
		type: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;

			}
		},
		generateMipmaps: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;

			}
		}

	} );

	//

	Object.defineProperties( WebVRManager.prototype, {

		standing: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebVRManager: .standing has been removed.' );

			}
		}

	} );

	//

	Audio.prototype.load = function ( file ) {

		console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
		var scope = this;
		var audioLoader = new AudioLoader();
		audioLoader.load( file, function ( buffer ) {

			scope.setBuffer( buffer );

		} );
		return this;

	};

	AudioAnalyser.prototype.getData = function () {

		console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
		return this.getFrequencyData();

	};

	//

	CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

		console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
		return this.update( renderer, scene );

	};

	ImageUtils.crossOrigin = undefined;

	ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

		var loader = new TextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( url, onLoad, undefined, onError );

		if ( mapping ) texture.mapping = mapping;

		return texture;

	};

	ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

		var loader = new CubeTextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( urls, onLoad, undefined, onError );

		if ( mapping ) texture.mapping = mapping;

		return texture;

	};

	ImageUtils.loadCompressedTexture = function () {

		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

	};

	ImageUtils.loadCompressedTextureCube = function () {

		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

	};

	/**
	 * @author Eberhard Graether / http://egraether.com/
	 * @author Mark Lundin 	/ http://mark-lundin.com
	 * @author Simone Manini / http://daron1337.github.io
	 * @author Luca Antiga 	/ http://lantiga.github.io
	 */

	const TrackballControls = function ( object, domElement ) {

		var _this = this;
		var STATE = { NONE: - 1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };

		this.object = object;
		this.domElement = ( domElement !== undefined ) ? domElement : document;

		// API

		this.enabled = true;

		this.screen = { left: 0, top: 0, width: 0, height: 0 };

		this.rotateSpeed = 1.0;
		this.zoomSpeed = 1.2;
		this.panSpeed = 0.3;

		this.noRotate = false;
		this.noZoom = false;
		this.noPan = false;

		this.staticMoving = false;
		this.dynamicDampingFactor = 0.2;

		this.minDistance = 0;
		this.maxDistance = Infinity;

		this.keys = [ 65 /*A*/, 83 /*S*/, 68 /*D*/ ];

		// internals

		this.target = new Vector3();

		var EPS = 0.000001;

		var lastPosition = new Vector3();

		var _state = STATE.NONE,
			_prevState = STATE.NONE,

			_eye = new Vector3(),

			_movePrev = new Vector2(),
			_moveCurr = new Vector2(),

			_lastAxis = new Vector3(),
			_lastAngle = 0,

			_zoomStart = new Vector2(),
			_zoomEnd = new Vector2(),

			_touchZoomDistanceStart = 0,
			_touchZoomDistanceEnd = 0,

			_panStart = new Vector2(),
			_panEnd = new Vector2();

		// for reset

		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.up0 = this.object.up.clone();

		// events

		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };


		// methods

		this.handleResize = function () {

			if ( this.domElement === document ) {

				this.screen.left = 0;
				this.screen.top = 0;
				this.screen.width = window.innerWidth;
				this.screen.height = window.innerHeight;

			} else {

				var box = this.domElement.getBoundingClientRect();
				// adjustments come from similar code in the jquery offset() function
				var d = this.domElement.ownerDocument.documentElement;
				this.screen.left = box.left + window.pageXOffset - d.clientLeft;
				this.screen.top = box.top + window.pageYOffset - d.clientTop;
				this.screen.width = box.width;
				this.screen.height = box.height;

			}

		};

		this.handleEvent = function ( event ) {

			if ( typeof this[ event.type ] == 'function' ) {

				this[ event.type ]( event );

			}

		};

		var getMouseOnScreen = ( function () {

			var vector = new Vector2();

			return function getMouseOnScreen( pageX, pageY ) {

				vector.set(
					( pageX - _this.screen.left ) / _this.screen.width,
					( pageY - _this.screen.top ) / _this.screen.height
				);

				return vector;

			};

		}() );

		var getMouseOnCircle = ( function () {

			var vector = new Vector2();

			return function getMouseOnCircle( pageX, pageY ) {

				vector.set(
					( ( pageX - _this.screen.width * 0.5 - _this.screen.left ) / ( _this.screen.width * 0.5 ) ),
					( ( _this.screen.height + 2 * ( _this.screen.top - pageY ) ) / _this.screen.width ) // screen.width intentional
				);

				return vector;

			};

		}() );

		this.rotateCamera = ( function () {

			var axis = new Vector3(),
				quaternion = new Quaternion(),
				eyeDirection = new Vector3(),
				objectUpDirection = new Vector3(),
				objectSidewaysDirection = new Vector3(),
				moveDirection = new Vector3(),
				angle;

			return function rotateCamera() {

				moveDirection.set( _moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0 );
				angle = moveDirection.length();

				if ( angle ) {

					_eye.copy( _this.object.position ).sub( _this.target );

					eyeDirection.copy( _eye ).normalize();
					objectUpDirection.copy( _this.object.up ).normalize();
					objectSidewaysDirection.crossVectors( objectUpDirection, eyeDirection ).normalize();

					objectUpDirection.setLength( _moveCurr.y - _movePrev.y );
					objectSidewaysDirection.setLength( _moveCurr.x - _movePrev.x );

					moveDirection.copy( objectUpDirection.add( objectSidewaysDirection ) );

					axis.crossVectors( moveDirection, _eye ).normalize();

					angle *= _this.rotateSpeed;
					quaternion.setFromAxisAngle( axis, angle );

					_eye.applyQuaternion( quaternion );
					_this.object.up.applyQuaternion( quaternion );

					_lastAxis.copy( axis );
					_lastAngle = angle;

				} else if ( ! _this.staticMoving && _lastAngle ) {

					_lastAngle *= Math.sqrt( 1.0 - _this.dynamicDampingFactor );
					_eye.copy( _this.object.position ).sub( _this.target );
					quaternion.setFromAxisAngle( _lastAxis, _lastAngle );
					_eye.applyQuaternion( quaternion );
					_this.object.up.applyQuaternion( quaternion );

				}

				_movePrev.copy( _moveCurr );

			};

		}() );


		this.zoomCamera = function () {

			var factor;

			if ( _state === STATE.TOUCH_ZOOM_PAN ) {

				factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;
				_touchZoomDistanceStart = _touchZoomDistanceEnd;
				_eye.multiplyScalar( factor );

			} else {

				factor = 1.0 + ( _zoomEnd.y - _zoomStart.y ) * _this.zoomSpeed;

				if ( factor !== 1.0 && factor > 0.0 ) {

					_eye.multiplyScalar( factor );

				}

				if ( _this.staticMoving ) {

					_zoomStart.copy( _zoomEnd );

				} else {

					_zoomStart.y += ( _zoomEnd.y - _zoomStart.y ) * this.dynamicDampingFactor;

				}

			}

		};

		this.panCamera = ( function () {

			var mouseChange = new Vector2(),
				objectUp = new Vector3(),
				pan = new Vector3();

			return function panCamera() {

				mouseChange.copy( _panEnd ).sub( _panStart );

				if ( mouseChange.lengthSq() ) {

					mouseChange.multiplyScalar( _eye.length() * _this.panSpeed );

					pan.copy( _eye ).cross( _this.object.up ).setLength( mouseChange.x );
					pan.add( objectUp.copy( _this.object.up ).setLength( mouseChange.y ) );

					_this.object.position.add( pan );
					_this.target.add( pan );

					if ( _this.staticMoving ) {

						_panStart.copy( _panEnd );

					} else {

						_panStart.add( mouseChange.subVectors( _panEnd, _panStart ).multiplyScalar( _this.dynamicDampingFactor ) );

					}

				}

			};

		}() );

		this.checkDistances = function () {

			if ( ! _this.noZoom || ! _this.noPan ) {

				if ( _eye.lengthSq() > _this.maxDistance * _this.maxDistance ) {

					_this.object.position.addVectors( _this.target, _eye.setLength( _this.maxDistance ) );
					_zoomStart.copy( _zoomEnd );

				}

				if ( _eye.lengthSq() < _this.minDistance * _this.minDistance ) {

					_this.object.position.addVectors( _this.target, _eye.setLength( _this.minDistance ) );
					_zoomStart.copy( _zoomEnd );

				}

			}

		};

		this.update = function () {

			_eye.subVectors( _this.object.position, _this.target );

			if ( ! _this.noRotate ) {

				_this.rotateCamera();

			}

			if ( ! _this.noZoom ) {

				_this.zoomCamera();

			}

			if ( ! _this.noPan ) {

				_this.panCamera();

			}

			_this.object.position.addVectors( _this.target, _eye );

			_this.checkDistances();

			_this.object.lookAt( _this.target );

			if ( lastPosition.distanceToSquared( _this.object.position ) > EPS ) {

				_this.dispatchEvent( changeEvent );

				lastPosition.copy( _this.object.position );

			}

		};

		this.reset = function () {

			_state = STATE.NONE;
			_prevState = STATE.NONE;

			_this.target.copy( _this.target0 );
			_this.object.position.copy( _this.position0 );
			_this.object.up.copy( _this.up0 );

			_eye.subVectors( _this.object.position, _this.target );

			_this.object.lookAt( _this.target );

			_this.dispatchEvent( changeEvent );

			lastPosition.copy( _this.object.position );

		};

		// listeners

		function keydown( event ) {

			if ( _this.enabled === false ) return;

			window.removeEventListener( 'keydown', keydown );

			_prevState = _state;

			if ( _state !== STATE.NONE ) {

				return;

			} else if ( event.keyCode === _this.keys[ STATE.ROTATE ] && ! _this.noRotate ) {

				_state = STATE.ROTATE;

			} else if ( event.keyCode === _this.keys[ STATE.ZOOM ] && ! _this.noZoom ) {

				_state = STATE.ZOOM;

			} else if ( event.keyCode === _this.keys[ STATE.PAN ] && ! _this.noPan ) {

				_state = STATE.PAN;

			}

		}

		function keyup( event ) {

			if ( _this.enabled === false ) return;

			_state = _prevState;

			window.addEventListener( 'keydown', keydown, false );

		}

		function mousedown( event ) {

			if ( _this.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			if ( _state === STATE.NONE ) {

				_state = event.button;

			}

			if ( _state === STATE.ROTATE && ! _this.noRotate ) {

				_moveCurr.copy( getMouseOnCircle( event.pageX, event.pageY ) );
				_movePrev.copy( _moveCurr );

			} else if ( _state === STATE.ZOOM && ! _this.noZoom ) {

				_zoomStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
				_zoomEnd.copy( _zoomStart );

			} else if ( _state === STATE.PAN && ! _this.noPan ) {

				_panStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
				_panEnd.copy( _panStart );

			}

			document.addEventListener( 'mousemove', mousemove, false );
			document.addEventListener( 'mouseup', mouseup, false );

			_this.dispatchEvent( startEvent );

		}

		function mousemove( event ) {

			if ( _this.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			if ( _state === STATE.ROTATE && ! _this.noRotate ) {

				_movePrev.copy( _moveCurr );
				_moveCurr.copy( getMouseOnCircle( event.pageX, event.pageY ) );

			} else if ( _state === STATE.ZOOM && ! _this.noZoom ) {

				_zoomEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );

			} else if ( _state === STATE.PAN && ! _this.noPan ) {

				_panEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );

			}

		}

		function mouseup( event ) {

			if ( _this.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			_state = STATE.NONE;

			document.removeEventListener( 'mousemove', mousemove );
			document.removeEventListener( 'mouseup', mouseup );
			_this.dispatchEvent( endEvent );

		}

		function mousewheel( event ) {

			if ( _this.enabled === false ) return;

			if ( _this.noZoom === true ) return;

			event.preventDefault();
			event.stopPropagation();

			switch ( event.deltaMode ) {

				case 2:
					// Zoom in pages
					_zoomStart.y -= event.deltaY * 0.025;
					break;

				case 1:
					// Zoom in lines
					_zoomStart.y -= event.deltaY * 0.01;
					break;

				default:
					// undefined, 0, assume pixels
					_zoomStart.y -= event.deltaY * 0.00025;
					break;

			}

			_this.dispatchEvent( startEvent );
			_this.dispatchEvent( endEvent );

		}

		function touchstart( event ) {

			if ( _this.enabled === false ) return;

			switch ( event.touches.length ) {

				case 1:
					_state = STATE.TOUCH_ROTATE;
					_moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
					_movePrev.copy( _moveCurr );
					break;

				default: // 2 or more
					_state = STATE.TOUCH_ZOOM_PAN;
					var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
					var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
					_touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt( dx * dx + dy * dy );

					var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
					var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
					_panStart.copy( getMouseOnScreen( x, y ) );
					_panEnd.copy( _panStart );
					break;

			}

			_this.dispatchEvent( startEvent );

		}

		function touchmove( event ) {

			if ( _this.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			switch ( event.touches.length ) {

				case 1:
					_movePrev.copy( _moveCurr );
					_moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
					break;

				default: // 2 or more
					var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
					var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
					_touchZoomDistanceEnd = Math.sqrt( dx * dx + dy * dy );

					var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
					var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
					_panEnd.copy( getMouseOnScreen( x, y ) );
					break;

			}

		}

		function touchend( event ) {

			if ( _this.enabled === false ) return;

			switch ( event.touches.length ) {

				case 0:
					_state = STATE.NONE;
					break;

				case 1:
					_state = STATE.TOUCH_ROTATE;
					_moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
					_movePrev.copy( _moveCurr );
					break;

			}

			_this.dispatchEvent( endEvent );

		}

		function contextmenu( event ) {

			if ( _this.enabled === false ) return;

			event.preventDefault();

		}

		this.dispose = function () {

			this.domElement.removeEventListener( 'contextmenu', contextmenu, false );
			this.domElement.removeEventListener( 'mousedown', mousedown, false );
			this.domElement.removeEventListener( 'wheel', mousewheel, false );

			this.domElement.removeEventListener( 'touchstart', touchstart, false );
			this.domElement.removeEventListener( 'touchend', touchend, false );
			this.domElement.removeEventListener( 'touchmove', touchmove, false );

			document.removeEventListener( 'mousemove', mousemove, false );
			document.removeEventListener( 'mouseup', mouseup, false );

			window.removeEventListener( 'keydown', keydown, false );
			window.removeEventListener( 'keyup', keyup, false );

		};

		this.domElement.addEventListener( 'contextmenu', contextmenu, false );
		this.domElement.addEventListener( 'mousedown', mousedown, false );
		this.domElement.addEventListener( 'wheel', mousewheel, false );

		this.domElement.addEventListener( 'touchstart', touchstart, false );
		this.domElement.addEventListener( 'touchend', touchend, false );
		this.domElement.addEventListener( 'touchmove', touchmove, false );

		window.addEventListener( 'keydown', keydown, false );
		window.addEventListener( 'keyup', keyup, false );

		this.handleResize();

		// force an update at start
		this.update();

	};

	TrackballControls.prototype = Object.create( EventDispatcher.prototype );
	TrackballControls.prototype.constructor = TrackballControls;

	class Renderer {
	    constructor(element, options = {}) {
	        this.element = element;

	        this._xBounds = options.xBounds !== undefined ? options.xBounds : [-1, 1];
	        this._yBounds = options.yBounds !== undefined ? options.yBounds : [-1, 1];
	        this._zBounds = options.zBounds !== undefined ? options.zBounds : [-1, 1];

	        this.initializeGL();
	        this.initializeScene();
	        this.createBoundingBox();
	        this.createGraph();

	        window.addEventListener('resize', () => {
	            this.setSize(this.element.offsetWidth, this.element.offsetHeight);
	        });
	    }

	    initializeGL() {
	        try {
	            this.renderer = new WebGLRenderer({
	                alpha: true,
	            });
	        } catch (e) {
	            throw new Error('Could not initialize WebGL');
	        }
	        this.renderer.setClearColor(0x000000, 1);

	        this.element.append(this.renderer.domElement);
	    }

	    setScale() {
	        const xRange = this._xBounds[1] - this._xBounds[0];
	        const yRange = this._yBounds[1] - this._yBounds[0];
	        const zRange = this._zBounds[1] - this._zBounds[0];
	    }

	    createBoundingBox() {
	        const bbGeom = new BufferGeometry();

	        const positions = new Float32Array([
	            -1, -1, -1,
	            1, -1, -1,
	            1, -1, 1,
	            -1, -1, 1,

	            -1, 1, -1,
	            1, 1, -1,
	            1, 1, 1,
	            -1, 1, 1,
	        ]);

	        const index = new Uint16Array([
	            0, 1,
	            1, 2,
	            2, 3,
	            3, 0,

	            4, 5,
	            5, 6,
	            6, 7,
	            7, 4,

	            0, 4,
	            1, 5,
	            2, 6,
	            3, 7,
	        ]);


	        bbGeom.addAttribute('position', new BufferAttribute(positions, 3));
	        bbGeom.setIndex(new BufferAttribute(index, 1));

	        this.boundingBox = new LineSegments(bbGeom, new MeshBasicMaterial({ color: 0xffffff }));

	        this.scene.add(this.boundingBox);
	    }

	    createGraph() {
	        const boxGeom = new BoxBufferGeometry(2, 2, 2);
	        this.box = new Mesh(boxGeom, new MeshBasicMaterial({ color: 0xff0000 }));
	        this.scene.add(this.box);
	    }

	    initializeScene() {
	        const w = this.element.offsetWidth;
	        const h = this.element.offsetHeight;

	        this.scene = new Scene();
	        this.camera = new PerspectiveCamera(45, w / h, 1, 10);
	        this.scene.add(this.camera);

	        this.camera.position.z = 5;

	        const controls = new TrackballControls(this.camera, this.element);

	        // Use for orbit controls
	//        controls.rotateSpeed = 2.0;
	        controls.rotateSpeed = 5.0;
	        controls.zoomSpeed = 1.2;

	        controls.noZoom = false;

	        controls.staticMoving = true;
	        controls.dynamicDampingFactor = 0.3;

	        this.controls = controls;

	        this.setSize(w, h);
	    }

	    setMaterial(m) {
	        this.box.material = m;
	    }

	    setSize(w, h) {
	        this.renderer.setSize(w, h);
	        this.camera.aspect = w / h;
	        this.camera.updateProjectionMatrix();
	    }

	    go() {
	        const renderLoop = () => {
	            this.renderer.render(this.scene, this.camera);
	            if (this.controls !== undefined) {
	                this.controls.update();
	            }
	            if (this._boundsNeedsUpdate) {
	                this.updateBounds();
	            }
	            requestAnimationFrame(renderLoop);
	        };
	        requestAnimationFrame(renderLoop);
	    }

	    set xBounds(x) {
	        this._xBounds = x;
	        this._boundsNeedsUpdate = true;
	    }

	    get xBounds() {
	        return this._xBounds;
	    }

	    set yBounds(y) {
	        this._yBounds = y;
	        this._boundsNeedsUpdate = true;
	    }

	    get yBounds() {
	        return this._yBounds;
	    }

	    set zBounds(z) {
	        this._zBounds = z;
	        this._boundsNeedsUpdate = true;
	    }

	    get zBounds() {
	        return this._zBounds;
	    }
	}

	class FunctionGrapher {
	    constructor(element) {
	        this.renderer = new Renderer(element);

	        this.vShader = `
            varying vec4 vPosition;
            varying vec3 vNormal;
            void main() {
                vPosition = modelMatrix * vec4(position, 1.0);
                vNormal = normal;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `;


	        // ensure we don't render anything by default
	        const defaultEqn = '100000.0';

	        // stepsize * number of steps should be ~4 so we can view the whole plot along the diagonal
	        this._stepsize = 0.012;
	        this._R = 1;
	        this._opacity = 1.0;
	        this._brightness = 1.0;

	        this._xBounds = [-1, 1];
	        this._yBounds = [-1, 1];
	        this._zBounds = [-1, 1];

	        // Stepsize for sampling... 1 seems a good compromise between real-time shading and quality
	        // on my MBP

	        this.setEquation(defaultEqn, {});

	        this.renderer.go();
	    }

	    set R(val) {
	        this._R = val;
	        this.material.uniforms.R.value = val;
	    }

	    get R() {
	        return this._R;
	    }

	    set brightness(val) {
	        this._brightness = val;
	        this.material.uniforms.brightness.value = val;
	    }

	    get brightness() {
	        return this._brightness;
	    }

	    set stepsize(val) {
	        this._stepsize = val;
	        this.material.uniforms.stepsize.value = val;
	    }

	    get stepsize() {
	        return this._stepsize;
	    }

	    set opacity(val) {
	        this._opacity = val;
	        this.material.uniforms.opacity.value = val;
	    }

	    get opacity() {
	        return this._opacity;
	    }

	    set xBounds(val) {
	        this._xBounds = val;
	        this.material.uniforms.xBounds.set(val[0], val[1]);
	    }

	    get xBounds() {
	        return this._xBounds;
	    }

	    set yBounds(val) {
	        this._yBounds = val;
	        this.material.uniforms.yBounds.set(val[0], val[1]);
	    }

	    get yBounds() {
	        return this._yBounds;
	    }

	    set zBounds(val) {
	        this._zBounds = val;
	        this.material.uniforms.zBounds.set(val[0], val[1]);
	    }

	    get zBounds() {
	        return this._zBounds;
	    }
	    // updateBounds(val) {
	    //     this.renderer.removeEntity(this.box);
	    //
	    //     for (const entry in val) {
	    //         if ({}.hasOwnProperty.call(val, entry)) {
	    //             for (const coord in val[entry]) {
	    //                 if ({}.hasOwnProperty.call(val[entry], coord)) {
	    //                     this.uniforms[entry].value[coord] = Number(val[entry][coord]);
	    //                 }
	    //             }
	    //         }
	    //     }
	    //     const x = this.uniforms.xBounds.value;
	    //     const y = this.uniforms.yBounds.value;
	    //     const z = this.uniforms.zBounds.value;
	    //     const boxnew = new Box('plot',
	    //                            [x.y - x.x, y.y - y.x, z.y - z.x],
	    //                            { material: this.material }
	    //     );
	    //
	    //     const step = (Math.max(Math.max(x.y - x.x, y.y - y.x), z.y - z.x)) / 100.0;
	    //     this.uniforms.stepsize.value = step;
	    //
	    //
	    //     boxnew.mesh.position.x = (x.x + x.y) / 2.0;
	    //     boxnew.mesh.position.y = (y.x + y.y) / 2.0;
	    //     boxnew.mesh.position.z = (z.x + z.y) / 2.0;
	    //
	    //
	    //     boxnew.mesh.updateMatrix();
	    //
	    //     this.renderer.addEntity(boxnew);
	    //
	    //     this.box = boxnew;
	    // }

	    setEquation(glsl, coeffs) {
	        const uniforms = {
	            stepsize: { type: 'f', value: this.stepsize },
	            R: { type: 'f', value: this.R },
	            brightness: { type: 'f', value: this.brightness },
	            opacity: { type: 'f', value: this.opacity },

	            xBounds: { type: 'v2', value: new Vector2(this.xBounds[0], this.xBounds[1]) },
	            yBounds: { type: 'v2', value: new Vector2(this.yBounds[0], this.yBounds[1]) },
	            zBounds: { type: 'v2', value: new Vector2(this.zBounds[0], this.zBounds[1]) },
	        };

	        Object.assign(uniforms, coeffs);

	        let uniformDeclarations = '';
	        for (const id of Object.keys(coeffs)) {
	            uniformDeclarations += `uniform float ${id};`;
	        }

	        const fShader = this.constructor.makeFragmentShader(glsl, uniformDeclarations);

	        this.material = new ShaderMaterial({
	            uniforms,
	            vertexShader: this.vShader,
	            fragmentShader: fShader,
	            side: FrontSide,
	            transparent: true,
	        });

	        this.renderer.setMaterial(this.material);

	        window.material = this.material;
	    }

	    updateCoefficient(id, value) {
	        if (this.material.uniforms[`var${id}`] === undefined) {
	            return;
	        }
	        this.material.uniforms[`var${id}`].value = value;
	    }

	    static makeFragmentShader(eqn, extraUniforms = '') {
	        /* eslint-disable indent, max-len */
	        const fShader = `
            varying vec4 vPosition;
            uniform float stepsize;
            uniform float R;
            uniform float opacity;
            uniform float brightness;
            uniform vec2 xBounds;
            uniform vec2 yBounds;
            uniform vec2 zBounds;

            const int numSteps = 300;
            ${extraUniforms}
            // Describe ROI as a sphere later?

            float fn(float x, float y, float z) {
                return ${eqn};
            }

            vec3 grad(vec3 pt, float size) {
                float right = fn(pt.x + size, pt.y, pt.z);
                float left = fn(pt.x - size, pt.y, pt.z);
                float up = fn(pt.x, pt.y + size, pt.z);
                float down = fn(pt.x, pt.y - size, pt.z);
                float front = fn(pt.x, pt.y, pt.z + size);
                float back = fn(pt.x, pt.y, pt.z - size);

                return vec3(0.5 * (right - left), 0.5 * up - down, 0.5 * front - back);
            }

            vec3 ptToColor(vec3 pt) {
                return vec3(1.,1.,1.)*(pt.xyz/vec3( xBounds.y - xBounds.x, yBounds.y - yBounds.x, zBounds.y - zBounds.x) + .5);
            }


            void main() {
                vec3 ro = cameraPosition;
                vec3 dir = vPosition.xyz - ro;
                float t_entry = length(dir);
                vec3 rd = normalize(dir);

                vec3 lightPosition = cameraPosition;
                float isoval = 0.0;

                if (t_entry < 0.) { gl_FragColor = vec4(0.,0.,0.,1.); return; }

                vec3 rskip = rd * stepsize;

                // Start at the far end and work our way back to the entry point
                // (back compositing)
                vec3 pt = ro + rd * (t_entry + float(numSteps) * stepsize);

                float I = 0.0;
                float a_total = 0.0;

                for (int i = 0; i < numSteps; i++) {
                    // only process if inside the volume
                    if (pt.z >= zBounds.x && pt.z <= zBounds.y && pt.x >= xBounds.x && pt.x <= xBounds.y && pt.y <= yBounds.y && pt.y >= yBounds.x) {
                        // plot outline
                        float value = fn(pt.x, pt.y, pt.z);
                        vec3 grad = grad(pt, stepsize);
                        float alpha = 0.0;

                        float delta = abs(isoval - value);

                        float magGrad = length(grad);

                        if (delta <= R * magGrad) {
                            alpha = 1.0 - (delta / (R * magGrad));
                            alpha *= opacity;
                            a_total += alpha;
                        }

                        vec3 normal = vec3(0.0);
                        if (magGrad > 0.0) {
                            normal = vec3(grad / magGrad);
                        }
                        if (dot(normal, cameraPosition - pt) < 0.0) {
                            normal = -normal;
                        }

                        vec3 L = normalize(lightPosition - pt);

                        if (dot(normal, L) > 0.0) {
                            // forward compositing (poor results)
                            // I += transparency * stepsize * alpha * abs(dot(normal, L));
                            // backward compositing
                            I = I * (1.0 - alpha) + abs(dot(normal, L)) * alpha;
                        }
                    }

                    pt -= rskip;
                }

                I = min(1.0, I * brightness);

                gl_FragColor = vec4(I, I, I, a_total);

            }
        `;

	        return fShader;
	        /* eslint-enable */
	    }

	    go() {
	        this.renderer.go();
	    }

	    get domElement() {
	        return this.renderer.renderer.domElement;
	    }
	}

	const mainGraph = {
	    data() {
	        return {
	            fg: null,
	            outerStyle: {
	                border: '1px solid black',
	                width: '50vw',
	                height: '75vh',
	            },
	            innerStyle: {
	                margin: '5px 5px 5px 5px',
	                width: 'calc(100% - 10px)',
	                height: 'calc(100% - 10px)',
	            },
	        };
	    },
	    mounted() {
	        this.fg = new FunctionGrapher(this.$refs.container);
	        this.fg.go();
	    },
	    template: `
        <div :style="outerStyle">
            <div ref="container" :style="innerStyle"></div>
        </div>
    `,
	    methods: {
	        setOpacity(o) {
	            this.fg.opacity = o;
	        },
	        setBrightness(b) {
	            this.fg.brightness = b;
	        },
	        setR(r) {
	            this.fg.R = r;
	        },
	        computeGLSL(eqn, uniforms) {
	            let glsl = '';
	            for (const node of eqn) {
	                if (node.type === 'coefficient') {
	                    if (uniforms[`var${node.id}`] === undefined) {
	                        uniforms[`var${node.id}`] = { value: node.value, type: 'f' };
	                    }
	                    glsl += ` var${node.id} `;
	                } else if (node.type === 'static') {
	                    glsl += node.glsl;
	                } else if (node.type === 'power') {
	                    // pow(x, y) is undefined for x <= 0, so we just repeat multiplication instead.
	                    const innerGLSL = `(${this.computeGLSL(node.value, uniforms)})`;
	                    for (let i = 0; i < node.power - 1; i++) {
	                        glsl += `${innerGLSL} *`;
	                    }
	                    glsl += `${innerGLSL}`;
	                }
	            }
	            return glsl;
	        },
	        setEquation(eqn) {
	            console.log(eqn);
	            const uniforms = {};
	            const glsl = this.computeGLSL(eqn, uniforms);

	            this.fg.setEquation(glsl, uniforms);
	        },
	        updateCoefficient(id, value) {
	            this.fg.updateCoefficient(id, value);
	        },
	    },
	};

	const components = {
	    controls,
	    dragNumber,
	    eqnEdit,
	    eqnInput,
	    mainGraph,
	};

	const FG = {
	    components,
	    math: mathjs,
	};

	return FG;

})));
